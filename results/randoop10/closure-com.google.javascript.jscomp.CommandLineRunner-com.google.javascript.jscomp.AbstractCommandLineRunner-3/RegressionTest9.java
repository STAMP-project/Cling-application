import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream6 = jSTypeList3.parallelStream();
        java.io.IOException iOException8 = new java.io.IOException();
        java.io.IOException iOException9 = new java.io.IOException("OFF", (java.lang.Throwable) iOException8);
        java.io.IOException[] iOExceptionArray10 = new java.io.IOException[] { iOException9 };
        java.io.IOException[] iOExceptionArray11 = jSTypeList3.toArray(iOExceptionArray10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean13 = compilerOptions12.moveFunctionDeclarations;
        compilerOptions12.crossModuleCodeMotion = true;
        compilerOptions12.checkSymbols = true;
        compilerOptions12.setExtractPrototypeMemberDeclarations(true);
        compilerOptions12.markAsCompiled = false;
        boolean boolean22 = compilerOptions12.foldConstants;
        boolean boolean23 = compilerOptions12.generateExports;
        boolean boolean24 = jSTypeList3.remove((java.lang.Object) compilerOptions12);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeStream6);
        org.junit.Assert.assertNotNull(iOExceptionArray10);
        org.junit.Assert.assertNotNull(iOExceptionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        java.lang.String str58 = compiler1.toSource();
        com.google.javascript.jscomp.CodingConvention codingConvention59 = compiler1.getCodingConvention();
        compiler1.disableThreads();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = compiler1.getTypeRegistry();
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode62 = compiler1.languageMode();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(codingConvention59);
        org.junit.Assert.assertNotNull(jSTypeRegistry61);
        org.junit.Assert.assertTrue("'" + languageMode62 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode62.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray1 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator3 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile4 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator3);
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile7 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator6);
        com.google.javascript.jscomp.SourceFile.Generator generator9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator9);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray11 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile4, jSSourceFile7, jSSourceFile10 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean13 = compilerOptions12.moveFunctionDeclarations;
        compilerOptions12.crossModuleCodeMotion = true;
        compiler0.init(jSSourceFileArray1, jSSourceFileArray11, compilerOptions12);
        compilerOptions12.devirtualizePrototypeMethods = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = null;
        compilerOptions19.setTracerMode(tracerMode20);
        boolean boolean22 = compilerOptions19.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel23 = compilerOptions19.sourceMapDetailLevel;
        compilerOptions19.setColorizeErrorOutput(true);
        compilerOptions19.collapseProperties = false;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy28 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED;
        compilerOptions19.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy28);
        compilerOptions12.anonymousFunctionNaming = anonymousFunctionNamingPolicy28;
        java.lang.String str31 = compilerOptions12.sourceMapOutputPath;
        org.junit.Assert.assertNotNull(jSSourceFileArray1);
        org.junit.Assert.assertNotNull(jSSourceFile4);
        org.junit.Assert.assertNotNull(jSSourceFile7);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertNotNull(jSSourceFileArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(detailLevel23);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy28 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED + "'", anonymousFunctionNamingPolicy28.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED));
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("");
        int int2 = stats1.gzSize;
        int int3 = stats1.gzDiff;
        stats1.gzDiff = 50;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions0.setTracer(tracerMode3);
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = null;
        compilerOptions5.setTracerMode(tracerMode6);
        boolean boolean8 = compilerOptions5.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel9 = compilerOptions5.sourceMapDetailLevel;
        compilerOptions5.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet12 = compilerOptions5.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = null;
        compilerOptions13.setTracerMode(tracerMode14);
        boolean boolean16 = compilerOptions13.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel17 = compilerOptions13.sourceMapDetailLevel;
        compilerOptions13.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.crossModuleMethodMotion = true;
        compilerOptions20.optimizeParameters = true;
        compilerOptions20.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions20.checkGlobalNamesLevel;
        compilerOptions13.setReportMissingOverride(checkLevel28);
        compilerOptions5.setAggressiveVarCheck(checkLevel28);
        compilerOptions0.setCheckUnreachableCode(checkLevel28);
        com.google.javascript.jscomp.SourceMap.Format format32 = compilerOptions0.sourceMapFormat;
        boolean boolean33 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(detailLevel9);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(detailLevel17);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(format32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray0 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList1 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList1, jSTypeArray0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        boolean boolean6 = jSTypeList1.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList8 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList8, jSTypeArray7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        boolean boolean13 = jSTypeList8.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        boolean boolean14 = jSTypeList1.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        java.util.ListIterator<com.google.javascript.rhino.jstype.JSType> jSTypeItor15 = jSTypeList1.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.rhino.jstype.JSType> jSTypeItor17 = jSTypeList1.listIterator((-23));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -23");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeItor15);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        boolean boolean8 = file6.mkdirs();
        java.io.File file9 = file6.getAbsoluteFile();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file6);
        long long11 = file6.getUsableSpace();
        java.nio.file.Path path12 = file6.toPath();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280490967040L + "'", long7 == 280490967040L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/experiment/:");
        org.junit.Assert.assertNotNull(jSSourceFile10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 280490967040L + "'", long11 == 280490967040L);
        org.junit.Assert.assertNotNull(path12);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.io.Reader reader5 = sourceFile2.getCodeReader();
        int int6 = reader5.read();
        int int7 = reader5.read();
        boolean boolean8 = reader5.ready();
        long long10 = reader5.skip(280492363776L);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(reader5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = null;
        compilerOptions2.setTracerMode(tracerMode3);
        boolean boolean5 = compilerOptions2.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel6 = compilerOptions2.sourceMapDetailLevel;
        compilerOptions2.setColorizeErrorOutput(true);
        compilerOptions2.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy14 = compilerOptions11.propertyRenaming;
        compilerOptions2.propertyRenaming = propertyRenamingPolicy14;
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions2.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions2.checkRequires;
        compilerOptions0.setCheckRequires(checkLevel17);
        compilerOptions0.reserveRawExports = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel24 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions21.setSourceMapDetailLevel(detailLevel24);
        compilerOptions21.inlineFunctions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy31 = compilerOptions28.propertyRenaming;
        java.lang.String[] strArray34 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        compilerOptions28.setStripTypes((java.util.Set<java.lang.String>) strSet35);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode39 = null;
        compilerOptions38.setTracerMode(tracerMode39);
        boolean boolean41 = compilerOptions38.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel42 = compilerOptions38.sourceMapDetailLevel;
        compilerOptions38.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.crossModuleMethodMotion = true;
        compilerOptions45.optimizeParameters = true;
        compilerOptions45.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions45.checkGlobalNamesLevel;
        compilerOptions38.setReportMissingOverride(checkLevel53);
        compilerOptions28.setCheckUnreachableCode(checkLevel53);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 1, (byte) 10, (byte) 1 };
        compilerOptions28.inputVariableMapSerialized = byteArray60;
        compilerOptions21.inputVariableMapSerialized = byteArray60;
        compilerOptions0.inputVariableMapSerialized = byteArray60;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing64 = compilerOptions0.getTweakProcessing();
        boolean boolean65 = tweakProcessing64.shouldStrip();
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(detailLevel6);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy14 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy14.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(detailLevel24);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy31 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy31.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(detailLevel42);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + tweakProcessing64 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing64.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        boolean boolean8 = file6.mkdirs();
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file6, charset9);
        java.io.File file13 = new java.io.File(":", "hi!");
        boolean boolean16 = file13.setExecutable(true, false);
        boolean boolean18 = file13.setWritable(false);
        boolean boolean19 = file13.canWrite();
        java.net.URI uRI20 = file13.toURI();
        boolean boolean21 = file6.renameTo(file13);
        java.io.File file22 = file6.getCanonicalFile();
        java.io.File file24 = new java.io.File(file22, ":/hi!/PARAM_LIST\n");
        boolean boolean25 = file24.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280490176512L + "'", long7 == 280490176512L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertEquals(file13.getParent(), ":");
        org.junit.Assert.assertEquals(file13.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file24.getParent(), "/experiment/:/:/hi!");
// flaky:         org.junit.Assert.assertEquals(file24.toString(), "/experiment/:/:/hi!/PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("PARAM_LIST");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, false);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        java.lang.String str6 = compiler5.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions7.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode13 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions7.setTracer(tracerMode13);
        compiler5.initOptions(compilerOptions7);
        com.google.javascript.jscomp.SourceFile sourceFile18 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int20 = sourceFile18.getLineOfOffset((int) (short) 1);
        java.lang.String str21 = sourceFile18.getName();
        java.lang.String str22 = sourceFile18.getName();
        java.lang.String str23 = sourceFile18.getName();
        com.google.javascript.jscomp.SourceFile sourceFile26 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int28 = sourceFile26.getLineOfOffset((int) (short) 1);
        java.lang.String str29 = sourceFile26.getName();
        com.google.javascript.jscomp.JsAst jsAst30 = new com.google.javascript.jscomp.JsAst(sourceFile26);
        jsAst30.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst30, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile37 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int39 = sourceFile37.getLineOfOffset((int) (short) 1);
        java.lang.String str40 = sourceFile37.getName();
        java.lang.String str41 = sourceFile37.getName();
        java.lang.String str42 = sourceFile37.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput44 = new com.google.javascript.jscomp.CompilerInput(sourceFile37, true);
        com.google.javascript.jscomp.CompilerInput compilerInput45 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput44);
        com.google.javascript.jscomp.SourceFile sourceFile48 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int50 = sourceFile48.getLineOfOffset((int) (short) 1);
        int int52 = sourceFile48.getColumnOfOffset(8);
        compilerInput45.setSourceFile(sourceFile48);
        jsAst30.setSourceFile(sourceFile48);
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.crossModuleMethodMotion = true;
        compilerOptions55.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result60 = compiler5.compile(sourceFile18, sourceFile48, compilerOptions55);
        java.io.File file63 = new java.io.File(":", "hi!");
        boolean boolean66 = file63.setExecutable(false, false);
        java.io.File file67 = file63.getParentFile();
        long long68 = file67.getUsableSpace();
        boolean boolean69 = file67.mkdirs();
        java.nio.charset.Charset charset70 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile71 = com.google.javascript.jscomp.JSSourceFile.fromFile(file67, charset70);
        com.google.javascript.jscomp.JSModule[] jSModuleArray72 = new com.google.javascript.jscomp.JSModule[] {};
        java.util.ArrayList<com.google.javascript.jscomp.JSModule> jSModuleList73 = new java.util.ArrayList<com.google.javascript.jscomp.JSModule>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList73, jSModuleArray72);
        com.google.javascript.jscomp.JSModule[] jSModuleArray75 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList73);
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions76.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode82 = null;
        compilerOptions76.setLanguageOut(languageMode82);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy84 = null;
        compilerOptions76.variableRenaming = variableRenamingPolicy84;
        com.google.javascript.jscomp.CheckLevel checkLevel86 = compilerOptions76.checkUnreachableCode;
        com.google.javascript.jscomp.Result result87 = compiler5.compile(jSSourceFile71, jSModuleArray75, compilerOptions76);
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.SourceAst sourceAst89 = compilerInput3.getAst();
        com.google.javascript.rhino.InputId inputId90 = compilerInput3.getInputId();
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + tracerMode13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode13.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(sourceFile26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(result60);
        org.junit.Assert.assertEquals(file63.getParent(), ":");
        org.junit.Assert.assertEquals(file63.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertNull("file67.getParent() == null", file67.getParent());
        org.junit.Assert.assertEquals(file67.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 280490176512L + "'", long68 == 280490176512L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSSourceFile71);
        org.junit.Assert.assertNotNull(jSModuleArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSModuleArray75);
        org.junit.Assert.assertTrue("'" + checkLevel86 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel86.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(result87);
        org.junit.Assert.assertNotNull(sourceAst89);
        org.junit.Assert.assertNotNull(inputId90);
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        boolean boolean5 = sourceFile2.isExtern();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy12 = compilerOptions9.propertyRenaming;
        compilerOptions0.propertyRenaming = propertyRenamingPolicy12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions14.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = null;
        compilerOptions16.setTracerMode(tracerMode17);
        boolean boolean19 = compilerOptions16.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel20 = compilerOptions16.sourceMapDetailLevel;
        compilerOptions16.setColorizeErrorOutput(true);
        compilerOptions16.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy28 = compilerOptions25.propertyRenaming;
        compilerOptions16.propertyRenaming = propertyRenamingPolicy28;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions16.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions16.checkRequires;
        compilerOptions14.setCheckRequires(checkLevel31);
        compilerOptions0.setCheckProvides(checkLevel31);
        boolean boolean34 = compilerOptions0.inlineGetters;
        compilerOptions0.setCheckTypes(true);
        java.io.PrintStream printStream37 = null;
        com.google.javascript.jscomp.Compiler compiler38 = new com.google.javascript.jscomp.Compiler(printStream37);
        java.lang.String str39 = compiler38.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions40.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode46 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions40.setTracer(tracerMode46);
        compiler38.initOptions(compilerOptions40);
        compilerOptions40.setCommonJSModulePathPrefix("");
        compilerOptions40.setSyntheticBlockStartMarker("java.io.IOException: OFF");
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions40.checkProvides;
        compilerOptions0.setAggressiveVarCheck(checkLevel53);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy12 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy12.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(detailLevel20);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy28.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + tracerMode46 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode46.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.checkTypes = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel21 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions18.setSourceMapDetailLevel(detailLevel21);
        boolean boolean23 = compilerOptions18.ideMode;
        compilerOptions18.renamePrefix = "hi!";
        boolean boolean26 = compilerOptions18.inlineConstantVars;
        com.google.javascript.jscomp.CompilerOptions.Reach reach27 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions18.setInlineVariables(reach27);
        compilerOptions0.setRemoveUnusedVariable(reach27);
        boolean boolean30 = compilerOptions0.reserveRawExports;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel31 = compilerOptions0.sourceMapDetailLevel;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(detailLevel21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + reach27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach27.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(detailLevel31);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        java.util.Map<java.lang.String, java.lang.Integer> strMap48 = result47.cssNames;
        com.google.javascript.jscomp.JSError[] jSErrorArray49 = result47.errors;
        com.google.javascript.jscomp.VariableMap variableMap50 = result47.variableMap;
        com.google.javascript.jscomp.JSError[] jSErrorArray51 = result47.errors;
        java.lang.String str52 = result47.debugLog;
        java.lang.String str53 = result47.debugLog;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNull(strMap48);
        org.junit.Assert.assertNotNull(jSErrorArray49);
        org.junit.Assert.assertNull(variableMap50);
        org.junit.Assert.assertNotNull(jSErrorArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        java.util.logging.Level level0 = java.util.logging.Level.FINEST;
        java.lang.String str1 = level0.getResourceBundleName();
        java.lang.String str2 = level0.getLocalizedName();
        int int3 = level0.intValue();
        java.lang.String str4 = level0.toString();
        com.google.javascript.jscomp.Compiler.setLoggingLevel(level0);
        org.junit.Assert.assertNotNull(level0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "sun.util.logging.resources.logging" + "'", str1, "sun.util.logging.resources.logging");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "FINEST" + "'", str2, "FINEST");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 300 + "'", int3 == 300);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FINEST" + "'", str4, "FINEST");
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setSyntheticBlockStartMarker("OFF");
        compilerOptions0.setChainCalls(false);
        compilerOptions0.setTweakToBooleanLiteral("Unversioned directory", false);
        boolean boolean11 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setCheckControlStructures(false);
        java.lang.String str14 = compilerOptions0.syntheticBlockEndMarker;
        compilerOptions0.setDisambiguateProperties(false);
        compilerOptions0.removeUnusedVars = false;
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        jSTypeRegistry1.setLastGeneration(false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry13.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        boolean boolean23 = jSTypeList18.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        jSTypeRegistry16.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry16.createNamedType("java.io.IOException: java.io.IOException: ", "", 47, (int) (short) 1);
        jSTypeRegistry16.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList38 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList38, jSTypeArray37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        boolean boolean43 = jSTypeList38.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry36.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList38);
        jSTypeRegistry36.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable48 = jSTypeRegistry36.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry36.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry55.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream60 = jSTypeList57.parallelStream();
        com.google.javascript.rhino.Node node61 = jSTypeRegistry36.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType63 = jSTypeRegistry36.createUnionType(jSTypeArray62);
        com.google.javascript.rhino.jstype.FunctionType functionType64 = jSTypeRegistry16.createFunctionType(jSType33, false, jSTypeArray62);
        com.google.javascript.rhino.jstype.FunctionType functionType65 = jSTypeRegistry1.createConstructorTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType14, jSTypeArray62);
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        boolean boolean74 = jSTypeList69.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry67.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        jSTypeRegistry67.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable79 = jSTypeRegistry67.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry67.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        jSTypeRegistry67.identifyNonNullableName("");
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray87 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType88 = jSTypeRegistry67.createUnionType(jSTypeNativeArray87);
        com.google.javascript.rhino.jstype.JSType jSType93 = jSTypeRegistry67.createNamedType("java.io.IOException: java.io.IOException: ", ":/hi!/PARAM_LIST\n", 51, 2);
        com.google.javascript.rhino.jstype.JSType jSType94 = jSTypeRegistry1.createOptionalNullableType(jSType93);
        com.google.javascript.rhino.jstype.ObjectType objectType95 = jSTypeRegistry1.createAnonymousObjectType();
        jSTypeRegistry1.identifyNonNullableName("PARAM_LIST [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSTypeIterable48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSTypeStream60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertNotNull(functionType64);
        org.junit.Assert.assertNotNull(functionType65);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(jSTypeIterable79);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(jSTypeNativeArray87);
        org.junit.Assert.assertNotNull(jSType88);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(objectType95);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 52, (int) (short) -1);
        int int4 = node3.getType();
        boolean boolean5 = node3.isDec();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromInputStream("java.io.IOException: java.io.IOException: :", inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        java.io.Reader reader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromReader("BITXOR :/hi!", reader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        compiler9.reportCodeChange();
        com.google.javascript.jscomp.Region region51 = compiler9.getSourceRegion(":", 0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState52 = compiler9.getState();
        com.google.javascript.jscomp.Region region55 = compiler9.getSourceRegion(":/hi!/PARAM_LIST\n", 48);
        java.lang.String str56 = compiler9.getAstDotGraph();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNull(region51);
        org.junit.Assert.assertNotNull(intermediateState52);
        org.junit.Assert.assertNull(region55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        com.google.javascript.rhino.InputId inputId6 = new com.google.javascript.rhino.InputId("*global*");
        java.lang.String str7 = inputId6.toString();
        com.google.javascript.jscomp.CompilerInput compilerInput9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId6, false);
        com.google.javascript.jscomp.SourceFile sourceFile12 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int14 = sourceFile12.getLineOfOffset((int) (short) 1);
        java.lang.String str15 = sourceFile12.getName();
        com.google.javascript.jscomp.JsAst jsAst16 = new com.google.javascript.jscomp.JsAst(sourceFile12);
        jsAst16.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile18 = jsAst16.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile19 = jsAst16.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile20 = jsAst16.getSourceFile();
        int int22 = sourceFile20.getLineOfOffset(16);
        // The following exception was thrown during execution in test generation
        try {
            compilerInput3.setSourceFile(sourceFile20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputId4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "InputId: *global*" + "'", str7, "InputId: *global*");
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(sourceFile18);
        org.junit.Assert.assertNotNull(sourceFile19);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        java.io.File file2 = new java.io.File("OFF", "OFF");
        org.junit.Assert.assertEquals(file2.getParent(), "OFF");
        org.junit.Assert.assertEquals(file2.toString(), "OFF/OFF");
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        node33.putIntProp((int) '/', 0);
        boolean boolean40 = node33.isContinue();
        boolean boolean41 = node33.isString();
        boolean boolean42 = node33.isInstanceOf();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy3 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy3;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.syntheticBlockEndMarker = "OFF";
        java.lang.String str9 = compilerOptions0.renamePrefixNamespace;
        com.google.javascript.jscomp.CodingConvention codingConvention10 = null;
        compilerOptions0.setCodingConvention(codingConvention10);
        compilerOptions0.setRuntimeTypeCheckLogFunction("/tmp/PARAM_LIST6145687020670090410Unversioned directory");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        node11.addChildrenToBack(node17);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        boolean boolean25 = node24.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, node11, node24, node31, node38, 0, 49);
        com.google.javascript.jscomp.CodingConvention.Bind bind42 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node4, node38);
        boolean boolean43 = node38.isIn();
        boolean boolean44 = node38.isVar();
        boolean boolean45 = node38.isLabel();
        node38.setOptionalArg(false);
        java.nio.charset.Charset charset49 = null;
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromFile("/experiment/:/hi!", charset49);
        node38.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile) sourceFile50);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = node38.getExistingIntProp(49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 49");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker67 = compiler9.tracker;
        com.google.javascript.jscomp.SourceFile sourceFile69 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput71 = new com.google.javascript.jscomp.CompilerInput(sourceFile69, true);
        com.google.javascript.rhino.InputId inputId73 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput75 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput71, inputId73, true);
        com.google.javascript.jscomp.CompilerInput compilerInput77 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput75, false);
        com.google.javascript.jscomp.JSModule jSModule79 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler80 = new com.google.javascript.jscomp.Compiler();
        jSModule79.sortInputsByDeps(compiler80);
        java.lang.String str82 = jSModule79.getName();
        compilerInput75.setModule(jSModule79);
        java.lang.String str84 = compiler9.toSource(jSModule79);
        com.google.javascript.jscomp.SourceFile sourceFile87 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int89 = sourceFile87.getLineOfOffset((int) (short) 1);
        java.lang.String str90 = sourceFile87.getName();
        jSModule79.add(sourceFile87);
        java.lang.String str92 = jSModule79.toString();
        java.util.List<java.lang.String> strList93 = jSModule79.getRequires();
        jSModule79.setDepth(46);
        java.lang.String str96 = jSModule79.getName();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNull(performanceTracker67);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "STRING PARAM_LIST 49" + "'", str82, "STRING PARAM_LIST 49");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(sourceFile87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "STRING PARAM_LIST 49" + "'", str92, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "STRING PARAM_LIST 49" + "'", str96, "STRING PARAM_LIST 49");
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        java.io.File file3 = new java.io.File(":");
        java.io.File file5 = new java.io.File(file3, "FINEST");
        java.io.File file6 = java.io.File.createTempFile("OFF", "", file3);
        java.io.File file7 = file6.getAbsoluteFile();
        java.net.URI uRI8 = file7.toURI();
        java.io.File file9 = new java.io.File(uRI8);
        boolean boolean10 = file9.canWrite();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), ":");
        org.junit.Assert.assertEquals(file5.getParent(), ":");
        org.junit.Assert.assertEquals(file5.toString(), ":/FINEST");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), ":");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), ":/OFF5574145545031037359");
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/:/OFF5574145545031037359");
        org.junit.Assert.assertNotNull(uRI8);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/experiment/:/OFF5574145545031037359");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable11 = jSTypeRegistry1.getTypesWithProperty(":");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        jSTypeRegistry1.setResolveMode(resolveMode12);
        boolean boolean14 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable16 = jSTypeRegistry1.getTypesWithProperty("OFF");
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeIterable11);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable16);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        compiler9.reportCodeChange();
        com.google.javascript.jscomp.Region region71 = compiler9.getSourceRegion("InputId: *global*", 40);
        double double72 = compiler9.getProgress();
        com.google.javascript.rhino.Node node73 = compiler9.getRoot();
        com.google.javascript.jscomp.SourceMap sourceMap74 = compiler9.getSourceMap();
        com.google.javascript.jscomp.JSError[] jSErrorArray75 = compiler9.getWarnings();
        com.google.javascript.jscomp.CodingConvention codingConvention76 = compiler9.getCodingConvention();
        boolean boolean78 = codingConvention76.isSuperClassReference("NUMBER -1.0");
        boolean boolean80 = codingConvention76.isValidEnumKey("Node tree inequality:\nTree1:\nSTRING PARAM_LIST 49\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: STRING PARAM_LIST 49\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNull(region71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(sourceMap74);
        org.junit.Assert.assertNotNull(jSErrorArray75);
        org.junit.Assert.assertNotNull(codingConvention76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setProtectHiddenSideEffects(true);
        compilerOptions0.setInputDelimiter("PARAM_LIST\n");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel7 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel7);
        java.lang.String str9 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        boolean boolean7 = file2.setWritable(false);
        boolean boolean8 = file2.canWrite();
        java.lang.String str9 = file2.getAbsolutePath();
        long long10 = file2.getUsableSpace();
        java.net.URL uRL11 = file2.toURL();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream12 = new java.io.PrintStream(file2);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: :/hi! (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/:/hi!" + "'", str9, "/experiment/:/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 280491626496L + "'", long10 == 280491626496L);
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/:/hi!/");
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setDefineToNumberLiteral("InputId: *global*", 54);
        compilerOptions0.generateExports = false;
        java.lang.String str9 = compilerOptions0.locale;
        compilerOptions0.setInlineProperties(false);
        boolean boolean12 = compilerOptions0.recordFunctionInformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Region region69 = compiler9.getSourceRegion("STRING PARAM_LIST 49: hi!", (int) '4');
        com.google.javascript.jscomp.JSError[] jSErrorArray70 = compiler9.getWarnings();
        boolean boolean71 = compiler9.acceptConstKeyword();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNull(region69);
        org.junit.Assert.assertNotNull(jSErrorArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(29);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions0.setTracer(tracerMode3);
        compilerOptions0.setFoldConstants(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode8 = null;
        compilerOptions7.setTracerMode(tracerMode8);
        boolean boolean10 = compilerOptions7.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel11 = compilerOptions7.sourceMapDetailLevel;
        compilerOptions7.setColorizeErrorOutput(true);
        compilerOptions7.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy19 = compilerOptions16.propertyRenaming;
        compilerOptions7.propertyRenaming = propertyRenamingPolicy19;
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions7.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions7.checkRequires;
        compilerOptions0.reportMissingOverride = checkLevel22;
        boolean boolean24 = compilerOptions0.smartNameRemoval;
        compilerOptions0.recordFunctionInformation = true;
        compilerOptions0.setDefineToStringLiteral("PARAM_LIST8468507651125183373Unversioned directory", "Node tree inequality:\nTree1:\nTHIS\n    STRING java.io.IOException:  43\n    PARAM_LIST [var_args_name: 1] [opt_arg: 1]\n\n\nTree2:\nSTRING \n\n\nSubtree1: THIS\n    STRING java.io.IOException:  43\n    PARAM_LIST [var_args_name: 1] [opt_arg: 1]\n\n\nSubtree2: STRING \n");
        compilerOptions0.setOptimizeArgumentsArray(true);
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(detailLevel11);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy19 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy19.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compiler1.isIdeMode();
        java.lang.String str60 = compiler1.getSourceLine("*global*", (int) ' ');
        java.lang.String[] strArray61 = compiler1.toSourceArray();
        com.google.javascript.jscomp.Region region64 = compiler1.getSourceRegion("STRING PARAM_LIST 49", 51);
        boolean boolean65 = compiler1.isTypeCheckingEnabled();
        com.google.javascript.jscomp.CodingConvention codingConvention66 = compiler1.getCodingConvention();
        boolean boolean68 = codingConvention66.isSuperClassReference("hi!");
        boolean boolean70 = codingConvention66.isValidEnumKey("Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n");
        boolean boolean72 = codingConvention66.isPrivate("PARAM_LIST: PARAM_LIST\n");
        java.util.Collection<java.lang.String> strCollection73 = codingConvention66.getIndirectlyDeclaredProperties();
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList77 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList77, jSTypeArray76);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        boolean boolean82 = jSTypeList77.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry75.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList77);
        boolean boolean84 = node83.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable85 = node83.siblings();
        com.google.javascript.rhino.Node node86 = node83.cloneTree();
        int int87 = node86.getSourcePosition();
        com.google.javascript.rhino.Node node88 = node86.getLastSibling();
        node86.putBooleanProp(800, true);
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship92 = codingConvention66.getDelegateRelationship(node86);
        boolean boolean93 = node86.isTry();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(region64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(codingConvention66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strCollection73);
        org.junit.Assert.assertNotNull(jSTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(nodeIterable85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(delegateRelationship92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray0 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList1 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList1, jSTypeArray0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        boolean boolean6 = jSTypeList1.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        node18.addChildrenToBack(node24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, node18, node31, node38, node45, 0, 49);
        com.google.javascript.jscomp.CodingConvention.Bind bind49 = new com.google.javascript.jscomp.CodingConvention.Bind(node7, node11, node45);
        node45.setSourceEncodedPosition(52);
        boolean boolean52 = jSTypeList1.equals((java.lang.Object) node45);
        boolean boolean53 = node45.isObjectLit();
        boolean boolean54 = node45.isRegExp();
        com.google.javascript.rhino.Node node55 = node45.removeChildren();
        org.junit.Assert.assertNotNull(jSTypeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        file2.deleteOnExit();
        java.net.URI uRI7 = file2.toURI();
        boolean boolean10 = file2.setExecutable(false, false);
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        boolean boolean8 = file6.mkdirs();
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file6, charset9);
        java.io.File file13 = new java.io.File(":", "hi!");
        boolean boolean16 = file13.setExecutable(true, false);
        boolean boolean18 = file13.setWritable(false);
        boolean boolean19 = file13.canWrite();
        java.net.URI uRI20 = file13.toURI();
        boolean boolean21 = file6.renameTo(file13);
        java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
        com.google.javascript.jscomp.SourceFile sourceFile23 = com.google.javascript.jscomp.SourceFile.fromFile(file6, charset22);
        java.lang.String str24 = charset22.toString();
        java.nio.charset.CharsetDecoder charsetDecoder25 = charset22.newDecoder();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280490995712L + "'", long7 == 280490995712L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertEquals(file13.getParent(), ":");
        org.junit.Assert.assertEquals(file13.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "US-ASCII" + "'", str24, "US-ASCII");
        org.junit.Assert.assertNotNull(charsetDecoder25);
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean10 = node9.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node9.siblings();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        int int13 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node14 = node12.getLastSibling();
        node12.putBooleanProp(800, true);
        boolean boolean18 = node12.isInstanceOf();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 1);
        boolean boolean21 = node20.isTry();
        com.google.javascript.rhino.Node node22 = node12.useSourceInfoIfMissingFromForTree(node20);
        node22.putIntProp(32, 48);
        // The following exception was thrown during execution in test generation
        try {
            node22.setString("*global*");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 800");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.crossModuleMethodMotion = true;
        compilerOptions8.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions8.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy17);
        com.google.javascript.jscomp.SourceMap.Format format19 = compilerOptions8.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.crossModuleMethodMotion = true;
        compilerOptions21.skipAllCompilerPasses();
        boolean boolean25 = compilerOptions21.flowSensitiveInlineVariables;
        java.lang.String[] strArray35 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        compilerOptions21.stripTypes = strSet36;
        compilerOptions0.stripNameSuffixes = strSet36;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy45 = compilerOptions42.propertyRenaming;
        java.lang.String[] strArray48 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        compilerOptions42.setStripTypes((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode53 = null;
        compilerOptions52.setTracerMode(tracerMode53);
        boolean boolean55 = compilerOptions52.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel56 = compilerOptions52.sourceMapDetailLevel;
        compilerOptions52.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.crossModuleMethodMotion = true;
        compilerOptions59.optimizeParameters = true;
        compilerOptions59.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel67 = compilerOptions59.checkGlobalNamesLevel;
        compilerOptions52.setReportMissingOverride(checkLevel67);
        compilerOptions42.setCheckUnreachableCode(checkLevel67);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 1, (byte) 10, (byte) 1 };
        compilerOptions42.inputVariableMapSerialized = byteArray74;
        compilerOptions0.inputPropertyMapSerialized = byteArray74;
        boolean boolean77 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.DiagnosticType diagnosticType80 = com.google.javascript.jscomp.DiagnosticType.error("STRING PARAM_LIST 49", "hi!");
        java.lang.String str81 = diagnosticType80.toString();
        com.google.javascript.jscomp.CheckLevel checkLevel82 = diagnosticType80.defaultLevel;
        compilerOptions0.checkRequires = checkLevel82;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(format19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy45 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy45.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(detailLevel56);
        org.junit.Assert.assertTrue("'" + checkLevel67 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel67.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(diagnosticType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "STRING PARAM_LIST 49: hi!" + "'", str81, "STRING PARAM_LIST 49: hi!");
        org.junit.Assert.assertTrue("'" + checkLevel82 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel82.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel3 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions0.setSourceMapDetailLevel(detailLevel3);
        compilerOptions0.inlineFunctions = true;
        compilerOptions0.gatherCssNames = true;
        boolean boolean9 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.setGroupVariableDeclarations(true);
        org.junit.Assert.assertNotNull(detailLevel3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.JSSourceFile jSSourceFile2 = com.google.javascript.jscomp.JSSourceFile.fromInputStream("STRING PARAM_LIST 49", inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '4', "InputId: STRING PARAM_LIST 49", 31, 37);
        com.google.javascript.rhino.Node node5 = node4.removeChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(":", (int) (short) -1, 500);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node10 = node5.getChildBefore(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = com.google.javascript.jscomp.DiagnosticGroups.CONST;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup3;
        com.google.javascript.jscomp.WarningsGuard[] warningsGuardArray6 = new com.google.javascript.jscomp.WarningsGuard[] {};
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard7 = new com.google.javascript.jscomp.ComposeWarningsGuard(warningsGuardArray6);
        com.google.javascript.jscomp.JSError jSError8 = null;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = composeWarningsGuard7.level(jSError8);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup10;
        boolean boolean12 = composeWarningsGuard7.disables(diagnosticGroup10);
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup10;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup14 = com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup15 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup15;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup15;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroup[] diagnosticGroupArray19 = new com.google.javascript.jscomp.DiagnosticGroup[] { diagnosticGroup2, diagnosticGroup3, diagnosticGroup10, diagnosticGroup14, diagnosticGroup15, diagnosticGroup18 };
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup20 = new com.google.javascript.jscomp.DiagnosticGroup("", diagnosticGroupArray19);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = new com.google.javascript.jscomp.DiagnosticGroup(":", diagnosticGroupArray19);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup22 = new com.google.javascript.jscomp.DiagnosticGroup(diagnosticGroupArray19);
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup22;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup22;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup22;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup22;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup22;
        org.junit.Assert.assertNotNull(diagnosticGroup2);
        org.junit.Assert.assertNotNull(diagnosticGroup3);
        org.junit.Assert.assertNotNull(warningsGuardArray6);
        org.junit.Assert.assertNull(checkLevel9);
        org.junit.Assert.assertNotNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(diagnosticGroup14);
        org.junit.Assert.assertNotNull(diagnosticGroup15);
        org.junit.Assert.assertNotNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(diagnosticGroupArray19);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setOutputJsStringUsage(true);
        java.util.Set<java.lang.String> strSet4 = compilerOptions0.stripNamePrefixes;
        boolean boolean5 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleMethodMotion = false;
        compilerOptions0.moveFunctionDeclarations = true;
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = true;
        compilerOptions0.setAliasStringsBlacklist("JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}");
        boolean boolean12 = compilerOptions0.ideMode;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        boolean boolean4 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        boolean boolean7 = compilerOptions0.removeUnusedClassProperties;
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        boolean boolean10 = compilerOptions0.checkTypes;
        boolean boolean11 = compilerOptions0.foldConstants;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        compilerOptions0.moveFunctionDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode5 = compilerOptions0.getLanguageIn();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setInlineLocalFunctions(false);
        compilerOptions6.moveFunctionDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode11 = compilerOptions6.getLanguageIn();
        compilerOptions0.setLanguageIn(languageMode11);
        compilerOptions0.setPropertyAffinity(true);
        compilerOptions0.crossModuleCodeMotion = false;
        boolean boolean17 = compilerOptions0.ambiguateProperties;
        java.io.PrintStream printStream18 = null;
        com.google.javascript.jscomp.Compiler compiler19 = new com.google.javascript.jscomp.Compiler(printStream18);
        java.lang.String str20 = compiler19.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions21.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode27 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions21.setTracer(tracerMode27);
        compiler19.initOptions(compilerOptions21);
        com.google.javascript.jscomp.SourceFile sourceFile32 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int34 = sourceFile32.getLineOfOffset((int) (short) 1);
        java.lang.String str35 = sourceFile32.getName();
        java.lang.String str36 = sourceFile32.getName();
        java.lang.String str37 = sourceFile32.getName();
        com.google.javascript.jscomp.SourceFile sourceFile40 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int42 = sourceFile40.getLineOfOffset((int) (short) 1);
        java.lang.String str43 = sourceFile40.getName();
        com.google.javascript.jscomp.JsAst jsAst44 = new com.google.javascript.jscomp.JsAst(sourceFile40);
        jsAst44.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput48 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst44, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile51 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int53 = sourceFile51.getLineOfOffset((int) (short) 1);
        java.lang.String str54 = sourceFile51.getName();
        java.lang.String str55 = sourceFile51.getName();
        java.lang.String str56 = sourceFile51.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput58 = new com.google.javascript.jscomp.CompilerInput(sourceFile51, true);
        com.google.javascript.jscomp.CompilerInput compilerInput59 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput58);
        com.google.javascript.jscomp.SourceFile sourceFile62 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int64 = sourceFile62.getLineOfOffset((int) (short) 1);
        int int66 = sourceFile62.getColumnOfOffset(8);
        compilerInput59.setSourceFile(sourceFile62);
        jsAst44.setSourceFile(sourceFile62);
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.crossModuleMethodMotion = true;
        compilerOptions69.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result74 = compiler19.compile(sourceFile32, sourceFile62, compilerOptions69);
        com.google.javascript.jscomp.ErrorManager errorManager75 = compiler19.getErrorManager();
        int int76 = errorManager75.getWarningCount();
        compilerOptions0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler) errorManager75);
        compilerOptions0.setInlineLocalVariables(true);
        org.junit.Assert.assertTrue("'" + languageMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode5.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + languageMode11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode11.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + tracerMode27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode27.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(sourceFile40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(sourceFile51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(sourceFile62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(result74);
        org.junit.Assert.assertNotNull(errorManager75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.crossModuleMethodMotion = true;
        compilerOptions8.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions8.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy17);
        com.google.javascript.jscomp.SourceMap.Format format19 = compilerOptions8.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format19);
        boolean boolean21 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean22 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.setLineBreak(false);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions27.checkRequires;
        compilerOptions27.setRewriteNewDateGoogNow(true);
        compilerOptions27.setSyntheticBlockStartMarker("OFF");
        compilerOptions27.skipAllCompilerPasses();
        compilerOptions27.setDeadAssignmentElimination(true);
        compilerOptions27.setInferTypes(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.crossModuleMethodMotion = true;
        compilerOptions38.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.crossModuleMethodMotion = true;
        compilerOptions43.skipAllCompilerPasses();
        compilerOptions43.resetWarningsGuard();
        java.lang.String str48 = compilerOptions43.aliasStringsBlacklist;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy49 = com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy50 = null;
        compilerOptions43.setRenamingPolicy(variableRenamingPolicy49, propertyRenamingPolicy50);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy55 = compilerOptions52.propertyRenaming;
        compilerOptions38.setRenamingPolicy(variableRenamingPolicy49, propertyRenamingPolicy55);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions57.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode63 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions57.setTracer(tracerMode63);
        compilerOptions57.setSyntheticBlockStartMarker("");
        java.util.Set<java.lang.String> strSet67 = compilerOptions57.stripNameSuffixes;
        compilerOptions38.stripNamePrefixes = strSet67;
        compilerOptions27.setIdGenerators(strSet67);
        compilerOptions0.stripTypePrefixes = strSet67;
        compilerOptions0.setCollapseProperties(true);
        compilerOptions0.setTweakToBooleanLiteral("java.io.IOException", false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(format19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy49 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL + "'", variableRenamingPolicy49.equals(com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy55 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy55.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode63.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(strSet67);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", ":", "goog.abstractMethod");
        java.lang.String str4 = sourceFile3.getName();
        com.google.javascript.jscomp.Region region6 = sourceFile3.getRegion(47);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = sourceFile3.getLineOffset((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Expected line number between 1 and 1?Actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(region6);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean10 = node9.isVarArgs();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        com.google.javascript.rhino.Node node23 = jSTypeRegistry19.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        node17.addChildrenToBack(node23);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry26.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.Node node37 = jSTypeRegistry33.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry40.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, node17, node30, node37, node44, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry50.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry56.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        node54.addChildrenToBack(node60);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry63.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        boolean boolean68 = node67.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry70.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        boolean boolean75 = node74.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray78 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList79 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList79, jSTypeArray78);
        com.google.javascript.rhino.Node node81 = jSTypeRegistry77.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList79);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 0, node54, node67, node74, node81, 0, 49);
        com.google.javascript.rhino.Node node85 = node47.useSourceInfoFrom(node67);
        boolean boolean86 = node85.hasChildren();
        boolean boolean87 = node85.isDefaultCase();
        node9.addChildrenToFront(node85);
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean94 = node92.getBooleanProp((int) (byte) 10);
        node85.addChildToFront(node92);
        boolean boolean96 = node85.isThrow();
        node85.setCharno(0);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSTypeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy4 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy4;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setOptimizeReturns(false);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel10 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setPrintInputDelimiter(false);
        java.util.Set<java.lang.String> strSet13 = compilerOptions0.aliasableStrings;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy4 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy4.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertNotNull(detailLevel10);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("PARAM_LIST");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, false);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        java.lang.String str6 = compiler5.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions7.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode13 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions7.setTracer(tracerMode13);
        compiler5.initOptions(compilerOptions7);
        com.google.javascript.jscomp.SourceFile sourceFile18 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int20 = sourceFile18.getLineOfOffset((int) (short) 1);
        java.lang.String str21 = sourceFile18.getName();
        java.lang.String str22 = sourceFile18.getName();
        java.lang.String str23 = sourceFile18.getName();
        com.google.javascript.jscomp.SourceFile sourceFile26 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int28 = sourceFile26.getLineOfOffset((int) (short) 1);
        java.lang.String str29 = sourceFile26.getName();
        com.google.javascript.jscomp.JsAst jsAst30 = new com.google.javascript.jscomp.JsAst(sourceFile26);
        jsAst30.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst30, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile37 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int39 = sourceFile37.getLineOfOffset((int) (short) 1);
        java.lang.String str40 = sourceFile37.getName();
        java.lang.String str41 = sourceFile37.getName();
        java.lang.String str42 = sourceFile37.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput44 = new com.google.javascript.jscomp.CompilerInput(sourceFile37, true);
        com.google.javascript.jscomp.CompilerInput compilerInput45 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput44);
        com.google.javascript.jscomp.SourceFile sourceFile48 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int50 = sourceFile48.getLineOfOffset((int) (short) 1);
        int int52 = sourceFile48.getColumnOfOffset(8);
        compilerInput45.setSourceFile(sourceFile48);
        jsAst30.setSourceFile(sourceFile48);
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.crossModuleMethodMotion = true;
        compilerOptions55.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result60 = compiler5.compile(sourceFile18, sourceFile48, compilerOptions55);
        java.io.File file63 = new java.io.File(":", "hi!");
        boolean boolean66 = file63.setExecutable(false, false);
        java.io.File file67 = file63.getParentFile();
        long long68 = file67.getUsableSpace();
        boolean boolean69 = file67.mkdirs();
        java.nio.charset.Charset charset70 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile71 = com.google.javascript.jscomp.JSSourceFile.fromFile(file67, charset70);
        com.google.javascript.jscomp.JSModule[] jSModuleArray72 = new com.google.javascript.jscomp.JSModule[] {};
        java.util.ArrayList<com.google.javascript.jscomp.JSModule> jSModuleList73 = new java.util.ArrayList<com.google.javascript.jscomp.JSModule>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList73, jSModuleArray72);
        com.google.javascript.jscomp.JSModule[] jSModuleArray75 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList73);
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions76.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode82 = null;
        compilerOptions76.setLanguageOut(languageMode82);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy84 = null;
        compilerOptions76.variableRenaming = variableRenamingPolicy84;
        com.google.javascript.jscomp.CheckLevel checkLevel86 = compilerOptions76.checkUnreachableCode;
        com.google.javascript.jscomp.Result result87 = compiler5.compile(jSSourceFile71, jSModuleArray75, compilerOptions76);
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        int int89 = compilerInput3.getNumLines();
        com.google.javascript.jscomp.Region region91 = compilerInput3.getRegion(900);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + tracerMode13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode13.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(sourceFile26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(result60);
        org.junit.Assert.assertEquals(file63.getParent(), ":");
        org.junit.Assert.assertEquals(file63.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertNull("file67.getParent() == null", file67.getParent());
        org.junit.Assert.assertEquals(file67.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 280491663360L + "'", long68 == 280491663360L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSSourceFile71);
        org.junit.Assert.assertNotNull(jSModuleArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSModuleArray75);
        org.junit.Assert.assertTrue("'" + checkLevel86 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel86.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(result87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(region91);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripNameSuffixes;
        boolean boolean18 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseVariableDeclarations = false;
        compilerOptions0.setAliasAllStrings(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.CompilerOptions compilerOptions4 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions4.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions4.setTracer(tracerMode7);
        compilerOptions4.setFoldConstants(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode12 = null;
        compilerOptions11.setTracerMode(tracerMode12);
        boolean boolean14 = compilerOptions11.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel15 = compilerOptions11.sourceMapDetailLevel;
        compilerOptions11.setColorizeErrorOutput(true);
        compilerOptions11.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy23 = compilerOptions20.propertyRenaming;
        compilerOptions11.propertyRenaming = propertyRenamingPolicy23;
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions11.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel26 = compilerOptions11.checkRequires;
        compilerOptions4.reportMissingOverride = checkLevel26;
        compilerOptions0.setAggressiveVarCheck(checkLevel26);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode30 = null;
        compilerOptions29.setTracerMode(tracerMode30);
        boolean boolean32 = compilerOptions29.generatePseudoNames;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray33 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList34 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList34, locationMappingArray33);
        compilerOptions29.sourceMapLocationMappings = locationMappingList34;
        compilerOptions0.sourceMapLocationMappings = locationMappingList34;
        compilerOptions0.renamePrefix = "JSC_OPTIMIZE_LOOP_ERROR. Exceeded max number of code motion iterations: {0} at (unknown source) line (unknown line) : (unknown column)";
        compilerOptions0.setAliasStringsBlacklist("Node tree inequality:\nTree1:\nTHIS\n    STRING java.io.IOException:  43\n    PARAM_LIST [var_args_name: 1] [opt_arg: 1]\n\n\nTree2:\nSTRING \n\n\nSubtree1: THIS\n    STRING java.io.IOException:  43\n    PARAM_LIST [var_args_name: 1] [opt_arg: 1]\n\n\nSubtree2: STRING \n");
        compilerOptions0.setMarkAsCompiled(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(detailLevel15);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy23 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy23.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel26 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel26.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locationMappingArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        java.lang.String str48 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy52 = compilerOptions49.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap53 = compilerOptions49.getTweakReplacements();
        boolean boolean54 = strMap53.isEmpty();
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy58 = compilerOptions55.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap59 = compilerOptions55.getTweakReplacements();
        boolean boolean60 = strMap59.isEmpty();
        strMap59.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry63.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        boolean boolean68 = node67.isIn();
        boolean boolean69 = strMap59.containsValue((java.lang.Object) node67);
        boolean boolean70 = strMap53.containsKey((java.lang.Object) strMap59);
        com.google.javascript.rhino.InputId inputId72 = new com.google.javascript.rhino.InputId("*global*");
        java.lang.String str73 = inputId72.toString();
        boolean boolean74 = strMap59.containsKey((java.lang.Object) inputId72);
        com.google.javascript.jscomp.CompilerInput compilerInput75 = compiler9.getInput(inputId72);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode76 = compiler9.languageMode();
        com.google.javascript.jscomp.PassConfig passConfig77 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler9.setPassConfig(passConfig77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy52 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy52.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy58 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy58.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "InputId: *global*" + "'", str73, "InputId: *global*");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(compilerInput75);
        org.junit.Assert.assertTrue("'" + languageMode76 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode76.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isVoid();
        node5.setOptionalArg(true);
        node5.setVarArgs(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        com.google.javascript.rhino.InputId inputId14 = new com.google.javascript.rhino.InputId("DiagnosticGroup<checkProvides>");
        node5.setInputId(inputId14);
        int int16 = node5.getChildCount();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] { jSType3 };
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParameters(jSTypeArray4);
        com.google.javascript.rhino.jstype.JSType jSType6 = node5.getJSType();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        boolean boolean8 = node5.isAssignAdd();
        int int10 = node5.getIntProp(40);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        com.google.javascript.jscomp.Result result68 = compiler9.getResult();
        compiler9.rebuildInputsFromModules();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = compiler9.getTypeRegistry();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNotNull(result68);
        org.junit.Assert.assertNotNull(jSTypeRegistry70);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy3 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy3;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing5 = compilerOptions0.getTweakProcessing();
        compilerOptions0.syntheticBlockStartMarker = "DiagnosticGroup<checkProvides>";
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions8.checkRequires;
        compilerOptions8.setLooseTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.crossModuleMethodMotion = true;
        compilerOptions12.skipAllCompilerPasses();
        compilerOptions12.resetWarningsGuard();
        compilerOptions12.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = null;
        compilerOptions19.setTracerMode(tracerMode20);
        boolean boolean22 = compilerOptions19.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel23 = compilerOptions19.sourceMapDetailLevel;
        compilerOptions19.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet26 = compilerOptions19.stripNameSuffixes;
        compilerOptions12.setReplaceStringsReservedStrings(strSet26);
        boolean boolean28 = strSet26.isEmpty();
        compilerOptions8.aliasableStrings = strSet26;
        compilerOptions0.setAliasableStrings(strSet26);
        compilerOptions0.setSourceMapOutputPath("java.io.IOException: java.io.IOException: ");
        boolean boolean33 = compilerOptions0.crossModuleMethodMotion;
        org.junit.Assert.assertTrue("'" + tweakProcessing5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing5.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(detailLevel23);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile8 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        jsAst6.clearAst();
        com.google.javascript.rhino.InputId inputId11 = jsAst6.getInputId();
        jsAst6.clearAst();
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        java.lang.String str15 = compiler14.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions16.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode22 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions16.setTracer(tracerMode22);
        compiler14.initOptions(compilerOptions16);
        com.google.javascript.jscomp.SourceFile sourceFile27 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int29 = sourceFile27.getLineOfOffset((int) (short) 1);
        java.lang.String str30 = sourceFile27.getName();
        java.lang.String str31 = sourceFile27.getName();
        java.lang.String str32 = sourceFile27.getName();
        com.google.javascript.jscomp.SourceFile sourceFile35 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int37 = sourceFile35.getLineOfOffset((int) (short) 1);
        java.lang.String str38 = sourceFile35.getName();
        com.google.javascript.jscomp.JsAst jsAst39 = new com.google.javascript.jscomp.JsAst(sourceFile35);
        jsAst39.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput43 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst39, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile46 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int48 = sourceFile46.getLineOfOffset((int) (short) 1);
        java.lang.String str49 = sourceFile46.getName();
        java.lang.String str50 = sourceFile46.getName();
        java.lang.String str51 = sourceFile46.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput53 = new com.google.javascript.jscomp.CompilerInput(sourceFile46, true);
        com.google.javascript.jscomp.CompilerInput compilerInput54 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput53);
        com.google.javascript.jscomp.SourceFile sourceFile57 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int59 = sourceFile57.getLineOfOffset((int) (short) 1);
        int int61 = sourceFile57.getColumnOfOffset(8);
        compilerInput54.setSourceFile(sourceFile57);
        jsAst39.setSourceFile(sourceFile57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.crossModuleMethodMotion = true;
        compilerOptions64.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result69 = compiler14.compile(sourceFile27, sourceFile57, compilerOptions64);
        boolean boolean70 = compiler14.isIdeMode();
        java.lang.String str73 = compiler14.getSourceLine("*global*", (int) ' ');
        java.lang.String[] strArray74 = compiler14.toSourceArray();
        com.google.javascript.jscomp.Region region77 = compiler14.getSourceRegion("STRING PARAM_LIST 49", 51);
        boolean boolean78 = compiler14.isTypeCheckingEnabled();
        com.google.javascript.rhino.Node node79 = jsAst6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CompilerInput compilerInput82 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst6, "JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}", true);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(inputId11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + tracerMode22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode22.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(sourceFile35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(sourceFile57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(result69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNull(region77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.crossModuleMethodMotion = true;
        compilerOptions8.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions8.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy17);
        com.google.javascript.jscomp.SourceMap.Format format19 = compilerOptions8.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format19);
        boolean boolean21 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean22 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.setLineBreak(false);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions27.checkRequires;
        compilerOptions27.setRewriteNewDateGoogNow(true);
        compilerOptions27.setSyntheticBlockStartMarker("OFF");
        compilerOptions27.skipAllCompilerPasses();
        compilerOptions27.setDeadAssignmentElimination(true);
        compilerOptions27.inputDelimiter = "/experiment/:/hi!";
        compilerOptions27.convertToDottedProperties = false;
        compilerOptions27.setGeneratePseudoNames(true);
        boolean boolean42 = compilerOptions27.optimizeReturns;
        compilerOptions27.setProcessObjectPropertyString(false);
        compilerOptions27.setRemoveUnusedPrototypeProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions47.setTweakToDoubleLiteral("", (double) (short) 1);
        compilerOptions47.setCrossModuleCodeMotion(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode55 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions47.setTracer(tracerMode55);
        compilerOptions27.setTracerMode(tracerMode55);
        compilerOptions0.setTracer(tracerMode55);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(format19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + tracerMode55 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode55.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable7 = jSTypeRegistry1.getTypesWithProperty("");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        boolean boolean16 = jSTypeList11.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable19 = jSTypeRegistry9.getTypesWithProperty(":");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        jSTypeRegistry9.setResolveMode(resolveMode20);
        jSTypeRegistry1.setResolveMode(resolveMode20);
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        boolean boolean32 = jSTypeList27.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList38 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList38, jSTypeArray37);
        boolean boolean40 = jSTypeList35.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        boolean boolean47 = jSTypeList42.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        boolean boolean48 = jSTypeList35.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        boolean boolean49 = jSTypeList35.isEmpty();
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode51 = null;
        compilerOptions50.setTracerMode(tracerMode51);
        boolean boolean53 = compilerOptions50.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel54 = compilerOptions50.sourceMapDetailLevel;
        compilerOptions50.setColorizeErrorOutput(true);
        compilerOptions50.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy62 = compilerOptions59.propertyRenaming;
        compilerOptions50.propertyRenaming = propertyRenamingPolicy62;
        com.google.javascript.jscomp.CheckLevel checkLevel64 = compilerOptions50.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel65 = compilerOptions50.checkRequires;
        compilerOptions50.setReportPath("OFF");
        compilerOptions50.renamePrefix = "STRING PARAM_LIST 49";
        boolean boolean70 = jSTypeList35.equals((java.lang.Object) "STRING PARAM_LIST 49");
        com.google.javascript.jscomp.CompilerOptions compilerOptions71 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions71.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel74 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions71.setSourceMapDetailLevel(detailLevel74);
        compilerOptions71.inlineFunctions = true;
        compilerOptions71.setCommonJSModulePathPrefix(":");
        compilerOptions71.setCrossModuleCodeMotion(true);
        compilerOptions71.setRemoveUnusedClassProperties(true);
        int int84 = jSTypeList35.lastIndexOf((java.lang.Object) true);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry25.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        java.util.Iterator<com.google.javascript.rhino.jstype.JSType> jSTypeItor86 = jSTypeList35.iterator();
        com.google.javascript.rhino.Node node87 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeIterable7);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSTypeIterable19);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(detailLevel54);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy62 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy62.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel64 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel64.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel65 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel65.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(detailLevel74);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(jSTypeItor86);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        boolean boolean2 = compilerOptions0.removeUnusedVars;
        boolean boolean3 = compilerOptions0.checkSymbols;
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.coalesceVariableNames = true;
        java.lang.String str9 = compilerOptions0.aliasStringsBlacklist;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy13 = compilerOptions10.propertyRenaming;
        java.lang.String[] strArray16 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        compilerOptions10.setStripTypes((java.util.Set<java.lang.String>) strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode21 = null;
        compilerOptions20.setTracerMode(tracerMode21);
        boolean boolean23 = compilerOptions20.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel24 = compilerOptions20.sourceMapDetailLevel;
        compilerOptions20.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.crossModuleMethodMotion = true;
        compilerOptions27.optimizeParameters = true;
        compilerOptions27.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions27.checkGlobalNamesLevel;
        compilerOptions20.setReportMissingOverride(checkLevel35);
        compilerOptions10.setCheckUnreachableCode(checkLevel35);
        compilerOptions10.syntheticBlockStartMarker = "*global*";
        compilerOptions10.prettyPrint = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.crossModuleMethodMotion = true;
        compilerOptions42.optimizeParameters = true;
        compilerOptions42.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions42.checkGlobalNamesLevel;
        compilerOptions10.checkGlobalNamesLevel = checkLevel50;
        compilerOptions0.setCheckUnreachableCode(checkLevel50);
        java.util.Set<java.lang.String> strSet53 = null;
        compilerOptions0.setStripNamePrefixes(strSet53);
        java.lang.String str55 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.ambiguateProperties = true;
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.reserveRawExports = false;
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy13 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy13.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(detailLevel24);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.lang.String[] strArray6 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerOptions0.setStripTypes((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode11 = null;
        compilerOptions10.setTracerMode(tracerMode11);
        boolean boolean13 = compilerOptions10.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel14 = compilerOptions10.sourceMapDetailLevel;
        compilerOptions10.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.crossModuleMethodMotion = true;
        compilerOptions17.optimizeParameters = true;
        compilerOptions17.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions17.checkGlobalNamesLevel;
        compilerOptions10.setReportMissingOverride(checkLevel25);
        compilerOptions0.setCheckUnreachableCode(checkLevel25);
        compilerOptions0.syntheticBlockStartMarker = "*global*";
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions0.checkMissingReturn;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode34 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions31.setTracer(tracerMode34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode37 = null;
        compilerOptions36.setTracerMode(tracerMode37);
        boolean boolean39 = compilerOptions36.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel40 = compilerOptions36.sourceMapDetailLevel;
        compilerOptions36.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet43 = compilerOptions36.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode45 = null;
        compilerOptions44.setTracerMode(tracerMode45);
        boolean boolean47 = compilerOptions44.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel48 = compilerOptions44.sourceMapDetailLevel;
        compilerOptions44.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.optimizeParameters = true;
        compilerOptions51.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel59 = compilerOptions51.checkGlobalNamesLevel;
        compilerOptions44.setReportMissingOverride(checkLevel59);
        compilerOptions36.setAggressiveVarCheck(checkLevel59);
        compilerOptions31.setCheckUnreachableCode(checkLevel59);
        com.google.javascript.jscomp.SourceMap.Format format63 = compilerOptions31.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format63);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        boolean boolean67 = compilerOptions0.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap68 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap68;
        compilerOptions0.setExportTestFunctions(false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(detailLevel14);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode34 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode34.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(detailLevel40);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(detailLevel48);
        org.junit.Assert.assertTrue("'" + checkLevel59 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel59.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(format63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        boolean boolean7 = node6.isIn();
        boolean boolean8 = node6.isVoid();
        node6.setOptionalArg(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode12 = null;
        compilerOptions11.setTracerMode(tracerMode12);
        boolean boolean14 = compilerOptions11.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel15 = compilerOptions11.sourceMapDetailLevel;
        compilerOptions11.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.crossModuleMethodMotion = true;
        compilerOptions18.optimizeParameters = true;
        compilerOptions18.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel26 = compilerOptions18.checkGlobalNamesLevel;
        compilerOptions11.setReportMissingOverride(checkLevel26);
        com.google.javascript.jscomp.DiagnosticType diagnosticType28 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray29 = null;
        com.google.javascript.jscomp.JSError jSError30 = com.google.javascript.jscomp.JSError.make("", node6, checkLevel26, diagnosticType28, strArray29);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.crossModuleMethodMotion = true;
        compilerOptions31.skipAllCompilerPasses();
        compilerOptions31.resetWarningsGuard();
        compilerOptions31.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode39 = null;
        compilerOptions38.setTracerMode(tracerMode39);
        boolean boolean41 = compilerOptions38.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel42 = compilerOptions38.sourceMapDetailLevel;
        compilerOptions38.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet45 = compilerOptions38.stripNameSuffixes;
        compilerOptions31.setReplaceStringsReservedStrings(strSet45);
        boolean boolean47 = strSet45.isEmpty();
        node6.setDirectives(strSet45);
        node6.addSuppression("java.io.IOException: ");
        java.lang.String str54 = node6.toString(false, false, false);
        boolean boolean55 = node6.isNew();
        boolean boolean56 = node6.isLabel();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(detailLevel15);
        org.junit.Assert.assertTrue("'" + checkLevel26 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel26.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType28);
        org.junit.Assert.assertNotNull(jSError30);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(detailLevel42);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PARAM_LIST" + "'", str54, "PARAM_LIST");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy12 = compilerOptions9.propertyRenaming;
        compilerOptions0.propertyRenaming = propertyRenamingPolicy12;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions0.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions0.checkRequires;
        compilerOptions0.setReportPath("OFF");
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setChainCalls(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy12 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy12.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        compilerOptions0.setGeneratePseudoNames(false);
        compilerOptions0.setDefineToNumberLiteral("PARAM_LIST\n", (int) '/');
        java.lang.String str8 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.checkControlStructures = true;
        java.io.PrintStream printStream12 = new java.io.PrintStream("PARAM_LIST");
        printStream12.write(40);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel18 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions15.setSourceMapDetailLevel(detailLevel18);
        compilerOptions15.inlineFunctions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy25 = compilerOptions22.propertyRenaming;
        java.lang.String[] strArray28 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        compilerOptions22.setStripTypes((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode33 = null;
        compilerOptions32.setTracerMode(tracerMode33);
        boolean boolean35 = compilerOptions32.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel36 = compilerOptions32.sourceMapDetailLevel;
        compilerOptions32.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.crossModuleMethodMotion = true;
        compilerOptions39.optimizeParameters = true;
        compilerOptions39.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions39.checkGlobalNamesLevel;
        compilerOptions32.setReportMissingOverride(checkLevel47);
        compilerOptions22.setCheckUnreachableCode(checkLevel47);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 1, (byte) 10, (byte) 1 };
        compilerOptions22.inputVariableMapSerialized = byteArray54;
        compilerOptions15.inputVariableMapSerialized = byteArray54;
        printStream12.write(byteArray54, 1, (int) (short) 0);
        compilerOptions0.inputPropertyMapSerialized = byteArray54;
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(detailLevel18);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy25 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy25.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(detailLevel36);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 1, 10, 1]");
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = com.google.javascript.jscomp.CheckLevel.WARNING;
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel9);
        com.google.javascript.jscomp.MessageBundle messageBundle11 = null;
        compilerOptions0.setMessageBundle(messageBundle11);
        compilerOptions0.collapseProperties = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.WARNING + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.WARNING));
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy5, propertyRenamingPolicy9);
        boolean boolean11 = compilerOptions0.checkControlStructures;
        boolean boolean12 = compilerOptions0.crossModuleCodeMotion;
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode18 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions15.setTracer(tracerMode18);
        compilerOptions15.setFoldConstants(true);
        boolean boolean22 = compilerOptions15.removeUnusedPrototypePropertiesInExterns;
        java.lang.Object obj23 = compilerOptions15.clone();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry26.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry32.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        node30.addChildrenToBack(node36);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry46.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry53.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, node30, node43, node50, node57, 0, 49);
        boolean boolean61 = node30.isDo();
        boolean boolean62 = node30.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node30.children();
        java.lang.String[] strArray70 = new java.lang.String[] { "OFF", "PARAM_LIST", "*global*", ":", "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet71);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        boolean boolean80 = jSTypeList75.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray81 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList82 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList82, jSTypeArray81);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList85 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList85, jSTypeArray84);
        boolean boolean87 = jSTypeList82.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList85);
        boolean boolean88 = jSTypeList75.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList85);
        boolean boolean89 = strSet71.retainAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList85);
        java.lang.String[] strArray95 = new java.lang.String[] { "*global*", "Unversioned directory", "STRING PARAM_LIST 49", "java.io.IOException: ", "*global*.  at *global* line (unknown line) : (unknown column)" };
        java.lang.Comparable<java.lang.String>[] strComparableArray96 = strSet71.toArray((java.lang.Comparable<java.lang.String>[]) strArray95);
        compilerOptions15.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet71);
        compilerOptions0.setStripNamePrefixes((java.util.Set<java.lang.String>) strSet71);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + tracerMode18 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode18.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSTypeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strComparableArray96);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        boolean boolean12 = compiler1.hasErrors();
        double double13 = compiler1.getProgress();
        int int14 = compiler1.getErrorCount();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = compiler1.getTypeRegistry();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter16 = compiler1.getReverseAbstractInterpreter();
        com.google.javascript.jscomp.ErrorManager errorManager17 = compiler1.getErrorManager();
        com.google.javascript.jscomp.ErrorManager errorManager18 = compiler1.getErrorManager();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(jSTypeRegistry15);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter16);
        org.junit.Assert.assertNotNull(errorManager17);
        org.junit.Assert.assertNotNull(errorManager18);
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        jSTypeRegistry6.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] { jSType8 };
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParameters(jSTypeArray9);
        int int11 = node3.getIndexOfChild(node10);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        node18.addChildrenToBack(node24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, node18, node31, node38, node45, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry51.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry57.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        node55.addChildrenToBack(node61);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        boolean boolean69 = node68.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry71.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        boolean boolean76 = node75.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry78.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, node55, node68, node75, node82, 0, 49);
        com.google.javascript.rhino.Node node86 = node48.useSourceInfoFrom(node68);
        boolean boolean87 = node68.isExprResult();
        int int88 = node3.getIndexOfChild(node68);
        boolean boolean89 = node3.hasOneChild();
        boolean boolean90 = node3.isCall();
        boolean boolean91 = node3.isInc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setProtectHiddenSideEffects(true);
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        boolean boolean6 = compilerOptions0.aliasAllStrings;
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.inlineGetters = false;
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy15 = null;
        compilerOptions12.variableRenaming = variableRenamingPolicy15;
        compilerOptions12.setProtectHiddenSideEffects(false);
        compilerOptions12.setRemoveUnusedLocalVars(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy24 = compilerOptions21.propertyRenaming;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy25 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        compilerOptions21.anonymousFunctionNaming = anonymousFunctionNamingPolicy25;
        compilerOptions12.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy25);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy25;
        boolean boolean29 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.setPrintInputDelimiter(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy24 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy24.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy25 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy25.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray1 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator3 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile4 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator3);
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile7 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator6);
        com.google.javascript.jscomp.SourceFile.Generator generator9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator9);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray11 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile4, jSSourceFile7, jSSourceFile10 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean13 = compilerOptions12.moveFunctionDeclarations;
        compilerOptions12.crossModuleCodeMotion = true;
        compiler0.init(jSSourceFileArray1, jSSourceFileArray11, compilerOptions12);
        com.google.javascript.jscomp.SourceFile sourceFile19 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int21 = sourceFile19.getLineOfOffset((int) (short) 1);
        java.lang.String str22 = sourceFile19.getName();
        com.google.javascript.jscomp.JsAst jsAst23 = new com.google.javascript.jscomp.JsAst(sourceFile19);
        jsAst23.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput27 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst23, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile30 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int32 = sourceFile30.getLineOfOffset((int) (short) 1);
        java.lang.String str33 = sourceFile30.getName();
        java.lang.String str34 = sourceFile30.getName();
        java.lang.String str35 = sourceFile30.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput37 = new com.google.javascript.jscomp.CompilerInput(sourceFile30, true);
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput37);
        com.google.javascript.jscomp.SourceFile sourceFile41 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int43 = sourceFile41.getLineOfOffset((int) (short) 1);
        int int45 = sourceFile41.getColumnOfOffset(8);
        compilerInput38.setSourceFile(sourceFile41);
        jsAst23.setSourceFile(sourceFile41);
        com.google.javascript.jscomp.SourceFile sourceFile49 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput51 = new com.google.javascript.jscomp.CompilerInput(sourceFile49, true);
        java.lang.String str52 = sourceFile49.getCode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel56 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions53.setSourceMapDetailLevel(detailLevel56);
        compilerOptions53.inlineFunctions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy63 = compilerOptions60.propertyRenaming;
        java.lang.String[] strArray66 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        compilerOptions60.setStripTypes((java.util.Set<java.lang.String>) strSet67);
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode71 = null;
        compilerOptions70.setTracerMode(tracerMode71);
        boolean boolean73 = compilerOptions70.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel74 = compilerOptions70.sourceMapDetailLevel;
        compilerOptions70.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.crossModuleMethodMotion = true;
        compilerOptions77.optimizeParameters = true;
        compilerOptions77.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel85 = compilerOptions77.checkGlobalNamesLevel;
        compilerOptions70.setReportMissingOverride(checkLevel85);
        compilerOptions60.setCheckUnreachableCode(checkLevel85);
        byte[] byteArray92 = new byte[] { (byte) 0, (byte) 1, (byte) 10, (byte) 1 };
        compilerOptions60.inputVariableMapSerialized = byteArray92;
        compilerOptions53.inputVariableMapSerialized = byteArray92;
        com.google.javascript.jscomp.Result result95 = compiler0.compile(sourceFile41, sourceFile49, compilerOptions53);
        com.google.javascript.jscomp.CodingConvention codingConvention96 = compiler0.getCodingConvention();
        java.util.Collection<java.lang.String> strCollection97 = codingConvention96.getIndirectlyDeclaredProperties();
        java.util.Collection<java.lang.String> strCollection98 = codingConvention96.getIndirectlyDeclaredProperties();
        java.util.Collection<java.lang.String> strCollection99 = codingConvention96.getIndirectlyDeclaredProperties();
        org.junit.Assert.assertNotNull(jSSourceFileArray1);
        org.junit.Assert.assertNotNull(jSSourceFile4);
        org.junit.Assert.assertNotNull(jSSourceFile7);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertNotNull(jSSourceFileArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(sourceFile19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(sourceFile30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(sourceFile41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(detailLevel56);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy63 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy63.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(detailLevel74);
        org.junit.Assert.assertTrue("'" + checkLevel85 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel85.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 1, 10, 1]");
        org.junit.Assert.assertNotNull(result95);
        org.junit.Assert.assertNotNull(codingConvention96);
        org.junit.Assert.assertNotNull(strCollection97);
        org.junit.Assert.assertNotNull(strCollection98);
        org.junit.Assert.assertNotNull(strCollection99);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        boolean boolean75 = node56.isExprResult();
        int int76 = node56.getLength();
        boolean boolean77 = node56.isOptionalArg();
        com.google.javascript.rhino.Node node78 = node56.getNext();
        com.google.javascript.rhino.ErrorReporter errorReporter79 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter79);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray81 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList82 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList82, jSTypeArray81);
        com.google.javascript.rhino.Node node84 = jSTypeRegistry80.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList82);
        boolean boolean85 = node84.isIn();
        boolean boolean86 = node84.isVoid();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable87 = node84.siblings();
        com.google.javascript.rhino.Node node88 = node84.getFirstChild();
        node78.addChildrenToBack(node84);
        boolean boolean90 = node78.isNumber();
        java.lang.String str91 = node78.getSourceFileName();
        boolean boolean92 = node78.hasMoreThanOneChild();
        boolean boolean93 = node78.isInstanceOf();
        boolean boolean94 = node78.isDefaultCase();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(jSTypeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeIterable87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray0 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList1 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList1, jSTypeArray0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        boolean boolean6 = jSTypeList1.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList8 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList8, jSTypeArray7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        boolean boolean13 = jSTypeList8.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        boolean boolean14 = jSTypeList1.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        boolean boolean15 = jSTypeList1.isEmpty();
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = null;
        compilerOptions16.setTracerMode(tracerMode17);
        boolean boolean19 = compilerOptions16.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel20 = compilerOptions16.sourceMapDetailLevel;
        compilerOptions16.setColorizeErrorOutput(true);
        compilerOptions16.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy28 = compilerOptions25.propertyRenaming;
        compilerOptions16.propertyRenaming = propertyRenamingPolicy28;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions16.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions16.checkRequires;
        compilerOptions16.setReportPath("OFF");
        compilerOptions16.renamePrefix = "STRING PARAM_LIST 49";
        boolean boolean36 = jSTypeList1.equals((java.lang.Object) "STRING PARAM_LIST 49");
        java.lang.Object[] objArray37 = jSTypeList1.toArray();
        org.junit.Assert.assertNotNull(jSTypeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(detailLevel20);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy28.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler();
        jSModule1.sortInputsByDeps(compiler2);
        com.google.javascript.jscomp.SourceFile.Builder builder4 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile8 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int10 = sourceFile8.getLineOfOffset((int) (short) 1);
        java.io.Reader reader11 = sourceFile8.getCodeReader();
        int int12 = reader11.read();
        com.google.javascript.jscomp.SourceFile sourceFile13 = builder4.buildFromReader("*global*", reader11);
        jSModule1.add(sourceFile13);
        com.google.javascript.jscomp.JSModule jSModule16 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler17 = new com.google.javascript.jscomp.Compiler();
        jSModule16.sortInputsByDeps(compiler17);
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile23 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int25 = sourceFile23.getLineOfOffset((int) (short) 1);
        java.io.Reader reader26 = sourceFile23.getCodeReader();
        int int27 = reader26.read();
        com.google.javascript.jscomp.SourceFile sourceFile28 = builder19.buildFromReader("*global*", reader26);
        jSModule16.add(sourceFile28);
        boolean boolean31 = jSModule16.removeByName("PARAM_LIST");
        jSModule1.addDependency(jSModule16);
        com.google.javascript.jscomp.SourceFile sourceFile34 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput36 = new com.google.javascript.jscomp.CompilerInput(sourceFile34, true);
        com.google.javascript.rhino.InputId inputId38 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput36, inputId38, true);
        com.google.javascript.jscomp.CompilerInput compilerInput42 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40, false);
        jSModule1.addFirst(compilerInput40);
        com.google.javascript.jscomp.CompilerInput compilerInput45 = jSModule1.getByName("");
        com.google.javascript.jscomp.SourceFile sourceFile47 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput49 = new com.google.javascript.jscomp.CompilerInput(sourceFile47, true);
        com.google.javascript.rhino.InputId inputId51 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput53 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput49, inputId51, true);
        com.google.javascript.jscomp.CompilerInput compilerInput55 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput53, false);
        com.google.javascript.jscomp.JSModule jSModule57 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler58 = new com.google.javascript.jscomp.Compiler();
        jSModule57.sortInputsByDeps(compiler58);
        java.lang.String str60 = jSModule57.getName();
        compilerInput53.setModule(jSModule57);
        jSModule57.setDepth((int) (byte) 0);
        jSModule1.addDependency(jSModule57);
        com.google.javascript.jscomp.SourceFile sourceFile67 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int69 = sourceFile67.getLineOfOffset((int) (short) 1);
        java.lang.String str70 = sourceFile67.getName();
        java.lang.String str71 = sourceFile67.getName();
        java.lang.String str72 = sourceFile67.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput74 = new com.google.javascript.jscomp.CompilerInput(sourceFile67, true);
        com.google.javascript.jscomp.CompilerInput compilerInput75 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput74);
        com.google.javascript.jscomp.CompilerInput compilerInput77 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput74, false);
        jSModule57.remove(compilerInput74);
        com.google.javascript.jscomp.SourceFile sourceFile80 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput82 = new com.google.javascript.jscomp.CompilerInput(sourceFile80, true);
        com.google.javascript.rhino.InputId inputId84 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput86 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput82, inputId84, true);
        com.google.javascript.jscomp.CompilerInput compilerInput88 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput86, false);
        compilerInput88.clearAst();
        jSModule57.add(compilerInput88);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(reader11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(reader26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(sourceFile28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(compilerInput45);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "STRING PARAM_LIST 49" + "'", str60, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(sourceFile67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel2 = compilerOptions0.sourceMapDetailLevel;
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripNameSuffixes;
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        java.lang.String str6 = compiler5.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions7.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode13 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions7.setTracer(tracerMode13);
        compiler5.initOptions(compilerOptions7);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy16 = compilerOptions7.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.crossModuleMethodMotion = true;
        compilerOptions17.syntheticBlockEndMarker = "hi!";
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions17.aggressiveVarCheck;
        compilerOptions7.setCheckGlobalNamesLevel(checkLevel22);
        compilerOptions7.setRemoveUnusedClassProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions7.stripTypes;
        compilerOptions0.stripTypePrefixes = strSet26;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(detailLevel2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + tracerMode13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode13.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy16 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy16.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = null;
        compilerOptions18.setTracerMode(tracerMode19);
        boolean boolean21 = compilerOptions18.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = compilerOptions18.sourceMapDetailLevel;
        compilerOptions18.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet25 = compilerOptions18.stripNameSuffixes;
        com.google.javascript.jscomp.SourceFile sourceFile27 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceFile27, true);
        com.google.javascript.rhino.InputId inputId31 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput33 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput29, inputId31, true);
        java.lang.String str34 = compilerInput33.toString();
        boolean boolean35 = strSet25.contains((java.lang.Object) compilerInput33);
        compilerOptions0.stripTypes = strSet25;
        compilerOptions0.setMarkAsCompiled(true);
        java.util.Set<java.lang.String> strSet39 = compilerOptions0.stripTypePrefixes;
        boolean boolean40 = compilerOptions0.reserveRawExports;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(detailLevel22);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "*global*" + "'", str34, "*global*");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter12 = compiler1.getReverseAbstractInterpreter();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        com.google.javascript.jscomp.type.FlowScope flowScope17 = null;
        com.google.javascript.jscomp.type.FlowScope flowScope19 = reverseAbstractInterpreter12.getPreciserScopeKnowingConditionOutcome(node16, flowScope17, false);
        boolean boolean20 = node16.hasMoreThanOneChild();
        com.google.javascript.jscomp.SourceFile sourceFile24 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", ":", "goog.abstractMethod");
        java.lang.String str25 = sourceFile24.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput27 = new com.google.javascript.jscomp.CompilerInput(sourceFile24, false);
        java.lang.String str28 = sourceFile24.getCode();
        node16.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile) sourceFile24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node16.getAncestors();
        boolean boolean31 = node16.isArrayLit();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(flowScope19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(sourceFile24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "goog.abstractMethod" + "'", str28, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setRuntimeTypeCheckLogFunction("FINEST");
        compilerOptions0.setRemoveDeadCode(true);
        compilerOptions0.setSpecializeInitialModule(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        compilerOptions9.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        java.lang.String[] strArray20 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        compilerOptions14.setStripTypes((java.util.Set<java.lang.String>) strSet21);
        compilerOptions9.stripNamePrefixes = strSet21;
        compilerOptions9.checkTypes = false;
        compilerOptions9.setSyntheticBlockEndMarker("");
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList29 = compilerOptions9.sourceMapLocationMappings;
        compilerOptions0.sourceMapLocationMappings = locationMappingList29;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions31.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode34 = null;
        compilerOptions33.setTracerMode(tracerMode34);
        boolean boolean36 = compilerOptions33.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel37 = compilerOptions33.sourceMapDetailLevel;
        compilerOptions33.setColorizeErrorOutput(true);
        compilerOptions33.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy45 = compilerOptions42.propertyRenaming;
        compilerOptions33.propertyRenaming = propertyRenamingPolicy45;
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions33.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions33.checkRequires;
        compilerOptions31.setCheckRequires(checkLevel48);
        compilerOptions31.reserveRawExports = false;
        com.google.javascript.jscomp.CodingConvention codingConvention52 = compilerOptions31.getCodingConvention();
        com.google.javascript.jscomp.WarningsGuard[] warningsGuardArray53 = new com.google.javascript.jscomp.WarningsGuard[] {};
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard54 = new com.google.javascript.jscomp.ComposeWarningsGuard(warningsGuardArray53);
        com.google.javascript.jscomp.JSError jSError55 = null;
        com.google.javascript.jscomp.CheckLevel checkLevel56 = composeWarningsGuard54.level(jSError55);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup57 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup57;
        boolean boolean59 = composeWarningsGuard54.disables(diagnosticGroup57);
        com.google.javascript.jscomp.WarningsGuard[] warningsGuardArray60 = new com.google.javascript.jscomp.WarningsGuard[] {};
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard61 = new com.google.javascript.jscomp.ComposeWarningsGuard(warningsGuardArray60);
        com.google.javascript.jscomp.JSError jSError62 = null;
        com.google.javascript.jscomp.CheckLevel checkLevel63 = composeWarningsGuard61.level(jSError62);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup64 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup64;
        boolean boolean66 = composeWarningsGuard61.disables(diagnosticGroup64);
        boolean boolean67 = composeWarningsGuard54.enables(diagnosticGroup64);
        java.lang.String str68 = composeWarningsGuard54.toString();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup69 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup69;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup69;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup69;
        boolean boolean73 = composeWarningsGuard54.enables(diagnosticGroup69);
        compilerOptions31.setWarningsGuard(composeWarningsGuard54);
        compilerOptions0.setWarningsGuard(composeWarningsGuard54);
        boolean boolean76 = compilerOptions0.shouldColorizeErrorOutput();
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locationMappingList29);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(detailLevel37);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy45 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy45.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(codingConvention52);
        org.junit.Assert.assertNotNull(warningsGuardArray53);
        org.junit.Assert.assertNull(checkLevel56);
        org.junit.Assert.assertNotNull(diagnosticGroup57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(warningsGuardArray60);
        org.junit.Assert.assertNull(checkLevel63);
        org.junit.Assert.assertNotNull(diagnosticGroup64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(diagnosticGroup69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        com.google.javascript.jscomp.Result result68 = compiler9.getResult();
        compiler9.rebuildInputsFromModules();
        com.google.javascript.rhino.InputId inputId70 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput71 = compiler9.getInput(inputId70);
        com.google.javascript.jscomp.ErrorManager errorManager72 = compiler9.getErrorManager();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile75 = com.google.javascript.jscomp.JSSourceFile.fromCode("STRING PARAM_LIST 49", "InputId: *global*");
        java.lang.String str76 = jSSourceFile75.getOriginalPath();
        com.google.javascript.jscomp.JSModule[] jSModuleArray77 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.inlineFunctions = false;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result81 = compiler9.compile(jSSourceFile75, jSModuleArray77, compilerOptions78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNotNull(result68);
        org.junit.Assert.assertNull(compilerInput71);
        org.junit.Assert.assertNotNull(errorManager72);
        org.junit.Assert.assertNotNull(jSSourceFile75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "STRING PARAM_LIST 49" + "'", str76, "STRING PARAM_LIST 49");
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        int int58 = errorManager57.getErrorCount();
        com.google.javascript.jscomp.JSError[] jSErrorArray59 = errorManager57.getErrors();
        errorManager57.generateReport();
        com.google.javascript.jscomp.Compiler compiler61 = new com.google.javascript.jscomp.Compiler(errorManager57);
        com.google.javascript.jscomp.Compiler compiler62 = new com.google.javascript.jscomp.Compiler(errorManager57);
        compiler62.reportCodeChange();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention codingConvention64 = compiler62.getCodingConvention();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(jSErrorArray59);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.warning("", "InputId: *global*");
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode10 = null;
        compilerOptions9.setTracerMode(tracerMode10);
        boolean boolean12 = compilerOptions9.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel13 = compilerOptions9.sourceMapDetailLevel;
        compilerOptions9.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet16 = compilerOptions9.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode18 = null;
        compilerOptions17.setTracerMode(tracerMode18);
        boolean boolean20 = compilerOptions17.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel21 = compilerOptions17.sourceMapDetailLevel;
        compilerOptions17.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.crossModuleMethodMotion = true;
        compilerOptions24.optimizeParameters = true;
        compilerOptions24.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions24.checkGlobalNamesLevel;
        compilerOptions17.setReportMissingOverride(checkLevel32);
        compilerOptions9.setAggressiveVarCheck(checkLevel32);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup35 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup35;
        com.google.javascript.jscomp.DiagnosticType diagnosticType37 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        boolean boolean38 = diagnosticGroup35.matches(diagnosticType37);
        java.lang.String[] strArray42 = new java.lang.String[] { "Unversioned directory", "Unversioned directory", "java.io.IOException: " };
        com.google.javascript.jscomp.JSError jSError43 = com.google.javascript.jscomp.JSError.make("/", (int) (short) -1, 48, checkLevel32, diagnosticType37, strArray42);
        java.lang.String str44 = diagnosticType37.key;
        java.text.MessageFormat messageFormat45 = diagnosticType37.format;
        java.lang.String str46 = diagnosticType37.key;
        com.google.javascript.jscomp.CheckLevel checkLevel51 = com.google.javascript.jscomp.CheckLevel.WARNING;
        com.google.javascript.jscomp.DiagnosticType diagnosticType53 = com.google.javascript.jscomp.DiagnosticType.make("WARNING", checkLevel51, "hi!");
        java.lang.String[] strArray56 = new java.lang.String[] { ":/hi!", "US-ASCII" };
        com.google.javascript.jscomp.JSError jSError57 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", (-1), (-1), diagnosticType53, strArray56);
        com.google.javascript.jscomp.JSError jSError58 = com.google.javascript.jscomp.JSError.make("java.io.IOException: OFF", 45, 29, diagnosticType37, strArray56);
        com.google.javascript.jscomp.JSError jSError59 = com.google.javascript.jscomp.JSError.make(diagnosticType2, strArray56);
        org.junit.Assert.assertNotNull(diagnosticType2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(detailLevel13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(detailLevel21);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticGroup35);
        org.junit.Assert.assertNotNull(diagnosticType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(jSError43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JSC_OPTIMIZE_LOOP_ERROR" + "'", str44, "JSC_OPTIMIZE_LOOP_ERROR");
        org.junit.Assert.assertNotNull(messageFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JSC_OPTIMIZE_LOOP_ERROR" + "'", str46, "JSC_OPTIMIZE_LOOP_ERROR");
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.WARNING + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.WARNING));
        org.junit.Assert.assertNotNull(diagnosticType53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(jSError57);
        org.junit.Assert.assertNotNull(jSError58);
        org.junit.Assert.assertNotNull(jSError59);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions0.setTracer(tracerMode3);
        compilerOptions0.setFoldConstants(true);
        boolean boolean7 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        java.lang.Object obj8 = compilerOptions0.clone();
        compilerOptions0.setSmartNameRemoval(true);
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.setLineLengthThreshold(4095);
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = compilerOptions0.errorFormat;
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.preferLineBreakAtEndOfFile = true;
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.enableRuntimeTypeCheck("hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.crossModuleMethodMotion = true;
        compilerOptions18.syntheticBlockEndMarker = "hi!";
        compilerOptions18.setCheckControlStructures(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy25 = com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED;
        compilerOptions18.variableRenaming = variableRenamingPolicy25;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions27.checkRequires;
        compilerOptions27.setAmbiguateProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode32 = null;
        compilerOptions31.setTracerMode(tracerMode32);
        boolean boolean34 = compilerOptions31.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel35 = compilerOptions31.sourceMapDetailLevel;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode36 = compilerOptions31.getLanguageOut();
        compilerOptions31.setFoldConstants(true);
        boolean boolean39 = compilerOptions31.generatePseudoNames;
        java.lang.String str40 = compilerOptions31.aliasStringsBlacklist;
        java.lang.String[] strArray47 = new java.lang.String[] { ":/hi!", "DiagnosticGroup<checkProvides>", "// Input %num%", "/experiment/:/hi!", "STRING PARAM_LIST", "InputId: *global*" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        compilerOptions31.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList48);
        compilerOptions27.setManageClosureDependencies((java.util.List<java.lang.String>) strList48);
        compilerOptions27.inlineLocalFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode55 = null;
        compilerOptions54.setTracerMode(tracerMode55);
        boolean boolean57 = compilerOptions54.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel58 = compilerOptions54.sourceMapDetailLevel;
        compilerOptions54.setColorizeErrorOutput(true);
        compilerOptions54.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy66 = compilerOptions63.propertyRenaming;
        compilerOptions54.propertyRenaming = propertyRenamingPolicy66;
        compilerOptions27.propertyRenaming = propertyRenamingPolicy66;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy25, propertyRenamingPolicy66);
        compilerOptions0.setRemoveClosureAsserts(false);
        org.junit.Assert.assertNotNull(errorFormat9);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy25 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED + "'", variableRenamingPolicy25.equals(com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED));
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(detailLevel35);
        org.junit.Assert.assertNull(languageMode36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(detailLevel58);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy66 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy66.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        boolean boolean16 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        boolean boolean17 = compilerOptions0.labelRenaming;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions18.checkRequires;
        compilerOptions0.setReportMissingOverride(checkLevel19);
        compilerOptions0.setGatherCssNames(true);
        compilerOptions0.setLineBreak(false);
        boolean boolean25 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setProcessObjectPropertyString(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.crossModuleMethodMotion = true;
        compilerOptions28.skipAllCompilerPasses();
        compilerOptions28.resetWarningsGuard();
        compilerOptions28.setInlineLocalVariables(false);
        compilerOptions28.setIdeMode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.crossModuleMethodMotion = true;
        compilerOptions37.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy42 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy46 = compilerOptions43.propertyRenaming;
        compilerOptions37.setRenamingPolicy(variableRenamingPolicy42, propertyRenamingPolicy46);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.crossModuleMethodMotion = true;
        compilerOptions48.skipAllCompilerPasses();
        boolean boolean52 = compilerOptions48.flowSensitiveInlineVariables;
        java.lang.String[] strArray62 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        compilerOptions48.stripTypes = strSet63;
        compilerOptions37.setStripNamePrefixes((java.util.Set<java.lang.String>) strSet63);
        compilerOptions28.setReplaceStringsReservedStrings((java.util.Set<java.lang.String>) strSet63);
        compilerOptions28.setDebugFunctionSideEffectsPath("/experiment/:/hi!");
        com.google.javascript.jscomp.CheckLevel checkLevel70 = compilerOptions28.aggressiveVarCheck;
        java.util.Set<java.lang.String> strSet71 = compilerOptions28.stripTypes;
        compilerOptions0.setStripTypePrefixes(strSet71);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy46 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy46.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + checkLevel70 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel70.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet71);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        com.google.javascript.jscomp.CompilerInput compilerInput9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput7, false);
        compilerInput9.clearAst();
        java.io.PrintStream printStream11 = null;
        com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler(printStream11);
        java.lang.String str13 = compiler12.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions14.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions14.setTracer(tracerMode20);
        compiler12.initOptions(compilerOptions14);
        boolean boolean23 = compiler12.hasErrors();
        double double24 = compiler12.getProgress();
        com.google.javascript.jscomp.SourceFile sourceFile27 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int29 = sourceFile27.getLineOfOffset((int) (short) 1);
        java.lang.String str30 = sourceFile27.getName();
        java.lang.String str31 = sourceFile27.getName();
        java.lang.String str32 = sourceFile27.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput(sourceFile27, true);
        com.google.javascript.jscomp.CompilerInput compilerInput35 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput34);
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int40 = sourceFile38.getLineOfOffset((int) (short) 1);
        int int42 = sourceFile38.getColumnOfOffset(8);
        compilerInput35.setSourceFile(sourceFile38);
        com.google.javascript.rhino.Node node44 = compiler12.parse(sourceFile38);
        compilerInput9.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler12);
        double double46 = compiler12.getProgress();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile48 = com.google.javascript.jscomp.JSSourceFile.fromFile("JSC_OPTIMIZE_LOOP_ERROR. Exceeded max number of code motion iterations: {0} at (unknown source) line (unknown line) : (unknown column)");
        com.google.javascript.rhino.Node node49 = compiler12.parse((com.google.javascript.jscomp.SourceFile) jSSourceFile48);
        compiler12.reportCodeChange();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + tracerMode20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode20.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(jSSourceFile48);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        compilerOptions0.setSkipAllPasses(false);
        compilerOptions0.setRewriteNewDateGoogNow(false);
        com.google.javascript.jscomp.MessageBundle messageBundle13 = compilerOptions0.messageBundle;
        compilerOptions0.setTransformAMDToCJSModules(true);
        compilerOptions0.setDefineToStringLiteral("InputId: STRING PARAM_LIST 49", "PARAM_LIST [var_args_name: 1] [opt_arg: 1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertNull(messageBundle13);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy3 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy3;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.syntheticBlockEndMarker = "OFF";
        java.lang.String str9 = compilerOptions0.renamePrefixNamespace;
        com.google.javascript.jscomp.CodingConvention codingConvention10 = null;
        compilerOptions0.setCodingConvention(codingConvention10);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup12 = com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup12;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup12;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup12;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.crossModuleMethodMotion = true;
        compilerOptions17.skipAllCompilerPasses();
        compilerOptions17.resetWarningsGuard();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        boolean boolean29 = node28.isIn();
        boolean boolean30 = node28.isVoid();
        node28.setOptionalArg(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode34 = null;
        compilerOptions33.setTracerMode(tracerMode34);
        boolean boolean36 = compilerOptions33.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel37 = compilerOptions33.sourceMapDetailLevel;
        compilerOptions33.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.crossModuleMethodMotion = true;
        compilerOptions40.optimizeParameters = true;
        compilerOptions40.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions40.checkGlobalNamesLevel;
        compilerOptions33.setReportMissingOverride(checkLevel48);
        com.google.javascript.jscomp.DiagnosticType diagnosticType50 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray51 = null;
        com.google.javascript.jscomp.JSError jSError52 = com.google.javascript.jscomp.JSError.make("", node28, checkLevel48, diagnosticType50, strArray51);
        compilerOptions17.checkUnreachableCode = checkLevel48;
        compilerOptions0.setWarningLevel(diagnosticGroup12, checkLevel48);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(diagnosticGroup12);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(detailLevel37);
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType50);
        org.junit.Assert.assertNotNull(jSError52);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        boolean boolean4 = compilerOptions0.checkSymbols;
        compilerOptions0.setRuntimeTypeCheck(true);
        compilerOptions0.setTransformAMDToCJSModules(true);
        compilerOptions0.setRemoveAbstractMethods(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        java.io.File file7 = new java.io.File(file2, "PARAM_LIST\n");
        java.io.File file8 = file7.getParentFile();
        boolean boolean9 = file8.createNewFile();
        java.io.File file10 = file8.getAbsoluteFile();
        long long11 = file8.lastModified();
        long long12 = file8.length();
        boolean boolean13 = file8.mkdir();
        java.lang.String str14 = file8.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), ":/hi!");
        org.junit.Assert.assertEquals(file7.toString(), ":/hi!/PARAM_LIST\n");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), ":");
        org.junit.Assert.assertEquals(file8.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment/:/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645456435000L + "'", long11 == 1645456435000L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4096L + "'", long12 == 4096L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + ":/hi!" + "'", str14, ":/hi!");
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        java.io.File file1 = new java.io.File(":");
        boolean boolean3 = file1.setLastModified((long) 3);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), ":");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/:" + "'", str5, "/experiment/:");
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap4 = compilerOptions0.getTweakReplacements();
        boolean boolean5 = strMap4.isEmpty();
        java.lang.Object obj6 = null;
        com.google.javascript.rhino.Node node7 = strMap4.get(obj6);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.Node>> strEntrySet8 = strMap4.entrySet();
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        compilerOptions9.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy14 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy18 = compilerOptions15.propertyRenaming;
        compilerOptions9.setRenamingPolicy(variableRenamingPolicy14, propertyRenamingPolicy18);
        boolean boolean20 = compilerOptions9.checkControlStructures;
        boolean boolean21 = compilerOptions9.crossModuleCodeMotion;
        compilerOptions9.setCheckMissingGetCssNameBlacklist(":/hi!");
        compilerOptions9.setDefineToStringLiteral("JSC_OPTIMIZE_LOOP_ERROR", "java.io.IOException: ");
        java.io.PrintStream printStream27 = null;
        com.google.javascript.jscomp.Compiler compiler28 = new com.google.javascript.jscomp.Compiler(printStream27);
        java.lang.String str29 = compiler28.getAstDotGraph();
        double double30 = compiler28.getProgress();
        com.google.javascript.jscomp.Scope scope31 = compiler28.getTopScope();
        boolean boolean32 = strMap4.remove((java.lang.Object) compilerOptions9, (java.lang.Object) compiler28);
        boolean boolean33 = compilerOptions9.crossModuleCodeMotion;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy18 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy18.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int6 = sourceFile4.getLineOfOffset((int) (short) 1);
        java.io.Reader reader7 = sourceFile4.getCodeReader();
        int int8 = reader7.read();
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromReader("*global*", reader7);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        java.io.File file14 = new java.io.File(":", "hi!");
        boolean boolean17 = file14.setExecutable(true, false);
        long long18 = file14.lastModified();
        boolean boolean19 = file14.mkdir();
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder0.buildFromFile(file14);
        com.google.javascript.jscomp.SourceFile.Builder builder22 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile26 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int28 = sourceFile26.getLineOfOffset((int) (short) 1);
        java.io.Reader reader29 = sourceFile26.getCodeReader();
        int int30 = reader29.read();
        com.google.javascript.jscomp.SourceFile sourceFile31 = builder22.buildFromReader("*global*", reader29);
        java.nio.charset.Charset charset32 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder33 = builder22.withCharset(charset32);
        java.io.File file36 = new java.io.File(":", "hi!");
        boolean boolean39 = file36.setExecutable(true, false);
        long long40 = file36.lastModified();
        boolean boolean41 = file36.mkdir();
        com.google.javascript.jscomp.SourceFile sourceFile42 = builder22.buildFromFile(file36);
        com.google.javascript.jscomp.SourceFile.Builder builder44 = builder22.withOriginalPath("java.io.IOException: OFF");
        com.google.javascript.jscomp.SourceFile sourceFile48 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int50 = sourceFile48.getLineOfOffset((int) (short) 1);
        int int52 = sourceFile48.getLineOfOffset(100);
        java.lang.String str53 = sourceFile48.getName();
        java.io.Reader reader54 = sourceFile48.getCodeReader();
        reader54.mark((int) ':');
        com.google.javascript.jscomp.SourceFile sourceFile57 = builder44.buildFromReader("PARAM_LIST", reader54);
        com.google.javascript.jscomp.SourceFile sourceFile58 = builder0.buildFromReader("/experiment/:", reader54);
        int int59 = reader54.read();
        boolean boolean60 = reader54.markSupported();
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(file14.getParent(), ":");
        org.junit.Assert.assertEquals(file14.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645456435000L + "'", long18 == 1645456435000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(sourceFile26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(reader29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(sourceFile31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals(file36.getParent(), ":");
        org.junit.Assert.assertEquals(file36.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645456435000L + "'", long40 == 1645456435000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(sourceFile42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(reader54);
        org.junit.Assert.assertNotNull(sourceFile57);
        org.junit.Assert.assertNotNull(sourceFile58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.labelRenaming = true;
        boolean boolean4 = compilerOptions0.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        compilerOptions5.skipAllCompilerPasses();
        boolean boolean9 = compilerOptions5.flowSensitiveInlineVariables;
        java.lang.String[] strArray19 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        compilerOptions5.stripTypes = strSet20;
        compilerOptions0.setStripNameSuffixes((java.util.Set<java.lang.String>) strSet20);
        boolean boolean25 = strSet20.contains((java.lang.Object) "java.io.IOException: ");
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream32 = jSTypeList29.parallelStream();
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compilerOptions33.setManageClosureDependencies(false);
        boolean boolean39 = compilerOptions33.inlineLocalFunctions;
        compilerOptions33.disableRuntimeTypeCheck();
        boolean boolean41 = jSTypeList29.equals((java.lang.Object) compilerOptions33);
        boolean boolean42 = strSet20.removeAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        int int43 = strSet20.size();
        int int44 = strSet20.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSTypeStream32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode6 = null;
        compilerOptions0.setLanguageOut(languageMode6);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy8 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy8;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkUnreachableCode;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode11 = compilerOptions0.getLanguageOut();
        boolean boolean12 = compilerOptions0.moveFunctionDeclarations;
        byte[] byteArray13 = null;
        compilerOptions0.inputPropertyMapSerialized = byteArray13;
        compilerOptions0.locale = ":/hi!";
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry26.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry26.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry37.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry37.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] { jSType46 };
        com.google.javascript.rhino.jstype.FunctionType functionType48 = jSTypeRegistry20.createConstructorTypeWithVarArgs(jSType35, jSTypeArray47);
        boolean boolean50 = jSTypeRegistry18.canPropertyBeDefined(jSType35, "");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable52 = jSTypeRegistry18.getEachReferenceTypeWithProperty("/");
        java.lang.String[] strArray57 = new java.lang.String[] { "Unversioned directory", "/experiment/:/hi!", ":", "OFF" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        jSTypeRegistry18.setTemplateTypeNames((java.util.List<java.lang.String>) strList58);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList58);
        boolean boolean62 = compilerOptions0.markNoSideEffectCalls;
        java.lang.String str63 = compilerOptions0.sourceMapOutputPath;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap66 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap66);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(languageMode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertNotNull(functionType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable52);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.inputDelimiter = "STRING PARAM_LIST 49";
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy10 = compilerOptions0.variableRenaming;
        compilerOptions0.setInlineProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy16 = compilerOptions13.propertyRenaming;
        java.lang.String[] strArray19 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        compilerOptions13.setStripTypes((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode24 = null;
        compilerOptions23.setTracerMode(tracerMode24);
        boolean boolean26 = compilerOptions23.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel27 = compilerOptions23.sourceMapDetailLevel;
        compilerOptions23.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.crossModuleMethodMotion = true;
        compilerOptions30.optimizeParameters = true;
        compilerOptions30.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions30.checkGlobalNamesLevel;
        compilerOptions23.setReportMissingOverride(checkLevel38);
        compilerOptions13.setCheckUnreachableCode(checkLevel38);
        compilerOptions13.syntheticBlockStartMarker = "*global*";
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions13.checkMissingReturn;
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel43);
        compilerOptions0.syntheticBlockStartMarker = "";
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy10 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy10.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy16 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy16.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(detailLevel27);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.error("PARAM_LIST [directives: []]\n", "/experiment/:/hi!/goog.exportSymbol6344102151034639300();");
        org.junit.Assert.assertNotNull(diagnosticType2);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int6 = sourceFile4.getLineOfOffset((int) (short) 1);
        java.io.Reader reader7 = sourceFile4.getCodeReader();
        int int8 = reader7.read();
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromReader("*global*", reader7);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        com.google.javascript.jscomp.SourceFile sourceFile13 = builder11.buildFromFile("/experiment/:/hi!");
        com.google.javascript.jscomp.SourceFile.Builder builder15 = builder11.withOriginalPath(":");
        com.google.javascript.jscomp.SourceFile sourceFile17 = builder15.buildFromFile("java.io.IOException: OFF");
        com.google.javascript.jscomp.SourceFile.Generator generator19 = null;
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder15.buildFromGenerator("OFF", generator19);
        com.google.javascript.jscomp.SourceFile sourceFile23 = builder15.buildFromCode("PARAM_LIST\n", "/experiment/:/hi!");
        java.nio.charset.Charset charset24 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder25 = builder15.withCharset(charset24);
        com.google.javascript.jscomp.SourceFile sourceFile27 = builder15.buildFromFile("InputId: *global*");
        java.io.InputStream inputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile30 = builder15.buildFromInputStream(":/hi!", inputStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(sourceFile17);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(sourceFile27);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        java.io.PrintStream printStream1 = new java.io.PrintStream("WARNING");
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.lineBreak = true;
        compilerOptions0.setLooseTypes(false);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler20 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation> aliasTransformationSourcePosition22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerOptions.AliasTransformation aliasTransformation23 = aliasTransformationHandler20.logAliasTransformation("// Input %num%", aliasTransformationSourcePosition22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(aliasTransformationHandler20);
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel3 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions0.setSourceMapDetailLevel(detailLevel3);
        boolean boolean5 = compilerOptions0.ideMode;
        boolean boolean6 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.devirtualizePrototypeMethods = false;
        java.lang.String str11 = compilerOptions0.aliasStringsBlacklist;
        org.junit.Assert.assertNotNull(detailLevel3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("FINEST");
        stats1.gzSize = 300;
        int int4 = stats1.gzDiff;
        stats1.gzDiff = 4095;
        int int7 = stats1.changes;
        int int8 = stats1.gzSize;
        stats1.runs = 2147483647;
        stats1.gzDiff = 49;
        java.lang.String str13 = stats1.pass;
        java.lang.String str14 = stats1.pass;
        stats1.gzSize = 31;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 300 + "'", int8 == 300);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FINEST" + "'", str13, "FINEST");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FINEST" + "'", str14, "FINEST");
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel5 = null;
        compilerOptions0.checkRequires = checkLevel5;
        boolean boolean7 = compilerOptions0.devirtualizePrototypeMethods;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        boolean boolean7 = file2.setWritable(false);
        boolean boolean8 = file2.canWrite();
        java.lang.String str9 = file2.getAbsolutePath();
        long long10 = file2.getUsableSpace();
        java.lang.String str11 = file2.getAbsolutePath();
        boolean boolean12 = file2.canRead();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/:/hi!" + "'", str9, "/experiment/:/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 280491585536L + "'", long10 == 280491585536L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/experiment/:/hi!" + "'", str11, "/experiment/:/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        compilerOptions0.setSkipAllPasses(false);
        com.google.javascript.jscomp.CompilerOptions.Reach reach11 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions0.setInlineFunctions(reach11);
        compilerOptions0.setIgnoreCajaProperties(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions0.checkMissingReturn;
        compilerOptions0.setGeneratePseudoNames(true);
        boolean boolean18 = compilerOptions0.removeTryCatchFinally;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + reach11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach11.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel2 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setExternExports(false);
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.reportMissingOverride;
        boolean boolean6 = compilerOptions0.checkTypes;
        compilerOptions0.setInlineLocalFunctions(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(detailLevel2);
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setRuntimeTypeCheckLogFunction("FINEST");
        compilerOptions0.setRemoveDeadCode(true);
        compilerOptions0.setCheckSuspiciousCode(false);
        boolean boolean9 = compilerOptions0.extractPrototypeMemberDeclarations;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = null;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nPARAM_LIST 0\n\n\nSubtree1: STRING \n\n\nSubtree2: PARAM_LIST 0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats(":/hi!");
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.checkTypes = false;
        boolean boolean18 = compilerOptions0.assumeStrictThis();
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions0.messageBundle = messageBundle21;
        boolean boolean23 = compilerOptions0.reserveRawExports;
        compilerOptions0.skipAllCompilerPasses();
        byte[] byteArray25 = compilerOptions0.inputPropertyMapSerialized;
        compilerOptions0.enableRuntimeTypeCheck("/experiment/:");
        boolean boolean28 = compilerOptions0.rewriteFunctionExpressions;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        boolean boolean11 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.setMarkAsCompiled(true);
        compilerOptions0.setNameReferenceReportPath("PARAM_LIST");
        boolean boolean16 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.checkMissingGetCssNameLevel;
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        com.google.javascript.jscomp.VariableMap variableMap68 = result67.variableMap;
        java.lang.String str69 = result67.idGeneratorMap;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNull(variableMap68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = null;
        compilerOptions18.setTracerMode(tracerMode19);
        boolean boolean21 = compilerOptions18.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = compilerOptions18.sourceMapDetailLevel;
        compilerOptions18.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet25 = compilerOptions18.stripNameSuffixes;
        com.google.javascript.jscomp.SourceFile sourceFile27 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceFile27, true);
        com.google.javascript.rhino.InputId inputId31 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput33 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput29, inputId31, true);
        java.lang.String str34 = compilerInput33.toString();
        boolean boolean35 = strSet25.contains((java.lang.Object) compilerInput33);
        compilerOptions0.stripTypes = strSet25;
        compilerOptions0.setMarkAsCompiled(true);
        java.util.Set<java.lang.String> strSet39 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.setPreferLineBreakAtEndOfFile(true);
        compilerOptions0.setCheckCaja(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.crossModuleMethodMotion = true;
        compilerOptions44.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy52 = compilerOptions49.propertyRenaming;
        java.lang.String[] strArray55 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        compilerOptions49.setStripTypes((java.util.Set<java.lang.String>) strSet56);
        compilerOptions44.stripNamePrefixes = strSet56;
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy63 = compilerOptions60.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap64 = compilerOptions60.getTweakReplacements();
        boolean boolean65 = strSet56.remove((java.lang.Object) compilerOptions60);
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel67 = compilerOptions66.checkRequires;
        compilerOptions66.setRewriteNewDateGoogNow(true);
        compilerOptions66.setSyntheticBlockStartMarker("OFF");
        compilerOptions66.skipAllCompilerPasses();
        compilerOptions66.jqueryPass = false;
        java.lang.String[] strArray80 = new java.lang.String[] { "PARAM_LIST\n", "/", "STRING PARAM_LIST 49", "hi!", "/" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        compilerOptions66.stripNameSuffixes = strSet81;
        com.google.javascript.rhino.ErrorReporter errorReporter84 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry85 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter84);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray86 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList87 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList87, jSTypeArray86);
        com.google.javascript.rhino.Node node89 = jSTypeRegistry85.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList87);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream90 = jSTypeList87.parallelStream();
        boolean boolean91 = strSet81.retainAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList87);
        boolean boolean92 = strSet56.retainAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList87);
        compilerOptions0.stripTypes = strSet56;
        java.util.Iterator<java.lang.String> strItor94 = strSet56.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(detailLevel22);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "*global*" + "'", str34, "*global*");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy52 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy52.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy63 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy63.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + checkLevel67 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel67.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(jSTypeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(jSTypeStream90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strItor94);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setProtectHiddenSideEffects(true);
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        boolean boolean6 = compilerOptions0.aliasAllStrings;
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        boolean boolean11 = compilerOptions0.flowSensitiveInlineVariables;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("OFF");
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile8 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile10 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile12 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput14 = new com.google.javascript.jscomp.CompilerInput(sourceFile12, true);
        com.google.javascript.rhino.InputId inputId16 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput18 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput14, inputId16, true);
        java.io.PrintStream printStream19 = null;
        com.google.javascript.jscomp.Compiler compiler20 = new com.google.javascript.jscomp.Compiler(printStream19);
        java.lang.String str21 = compiler20.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions22.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode28 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions22.setTracer(tracerMode28);
        compiler20.initOptions(compilerOptions22);
        compilerInput18.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler20);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode32 = compiler20.languageMode();
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode33 = compiler20.languageMode();
        com.google.javascript.rhino.Node node34 = jsAst6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler20);
        java.io.PrintStream printStream35 = null;
        com.google.javascript.jscomp.Compiler compiler36 = new com.google.javascript.jscomp.Compiler(printStream35);
        java.lang.String str37 = compiler36.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions38.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode44 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions38.setTracer(tracerMode44);
        compiler36.initOptions(compilerOptions38);
        boolean boolean47 = compiler36.hasErrors();
        double double48 = compiler36.getProgress();
        int int49 = compiler36.getErrorCount();
        boolean boolean50 = compiler36.isIdeMode();
        com.google.javascript.jscomp.Scope scope51 = compiler36.getTopScope();
        int int52 = compiler36.getErrorCount();
        com.google.javascript.rhino.Node node53 = jsAst6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler36);
        compiler36.reportCodeChange();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + tracerMode28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode28.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + languageMode32 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode32.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + languageMode33 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode33.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + tracerMode44 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode44.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(scope51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.inputDelimiter = "STRING PARAM_LIST 49";
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy10 = compilerOptions0.variableRenaming;
        com.google.javascript.rhino.InputId inputId12 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = null;
        compilerOptions13.setTracerMode(tracerMode14);
        boolean boolean16 = compilerOptions13.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel17 = compilerOptions13.sourceMapDetailLevel;
        compilerOptions13.setColorizeErrorOutput(true);
        compilerOptions13.generatePseudoNames = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy22 = com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED;
        compilerOptions13.setVariableRenaming(variableRenamingPolicy22);
        boolean boolean24 = inputId12.equals((java.lang.Object) variableRenamingPolicy22);
        compilerOptions0.variableRenaming = variableRenamingPolicy22;
        java.lang.String str26 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy27 = compilerOptions0.variableRenaming;
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy10 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy10.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(detailLevel17);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy22 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED + "'", variableRenamingPolicy22.equals(com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy27 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED + "'", variableRenamingPolicy27.equals(com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED));
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        node11.addChildrenToBack(node17);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        boolean boolean25 = node24.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, node11, node24, node31, node38, 0, 49);
        com.google.javascript.jscomp.CodingConvention.Bind bind42 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node4, node38);
        boolean boolean43 = node38.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.generatePseudoNames = true;
        com.google.javascript.jscomp.CodingConvention codingConvention9 = compilerOptions0.getCodingConvention();
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.inlineFunctions = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertNull(codingConvention9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap4 = compilerOptions0.getTweakReplacements();
        boolean boolean5 = strMap4.isEmpty();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap10 = compilerOptions6.getTweakReplacements();
        boolean boolean11 = strMap10.isEmpty();
        strMap10.clear();
        java.io.File file15 = new java.io.File(":", "hi!");
        boolean boolean18 = file15.setExecutable(true, false);
        java.io.File file20 = new java.io.File(file15, "PARAM_LIST\n");
        java.io.File file21 = file20.getParentFile();
        boolean boolean22 = strMap10.equals((java.lang.Object) file20);
        strMap4.putAll(strMap10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.crossModuleMethodMotion = true;
        compilerOptions24.optimizeParameters = true;
        compilerOptions24.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.crossModuleMethodMotion = true;
        compilerOptions32.skipAllCompilerPasses();
        compilerOptions32.resetWarningsGuard();
        compilerOptions32.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode40 = null;
        compilerOptions39.setTracerMode(tracerMode40);
        boolean boolean42 = compilerOptions39.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel43 = compilerOptions39.sourceMapDetailLevel;
        compilerOptions39.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet46 = compilerOptions39.stripNameSuffixes;
        compilerOptions32.setReplaceStringsReservedStrings(strSet46);
        boolean boolean48 = strSet46.isEmpty();
        compilerOptions24.stripNamePrefixes = strSet46;
        boolean boolean50 = strMap4.containsKey((java.lang.Object) compilerOptions24);
        boolean boolean51 = compilerOptions24.optimizeCalls;
        compilerOptions24.setExportTestFunctions(true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals(file15.getParent(), ":");
        org.junit.Assert.assertEquals(file15.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(file20.getParent(), ":/hi!");
        org.junit.Assert.assertEquals(file20.toString(), ":/hi!/PARAM_LIST\n");
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), ":");
        org.junit.Assert.assertEquals(file21.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(detailLevel43);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        jSTypeRegistry1.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry1.getTypesWithProperty("*global*");
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream20 = jSTypeList17.parallelStream();
        java.lang.Object[] objArray21 = jSTypeList17.toArray();
        com.google.javascript.rhino.Node node22 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry30.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry30.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry41.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] { jSType50 };
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry24.createConstructorTypeWithVarArgs(jSType39, jSTypeArray51);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable54 = jSTypeRegistry24.getTypesWithProperty("java.io.IOException: ");
        jSTypeRegistry24.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry57.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry57.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry57.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry24.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType67, "PARAM_LIST\n", "STRING PARAM_LIST 49: hi!", 0, (int) (byte) -1);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry1.createOptionalType((com.google.javascript.rhino.jstype.JSType) objectType67);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSTypeStream20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertNotNull(jSTypeIterable54);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNotNull(jSType73);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.lang.String[] strArray6 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerOptions0.setStripTypes((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode11 = null;
        compilerOptions10.setTracerMode(tracerMode11);
        boolean boolean13 = compilerOptions10.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel14 = compilerOptions10.sourceMapDetailLevel;
        compilerOptions10.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.crossModuleMethodMotion = true;
        compilerOptions17.optimizeParameters = true;
        compilerOptions17.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions17.checkGlobalNamesLevel;
        compilerOptions10.setReportMissingOverride(checkLevel25);
        compilerOptions0.setCheckUnreachableCode(checkLevel25);
        compilerOptions0.syntheticBlockStartMarker = "*global*";
        compilerOptions0.prettyPrint = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.crossModuleMethodMotion = true;
        compilerOptions32.optimizeParameters = true;
        compilerOptions32.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions32.checkGlobalNamesLevel;
        compilerOptions0.checkGlobalNamesLevel = checkLevel40;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CodingConvention codingConvention44 = compilerOptions0.getCodingConvention();
        compilerOptions0.aliasAllStrings = true;
        java.util.Set<java.lang.String> strSet47 = compilerOptions0.stripNameSuffixes;
        boolean boolean48 = compilerOptions0.disambiguateProperties;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(detailLevel14);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(codingConvention44);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setSyntheticBlockStartMarker("OFF");
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.setOutputCharset("DiagnosticGroup<checkProvides>");
        compilerOptions0.setPropertyAffinity(false);
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isVoid();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node5.siblings();
        com.google.javascript.rhino.Node node9 = node5.getFirstChild();
        com.google.javascript.rhino.Node node10 = node5.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node10.new FileLevelJsDocBuilder();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to com.google.javascript.rhino.Node$FileLevelJsDocBuilder with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        jSTypeRegistry1.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable13 = jSTypeRegistry1.getEachReferenceTypeWithProperty("*global*.  at *global* line (unknown line) : (unknown column)");
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        boolean boolean23 = jSTypeList18.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        jSTypeRegistry16.setLastGeneration(false);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry28.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        boolean boolean38 = jSTypeList33.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry31.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        jSTypeRegistry31.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry31.createNamedType("java.io.IOException: java.io.IOException: ", "", 47, (int) (short) 1);
        jSTypeRegistry31.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList56 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList56, jSTypeArray55);
        boolean boolean58 = jSTypeList53.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        jSTypeRegistry51.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable63 = jSTypeRegistry51.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry51.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry70.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream75 = jSTypeList72.parallelStream();
        com.google.javascript.rhino.Node node76 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry51.createUnionType(jSTypeArray77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = jSTypeRegistry31.createFunctionType(jSType48, false, jSTypeArray77);
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry16.createConstructorTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType29, jSTypeArray77);
        com.google.javascript.rhino.Node node81 = jSTypeRegistry1.createParameters(jSTypeArray77);
        com.google.javascript.rhino.ErrorReporter errorReporter82 = jSTypeRegistry1.getErrorReporter();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(objectTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSTypeIterable63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSTypeStream75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(functionType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(errorReporter82);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.inputDelimiter = "/experiment/:/hi!";
        compilerOptions0.locale = "hi!";
        compilerOptions0.devirtualizePrototypeMethods = true;
        boolean boolean10 = compilerOptions0.generatePseudoNames;
        boolean boolean11 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.reserveRawExports = false;
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy5, propertyRenamingPolicy9);
        boolean boolean11 = compilerOptions0.checkControlStructures;
        compilerOptions0.setProcessCommonJSModules(true);
        compilerOptions0.setRemoveUnusedVars(false);
        compilerOptions0.prettyPrint = true;
        compilerOptions0.setDebugFunctionSideEffectsPath("PARAM_LIST [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry13.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry24.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] { jSType33 };
        com.google.javascript.rhino.jstype.FunctionType functionType35 = jSTypeRegistry7.createConstructorTypeWithVarArgs(jSType22, jSTypeArray34);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry44.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry44.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry55.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry55.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] { jSType64 };
        com.google.javascript.rhino.jstype.FunctionType functionType66 = jSTypeRegistry38.createConstructorTypeWithVarArgs(jSType53, jSTypeArray65);
        boolean boolean67 = jSTypeRegistry7.declareType("", jSType53);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        boolean boolean74 = jSTypeList69.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator75 = jSTypeList69.spliterator();
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry1.createFunctionTypeWithVarArgs(jSType53, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray80 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList81 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81, jSTypeArray80);
        boolean boolean83 = jSTypeList78.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81);
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator84 = jSTypeList78.spliterator();
        com.google.javascript.rhino.Node node85 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        java.lang.String str90 = node89.getQualifiedName();
        com.google.javascript.rhino.Node node91 = node89.getLastChild();
        com.google.javascript.rhino.Node node92 = node89.getLastSibling();
        node85.addChildrenToFront(node92);
        boolean boolean94 = node92.isObjectLit();
        com.google.javascript.rhino.Node node95 = node92.detachFromParent();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertNotNull(functionType35);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeSpliterator75);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeSpliterator84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("FINEST");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.lineBreak = true;
        compilerOptions0.setCheckTypes(false);
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.optimizeReturns = true;
        compilerOptions0.resetWarningsGuard();
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        jSTypeRegistry1.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable13 = jSTypeRegistry1.getEachReferenceTypeWithProperty("*global*.  at *global* line (unknown line) : (unknown column)");
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        boolean boolean23 = jSTypeList18.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        jSTypeRegistry16.setLastGeneration(false);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry28.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        boolean boolean38 = jSTypeList33.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry31.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        jSTypeRegistry31.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry31.createNamedType("java.io.IOException: java.io.IOException: ", "", 47, (int) (short) 1);
        jSTypeRegistry31.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList56 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList56, jSTypeArray55);
        boolean boolean58 = jSTypeList53.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        jSTypeRegistry51.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable63 = jSTypeRegistry51.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry51.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry70.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream75 = jSTypeList72.parallelStream();
        com.google.javascript.rhino.Node node76 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry51.createUnionType(jSTypeArray77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = jSTypeRegistry31.createFunctionType(jSType48, false, jSTypeArray77);
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry16.createConstructorTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType29, jSTypeArray77);
        com.google.javascript.rhino.Node node81 = jSTypeRegistry1.createParameters(jSTypeArray77);
        jSTypeRegistry1.forwardDeclareType("PARAM_LIST 0");
        jSTypeRegistry1.resetForTypeCheck();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(objectTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSTypeIterable63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSTypeStream75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(functionType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = java.nio.charset.Charset.isSupported("/experiment/:");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: /experiment/:");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setOutputJsStringUsage(true);
        java.util.Set<java.lang.String> strSet4 = compilerOptions0.stripNamePrefixes;
        boolean boolean5 = compilerOptions0.moveFunctionDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        compilerOptions6.skipAllCompilerPasses();
        compilerOptions6.resetWarningsGuard();
        compilerOptions6.setInlineLocalVariables(false);
        compilerOptions6.setIdeMode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.crossModuleMethodMotion = true;
        compilerOptions15.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy20 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy24 = compilerOptions21.propertyRenaming;
        compilerOptions15.setRenamingPolicy(variableRenamingPolicy20, propertyRenamingPolicy24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.crossModuleMethodMotion = true;
        compilerOptions26.skipAllCompilerPasses();
        boolean boolean30 = compilerOptions26.flowSensitiveInlineVariables;
        java.lang.String[] strArray40 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        compilerOptions26.stripTypes = strSet41;
        compilerOptions15.setStripNamePrefixes((java.util.Set<java.lang.String>) strSet41);
        compilerOptions6.setReplaceStringsReservedStrings((java.util.Set<java.lang.String>) strSet41);
        boolean boolean47 = strSet41.add("STRING PARAM_LIST 49");
        compilerOptions0.aliasableStrings = strSet41;
        boolean boolean49 = compilerOptions0.printInputDelimiter;
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy24 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy24.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compiler1.isIdeMode();
        com.google.javascript.jscomp.JSError[] jSErrorArray58 = compiler1.getMessages();
        com.google.javascript.jscomp.SourceFile.Builder builder59 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile63 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int65 = sourceFile63.getLineOfOffset((int) (short) 1);
        java.io.Reader reader66 = sourceFile63.getCodeReader();
        int int67 = reader66.read();
        com.google.javascript.jscomp.SourceFile sourceFile68 = builder59.buildFromReader("*global*", reader66);
        java.io.File file71 = new java.io.File(":", "hi!");
        boolean boolean74 = file71.setExecutable(false, false);
        java.io.File file75 = file71.getParentFile();
        long long76 = file75.getUsableSpace();
        boolean boolean77 = file75.mkdirs();
        java.nio.charset.Charset charset78 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile79 = com.google.javascript.jscomp.JSSourceFile.fromFile(file75, charset78);
        boolean boolean80 = file75.canExecute();
        com.google.javascript.jscomp.SourceFile sourceFile81 = builder59.buildFromFile(file75);
        java.lang.String str82 = sourceFile81.getName();
        com.google.javascript.rhino.Node node83 = compiler1.parse(sourceFile81);
        com.google.javascript.jscomp.ErrorManager errorManager84 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray85 = errorManager84.getWarnings();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSErrorArray58);
        org.junit.Assert.assertNotNull(sourceFile63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(reader66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(sourceFile68);
        org.junit.Assert.assertEquals(file71.getParent(), ":");
        org.junit.Assert.assertEquals(file71.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertNull("file75.getParent() == null", file75.getParent());
        org.junit.Assert.assertEquals(file75.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 280489795584L + "'", long76 == 280489795584L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSSourceFile79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(sourceFile81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + ":" + "'", str82, ":");
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(errorManager84);
        org.junit.Assert.assertNotNull(jSErrorArray85);
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        com.google.javascript.jscomp.DependencyOptions dependencyOptions0 = new com.google.javascript.jscomp.DependencyOptions();
        com.google.javascript.jscomp.DependencyOptions dependencyOptions2 = dependencyOptions0.setDependencyPruning(false);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions4 = dependencyOptions2.setDependencyPruning(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = null;
        compilerOptions5.setTracerMode(tracerMode6);
        compilerOptions5.setGeneratePseudoNames(false);
        compilerOptions5.setDefineToNumberLiteral("PARAM_LIST\n", (int) '/');
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str14 = compilerOptions13.syntheticBlockStartMarker;
        compilerOptions13.labelRenaming = true;
        boolean boolean17 = compilerOptions13.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.crossModuleMethodMotion = true;
        compilerOptions18.skipAllCompilerPasses();
        boolean boolean22 = compilerOptions18.flowSensitiveInlineVariables;
        java.lang.String[] strArray32 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        compilerOptions18.stripTypes = strSet33;
        compilerOptions13.setStripNameSuffixes((java.util.Set<java.lang.String>) strSet33);
        boolean boolean38 = strSet33.contains((java.lang.Object) "java.io.IOException: ");
        compilerOptions5.aliasableStrings = strSet33;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions40 = dependencyOptions2.setEntryPoints((java.util.Collection<java.lang.String>) strSet33);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions42 = dependencyOptions2.setDependencyPruning(false);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions44 = dependencyOptions42.setDependencyPruning(false);
        org.junit.Assert.assertNotNull(dependencyOptions2);
        org.junit.Assert.assertNotNull(dependencyOptions4);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dependencyOptions40);
        org.junit.Assert.assertNotNull(dependencyOptions42);
        org.junit.Assert.assertNotNull(dependencyOptions44);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel3 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions0.setSourceMapDetailLevel(detailLevel3);
        compilerOptions0.inlineFunctions = true;
        compilerOptions0.setCommonJSModulePathPrefix(":");
        compilerOptions0.setCrossModuleCodeMotion(true);
        boolean boolean11 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setInlineVariables(false);
        org.junit.Assert.assertNotNull(detailLevel3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        boolean boolean2 = compilerOptions0.removeUnusedVars;
        compilerOptions0.markAsCompiled = true;
        compilerOptions0.setReplaceStringsPlaceholderToken("java.io.IOException: ");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions7.setRuntimeTypeCheckLogFunction("FINEST");
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions12.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode15 = null;
        compilerOptions14.setTracerMode(tracerMode15);
        boolean boolean17 = compilerOptions14.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel18 = compilerOptions14.sourceMapDetailLevel;
        compilerOptions14.setColorizeErrorOutput(true);
        compilerOptions14.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy26 = compilerOptions23.propertyRenaming;
        compilerOptions14.propertyRenaming = propertyRenamingPolicy26;
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions14.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions14.checkRequires;
        compilerOptions12.setCheckRequires(checkLevel29);
        compilerOptions7.setCheckUnreachableCode(checkLevel29);
        compilerOptions0.setCheckMissingReturn(checkLevel29);
        compilerOptions0.setExternExports(true);
        compilerOptions0.setNameReferenceReportPath("WARNING: hi!");
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(detailLevel18);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy26 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy26.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode6 = null;
        compilerOptions0.setLanguageOut(languageMode6);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy8 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy8;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkUnreachableCode;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode11 = compilerOptions0.getLanguageOut();
        boolean boolean12 = compilerOptions0.moveFunctionDeclarations;
        byte[] byteArray13 = null;
        compilerOptions0.inputPropertyMapSerialized = byteArray13;
        compilerOptions0.gatherCssNames = true;
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(languageMode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst6, "*global*", false);
        java.io.PrintStream printStream11 = null;
        com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler(printStream11);
        java.lang.String str13 = compiler12.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions14.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions14.setTracer(tracerMode20);
        compiler12.initOptions(compilerOptions14);
        boolean boolean23 = compiler12.hasErrors();
        double double24 = compiler12.getProgress();
        int int25 = compiler12.getErrorCount();
        compilerInput10.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = compiler12.getSourceLine("PARAM_LIST [synthetic: 1]\n", 800);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + tracerMode20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode20.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER -1.0");
        java.lang.String str3 = sourceFile1.getLine(800);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        jSTypeRegistry1.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry1.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry1.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        boolean boolean27 = jSTypeList22.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry20.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        jSTypeRegistry20.forwardDeclareType("PARAM_LIST");
        jSTypeRegistry20.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry20.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType32);
        jSTypeRegistry1.setLastGeneration(true);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        boolean boolean44 = jSTypeList39.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry37.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable47 = jSTypeRegistry37.getTypesWithProperty(":");
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        jSTypeRegistry49.clearNamedTypes();
        jSTypeRegistry49.forwardDeclareType("STRING PARAM_LIST 49");
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry37.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType53);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("/experiment/:");
        boolean boolean57 = node56.isLocalResultCall();
        boolean boolean58 = node56.isRegExp();
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType53, node56);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        jSTypeRegistry61.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] { jSType63 };
        com.google.javascript.rhino.Node node65 = jSTypeRegistry61.createParameters(jSTypeArray64);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry1.createUnionType(jSTypeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeIterable47);
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.Node node37 = node6.getNext();
        boolean boolean38 = node6.isLabel();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SymbolTable symbolTable12 = compiler1.buildKnownSymbolTable();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: INTERNAL COMPILER ERROR.?Please report this problem.?null");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        boolean boolean75 = node56.isExprResult();
        int int76 = node56.getLength();
        boolean boolean77 = node56.isOptionalArg();
        com.google.javascript.rhino.Node node78 = node56.getNext();
        node78.setOptionalArg(true);
        boolean boolean81 = node78.isCase();
        boolean boolean82 = node78.isLabel();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.ErrorManager errorManager12 = compiler1.getErrorManager();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter13 = compiler1.getReverseAbstractInterpreter();
        com.google.javascript.jscomp.ErrorManager errorManager14 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray15 = compiler1.getWarnings();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(errorManager12);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter13);
        org.junit.Assert.assertNotNull(errorManager14);
        org.junit.Assert.assertNotNull(jSErrorArray15);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        java.lang.String str5 = compilerOptions0.aliasStringsBlacklist;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy6 = com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy7 = null;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy6, propertyRenamingPolicy7);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setGatherCssNames(true);
        boolean boolean13 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.optimizeParameters = true;
        compilerOptions14.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions14.checkGlobalNamesLevel;
        compilerOptions14.setCheckMissingGetCssNameBlacklist("");
        compilerOptions14.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions27.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode33 = null;
        compilerOptions27.setLanguageOut(languageMode33);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy35 = null;
        compilerOptions27.variableRenaming = variableRenamingPolicy35;
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions27.checkUnreachableCode;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode38 = compilerOptions27.getLanguageOut();
        boolean boolean39 = compilerOptions27.moveFunctionDeclarations;
        byte[] byteArray40 = null;
        compilerOptions27.inputPropertyMapSerialized = byteArray40;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions42 = new com.google.javascript.jscomp.DependencyOptions();
        com.google.javascript.jscomp.DependencyOptions dependencyOptions44 = dependencyOptions42.setDependencyPruning(false);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions46 = dependencyOptions44.setMoocherDropping(false);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions48 = dependencyOptions46.setDependencySorting(false);
        compilerOptions27.setDependencyOptions(dependencyOptions48);
        compilerOptions14.setDependencyOptions(dependencyOptions48);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions52 = dependencyOptions48.setDependencySorting(false);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions54 = dependencyOptions48.setDependencyPruning(false);
        compilerOptions0.setDependencyOptions(dependencyOptions54);
        compilerOptions0.setNameAnonymousFunctionsOnly(true);
        boolean boolean58 = compilerOptions0.gatherCssNames;
        boolean boolean59 = compilerOptions0.inlineGetters;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy6 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL + "'", variableRenamingPolicy6.equals(com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(languageMode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dependencyOptions44);
        org.junit.Assert.assertNotNull(dependencyOptions46);
        org.junit.Assert.assertNotNull(dependencyOptions48);
        org.junit.Assert.assertNotNull(dependencyOptions52);
        org.junit.Assert.assertNotNull(dependencyOptions54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy5, propertyRenamingPolicy9);
        boolean boolean11 = compilerOptions0.checkControlStructures;
        compilerOptions0.syntheticBlockEndMarker = "FINEST";
        compilerOptions0.inlineGetters = true;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        java.lang.String str18 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setSkipAllPasses(true);
        compilerOptions0.setDeadAssignmentElimination(true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        java.util.logging.Level level0 = java.util.logging.Level.FINEST;
        java.lang.String str1 = level0.getResourceBundleName();
        com.google.javascript.jscomp.Compiler.setLoggingLevel(level0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode9 = null;
        compilerOptions3.setLanguageOut(languageMode9);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = null;
        compilerOptions3.variableRenaming = variableRenamingPolicy11;
        boolean boolean13 = compilerOptions3.inlineGetters;
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        compilerOptions3.setInlineGetters(true);
        compilerOptions3.setRemoveAbstractMethods(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap20 = compilerOptions3.cssRenamingMap;
        com.google.javascript.jscomp.JSModule jSModule22 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler();
        jSModule22.sortInputsByDeps(compiler23);
        com.google.javascript.rhino.Node node25 = compiler23.getRoot();
        java.io.PrintStream printStream26 = null;
        com.google.javascript.jscomp.Compiler compiler27 = new com.google.javascript.jscomp.Compiler(printStream26);
        java.lang.String str28 = compiler27.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions29.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode35 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions29.setTracer(tracerMode35);
        compiler27.initOptions(compilerOptions29);
        com.google.javascript.jscomp.SourceFile sourceFile40 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int42 = sourceFile40.getLineOfOffset((int) (short) 1);
        java.lang.String str43 = sourceFile40.getName();
        java.lang.String str44 = sourceFile40.getName();
        java.lang.String str45 = sourceFile40.getName();
        com.google.javascript.jscomp.SourceFile sourceFile48 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int50 = sourceFile48.getLineOfOffset((int) (short) 1);
        java.lang.String str51 = sourceFile48.getName();
        com.google.javascript.jscomp.JsAst jsAst52 = new com.google.javascript.jscomp.JsAst(sourceFile48);
        jsAst52.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput56 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst52, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile59 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int61 = sourceFile59.getLineOfOffset((int) (short) 1);
        java.lang.String str62 = sourceFile59.getName();
        java.lang.String str63 = sourceFile59.getName();
        java.lang.String str64 = sourceFile59.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput66 = new com.google.javascript.jscomp.CompilerInput(sourceFile59, true);
        com.google.javascript.jscomp.CompilerInput compilerInput67 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput66);
        com.google.javascript.jscomp.SourceFile sourceFile70 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int72 = sourceFile70.getLineOfOffset((int) (short) 1);
        int int74 = sourceFile70.getColumnOfOffset(8);
        compilerInput67.setSourceFile(sourceFile70);
        jsAst52.setSourceFile(sourceFile70);
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.crossModuleMethodMotion = true;
        compilerOptions77.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result82 = compiler27.compile(sourceFile40, sourceFile70, compilerOptions77);
        com.google.javascript.jscomp.ErrorManager errorManager83 = compiler27.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray84 = errorManager83.getErrors();
        compiler23.setErrorManager(errorManager83);
        compilerOptions3.setErrorHandler((com.google.javascript.jscomp.ErrorHandler) errorManager83);
        boolean boolean87 = level0.equals((java.lang.Object) errorManager83);
        java.lang.String str88 = level0.getResourceBundleName();
        org.junit.Assert.assertNotNull(level0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "sun.util.logging.resources.logging" + "'", str1, "sun.util.logging.resources.logging");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(cssRenamingMap20);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + tracerMode35 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode35.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(sourceFile59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(sourceFile70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
        org.junit.Assert.assertNotNull(result82);
        org.junit.Assert.assertNotNull(errorManager83);
        org.junit.Assert.assertNotNull(jSErrorArray84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "sun.util.logging.resources.logging" + "'", str88, "sun.util.logging.resources.logging");
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode5 = compilerOptions0.getLanguageOut();
        compilerOptions0.setFoldConstants(true);
        boolean boolean8 = compilerOptions0.generatePseudoNames;
        java.lang.String str9 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.deadAssignmentElimination = true;
        com.google.javascript.jscomp.Compiler compiler16 = new com.google.javascript.jscomp.Compiler();
        compiler16.disableThreads();
        com.google.javascript.jscomp.SourceMap sourceMap18 = compiler16.getSourceMap();
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = null;
        compilerOptions19.setTracerMode(tracerMode20);
        boolean boolean22 = compilerOptions19.coalesceVariableNames;
        boolean boolean23 = compilerOptions19.removeUnusedVars;
        compiler16.initOptions(compilerOptions19);
        com.google.javascript.jscomp.CodingConvention codingConvention25 = compiler16.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection26 = codingConvention25.getAssertionFunctions();
        java.lang.String str27 = codingConvention25.getExportSymbolFunction();
        compilerOptions0.setCodingConvention(codingConvention25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertNull(languageMode5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(sourceMap18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(codingConvention25);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.exportSymbol" + "'", str27, "goog.exportSymbol");
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Object[] objArray6 = jSTypeList3.toArray();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions7.checkRequires;
        compilerOptions7.setRewriteNewDateGoogNow(true);
        compilerOptions7.setSyntheticBlockStartMarker("OFF");
        compilerOptions7.skipAllCompilerPasses();
        compilerOptions7.setUnaliasableGlobals("FINEST");
        compilerOptions7.setAliasKeywords(true);
        compilerOptions7.setOptimizeCalls(true);
        boolean boolean20 = jSTypeList3.contains((java.lang.Object) compilerOptions7);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry23.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry23.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry40.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry40.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry51.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry51.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry34.createConstructorTypeWithVarArgs(jSType49, jSTypeArray61);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        boolean boolean71 = jSTypeList66.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.Node node72 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        jSTypeRegistry64.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable76 = jSTypeRegistry64.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry64.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray85 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList86 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList86, jSTypeArray85);
        boolean boolean88 = jSTypeList83.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList86);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray89 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList90 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList90, jSTypeArray89);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray92 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList93 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList93, jSTypeArray92);
        boolean boolean95 = jSTypeList90.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        boolean boolean96 = jSTypeList83.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        com.google.javascript.rhino.jstype.JSType jSType97 = jSTypeRegistry23.createFunctionType((com.google.javascript.rhino.jstype.ObjectType) functionType62, jSType81, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType98 = jSTypeList3.set((int) (short) 10, jSType97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSTypeIterable76);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSTypeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSTypeArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(jSTypeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(jSType97);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry7.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry18.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry18.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] { jSType27 };
        com.google.javascript.rhino.jstype.FunctionType functionType29 = jSTypeRegistry1.createConstructorTypeWithVarArgs(jSType16, jSTypeArray28);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry32.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry38.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry49.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry49.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] { jSType58 };
        com.google.javascript.rhino.jstype.FunctionType functionType60 = jSTypeRegistry32.createConstructorTypeWithVarArgs(jSType47, jSTypeArray59);
        boolean boolean61 = jSTypeRegistry1.declareType("", jSType47);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        jSTypeRegistry63.clearNamedTypes();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry63.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType65);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry1.createNamedType("goog.exportProperty", "Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nPARAM_LIST\n    PARAM_LIST\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: PARAM_LIST\n    PARAM_LIST\n", 51, (-10));
        boolean boolean73 = jSTypeRegistry1.isForwardDeclaredType("JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of optimization iterations: {0}");
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertNotNull(functionType29);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertNotNull(functionType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Map<java.lang.String, java.lang.Object> strMap1 = null;
        compilerOptions0.setTweakReplacements(strMap1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        compilerOptions0.setInlineProperties(false);
        boolean boolean6 = compilerOptions0.exportTestFunctions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        compiler0.disableThreads();
        compiler0.disableThreads();
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler0.getErrorManager();
        com.google.javascript.jscomp.WarningsGuard[] warningsGuardArray4 = new com.google.javascript.jscomp.WarningsGuard[] {};
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard5 = new com.google.javascript.jscomp.ComposeWarningsGuard(warningsGuardArray4);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        com.google.javascript.jscomp.DiagnosticType diagnosticType9 = com.google.javascript.jscomp.DiagnosticType.make("*global*", checkLevel7, "");
        java.lang.String[] strArray14 = new java.lang.String[] { ":", "STRING PARAM_LIST 49", "hi!", "OFF" };
        com.google.javascript.jscomp.JSError jSError15 = com.google.javascript.jscomp.JSError.make(diagnosticType9, strArray14);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = composeWarningsGuard5.level(jSError15);
        int int17 = jSError15.getLineNumber();
        com.google.javascript.jscomp.CheckLevel checkLevel18 = jSError15.getDefaultLevel();
        com.google.javascript.jscomp.CheckLevel checkLevel19 = jSError15.getDefaultLevel();
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode21 = null;
        compilerOptions20.setTracerMode(tracerMode21);
        boolean boolean23 = compilerOptions20.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel24 = compilerOptions20.sourceMapDetailLevel;
        compilerOptions20.setColorizeErrorOutput(true);
        compilerOptions20.generatePseudoNames = true;
        compilerOptions20.setCheckControlStructures(false);
        compilerOptions20.setCollapseAnonymousFunctions(false);
        boolean boolean33 = jSError15.equals((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            compiler0.report(jSError15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertNotNull(warningsGuardArray4);
        org.junit.Assert.assertNotNull(diagnosticType9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(jSError15);
        org.junit.Assert.assertNull(checkLevel16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(checkLevel18);
        org.junit.Assert.assertNull(checkLevel19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(detailLevel24);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        node33.putIntProp((int) '/', 0);
        java.lang.Object obj41 = node33.getProp(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node33.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator43 = nodeIterable42.spliterator();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(nodeSpliterator43);
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        java.io.File file1 = new java.io.File(":");
        java.io.File file3 = new java.io.File(file1, "FINEST");
        boolean boolean4 = file1.setReadOnly();
        java.io.File file7 = new java.io.File(":", "hi!");
        boolean boolean10 = file7.setExecutable(true, false);
        boolean boolean11 = file1.renameTo(file7);
        java.io.File file12 = file1.getAbsoluteFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), ":");
        org.junit.Assert.assertEquals(file3.getParent(), ":");
        org.junit.Assert.assertEquals(file3.toString(), ":/FINEST");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals(file7.getParent(), ":");
        org.junit.Assert.assertEquals(file7.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(file12);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/experiment/:");
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setDefineToNumberLiteral("InputId: *global*", 54);
        compilerOptions0.generateExports = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        compilerOptions9.skipAllCompilerPasses();
        compilerOptions9.resetWarningsGuard();
        compilerOptions9.setInlineLocalVariables(false);
        compilerOptions9.setIdeMode(false);
        compilerOptions9.setDefineToBooleanLiteral("", true);
        boolean boolean21 = compilerOptions9.recordFunctionInformation;
        compilerOptions9.setRenamePrefix(":");
        java.util.Set<java.lang.String> strSet24 = compilerOptions9.stripTypePrefixes;
        compilerOptions0.setStripTypePrefixes(strSet24);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.setLineLengthThreshold(4095);
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = compilerOptions0.errorFormat;
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.skipAllCompilerPasses();
        java.util.Set<java.lang.String> strSet13 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.checkTypes = false;
        compilerOptions0.setRewriteFunctionExpressions(false);
        org.junit.Assert.assertNotNull(errorFormat9);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        boolean boolean11 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.setMarkAsCompiled(true);
        compilerOptions0.checkSymbols = true;
        compilerOptions0.syntheticBlockStartMarker = "/experiment/:/hi!";
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.lang.String str53 = sourceFile50.getName();
        java.lang.String str54 = sourceFile50.getName();
        com.google.javascript.jscomp.SourceFile sourceFile57 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int59 = sourceFile57.getLineOfOffset((int) (short) 1);
        int int61 = sourceFile57.getLineOfOffset(100);
        java.lang.String str62 = sourceFile57.getName();
        java.io.Reader reader63 = sourceFile57.getCodeReader();
        int int65 = sourceFile57.getLineOfOffset(51);
        boolean boolean66 = sourceFile57.isExtern();
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Map<java.lang.String, java.lang.Object> strMap68 = null;
        compilerOptions67.setTweakReplacements(strMap68);
        compilerOptions67.moveFunctionDeclarations = false;
        com.google.javascript.jscomp.Result result72 = compiler9.compile(sourceFile50, sourceFile57, compilerOptions67);
        com.google.javascript.jscomp.SourceMap sourceMap73 = result72.sourceMap;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(sourceFile57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(reader63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(result72);
        org.junit.Assert.assertNull(sourceMap73);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        java.io.File file2 = java.io.File.createTempFile("OFF", "PARAM_LIST\n    PARAM_LIST\n");
        long long3 = file2.length();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/OFF8315814507961283704PARAM_LIST\n    PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler();
        jSModule1.sortInputsByDeps(compiler2);
        com.google.javascript.jscomp.SourceFile.Builder builder4 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile8 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int10 = sourceFile8.getLineOfOffset((int) (short) 1);
        java.io.Reader reader11 = sourceFile8.getCodeReader();
        int int12 = reader11.read();
        com.google.javascript.jscomp.SourceFile sourceFile13 = builder4.buildFromReader("*global*", reader11);
        jSModule1.add(sourceFile13);
        com.google.javascript.jscomp.JSModule jSModule16 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler17 = new com.google.javascript.jscomp.Compiler();
        jSModule16.sortInputsByDeps(compiler17);
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile23 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int25 = sourceFile23.getLineOfOffset((int) (short) 1);
        java.io.Reader reader26 = sourceFile23.getCodeReader();
        int int27 = reader26.read();
        com.google.javascript.jscomp.SourceFile sourceFile28 = builder19.buildFromReader("*global*", reader26);
        jSModule16.add(sourceFile28);
        boolean boolean31 = jSModule16.removeByName("PARAM_LIST");
        jSModule1.addDependency(jSModule16);
        com.google.javascript.jscomp.JSModule jSModule34 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        jSModule34.removeAll();
        com.google.javascript.jscomp.SourceFile sourceFile39 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int41 = sourceFile39.getLineOfOffset((int) (short) 1);
        int int43 = sourceFile39.getLineOfOffset(100);
        java.lang.String str44 = sourceFile39.getName();
        java.io.Reader reader45 = sourceFile39.getCodeReader();
        reader45.reset();
        com.google.javascript.jscomp.SourceFile sourceFile47 = com.google.javascript.jscomp.SourceFile.fromReader("PARAM_LIST", reader45);
        java.lang.String str48 = sourceFile47.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput49 = new com.google.javascript.jscomp.CompilerInput(sourceFile47);
        jSModule34.add(compilerInput49);
        jSModule1.remove(compilerInput49);
        java.lang.String str52 = jSModule1.getName();
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(reader11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(reader26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(sourceFile28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(sourceFile39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(reader45);
        org.junit.Assert.assertNotNull(sourceFile47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PARAM_LIST" + "'", str48, "PARAM_LIST");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "STRING PARAM_LIST 49" + "'", str52, "STRING PARAM_LIST 49");
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, ":/hi!");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("java.io.IOException: ", 43, (int) '#');
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean12 = node11.isTry();
        java.lang.String str13 = node11.toString();
        boolean boolean14 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node15 = node7.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node7.getAncestors();
        com.google.javascript.rhino.Node node17 = node2.useSourceInfoFrom(node7);
        node2.setString("");
        java.lang.Appendable appendable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING PARAM_LIST 49" + "'", str13, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("");
        int int2 = stats1.diff;
        int int3 = stats1.diff;
        int int4 = stats1.gzDiff;
        long long5 = stats1.runtime;
        int int6 = stats1.gzSize;
        int int7 = stats1.runs;
        stats1.runtime = 1645456148000L;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean3 = file2.createNewFile();
        java.lang.String str4 = file2.getPath();
        boolean boolean7 = file2.setWritable(true, false);
        boolean boolean8 = file2.createNewFile();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":/hi!" + "'", str4, ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        java.io.PrintStream printStream1 = new java.io.PrintStream("JSC_OPTIMIZE_LOOP_ERROR");
        printStream1.println(800);
        printStream1.println(0.0d);
        printStream1.print((double) 299089289216L);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripNameSuffixes;
        boolean boolean4 = compilerOptions0.collapseAnonymousFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = null;
        compilerOptions5.setTracerMode(tracerMode6);
        boolean boolean8 = compilerOptions5.generatePseudoNames;
        java.util.Set<java.lang.String> strSet9 = compilerOptions5.stripTypes;
        boolean boolean10 = compilerOptions5.preferLineBreakAtEndOfFile;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions11 = new com.google.javascript.jscomp.DependencyOptions();
        compilerOptions5.setDependencyOptions(dependencyOptions11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.crossModuleMethodMotion = true;
        compilerOptions13.skipAllCompilerPasses();
        compilerOptions13.resetWarningsGuard();
        compilerOptions13.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode21 = null;
        compilerOptions20.setTracerMode(tracerMode21);
        boolean boolean23 = compilerOptions20.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel24 = compilerOptions20.sourceMapDetailLevel;
        compilerOptions20.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet27 = compilerOptions20.stripNameSuffixes;
        compilerOptions13.setReplaceStringsReservedStrings(strSet27);
        boolean boolean29 = strSet27.isEmpty();
        com.google.javascript.jscomp.DependencyOptions dependencyOptions30 = dependencyOptions11.setEntryPoints((java.util.Collection<java.lang.String>) strSet27);
        compilerOptions0.setDependencyOptions(dependencyOptions30);
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode33 = null;
        compilerOptions32.setTracerMode(tracerMode33);
        boolean boolean35 = compilerOptions32.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel36 = compilerOptions32.sourceMapDetailLevel;
        compilerOptions32.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.crossModuleMethodMotion = true;
        compilerOptions39.optimizeParameters = true;
        compilerOptions39.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions39.checkGlobalNamesLevel;
        compilerOptions32.setReportMissingOverride(checkLevel47);
        java.util.Set<java.lang.String> strSet49 = compilerOptions32.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions50.checkRequires;
        compilerOptions32.setReportMissingOverride(checkLevel51);
        compilerOptions32.setGatherCssNames(true);
        compilerOptions32.setLineBreak(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode58 = null;
        compilerOptions57.setTracerMode(tracerMode58);
        boolean boolean60 = compilerOptions57.coalesceVariableNames;
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode64 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions61.setTracer(tracerMode64);
        compilerOptions61.setFoldConstants(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode69 = null;
        compilerOptions68.setTracerMode(tracerMode69);
        boolean boolean71 = compilerOptions68.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel72 = compilerOptions68.sourceMapDetailLevel;
        compilerOptions68.setColorizeErrorOutput(true);
        compilerOptions68.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy80 = compilerOptions77.propertyRenaming;
        compilerOptions68.propertyRenaming = propertyRenamingPolicy80;
        com.google.javascript.jscomp.CheckLevel checkLevel82 = compilerOptions68.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel83 = compilerOptions68.checkRequires;
        compilerOptions61.reportMissingOverride = checkLevel83;
        compilerOptions57.setAggressiveVarCheck(checkLevel83);
        com.google.javascript.jscomp.CompilerOptions compilerOptions86 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode87 = null;
        compilerOptions86.setTracerMode(tracerMode87);
        boolean boolean89 = compilerOptions86.generatePseudoNames;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray90 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList91 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList91, locationMappingArray90);
        compilerOptions86.sourceMapLocationMappings = locationMappingList91;
        compilerOptions57.sourceMapLocationMappings = locationMappingList91;
        compilerOptions32.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList91);
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList91);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(detailLevel24);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dependencyOptions30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(detailLevel36);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + tracerMode64 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode64.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(detailLevel72);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy80 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy80.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel82 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel82.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel83 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel83.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(locationMappingArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        compilerOptions0.aliasKeywords = false;
        compilerOptions0.removeUnusedLocalVars = true;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray58 = errorManager57.getErrors();
        com.google.javascript.jscomp.Compiler compiler59 = new com.google.javascript.jscomp.Compiler(errorManager57);
        com.google.javascript.jscomp.Compiler compiler60 = new com.google.javascript.jscomp.Compiler(errorManager57);
        com.google.javascript.jscomp.JSError[] jSErrorArray61 = errorManager57.getErrors();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertNotNull(jSErrorArray58);
        org.junit.Assert.assertNotNull(jSErrorArray61);
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        compilerOptions0.moveFunctionDeclarations = true;
        compilerOptions0.setInlineLocalFunctions(false);
        boolean boolean7 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compilerOptions0.getCodingConvention();
        boolean boolean9 = compilerOptions0.generatePseudoNames;
        compilerOptions0.setGroupVariableDeclarations(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(codingConvention8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = jSModule1.getByName("FINEST");
        com.google.javascript.jscomp.SourceFile sourceFile6 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int8 = sourceFile6.getLineOfOffset((int) (short) 1);
        java.lang.String str9 = sourceFile6.getName();
        java.lang.String str10 = sourceFile6.getName();
        java.lang.String str11 = sourceFile6.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput13 = new com.google.javascript.jscomp.CompilerInput(sourceFile6, true);
        com.google.javascript.jscomp.CompilerInput compilerInput14 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput13);
        com.google.javascript.jscomp.JSModule jSModule15 = compilerInput13.getModule();
        com.google.javascript.jscomp.JSModule jSModule17 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler18 = new com.google.javascript.jscomp.Compiler();
        jSModule17.sortInputsByDeps(compiler18);
        java.lang.String str20 = jSModule17.getName();
        compilerInput13.setModule(jSModule17);
        jSModule1.addDependency(jSModule17);
        jSModule1.clearAsts();
        com.google.javascript.jscomp.SourceFile sourceFile26 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int28 = sourceFile26.getLineOfOffset((int) (short) 1);
        int int30 = sourceFile26.getLineOfOffset(100);
        java.lang.String str31 = sourceFile26.getName();
        jSModule1.add(sourceFile26);
        com.google.javascript.jscomp.SourceFile.Builder builder33 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile37 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int39 = sourceFile37.getLineOfOffset((int) (short) 1);
        java.io.Reader reader40 = sourceFile37.getCodeReader();
        int int41 = reader40.read();
        com.google.javascript.jscomp.SourceFile sourceFile42 = builder33.buildFromReader("*global*", reader40);
        java.nio.charset.Charset charset43 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder44 = builder33.withCharset(charset43);
        java.io.File file47 = new java.io.File(":", "hi!");
        boolean boolean50 = file47.setExecutable(true, false);
        long long51 = file47.lastModified();
        boolean boolean52 = file47.mkdir();
        com.google.javascript.jscomp.SourceFile sourceFile53 = builder33.buildFromFile(file47);
        com.google.javascript.jscomp.SourceFile.Builder builder55 = builder33.withOriginalPath("");
        com.google.javascript.jscomp.SourceFile sourceFile58 = builder55.buildFromCode("java.io.IOException: OFF", "java.io.IOException: ");
        java.io.Reader reader59 = sourceFile58.getCodeReader();
        jSModule1.add(sourceFile58);
        org.junit.Assert.assertNull(compilerInput3);
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(jSModule15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING PARAM_LIST 49" + "'", str20, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(sourceFile26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(reader40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(sourceFile42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals(file47.getParent(), ":");
        org.junit.Assert.assertEquals(file47.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645456452000L + "'", long51 == 1645456452000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(sourceFile53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(sourceFile58);
        org.junit.Assert.assertNotNull(reader59);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        compilerOptions0.flowSensitiveInlineVariables = true;
        compilerOptions0.setReserveRawExports(false);
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.setLineLengthThreshold(4095);
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = compilerOptions0.errorFormat;
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.preferLineBreakAtEndOfFile = true;
        compilerOptions0.setSourceMapOutputPath(":");
        compilerOptions0.jqueryPass = false;
        boolean boolean18 = compilerOptions0.optimizeParameters;
        org.junit.Assert.assertNotNull(errorFormat9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray1 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator3 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile4 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator3);
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile7 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator6);
        com.google.javascript.jscomp.SourceFile.Generator generator9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator9);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray11 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile4, jSSourceFile7, jSSourceFile10 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean13 = compilerOptions12.moveFunctionDeclarations;
        compilerOptions12.crossModuleCodeMotion = true;
        compiler0.init(jSSourceFileArray1, jSSourceFileArray11, compilerOptions12);
        com.google.javascript.jscomp.SourceFile sourceFile19 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int21 = sourceFile19.getLineOfOffset((int) (short) 1);
        java.lang.String str22 = sourceFile19.getName();
        com.google.javascript.jscomp.JsAst jsAst23 = new com.google.javascript.jscomp.JsAst(sourceFile19);
        jsAst23.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput27 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst23, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile30 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int32 = sourceFile30.getLineOfOffset((int) (short) 1);
        java.lang.String str33 = sourceFile30.getName();
        java.lang.String str34 = sourceFile30.getName();
        java.lang.String str35 = sourceFile30.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput37 = new com.google.javascript.jscomp.CompilerInput(sourceFile30, true);
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput37);
        com.google.javascript.jscomp.SourceFile sourceFile41 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int43 = sourceFile41.getLineOfOffset((int) (short) 1);
        int int45 = sourceFile41.getColumnOfOffset(8);
        compilerInput38.setSourceFile(sourceFile41);
        jsAst23.setSourceFile(sourceFile41);
        com.google.javascript.jscomp.SourceFile sourceFile49 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput51 = new com.google.javascript.jscomp.CompilerInput(sourceFile49, true);
        java.lang.String str52 = sourceFile49.getCode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel56 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions53.setSourceMapDetailLevel(detailLevel56);
        compilerOptions53.inlineFunctions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy63 = compilerOptions60.propertyRenaming;
        java.lang.String[] strArray66 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        compilerOptions60.setStripTypes((java.util.Set<java.lang.String>) strSet67);
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode71 = null;
        compilerOptions70.setTracerMode(tracerMode71);
        boolean boolean73 = compilerOptions70.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel74 = compilerOptions70.sourceMapDetailLevel;
        compilerOptions70.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.crossModuleMethodMotion = true;
        compilerOptions77.optimizeParameters = true;
        compilerOptions77.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel85 = compilerOptions77.checkGlobalNamesLevel;
        compilerOptions70.setReportMissingOverride(checkLevel85);
        compilerOptions60.setCheckUnreachableCode(checkLevel85);
        byte[] byteArray92 = new byte[] { (byte) 0, (byte) 1, (byte) 10, (byte) 1 };
        compilerOptions60.inputVariableMapSerialized = byteArray92;
        compilerOptions53.inputVariableMapSerialized = byteArray92;
        com.google.javascript.jscomp.Result result95 = compiler0.compile(sourceFile41, sourceFile49, compilerOptions53);
        com.google.javascript.jscomp.CodingConvention codingConvention96 = compiler0.getCodingConvention();
        java.lang.String str97 = codingConvention96.getAbstractMethodName();
        boolean boolean99 = codingConvention96.isExported("STRING PARAM_LIST 49: hi!");
        org.junit.Assert.assertNotNull(jSSourceFileArray1);
        org.junit.Assert.assertNotNull(jSSourceFile4);
        org.junit.Assert.assertNotNull(jSSourceFile7);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertNotNull(jSSourceFileArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(sourceFile19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(sourceFile30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(sourceFile41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(detailLevel56);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy63 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy63.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(detailLevel74);
        org.junit.Assert.assertTrue("'" + checkLevel85 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel85.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 1, 10, 1]");
        org.junit.Assert.assertNotNull(result95);
        org.junit.Assert.assertNotNull(codingConvention96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "goog.abstractMethod" + "'", str97, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isGetElem();
        node5.setSourceEncodedPositionForTree(38);
        boolean boolean10 = node5.isString();
        boolean boolean11 = node5.isNot();
        boolean boolean12 = node5.isFromExterns();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        java.io.IOException iOException1 = new java.io.IOException("sun.util.logging.resources.logging");
        java.io.IOException iOException3 = new java.io.IOException();
        java.io.IOException iOException4 = new java.io.IOException("OFF", (java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException("");
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        iOException3.addSuppressed((java.lang.Throwable) iOException8);
        iOException1.addSuppressed((java.lang.Throwable) iOException8);
        java.lang.String str11 = iOException8.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.io.IOException: java.io.IOException: java.io.IOException: " + "'", str11, "java.io.IOException: java.io.IOException: java.io.IOException: ");
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.setLineLengthThreshold(4095);
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = compilerOptions0.errorFormat;
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.preferLineBreakAtEndOfFile = true;
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.enableRuntimeTypeCheck("hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = null;
        compilerOptions18.setTracerMode(tracerMode19);
        boolean boolean21 = compilerOptions18.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = compilerOptions18.sourceMapDetailLevel;
        compilerOptions18.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet25 = compilerOptions18.stripNameSuffixes;
        compilerOptions0.setStripNameSuffixes(strSet25);
        compilerOptions0.checkMissingGetCssNameBlacklist = "PARAM_LIST 0";
        compilerOptions0.setInlineProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy34 = compilerOptions31.propertyRenaming;
        java.lang.String[] strArray37 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        compilerOptions31.setStripTypes((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode42 = null;
        compilerOptions41.setTracerMode(tracerMode42);
        boolean boolean44 = compilerOptions41.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel45 = compilerOptions41.sourceMapDetailLevel;
        compilerOptions41.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.crossModuleMethodMotion = true;
        compilerOptions48.optimizeParameters = true;
        compilerOptions48.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions48.checkGlobalNamesLevel;
        compilerOptions41.setReportMissingOverride(checkLevel56);
        compilerOptions31.setCheckUnreachableCode(checkLevel56);
        compilerOptions31.syntheticBlockStartMarker = "*global*";
        compilerOptions31.prettyPrint = false;
        compilerOptions31.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel65 = compilerOptions31.sourceMapDetailLevel;
        compilerOptions0.sourceMapDetailLevel = detailLevel65;
        org.junit.Assert.assertNotNull(errorFormat9);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(detailLevel22);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy34 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy34.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(detailLevel45);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(detailLevel65);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap4 = compilerOptions0.getTweakReplacements();
        boolean boolean5 = strMap4.isEmpty();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap10 = compilerOptions6.getTweakReplacements();
        boolean boolean11 = strMap10.isEmpty();
        strMap10.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        boolean boolean19 = node18.isIn();
        boolean boolean20 = strMap10.containsValue((java.lang.Object) node18);
        boolean boolean21 = strMap4.containsKey((java.lang.Object) strMap10);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry25.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry31.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        node29.addChildrenToBack(node35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, node29, node42, node49, node56, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry61.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry67.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        node65.addChildrenToBack(node71);
        com.google.javascript.rhino.Node node73 = node29.clonePropsFrom(node71);
        java.util.Set<java.lang.String> strSet74 = node73.getDirectives();
        com.google.javascript.rhino.Node node75 = strMap4.replace("sun.util.logging.resources.logging", node73);
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode79 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions76.setTracer(tracerMode79);
        compilerOptions76.setFoldConstants(true);
        compilerOptions76.flowSensitiveInlineVariables = true;
        compilerOptions76.ambiguateProperties = false;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel87 = compilerOptions76.sourceMapDetailLevel;
        boolean boolean88 = strMap4.containsValue((java.lang.Object) compilerOptions76);
        boolean boolean89 = compilerOptions76.coalesceVariableNames;
        compilerOptions76.setCheckMissingGetCssNameBlacklist("JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of optimization iterations: {0}");
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(strSet74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + tracerMode79 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode79.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(detailLevel87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        java.io.PrintStream printStream1 = new java.io.PrintStream("JSC_OPTIMIZE_LOOP_ERROR");
        printStream1.println(800);
        printStream1.println(0.0d);
        printStream1.print(280489742336L);
        printStream1.print((double) 7);
        printStream1.print((float) 4);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        boolean boolean7 = file2.setReadable(false);
        java.io.File file8 = file2.getCanonicalFile();
        java.io.File file10 = new java.io.File(":");
        java.io.File file12 = new java.io.File(file10, "FINEST");
        boolean boolean13 = file2.renameTo(file10);
        com.google.javascript.jscomp.JSSourceFile jSSourceFile14 = com.google.javascript.jscomp.JSSourceFile.fromFile(file2);
        java.lang.String str16 = jSSourceFile14.getLine(42);
        jSSourceFile14.setOriginalPath("PARAM_LIST\n    PARAM_LIST\n");
        jSSourceFile14.clearCachedSource();
        int int21 = jSSourceFile14.getColumnOfOffset(36);
        java.lang.String str23 = jSSourceFile14.getLine(10);
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), ":");
        org.junit.Assert.assertEquals(file12.getParent(), ":");
        org.junit.Assert.assertEquals(file12.toString(), ":/FINEST");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSSourceFile14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36 + "'", int21 == 36);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList5 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList5, jSTypeArray4);
        com.google.javascript.rhino.Node node7 = jSTypeRegistry3.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList5);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry9.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        node7.addChildrenToBack(node13);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry16.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry23.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry30.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, node7, node20, node27, node34, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry40.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry46.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        node44.addChildrenToBack(node50);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry53.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry60.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry67.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, node44, node57, node64, node71, 0, 49);
        com.google.javascript.rhino.Node node75 = node37.useSourceInfoFrom(node57);
        com.google.javascript.jscomp.CheckLevel checkLevel77 = null;
        com.google.javascript.jscomp.DiagnosticType diagnosticType79 = com.google.javascript.jscomp.DiagnosticType.make("*global*", checkLevel77, "");
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", ":" };
        com.google.javascript.jscomp.JSError jSError87 = com.google.javascript.jscomp.JSError.make("*global*", node75, diagnosticType79, strArray86);
        com.google.javascript.jscomp.CheckLevel checkLevel88 = jSError87.getDefaultLevel();
        int int89 = jSError87.getLineNumber();
        java.lang.String str90 = jSError87.description;
        int int91 = jSError87.lineNumber;
        java.lang.String str92 = jSError87.sourceName;
        int int93 = jSError87.getLineNumber();
        int int94 = jSError87.getNodeSourceOffset();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(diagnosticType79);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(jSError87);
        org.junit.Assert.assertNull(checkLevel88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "*global*" + "'", str92, "*global*");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.labelRenaming = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable11 = jSTypeRegistry1.getTypesWithProperty(":");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        jSTypeRegistry13.clearNamedTypes();
        jSTypeRegistry13.forwardDeclareType("STRING PARAM_LIST 49");
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType17);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeRegistry1.getNativeType(jSTypeNative19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeIterable11);
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType18);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int6 = sourceFile4.getLineOfOffset((int) (short) 1);
        java.io.Reader reader7 = sourceFile4.getCodeReader();
        int int8 = reader7.read();
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromReader("*global*", reader7);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        java.io.File file14 = new java.io.File(":", "hi!");
        boolean boolean17 = file14.setExecutable(true, false);
        long long18 = file14.lastModified();
        boolean boolean19 = file14.mkdir();
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder0.buildFromFile(file14);
        com.google.javascript.jscomp.SourceFile.Builder builder22 = builder0.withOriginalPath("java.io.IOException: OFF");
        com.google.javascript.jscomp.SourceFile sourceFile25 = builder0.buildFromCode("Node tree inequality:\nTree1:\nSTRING PARAM_LIST 49\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: STRING PARAM_LIST 49\n\n\nSubtree2: NUMBER 0.0\n", "STRING PARAM_LIST 49: hi!");
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(file14.getParent(), ":");
        org.junit.Assert.assertEquals(file14.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645456452000L + "'", long18 == 1645456452000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(sourceFile25);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.isRegistered();
        java.util.Set<java.lang.String> strSet2 = charset0.aliases();
        java.util.Locale locale3 = null;
        java.lang.String str4 = charset0.displayName(locale3);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "US-ASCII" + "'", str4, "US-ASCII");
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isGetElem();
        boolean boolean8 = node5.isIn();
        boolean boolean9 = node5.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 10, ":/hi!");
        boolean boolean13 = node12.isWith();
        java.lang.String str14 = node12.getSourceFileName();
        com.google.javascript.rhino.Node node15 = node5.copyInformationFromForTree(node12);
        node5.setSourceEncodedPosition(48);
        boolean boolean18 = node5.isReturn();
        com.google.javascript.rhino.InputId inputId19 = node5.getInputId();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        node36.setSourceEncodedPosition(16);
        boolean boolean77 = node36.isName();
        boolean boolean78 = node36.isAssign();
        int int79 = node36.getChildCount();
        com.google.javascript.rhino.Node node80 = node36.getParent();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setRuntimeTypeCheckLogFunction("FINEST");
        compilerOptions0.setRemoveDeadCode(true);
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        compilerOptions0.ideMode = true;
        java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> strMap15 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setPropertyInvalidationErrors(strMap15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 280489566208L);
        boolean boolean2 = node1.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setRemoveDeadCode(true);
        compilerOptions0.setOutputCharset("PARAM_LIST: PARAM_LIST\n");
        java.lang.String str10 = compilerOptions0.syntheticBlockEndMarker;
        compilerOptions0.setMoveFunctionDeclarations(true);
        boolean boolean13 = compilerOptions0.printInputDelimiter;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 48, 51);
        boolean boolean5 = node4.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(0, "*global*");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        node12.setSourceEncodedPosition((int) (byte) 0);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isVoid();
        node21.setOptionalArg(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode27 = null;
        compilerOptions26.setTracerMode(tracerMode27);
        boolean boolean29 = compilerOptions26.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel30 = compilerOptions26.sourceMapDetailLevel;
        compilerOptions26.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.crossModuleMethodMotion = true;
        compilerOptions33.optimizeParameters = true;
        compilerOptions33.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions33.checkGlobalNamesLevel;
        compilerOptions26.setReportMissingOverride(checkLevel41);
        com.google.javascript.jscomp.DiagnosticType diagnosticType43 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray44 = null;
        com.google.javascript.jscomp.JSError jSError45 = com.google.javascript.jscomp.JSError.make("", node21, checkLevel41, diagnosticType43, strArray44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.crossModuleMethodMotion = true;
        compilerOptions46.skipAllCompilerPasses();
        compilerOptions46.resetWarningsGuard();
        compilerOptions46.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode54 = null;
        compilerOptions53.setTracerMode(tracerMode54);
        boolean boolean56 = compilerOptions53.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel57 = compilerOptions53.sourceMapDetailLevel;
        compilerOptions53.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet60 = compilerOptions53.stripNameSuffixes;
        compilerOptions46.setReplaceStringsReservedStrings(strSet60);
        boolean boolean62 = strSet60.isEmpty();
        node21.setDirectives(strSet60);
        node21.addSuppression("java.io.IOException: ");
        java.lang.String str69 = node21.toString(false, false, false);
        boolean boolean70 = node21.isNew();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node4, node8, node12, node21);
        node8.setSourceEncodedPosition(51);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(detailLevel30);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType43);
        org.junit.Assert.assertNotNull(jSError45);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(detailLevel57);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PARAM_LIST" + "'", str69, "PARAM_LIST");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder75 = node56.getJsDocBuilderForNode();
        boolean boolean76 = node56.isCatch();
        boolean boolean77 = node56.hasChildren();
        boolean boolean78 = node56.isAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 280489193472L);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(":");
        // The following exception was thrown during execution in test generation
        try {
            node56.addChildAfter(node80, node82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        boolean boolean11 = compilerOptions0.removeTryCatchFinally;
        java.lang.String str12 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: OFF");
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile8 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile10 = jsAst6.getSourceFile();
        com.google.javascript.rhino.InputId inputId11 = jsAst6.getInputId();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertNotNull(inputId11);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, ":/hi!");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("java.io.IOException: ", 43, (int) '#');
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean12 = node11.isTry();
        java.lang.String str13 = node11.toString();
        boolean boolean14 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node15 = node7.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node7.getAncestors();
        com.google.javascript.rhino.Node node17 = node2.useSourceInfoFrom(node7);
        node2.setString("");
        com.google.javascript.rhino.Node node20 = node2.removeFirstChild();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean27 = node25.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, node25, (int) '/', 4095);
        boolean boolean31 = node30.isAnd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node32 = node20.copyInformationFromForTree(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING PARAM_LIST 49" + "'", str13, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
        java.lang.Iterable<com.google.javascript.jscomp.DiagnosticType> diagnosticTypeIterable2 = diagnosticGroup0.getTypes();
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        java.lang.Iterable<com.google.javascript.jscomp.DiagnosticType> diagnosticTypeIterable5 = diagnosticGroup0.getTypes();
        com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
        org.junit.Assert.assertNotNull(diagnosticTypeIterable2);
        org.junit.Assert.assertNotNull(diagnosticTypeIterable5);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        // The following exception was thrown during execution in test generation
        try {
            java.util.logging.Level level1 = java.util.logging.Level.parse("STRING PARAM_LIST 49: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad level \"STRING PARAM_LIST 49: hi!\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("*global*");
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry4.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList12 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList12, jSTypeArray11);
        com.google.javascript.rhino.Node node14 = jSTypeRegistry10.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList12);
        node8.addChildrenToBack(node14);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        boolean boolean22 = node21.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        boolean boolean29 = node28.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry31.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, node8, node21, node28, node35, 0, 49);
        boolean boolean39 = node28.isInc();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable47 = jSTypeRegistry41.getTypesWithProperty("");
        com.google.javascript.rhino.jstype.JSType jSType48 = assertionFunctionSpec1.getAssertedType(node28, jSTypeRegistry41);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 10, ":/hi!");
        int int52 = node51.getLineno();
        boolean boolean53 = node51.isThrow();
        com.google.javascript.rhino.Node node54 = assertionFunctionSpec1.getAssertedParam(node51);
        boolean boolean55 = node54.isAnd();
        boolean boolean56 = node54.isVarArgs();
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeIterable47);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.setLineLengthThreshold(4095);
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = compilerOptions0.errorFormat;
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.skipAllCompilerPasses();
        java.util.Set<java.lang.String> strSet13 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.setCheckControlStructures(false);
        compilerOptions0.removeDeadCode = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean19 = compilerOptions18.moveFunctionDeclarations;
        compilerOptions18.crossModuleCodeMotion = true;
        compilerOptions18.setManageClosureDependencies(false);
        boolean boolean24 = compilerOptions18.exportTestFunctions;
        compilerOptions18.computeFunctionSideEffects = false;
        compilerOptions18.setExportTestFunctions(false);
        compilerOptions18.rewriteFunctionExpressions = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode31 = compilerOptions18.getTracerMode();
        compilerOptions0.setTracerMode(tracerMode31);
        org.junit.Assert.assertNotNull(errorFormat9);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + tracerMode31 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode31.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.labelRenaming = true;
        boolean boolean4 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.renamePrefix = "PARAM_LIST\n";
        compilerOptions0.setFoldConstants(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.rhino.Node node3 = compiler1.getRoot();
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        java.io.PrintStream printStream1 = new java.io.PrintStream("JSC_OPTIMIZE_LOOP_ERROR");
        printStream1.println(800);
        printStream1.println(0.0d);
        boolean boolean6 = printStream1.checkError();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "java.io.IOException: java.io.IOException: ");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException: java.io.IOException: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripNameSuffixes;
        boolean boolean18 = compilerOptions0.jqueryPass;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap19 = compilerOptions0.getDefineReplacements();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean10 = node9.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node9.siblings();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node12.getLastSibling();
        boolean boolean14 = node13.isFalse();
        boolean boolean15 = node13.isGetElem();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy3 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy3;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.syntheticBlockEndMarker = "OFF";
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean13 = compilerOptions0.removeDeadCode;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.setInferTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean21 = compilerOptions20.moveFunctionDeclarations;
        compilerOptions20.crossModuleCodeMotion = true;
        compilerOptions20.checkSymbols = true;
        compilerOptions20.setExtractPrototypeMemberDeclarations(true);
        boolean boolean28 = compilerOptions20.checkSuspiciousCode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str30 = compilerOptions29.syntheticBlockStartMarker;
        compilerOptions29.labelRenaming = true;
        boolean boolean33 = compilerOptions29.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.crossModuleMethodMotion = true;
        compilerOptions34.skipAllCompilerPasses();
        boolean boolean38 = compilerOptions34.flowSensitiveInlineVariables;
        java.lang.String[] strArray48 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        compilerOptions34.stripTypes = strSet49;
        compilerOptions29.setStripNameSuffixes((java.util.Set<java.lang.String>) strSet49);
        compilerOptions20.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet49);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = null;
        compilerOptions20.setTweakReplacements(strMap54);
        compilerOptions20.setInferTypes(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode58 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions20.setTracer(tracerMode58);
        compilerOptions0.setTracerMode(tracerMode58);
        compilerOptions0.setInlineGetters(true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + tracerMode58 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode58.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Exceeded max number of code motion iterations: {0}");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromInputStream("java.io.IOException", inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "TYPEOF : 44\n", 700, 11);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        boolean boolean8 = compilerOptions0.lineBreak;
        compilerOptions0.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.crossModuleMethodMotion = true;
        compilerOptions11.syntheticBlockEndMarker = "hi!";
        boolean boolean16 = compilerOptions11.closurePass;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions17.setTracer(tracerMode20);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode23 = null;
        compilerOptions22.setTracerMode(tracerMode23);
        boolean boolean25 = compilerOptions22.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel26 = compilerOptions22.sourceMapDetailLevel;
        compilerOptions22.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet29 = compilerOptions22.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode31 = null;
        compilerOptions30.setTracerMode(tracerMode31);
        boolean boolean33 = compilerOptions30.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel34 = compilerOptions30.sourceMapDetailLevel;
        compilerOptions30.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.crossModuleMethodMotion = true;
        compilerOptions37.optimizeParameters = true;
        compilerOptions37.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions37.checkGlobalNamesLevel;
        compilerOptions30.setReportMissingOverride(checkLevel45);
        compilerOptions22.setAggressiveVarCheck(checkLevel45);
        compilerOptions17.setCheckUnreachableCode(checkLevel45);
        com.google.javascript.jscomp.SourceMap.Format format49 = compilerOptions17.sourceMapFormat;
        boolean boolean50 = compilerOptions17.recordFunctionInformation;
        compilerOptions17.setComputeFunctionSideEffects(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions53.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode59 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions53.setTracer(tracerMode59);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy61 = compilerOptions53.variableRenaming;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy62 = com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC;
        compilerOptions17.setRenamingPolicy(variableRenamingPolicy61, propertyRenamingPolicy62);
        compilerOptions11.setPropertyRenaming(propertyRenamingPolicy62);
        compilerOptions0.propertyRenaming = propertyRenamingPolicy62;
        compilerOptions0.setPrettyPrint(true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + tracerMode20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode20.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(detailLevel26);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(detailLevel34);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(format49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + tracerMode59 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode59.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy61 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy61.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy62 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC + "'", propertyRenamingPolicy62.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC));
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        compilerOptions0.setSkipAllPasses(false);
        compilerOptions0.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = null;
        compilerOptions13.setTracerMode(tracerMode14);
        boolean boolean16 = compilerOptions13.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel17 = compilerOptions13.sourceMapDetailLevel;
        compilerOptions13.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.crossModuleMethodMotion = true;
        compilerOptions20.optimizeParameters = true;
        compilerOptions20.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions20.checkGlobalNamesLevel;
        compilerOptions13.setReportMissingOverride(checkLevel28);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel28);
        boolean boolean31 = compilerOptions0.ambiguateProperties;
        compilerOptions0.setDeadAssignmentElimination(true);
        boolean boolean34 = compilerOptions0.devirtualizePrototypeMethods;
        compilerOptions0.setAppNameStr("STRING PARAM_LIST");
        compilerOptions0.setSyntheticBlockEndMarker("DiagnosticGroup<checkProvides>");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(detailLevel17);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        compilerOptions0.setCrossModuleCodeMotion(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode8 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions0.setTracer(tracerMode8);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions10.setTweakToDoubleLiteral("", (double) (short) 1);
        compilerOptions10.setCrossModuleCodeMotion(false);
        compilerOptions10.inputDelimiter = "STRING PARAM_LIST 49";
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy20 = compilerOptions10.variableRenaming;
        compilerOptions10.setInlineProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy26 = compilerOptions23.propertyRenaming;
        java.lang.String[] strArray29 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        compilerOptions23.setStripTypes((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode34 = null;
        compilerOptions33.setTracerMode(tracerMode34);
        boolean boolean36 = compilerOptions33.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel37 = compilerOptions33.sourceMapDetailLevel;
        compilerOptions33.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.crossModuleMethodMotion = true;
        compilerOptions40.optimizeParameters = true;
        compilerOptions40.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions40.checkGlobalNamesLevel;
        compilerOptions33.setReportMissingOverride(checkLevel48);
        compilerOptions23.setCheckUnreachableCode(checkLevel48);
        compilerOptions23.syntheticBlockStartMarker = "*global*";
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions23.checkMissingReturn;
        compilerOptions10.setBrokenClosureRequiresLevel(checkLevel53);
        compilerOptions0.checkGlobalThisLevel = checkLevel53;
        org.junit.Assert.assertTrue("'" + tracerMode8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode8.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy20 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy20.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy26 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy26.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(detailLevel37);
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.ErrorManager errorManager12 = compiler1.getErrorManager();
        // The following exception was thrown during execution in test generation
        try {
            compiler1.processDefines();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: INTERNAL COMPILER ERROR.?Please report this problem.?null");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(errorManager12);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry11.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        boolean boolean16 = node15.isIn();
        boolean boolean17 = node15.isVoid();
        boolean boolean18 = node9.isEquivalentToTyped(node15);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = node15.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.lineBreak = true;
        compilerOptions0.setCheckTypes(false);
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.optimizeReturns = true;
        boolean boolean24 = compilerOptions0.collapseAnonymousFunctions;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        java.lang.String str6 = sourceFile2.getName();
        java.lang.String str7 = sourceFile2.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput9 = new com.google.javascript.jscomp.CompilerInput(sourceFile2, true);
        com.google.javascript.jscomp.CompilerInput compilerInput10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput9);
        com.google.javascript.jscomp.JSModule jSModule11 = compilerInput9.getModule();
        com.google.javascript.jscomp.JSModule jSModule13 = new com.google.javascript.jscomp.JSModule("/");
        jSModule13.setDepth(53);
        java.lang.String str16 = jSModule13.getName();
        compilerInput9.setModule(jSModule13);
        java.lang.String str18 = compilerInput9.getName();
        boolean boolean19 = compilerInput9.isExtern();
        com.google.javascript.jscomp.SourceFile sourceFile21 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput23 = new com.google.javascript.jscomp.CompilerInput(sourceFile21, true);
        com.google.javascript.rhino.InputId inputId25 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput27 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput23, inputId25, true);
        java.io.PrintStream printStream28 = null;
        com.google.javascript.jscomp.Compiler compiler29 = new com.google.javascript.jscomp.Compiler(printStream28);
        java.lang.String str30 = compiler29.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions31.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode37 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions31.setTracer(tracerMode37);
        compiler29.initOptions(compilerOptions31);
        compilerInput27.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler29);
        com.google.javascript.jscomp.Compiler compiler41 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray42 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator44 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile45 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator44);
        com.google.javascript.jscomp.SourceFile.Generator generator47 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile48 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator47);
        com.google.javascript.jscomp.SourceFile.Generator generator50 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile51 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator50);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray52 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile45, jSSourceFile48, jSSourceFile51 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean54 = compilerOptions53.moveFunctionDeclarations;
        compilerOptions53.crossModuleCodeMotion = true;
        compiler41.init(jSSourceFileArray42, jSSourceFileArray52, compilerOptions53);
        com.google.javascript.jscomp.JSModule jSModule59 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler60 = new com.google.javascript.jscomp.Compiler();
        jSModule59.sortInputsByDeps(compiler60);
        com.google.javascript.jscomp.JSModule jSModule63 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler64 = new com.google.javascript.jscomp.Compiler();
        jSModule63.sortInputsByDeps(compiler64);
        com.google.javascript.jscomp.SourceFile.Builder builder66 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile70 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int72 = sourceFile70.getLineOfOffset((int) (short) 1);
        java.io.Reader reader73 = sourceFile70.getCodeReader();
        int int74 = reader73.read();
        com.google.javascript.jscomp.SourceFile sourceFile75 = builder66.buildFromReader("*global*", reader73);
        jSModule63.add(sourceFile75);
        com.google.javascript.jscomp.JSModule[] jSModuleArray77 = new com.google.javascript.jscomp.JSModule[] { jSModule59, jSModule63 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel81 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions78.setSourceMapDetailLevel(detailLevel81);
        boolean boolean83 = compilerOptions78.ideMode;
        compilerOptions78.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result86 = compiler29.compile(jSSourceFileArray52, jSModuleArray77, compilerOptions78);
        com.google.javascript.jscomp.Result result87 = compiler29.getResult();
        com.google.javascript.jscomp.Result result88 = compiler29.getResult();
        compiler29.rebuildInputsFromModules();
        com.google.javascript.rhino.InputId inputId90 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput91 = compiler29.getInput(inputId90);
        com.google.javascript.jscomp.JSError[] jSErrorArray92 = compiler29.getErrors();
        compiler29.reportCodeChange();
        com.google.javascript.rhino.Node node94 = compilerInput9.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler29);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(jSModule11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/" + "'", str16, "/");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + tracerMode37 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode37.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray42);
        org.junit.Assert.assertNotNull(jSSourceFile45);
        org.junit.Assert.assertNotNull(jSSourceFile48);
        org.junit.Assert.assertNotNull(jSSourceFile51);
        org.junit.Assert.assertNotNull(jSSourceFileArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(sourceFile70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(reader73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(sourceFile75);
        org.junit.Assert.assertNotNull(jSModuleArray77);
        org.junit.Assert.assertNotNull(detailLevel81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(result86);
        org.junit.Assert.assertNotNull(result87);
        org.junit.Assert.assertNotNull(result88);
        org.junit.Assert.assertNull(compilerInput91);
        org.junit.Assert.assertNotNull(jSErrorArray92);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy12 = compilerOptions9.propertyRenaming;
        compilerOptions0.propertyRenaming = propertyRenamingPolicy12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions14.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = null;
        compilerOptions16.setTracerMode(tracerMode17);
        boolean boolean19 = compilerOptions16.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel20 = compilerOptions16.sourceMapDetailLevel;
        compilerOptions16.setColorizeErrorOutput(true);
        compilerOptions16.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy28 = compilerOptions25.propertyRenaming;
        compilerOptions16.propertyRenaming = propertyRenamingPolicy28;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions16.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions16.checkRequires;
        compilerOptions14.setCheckRequires(checkLevel31);
        compilerOptions0.setCheckProvides(checkLevel31);
        boolean boolean34 = compilerOptions0.isRemoveUnusedClassProperties();
        compilerOptions0.aliasAllStrings = true;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setDebugFunctionSideEffectsPath("goog.abstractMethod");
        compilerOptions0.setComputeFunctionSideEffects(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy12 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy12.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(detailLevel20);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy28.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        boolean boolean75 = node74.hasChildren();
        boolean boolean76 = node74.isDefaultCase();
        boolean boolean77 = node74.isSwitch();
        boolean boolean78 = node74.isFromExterns();
        node74.setCharno(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node74.children();
        com.google.javascript.rhino.ErrorReporter errorReporter82 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter82);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList85 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList85, jSTypeArray84);
        com.google.javascript.rhino.Node node87 = jSTypeRegistry83.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList85);
        boolean boolean88 = node87.isIn();
        boolean boolean89 = node87.isVoid();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = node87.siblings();
        com.google.javascript.rhino.Node node91 = node87.getFirstChild();
        com.google.javascript.rhino.Node node92 = node74.useSourceInfoIfMissingFromForTree(node87);
        // The following exception was thrown during execution in test generation
        try {
            node87.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable81);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(nodeIterable90);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        com.google.javascript.jscomp.VariableMap variableMap48 = result47.variableMap;
        com.google.javascript.jscomp.JSError[] jSErrorArray49 = result47.errors;
        java.lang.String str50 = result47.debugLog;
        boolean boolean51 = result47.success;
        com.google.javascript.jscomp.JSError[] jSErrorArray52 = result47.warnings;
        com.google.javascript.jscomp.VariableMap variableMap53 = result47.namedAnonFunctionMap;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNull(variableMap48);
        org.junit.Assert.assertNotNull(jSErrorArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSErrorArray52);
        org.junit.Assert.assertNull(variableMap53);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy4 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy4;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.inlineGetters = false;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = com.google.javascript.jscomp.CheckLevel.ERROR;
        compilerOptions0.setCheckRequires(checkLevel10);
        compilerOptions0.reserveRawExports = true;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy4 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy4.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        boolean boolean7 = file2.setReadable(false);
        java.io.File file8 = file2.getCanonicalFile();
        java.io.File file9 = file8.getAbsoluteFile();
        boolean boolean11 = file9.setExecutable(false);
        java.io.File file13 = new java.io.File(file9, "JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of optimization iterations: {0}");
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals(file13.getParent(), "/experiment/:/hi!");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/experiment/:/hi!/JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of optimization iterations: {0}");
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        boolean boolean7 = file2.setWritable(false);
        boolean boolean8 = file2.canWrite();
        java.net.URI uRI9 = file2.toURI();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = jSSourceFile10.getCode();
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: :/hi! (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(jSSourceFile10);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.nio.charset.Charset charset3 = null;
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("STRING PARAM_LIST 49", charset3);
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int9 = sourceFile7.getLineOfOffset((int) (short) 1);
        java.lang.String str10 = sourceFile7.getName();
        com.google.javascript.jscomp.JsAst jsAst11 = new com.google.javascript.jscomp.JsAst(sourceFile7);
        jsAst11.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile13 = jsAst11.getSourceFile();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.optimizeParameters = true;
        compilerOptions14.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions14.checkGlobalNamesLevel;
        compilerOptions14.setCheckMissingGetCssNameBlacklist("");
        boolean boolean25 = compilerOptions14.removeTryCatchFinally;
        com.google.javascript.jscomp.Result result26 = compiler1.compile(sourceFile4, sourceFile13, compilerOptions14);
        compilerOptions14.setInlineProperties(true);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(result26);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions18.checkRequires;
        compilerOptions0.setReportMissingOverride(checkLevel19);
        compilerOptions0.setGatherCssNames(true);
        compilerOptions0.setLineBreak(false);
        boolean boolean25 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setSyntheticBlockStartMarker("/experiment/:");
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setLineBreak(true);
        boolean boolean32 = compilerOptions0.foldConstants;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy36 = compilerOptions33.propertyRenaming;
        java.lang.String[] strArray39 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        compilerOptions33.setStripTypes((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode44 = null;
        compilerOptions43.setTracerMode(tracerMode44);
        boolean boolean46 = compilerOptions43.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel47 = compilerOptions43.sourceMapDetailLevel;
        compilerOptions43.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.crossModuleMethodMotion = true;
        compilerOptions50.optimizeParameters = true;
        compilerOptions50.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel58 = compilerOptions50.checkGlobalNamesLevel;
        compilerOptions43.setReportMissingOverride(checkLevel58);
        compilerOptions33.setCheckUnreachableCode(checkLevel58);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 1, (byte) 10, (byte) 1 };
        compilerOptions33.inputVariableMapSerialized = byteArray65;
        compilerOptions33.setAssumeStrictThis(true);
        byte[] byteArray69 = null;
        compilerOptions33.setInputPropertyMapSerialized(byteArray69);
        compilerOptions33.setGatherCssNames(false);
        compilerOptions33.setAssumeStrictThis(false);
        compilerOptions33.exportTestFunctions = false;
        com.google.javascript.jscomp.CheckLevel checkLevel77 = compilerOptions33.checkUnreachableCode;
        compilerOptions0.checkRequires = checkLevel77;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy36 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy36.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(detailLevel47);
        org.junit.Assert.assertTrue("'" + checkLevel58 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel58.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + checkLevel77 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel77.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy3 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy3;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.syntheticBlockEndMarker = "OFF";
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions9.checkRequires;
        compilerOptions0.setCheckUnreachableCode(checkLevel10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions12.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode18 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions12.setTracer(tracerMode18);
        boolean boolean20 = compilerOptions12.collapseVariableDeclarations;
        compilerOptions12.setSyntheticBlockStartMarker("sun.util.logging.resources.logging");
        com.google.javascript.jscomp.SourceMap.Format format23 = compilerOptions12.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format23);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode18 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode18.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(format23);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setRuntimeTypeCheckLogFunction("FINEST");
        compilerOptions0.setRemoveDeadCode(true);
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        compilerOptions0.optimizeParameters = true;
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.generatePseudoNames;
        java.util.Set<java.lang.String> strSet4 = compilerOptions0.stripTypes;
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList8 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList8, jSTypeArray7);
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList8);
        boolean boolean11 = strSet4.removeAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = strSet4.add("FINEST");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        java.lang.String str8 = file6.getName();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280491139072L + "'", long7 == 280491139072L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + ":" + "'", str8, ":");
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        boolean boolean12 = compilerOptions3.checkSuspiciousCode;
        boolean boolean13 = compilerOptions3.assumeStrictThis();
        boolean boolean14 = compilerOptions3.optimizeParameters;
        compilerOptions3.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler17 = compilerOptions3.getAliasTransformationHandler();
        compilerOptions3.ideMode = true;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler17);
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray58 = errorManager57.getErrors();
        com.google.javascript.jscomp.Compiler compiler59 = new com.google.javascript.jscomp.Compiler(errorManager57);
        com.google.javascript.jscomp.Compiler compiler60 = new com.google.javascript.jscomp.Compiler(errorManager57);
        com.google.javascript.jscomp.SourceFile sourceFile62 = com.google.javascript.jscomp.SourceFile.fromFile("java.io.IOException: OFF");
        com.google.javascript.jscomp.JsAst jsAst63 = new com.google.javascript.jscomp.JsAst(sourceFile62);
        // The following exception was thrown during execution in test generation
        try {
            compiler60.replaceScript(jsAst63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertNotNull(jSErrorArray58);
        org.junit.Assert.assertNotNull(sourceFile62);
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(12);
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray6 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList7 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList7, jSTypeArray6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry5.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList7);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry11.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        node9.addChildrenToBack(node15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry18.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry25.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        boolean boolean30 = node29.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry32.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, node9, node22, node29, node36, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry42.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        boolean boolean47 = node46.isIn();
        boolean boolean48 = node46.isVoid();
        node46.setOptionalArg(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode52 = null;
        compilerOptions51.setTracerMode(tracerMode52);
        boolean boolean54 = compilerOptions51.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel55 = compilerOptions51.sourceMapDetailLevel;
        compilerOptions51.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.crossModuleMethodMotion = true;
        compilerOptions58.optimizeParameters = true;
        compilerOptions58.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions58.checkGlobalNamesLevel;
        compilerOptions51.setReportMissingOverride(checkLevel66);
        com.google.javascript.jscomp.DiagnosticType diagnosticType68 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray69 = null;
        com.google.javascript.jscomp.JSError jSError70 = com.google.javascript.jscomp.JSError.make("", node46, checkLevel66, diagnosticType68, strArray69);
        com.google.javascript.rhino.Node node71 = node36.srcref(node46);
        boolean boolean72 = node71.isDefaultCase();
        node71.setCharno(1);
        int int75 = node71.getCharno();
        node1.putProp(9, (java.lang.Object) node71);
        org.junit.Assert.assertNotNull(jSTypeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(detailLevel55);
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType68);
        org.junit.Assert.assertNotNull(jSError70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        compiler9.reportCodeChange();
        com.google.javascript.jscomp.Region region71 = compiler9.getSourceRegion("InputId: *global*", 40);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SymbolTable symbolTable72 = compiler9.buildKnownSymbolTable();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: INTERNAL COMPILER ERROR.?Please report this problem.?null");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNull(region71);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        com.google.javascript.jscomp.VariableMap variableMap48 = result47.variableMap;
        com.google.javascript.jscomp.JSError[] jSErrorArray49 = result47.errors;
        com.google.javascript.jscomp.VariableMap variableMap50 = result47.variableMap;
        java.lang.String str51 = result47.externExport;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNull(variableMap48);
        org.junit.Assert.assertNotNull(jSErrorArray49);
        org.junit.Assert.assertNull(variableMap50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        java.util.logging.Level level0 = java.util.logging.Level.FINEST;
        int int1 = level0.intValue();
        java.lang.String str2 = level0.getResourceBundleName();
        java.lang.String str3 = level0.toString();
        java.lang.String str4 = level0.getName();
        org.junit.Assert.assertNotNull(level0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 300 + "'", int1 == 300);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "sun.util.logging.resources.logging" + "'", str2, "sun.util.logging.resources.logging");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FINEST" + "'", str3, "FINEST");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FINEST" + "'", str4, "FINEST");
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap4 = compilerOptions0.getTweakReplacements();
        boolean boolean5 = strMap4.isEmpty();
        java.lang.Object obj6 = null;
        com.google.javascript.rhino.Node node7 = strMap4.get(obj6);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.Node>> strEntrySet8 = strMap4.entrySet();
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str10 = compilerOptions9.syntheticBlockStartMarker;
        compilerOptions9.labelRenaming = true;
        compilerOptions9.setMoveFunctionDeclarations(false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry23.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        node21.addChildrenToBack(node27);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry30.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry37.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry44.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, node21, node34, node41, node48, 0, 49);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node54 = node51.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node51.getJSDocInfo();
        boolean boolean56 = node51.isGetterDef();
        com.google.javascript.rhino.Node node57 = strMap4.getOrDefault((java.lang.Object) compilerOptions9, node51);
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.crossModuleMethodMotion = true;
        compilerOptions58.syntheticBlockEndMarker = "hi!";
        compilerOptions58.setCheckControlStructures(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode66 = null;
        compilerOptions65.setTracerMode(tracerMode66);
        boolean boolean68 = compilerOptions65.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel69 = compilerOptions65.sourceMapDetailLevel;
        compilerOptions65.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet72 = compilerOptions65.stripNameSuffixes;
        strSet72.clear();
        com.google.javascript.jscomp.SourceFile sourceFile76 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int78 = sourceFile76.getLineOfOffset((int) (short) 1);
        java.lang.String str79 = sourceFile76.getName();
        java.lang.String str80 = sourceFile76.getName();
        java.lang.String str81 = sourceFile76.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput83 = new com.google.javascript.jscomp.CompilerInput(sourceFile76, true);
        com.google.javascript.jscomp.SourceAst sourceAst84 = compilerInput83.getAst();
        boolean boolean85 = strSet72.remove((java.lang.Object) sourceAst84);
        compilerOptions58.setAliasableStrings(strSet72);
        compilerOptions9.stripTypePrefixes = strSet72;
        compilerOptions9.setProcessObjectPropertyString(false);
        compilerOptions9.optimizeCalls = false;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(detailLevel69);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(sourceFile76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(sourceAst84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("FINEST");
        stats1.gzDiff = (short) 0;
        stats1.runs = 0;
        java.lang.String str6 = stats1.pass;
        int int7 = stats1.gzSize;
        stats1.runs = 30;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FINEST" + "'", str6, "FINEST");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy3 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy3;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.setRemoveUnusedLocalVars(false);
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        java.lang.String str11 = compilerOptions0.syntheticBlockEndMarker;
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        boolean boolean8 = file2.setExecutable(false, true);
        file2.deleteOnExit();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry13.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry24.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] { jSType33 };
        com.google.javascript.rhino.jstype.FunctionType functionType35 = jSTypeRegistry7.createConstructorTypeWithVarArgs(jSType22, jSTypeArray34);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry44.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry44.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry55.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry55.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] { jSType64 };
        com.google.javascript.rhino.jstype.FunctionType functionType66 = jSTypeRegistry38.createConstructorTypeWithVarArgs(jSType53, jSTypeArray65);
        boolean boolean67 = jSTypeRegistry7.declareType("", jSType53);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        boolean boolean74 = jSTypeList69.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator75 = jSTypeList69.spliterator();
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry1.createFunctionTypeWithVarArgs(jSType53, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray80 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList81 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81, jSTypeArray80);
        boolean boolean83 = jSTypeList78.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81);
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator84 = jSTypeList78.spliterator();
        com.google.javascript.rhino.Node node85 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        java.lang.String str90 = node89.getQualifiedName();
        com.google.javascript.rhino.Node node91 = node89.getLastChild();
        com.google.javascript.rhino.Node node92 = node89.getLastSibling();
        node85.addChildrenToFront(node92);
        boolean boolean94 = node85.isTry();
        boolean boolean95 = node85.isOptionalArg();
        boolean boolean96 = node85.isFunction();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertNotNull(functionType35);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeSpliterator75);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeSpliterator84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.labelRenaming = true;
        boolean boolean4 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.setInlineGetters(true);
        compilerOptions0.setGeneratePseudoNames(false);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean14 = node12.getBooleanProp((int) (byte) 10);
        java.lang.String str18 = node12.toString(false, false, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        boolean boolean25 = node24.isIn();
        boolean boolean26 = node24.isGetElem();
        node24.setSourceEncodedPositionForTree(38);
        com.google.javascript.rhino.Node node29 = node12.srcref(node24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.crossModuleMethodMotion = true;
        compilerOptions30.syntheticBlockEndMarker = "hi!";
        compilerOptions30.removeUnusedClassProperties = false;
        compilerOptions30.setLineLengthThreshold(4095);
        com.google.javascript.jscomp.ErrorFormat errorFormat39 = compilerOptions30.errorFormat;
        compilerOptions30.setCrossModuleMethodMotion(true);
        compilerOptions30.preferLineBreakAtEndOfFile = true;
        compilerOptions30.crossModuleMethodMotion = true;
        compilerOptions30.enableRuntimeTypeCheck("hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode49 = null;
        compilerOptions48.setTracerMode(tracerMode49);
        boolean boolean51 = compilerOptions48.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel52 = compilerOptions48.sourceMapDetailLevel;
        compilerOptions48.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet55 = compilerOptions48.stripNameSuffixes;
        compilerOptions30.setStripNameSuffixes(strSet55);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode60 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions57.setTracer(tracerMode60);
        com.google.javascript.jscomp.CompilerOptions.TracerMode[] tracerModeArray62 = new com.google.javascript.jscomp.CompilerOptions.TracerMode[] { tracerMode60 };
        com.google.javascript.jscomp.CompilerOptions.TracerMode[] tracerModeArray63 = strSet55.toArray(tracerModeArray62);
        node24.setDirectives(strSet55);
        compilerOptions0.stripTypePrefixes = strSet55;
        compilerOptions0.setInlineProperties(true);
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode71 = null;
        compilerOptions70.setTracerMode(tracerMode71);
        compilerOptions70.setSummaryDetailLevel(49);
        compilerOptions70.setRemoveTryCatchFinally(true);
        compilerOptions70.setOptimizeArgumentsArray(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions79 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions79.crossModuleMethodMotion = true;
        compilerOptions79.optimizeParameters = true;
        compilerOptions79.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel87 = compilerOptions79.checkGlobalNamesLevel;
        compilerOptions70.checkGlobalNamesLevel = checkLevel87;
        compilerOptions0.checkRequires = checkLevel87;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING PARAM_LIST" + "'", str18, "STRING PARAM_LIST");
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(errorFormat39);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(detailLevel52);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + tracerMode60 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode60.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(tracerModeArray62);
        org.junit.Assert.assertNotNull(tracerModeArray63);
        org.junit.Assert.assertTrue("'" + checkLevel87 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel87.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.aggressiveVarCheck;
        boolean boolean6 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseVariableDeclarations = true;
        compilerOptions0.setRemoveClosureAsserts(true);
        boolean boolean11 = compilerOptions0.foldConstants;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasAllStrings = false;
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        boolean boolean6 = file2.mkdir();
        boolean boolean7 = file2.setReadOnly();
        boolean boolean10 = file2.setWritable(false, true);
        boolean boolean11 = file2.canExecute();
        long long12 = file2.getTotalSpace();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 364740218880L + "'", long12 == 364740218880L);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy3 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy3;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.syntheticBlockEndMarker = "OFF";
        java.lang.String str9 = compilerOptions0.renamePrefixNamespace;
        com.google.javascript.jscomp.CodingConvention codingConvention10 = null;
        compilerOptions0.setCodingConvention(codingConvention10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        compilerOptions0.setDefineReplacements(strMap12);
        boolean boolean14 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        compilerOptions0.coalesceVariableNames = false;
        compilerOptions0.foldConstants = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setInlineLocalFunctions(false);
        java.util.Set<java.lang.String> strSet24 = compilerOptions21.stripNameSuffixes;
        boolean boolean25 = compilerOptions21.collapseAnonymousFunctions;
        com.google.javascript.jscomp.CheckLevel checkLevel26 = compilerOptions21.checkMissingReturn;
        compilerOptions0.setCheckRequires(checkLevel26);
        compilerOptions0.inlineGetters = false;
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + checkLevel26 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel26.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions0.setTracer(tracerMode3);
        com.google.javascript.jscomp.CompilerOptions.Reach reach5 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineVariables(reach5);
        boolean boolean7 = compilerOptions0.devirtualizePrototypeMethods;
        compilerOptions0.setAppNameStr("*global*");
        compilerOptions0.setGroupVariableDeclarations(false);
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + reach5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach5.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = null;
        compilerOptions18.setTracerMode(tracerMode19);
        boolean boolean21 = compilerOptions18.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = compilerOptions18.sourceMapDetailLevel;
        compilerOptions18.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet25 = compilerOptions18.stripNameSuffixes;
        com.google.javascript.jscomp.SourceFile sourceFile27 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceFile27, true);
        com.google.javascript.rhino.InputId inputId31 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput33 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput29, inputId31, true);
        java.lang.String str34 = compilerInput33.toString();
        boolean boolean35 = strSet25.contains((java.lang.Object) compilerInput33);
        compilerOptions0.stripTypes = strSet25;
        compilerOptions0.setMarkAsCompiled(true);
        java.util.Set<java.lang.String> strSet39 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.setPreferLineBreakAtEndOfFile(true);
        compilerOptions0.setCheckCaja(false);
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(detailLevel22);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "*global*" + "'", str34, "*global*");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet39);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        java.io.PrintStream printStream1 = new java.io.PrintStream("PARAM_LIST");
        printStream1.write(40);
        printStream1.flush();
        java.io.PrintStream printStream6 = printStream1.append('4');
        printStream6.print((float) 1);
        org.junit.Assert.assertNotNull(printStream6);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        jSTypeRegistry6.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] { jSType8 };
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParameters(jSTypeArray9);
        int int11 = node3.getIndexOfChild(node10);
        boolean boolean12 = node3.isDelProp();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean17 = node16.isTry();
        java.lang.String str18 = node16.toString();
        node3.addChildToBack(node16);
        boolean boolean20 = node16.isArrayLit();
        com.google.javascript.rhino.Node node21 = node16.getLastSibling();
        boolean boolean22 = node16.isGetProp();
        int int23 = node16.getSideEffectFlags();
        boolean boolean24 = node16.isSwitch();
        boolean boolean25 = node16.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING PARAM_LIST 49" + "'", str18, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setOutputCharset("");
        compilerOptions0.setDefineToNumberLiteral("2019/07/12 07:12", 700);
        compilerOptions0.disambiguateProperties = false;
        compilerOptions0.extractPrototypeMemberDeclarations = false;
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        jSTypeRegistry6.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] { jSType8 };
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParameters(jSTypeArray9);
        int int11 = node3.getIndexOfChild(node10);
        boolean boolean12 = node3.isDelProp();
        java.lang.Object obj14 = null;
        node3.putProp((int) '#', obj14);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry18.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        node22.addChildrenToBack(node28);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry31.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        boolean boolean36 = node35.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, node22, node35, node42, node49, 0, 49);
        com.google.javascript.rhino.Node node53 = node22.getNext();
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel57 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions54.setSourceMapDetailLevel(detailLevel57);
        compilerOptions54.inlineFunctions = true;
        compilerOptions54.setCommonJSModulePathPrefix(":");
        compilerOptions54.setCrossModuleCodeMotion(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy68 = compilerOptions65.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap69 = compilerOptions65.getTweakReplacements();
        boolean boolean70 = strMap69.isEmpty();
        java.lang.Object obj71 = null;
        com.google.javascript.rhino.Node node72 = strMap69.get(obj71);
        java.util.Set<java.lang.String> strSet73 = strMap69.keySet();
        compilerOptions54.setIdGenerators(strSet73);
        node53.setDirectives(strSet73);
        com.google.javascript.rhino.Node node76 = node3.useSourceInfoIfMissingFrom(node53);
        node53.setSourceEncodedPosition(196607);
        node53.addSuppression("DiagnosticGroup<java.io.IOException: OFF>");
        boolean boolean81 = node53.isParamList();
        boolean boolean82 = node53.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(detailLevel57);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy68 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy68.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.error("2019/07/12 07:12", "DiagnosticGroup<goog.exportSymbol>");
        org.junit.Assert.assertNotNull(diagnosticType2);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        boolean boolean8 = file6.mkdirs();
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file6, charset9);
        java.io.File file13 = new java.io.File(":", "hi!");
        boolean boolean16 = file13.setExecutable(true, false);
        boolean boolean18 = file13.setWritable(false);
        boolean boolean19 = file13.canWrite();
        java.net.URI uRI20 = file13.toURI();
        boolean boolean21 = file6.renameTo(file13);
        boolean boolean22 = file13.setReadOnly();
        boolean boolean23 = file13.canWrite();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile24 = com.google.javascript.jscomp.JSSourceFile.fromFile(file13);
        java.lang.String str25 = jSSourceFile24.getName();
        com.google.javascript.jscomp.Region region27 = jSSourceFile24.getRegion(1);
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280491065344L + "'", long7 == 280491065344L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertEquals(file13.getParent(), ":");
        org.junit.Assert.assertEquals(file13.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(jSSourceFile24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + ":/hi!" + "'", str25, ":/hi!");
        org.junit.Assert.assertNull(region27);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions0.setTracer(tracerMode3);
        compilerOptions0.setFoldConstants(true);
        compilerOptions0.flowSensitiveInlineVariables = true;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel11 = compilerOptions0.sourceMapDetailLevel;
        boolean boolean12 = compilerOptions0.generatePseudoNames;
        boolean boolean13 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.optimizeArgumentsArray = true;
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(detailLevel11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.rhino.InputId inputId8 = jsAst6.getInputId();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.JSModule jSModule11 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.CompilerInput compilerInput13 = jSModule11.getByName("FINEST");
        com.google.javascript.jscomp.SourceFile sourceFile16 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int18 = sourceFile16.getLineOfOffset((int) (short) 1);
        java.lang.String str19 = sourceFile16.getName();
        java.lang.String str20 = sourceFile16.getName();
        java.lang.String str21 = sourceFile16.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput23 = new com.google.javascript.jscomp.CompilerInput(sourceFile16, true);
        com.google.javascript.jscomp.CompilerInput compilerInput24 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput23);
        com.google.javascript.jscomp.JSModule jSModule25 = compilerInput23.getModule();
        com.google.javascript.jscomp.JSModule jSModule27 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler28 = new com.google.javascript.jscomp.Compiler();
        jSModule27.sortInputsByDeps(compiler28);
        java.lang.String str30 = jSModule27.getName();
        compilerInput23.setModule(jSModule27);
        jSModule11.addDependency(jSModule27);
        jSModule11.clearAsts();
        jSModule11.clearAsts();
        java.io.PrintStream printStream35 = null;
        com.google.javascript.jscomp.Compiler compiler36 = new com.google.javascript.jscomp.Compiler(printStream35);
        com.google.javascript.jscomp.ErrorManager errorManager37 = compiler36.getErrorManager();
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode38 = compiler36.languageMode();
        jSModule11.sortInputsByDeps(compiler36);
        com.google.javascript.rhino.Node node40 = jsAst6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler36);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(inputId8);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNull(compilerInput13);
        org.junit.Assert.assertNotNull(sourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(jSModule25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "STRING PARAM_LIST 49" + "'", str30, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(errorManager37);
        org.junit.Assert.assertTrue("'" + languageMode38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode38.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        jSTypeRegistry6.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] { jSType8 };
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParameters(jSTypeArray9);
        int int11 = node3.getIndexOfChild(node10);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        node18.addChildrenToBack(node24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, node18, node31, node38, node45, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry51.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry57.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        node55.addChildrenToBack(node61);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        boolean boolean69 = node68.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry71.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        boolean boolean76 = node75.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry78.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, node55, node68, node75, node82, 0, 49);
        com.google.javascript.rhino.Node node86 = node48.useSourceInfoFrom(node68);
        boolean boolean87 = node68.isExprResult();
        int int88 = node3.getIndexOfChild(node68);
        boolean boolean89 = node3.hasOneChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = node3.siblings();
        boolean boolean91 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(nodeIterable90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("FINEST");
        stats1.gzSize = 300;
        int int4 = stats1.gzDiff;
        int int5 = stats1.diff;
        int int6 = stats1.diff;
        int int7 = stats1.size;
        int int8 = stats1.diff;
        stats1.diff = (byte) 10;
        int int11 = stats1.changes;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        compilerOptions0.setCrossModuleCodeMotion(false);
        boolean boolean8 = compilerOptions0.inlineConstantVars;
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.lang.String[] strArray6 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerOptions0.setStripTypes((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode11 = null;
        compilerOptions10.setTracerMode(tracerMode11);
        boolean boolean13 = compilerOptions10.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel14 = compilerOptions10.sourceMapDetailLevel;
        compilerOptions10.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.crossModuleMethodMotion = true;
        compilerOptions17.optimizeParameters = true;
        compilerOptions17.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions17.checkGlobalNamesLevel;
        compilerOptions10.setReportMissingOverride(checkLevel25);
        compilerOptions0.setCheckUnreachableCode(checkLevel25);
        compilerOptions0.syntheticBlockStartMarker = "*global*";
        compilerOptions0.prettyPrint = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.crossModuleMethodMotion = true;
        compilerOptions32.optimizeParameters = true;
        compilerOptions32.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions32.checkGlobalNamesLevel;
        compilerOptions0.checkGlobalNamesLevel = checkLevel40;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CodingConvention codingConvention44 = compilerOptions0.getCodingConvention();
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions0.checkRequires;
        boolean boolean46 = compilerOptions0.deadAssignmentElimination;
        boolean boolean47 = compilerOptions0.checkTypes;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(detailLevel14);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(codingConvention44);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compiler1.isIdeMode();
        com.google.javascript.jscomp.JSError[] jSErrorArray58 = compiler1.getMessages();
        java.lang.String[] strArray59 = compiler1.toSourceArray();
        com.google.javascript.jscomp.ErrorManager errorManager60 = compiler1.getErrorManager();
        errorManager60.setTypedPercent((double) 280487931904L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSErrorArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(errorManager60);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.rhino.InputId inputId8 = jsAst6.getInputId();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        jsAst6.clearAst();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(inputId8);
        org.junit.Assert.assertNotNull(sourceFile9);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap4 = compilerOptions0.getTweakReplacements();
        boolean boolean5 = strMap4.isEmpty();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap10 = compilerOptions6.getTweakReplacements();
        boolean boolean11 = strMap10.isEmpty();
        strMap10.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        boolean boolean19 = node18.isIn();
        boolean boolean20 = strMap10.containsValue((java.lang.Object) node18);
        boolean boolean21 = strMap4.containsKey((java.lang.Object) strMap10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.crossModuleMethodMotion = true;
        compilerOptions22.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy27 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy31 = compilerOptions28.propertyRenaming;
        compilerOptions22.setRenamingPolicy(variableRenamingPolicy27, propertyRenamingPolicy31);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.crossModuleMethodMotion = true;
        compilerOptions33.skipAllCompilerPasses();
        boolean boolean37 = compilerOptions33.flowSensitiveInlineVariables;
        java.lang.String[] strArray47 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        compilerOptions33.stripTypes = strSet48;
        compilerOptions22.setStripNamePrefixes((java.util.Set<java.lang.String>) strSet48);
        com.google.javascript.rhino.Node node52 = strMap4.get((java.lang.Object) compilerOptions22);
        compilerOptions22.setShadowVariables(true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy31 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy31.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        java.io.File file1 = new java.io.File(":");
        java.io.File file3 = new java.io.File(file1, "FINEST");
        java.lang.String str4 = file1.getName();
        boolean boolean5 = file1.createNewFile();
        file1.deleteOnExit();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), ":");
        org.junit.Assert.assertEquals(file3.getParent(), ":");
        org.junit.Assert.assertEquals(file3.toString(), ":/FINEST");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":" + "'", str4, ":");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy5, propertyRenamingPolicy9);
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        compilerOptions0.setInlineFunctions(true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTransformAMDToCJSModules(false);
        boolean boolean7 = compilerOptions0.rewriteFunctionExpressions;
        boolean boolean8 = compilerOptions0.recordFunctionInformation;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        double double3 = compiler1.getProgress();
        com.google.javascript.jscomp.Scope scope4 = compiler1.getTopScope();
        com.google.javascript.jscomp.ErrorManager errorManager5 = compiler1.getErrorManager();
        int int6 = errorManager5.getErrorCount();
        com.google.javascript.jscomp.Compiler compiler7 = new com.google.javascript.jscomp.Compiler(errorManager5);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNull(scope4);
        org.junit.Assert.assertNotNull(errorManager5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setIdeMode(false);
        compilerOptions0.setDefineToBooleanLiteral("", true);
        java.lang.String str12 = compilerOptions0.renamePrefixNamespace;
        java.util.Set<java.lang.String> strSet13 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        java.lang.String[] strArray20 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        compilerOptions14.setStripTypes((java.util.Set<java.lang.String>) strSet21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode25 = null;
        compilerOptions24.setTracerMode(tracerMode25);
        boolean boolean27 = compilerOptions24.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel28 = compilerOptions24.sourceMapDetailLevel;
        compilerOptions24.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.crossModuleMethodMotion = true;
        compilerOptions31.optimizeParameters = true;
        compilerOptions31.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions31.checkGlobalNamesLevel;
        compilerOptions24.setReportMissingOverride(checkLevel39);
        compilerOptions14.setCheckUnreachableCode(checkLevel39);
        compilerOptions14.syntheticBlockStartMarker = "*global*";
        compilerOptions14.prettyPrint = false;
        boolean boolean46 = compilerOptions14.aliasAllStrings;
        com.google.javascript.jscomp.CompilerOptions.Reach reach47 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions14.setInlineVariables(reach47);
        compilerOptions0.setRemoveUnusedVariables(reach47);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping52 = new com.google.javascript.jscomp.SourceMap.LocationMapping("PARAM_LIST", "STRING PARAM_LIST 49");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray53 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] { locationMapping52 };
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList54 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList54, locationMappingArray53);
        compilerOptions0.sourceMapLocationMappings = locationMappingList54;
        compilerOptions0.setDefineToStringLiteral(":", ":");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(detailLevel28);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + reach47 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach47.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNotNull(locationMappingArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.checkTypes = false;
        boolean boolean18 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setInlineVariables(false);
        compilerOptions0.setRemoveAbstractMethods(false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setReturnsTainted();
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.nio.charset.Charset charset3 = null;
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("STRING PARAM_LIST 49", charset3);
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int9 = sourceFile7.getLineOfOffset((int) (short) 1);
        java.lang.String str10 = sourceFile7.getName();
        com.google.javascript.jscomp.JsAst jsAst11 = new com.google.javascript.jscomp.JsAst(sourceFile7);
        jsAst11.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile13 = jsAst11.getSourceFile();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.optimizeParameters = true;
        compilerOptions14.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions14.checkGlobalNamesLevel;
        compilerOptions14.setCheckMissingGetCssNameBlacklist("");
        boolean boolean25 = compilerOptions14.removeTryCatchFinally;
        com.google.javascript.jscomp.Result result26 = compiler1.compile(sourceFile4, sourceFile13, compilerOptions14);
        java.lang.String str27 = result26.debugLog;
        com.google.javascript.jscomp.VariableMap variableMap28 = result26.propertyMap;
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(result26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(variableMap28);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = null;
        node19.setJSDocInfo(jSDocInfo37);
        com.google.javascript.rhino.Node node39 = node19.cloneNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node39.getJSDocInfo();
        java.lang.String str41 = node39.getSourceFileName();
        int int42 = node39.getLength();
        node39.setSourceEncodedPositionForTree(4095);
        int int45 = node39.getCharno();
        boolean boolean46 = node39.isIn();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4095 + "'", int45 == 4095);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(2, "PARAM_LIST\n");
        boolean boolean3 = node2.isNull();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList8 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList8, jSTypeArray7);
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList8);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry12.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        node10.addChildrenToBack(node16);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        com.google.javascript.rhino.Node node23 = jSTypeRegistry19.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        boolean boolean24 = node23.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry26.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.Node node37 = jSTypeRegistry33.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, node10, node23, node30, node37, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry43.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry49.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        node47.addChildrenToBack(node53);
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry56.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry63.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        boolean boolean68 = node67.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry70.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, node47, node60, node67, node74, 0, 49);
        com.google.javascript.rhino.Node node78 = node40.useSourceInfoFrom(node60);
        java.lang.String str79 = node60.toString();
        com.google.javascript.rhino.Node node80 = node2.srcref(node60);
        boolean boolean81 = node60.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PARAM_LIST" + "'", str79, "PARAM_LIST");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int6 = sourceFile4.getLineOfOffset((int) (short) 1);
        java.io.Reader reader7 = sourceFile4.getCodeReader();
        int int8 = reader7.read();
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromReader("*global*", reader7);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        com.google.javascript.jscomp.SourceFile sourceFile13 = builder11.buildFromFile("/experiment/:/hi!");
        com.google.javascript.jscomp.SourceFile.Builder builder15 = builder11.withOriginalPath(":");
        com.google.javascript.jscomp.SourceFile sourceFile17 = builder15.buildFromFile("java.io.IOException: OFF");
        com.google.javascript.jscomp.SourceFile.Generator generator19 = null;
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder15.buildFromGenerator("OFF", generator19);
        com.google.javascript.jscomp.SourceFile sourceFile23 = builder15.buildFromCode("PARAM_LIST\n", "/experiment/:/hi!");
        com.google.javascript.jscomp.SourceFile.Builder builder25 = builder15.withOriginalPath("PARAM_LIST");
        java.io.File file31 = new java.io.File(":");
        java.io.File file33 = new java.io.File(file31, "FINEST");
        java.io.File file34 = java.io.File.createTempFile("OFF", "", file31);
        java.io.File file35 = file31.getCanonicalFile();
        boolean boolean36 = file31.mkdirs();
        java.io.File file37 = java.io.File.createTempFile("Unversioned directory", "java.io.IOException: OFF", file31);
        boolean boolean40 = file31.setExecutable(false, true);
        long long41 = file31.length();
        java.nio.charset.Charset charset42 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str43 = charset42.name();
        java.util.Set<java.lang.String> strSet44 = charset42.aliases();
        java.util.Set<java.lang.String> strSet45 = charset42.aliases();
        com.google.javascript.jscomp.SourceFile sourceFile46 = com.google.javascript.jscomp.SourceFile.fromFile(file31, charset42);
        com.google.javascript.jscomp.SourceFile.Builder builder47 = builder25.withCharset(charset42);
        java.io.File file50 = new java.io.File(":", "hi!");
        boolean boolean53 = file50.setExecutable(true, false);
        boolean boolean54 = file50.mkdir();
        boolean boolean55 = file50.createNewFile();
        com.google.javascript.jscomp.SourceFile sourceFile56 = builder47.buildFromFile(file50);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(sourceFile17);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), ":");
        org.junit.Assert.assertEquals(file33.getParent(), ":");
        org.junit.Assert.assertEquals(file33.toString(), ":/FINEST");
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), ":");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), ":/OFF3787622509558661513");
        org.junit.Assert.assertNotNull(file35);
// flaky:         org.junit.Assert.assertEquals(file35.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file35.toString(), "/experiment/:");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), ":");
// flaky:         org.junit.Assert.assertEquals(file37.toString(), ":/Unversioned directory6409045050142457070java.io.IOException: OFF");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4096L + "'", long41 == 4096L);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "US-ASCII" + "'", str43, "US-ASCII");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(sourceFile46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals(file50.getParent(), ":");
        org.junit.Assert.assertEquals(file50.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(sourceFile56);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream6 = jSTypeList3.parallelStream();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream13 = jSTypeList10.parallelStream();
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator14 = jSTypeList10.spliterator();
        boolean boolean15 = jSTypeList3.containsAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        boolean boolean22 = jSTypeList17.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        boolean boolean29 = jSTypeList24.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        boolean boolean30 = jSTypeList17.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        boolean boolean31 = jSTypeList17.isEmpty();
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream32 = jSTypeList17.parallelStream();
        boolean boolean33 = jSTypeList3.containsAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeList3.remove((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeStream6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeStream13);
        org.junit.Assert.assertNotNull(jSTypeSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSTypeStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.labelRenaming = true;
        boolean boolean4 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.setInlineGetters(true);
        boolean boolean7 = compilerOptions0.removeUnusedClassProperties;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode8 = compilerOptions0.getLanguageIn();
        compilerOptions0.locale = "/experiment/:/hi!/goog.exportSymbol6344102151034639300();";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + languageMode8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode8.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.generatePseudoNames;
        java.util.Set<java.lang.String> strSet4 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.reportMissingOverride;
        boolean boolean6 = compilerOptions0.exportTestFunctions;
        java.util.Set<java.lang.String> strSet7 = compilerOptions0.stripTypes;
        boolean boolean8 = compilerOptions0.printInputDelimiter;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        compilerOptions9.setProtectHiddenSideEffects(true);
        boolean boolean14 = compilerOptions9.isExternExportsEnabled();
        boolean boolean15 = compilerOptions9.recordFunctionInformation;
        compilerOptions9.setInputDelimiter("FINEST");
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = null;
        compilerOptions18.setTracerMode(tracerMode19);
        boolean boolean21 = compilerOptions18.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = compilerOptions18.sourceMapDetailLevel;
        compilerOptions18.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet25 = compilerOptions18.stripNameSuffixes;
        com.google.javascript.jscomp.SourceFile sourceFile27 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceFile27, true);
        com.google.javascript.rhino.InputId inputId31 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput33 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput29, inputId31, true);
        java.lang.String str34 = compilerInput33.toString();
        boolean boolean35 = strSet25.contains((java.lang.Object) compilerInput33);
        compilerOptions9.setExtraAnnotationNames(strSet25);
        boolean boolean37 = strSet25.isEmpty();
        compilerOptions0.aliasableStrings = strSet25;
        java.util.Iterator<java.lang.String> strItor39 = strSet25.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet25.spliterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(detailLevel22);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "*global*" + "'", str34, "*global*");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strSpliterator40);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Object obj10 = null;
        boolean boolean11 = jSTypeList3.remove(obj10);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream12 = jSTypeList3.stream();
        java.util.Iterator<com.google.javascript.rhino.jstype.JSType> jSTypeItor13 = jSTypeList3.iterator();
        java.util.Collection<com.google.javascript.rhino.jstype.JSType> jSTypeCollection14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = jSTypeList3.containsAll(jSTypeCollection14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeStream12);
        org.junit.Assert.assertNotNull(jSTypeItor13);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions0.setTracer(tracerMode6);
        boolean boolean8 = compilerOptions0.collapseVariableDeclarations;
        compilerOptions0.setSyntheticBlockStartMarker("sun.util.logging.resources.logging");
        com.google.javascript.jscomp.SourceMap.Format format11 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode14 = compilerOptions0.getLanguageIn();
        org.junit.Assert.assertTrue("'" + tracerMode6 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode6.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(format11);
        org.junit.Assert.assertTrue("'" + languageMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode14.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        jSTypeRegistry1.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry1.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope14 = null;
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry1.getType(jSTypeStaticScope14, "PARAM_LIST", "java.io.IOException: ", 44, 8);
        jSTypeRegistry1.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSType19);
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setProtectHiddenSideEffects(true);
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        boolean boolean6 = compilerOptions0.aliasAllStrings;
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.inlineGetters = false;
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = com.google.javascript.jscomp.CheckLevel.OFF;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel12);
        compilerOptions0.setUnaliasableGlobals("STRING PARAM_LIST 49");
        boolean boolean16 = compilerOptions0.collapseProperties;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        jSModule1.removeAll();
        com.google.javascript.jscomp.SourceFile sourceFile4 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput6 = new com.google.javascript.jscomp.CompilerInput(sourceFile4, true);
        com.google.javascript.rhino.InputId inputId8 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput6, inputId8, true);
        java.lang.String str11 = compilerInput10.toString();
        com.google.javascript.jscomp.SourceFile sourceFile12 = compilerInput10.getSourceFile();
        jSModule1.remove(compilerInput10);
        com.google.javascript.jscomp.CompilerInput compilerInput15 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput10, true);
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput15);
        java.lang.String str17 = compilerInput16.getCode();
        boolean boolean18 = compilerInput16.isExtern();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "*global*" + "'", str11, "*global*");
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        java.lang.String str58 = compiler1.toSource();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState59 = compiler1.getState();
        com.google.javascript.jscomp.JSModule jSModule61 = new com.google.javascript.jscomp.JSModule("/");
        jSModule61.setDepth(53);
        java.lang.String str64 = compiler1.toSource(jSModule61);
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.crossModuleMethodMotion = true;
        compilerOptions65.syntheticBlockEndMarker = "hi!";
        boolean boolean70 = compilerOptions65.closurePass;
        compilerOptions65.checkSuspiciousCode = true;
        compilerOptions65.convertToDottedProperties = true;
        compiler1.initOptions(compilerOptions65);
        com.google.javascript.rhino.Node node76 = compiler1.getRoot();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(intermediateState59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node76);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        com.google.javascript.jscomp.CompilerInput compilerInput9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput7, false);
        com.google.javascript.rhino.InputId inputId10 = compilerInput9.getInputId();
        java.io.PrintStream printStream11 = null;
        com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler(printStream11);
        java.lang.String str13 = compiler12.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions14.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions14.setTracer(tracerMode20);
        compiler12.initOptions(compilerOptions14);
        com.google.javascript.jscomp.SourceFile sourceFile25 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int27 = sourceFile25.getLineOfOffset((int) (short) 1);
        java.lang.String str28 = sourceFile25.getName();
        java.lang.String str29 = sourceFile25.getName();
        java.lang.String str30 = sourceFile25.getName();
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        com.google.javascript.jscomp.JsAst jsAst37 = new com.google.javascript.jscomp.JsAst(sourceFile33);
        jsAst37.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst37, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        java.lang.String str47 = sourceFile44.getName();
        java.lang.String str48 = sourceFile44.getName();
        java.lang.String str49 = sourceFile44.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput51 = new com.google.javascript.jscomp.CompilerInput(sourceFile44, true);
        com.google.javascript.jscomp.CompilerInput compilerInput52 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput51);
        com.google.javascript.jscomp.SourceFile sourceFile55 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int57 = sourceFile55.getLineOfOffset((int) (short) 1);
        int int59 = sourceFile55.getColumnOfOffset(8);
        compilerInput52.setSourceFile(sourceFile55);
        jsAst37.setSourceFile(sourceFile55);
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions62.crossModuleMethodMotion = true;
        compilerOptions62.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result67 = compiler12.compile(sourceFile25, sourceFile55, compilerOptions62);
        boolean boolean68 = compiler12.isIdeMode();
        com.google.javascript.jscomp.JSError[] jSErrorArray69 = compiler12.getMessages();
        com.google.javascript.jscomp.SourceFile.Builder builder70 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile74 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int76 = sourceFile74.getLineOfOffset((int) (short) 1);
        java.io.Reader reader77 = sourceFile74.getCodeReader();
        int int78 = reader77.read();
        com.google.javascript.jscomp.SourceFile sourceFile79 = builder70.buildFromReader("*global*", reader77);
        java.io.File file82 = new java.io.File(":", "hi!");
        boolean boolean85 = file82.setExecutable(false, false);
        java.io.File file86 = file82.getParentFile();
        long long87 = file86.getUsableSpace();
        boolean boolean88 = file86.mkdirs();
        java.nio.charset.Charset charset89 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile90 = com.google.javascript.jscomp.JSSourceFile.fromFile(file86, charset89);
        boolean boolean91 = file86.canExecute();
        com.google.javascript.jscomp.SourceFile sourceFile92 = builder70.buildFromFile(file86);
        java.lang.String str93 = sourceFile92.getName();
        com.google.javascript.rhino.Node node94 = compiler12.parse(sourceFile92);
        com.google.javascript.jscomp.ErrorManager errorManager95 = compiler12.getErrorManager();
        boolean boolean96 = inputId10.equals((java.lang.Object) errorManager95);
        double double97 = errorManager95.getTypedPercent();
        com.google.javascript.jscomp.JSError[] jSErrorArray98 = errorManager95.getErrors();
        org.junit.Assert.assertNotNull(inputId10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + tracerMode20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode20.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSErrorArray69);
        org.junit.Assert.assertNotNull(sourceFile74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(reader77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(sourceFile79);
        org.junit.Assert.assertEquals(file82.getParent(), ":");
        org.junit.Assert.assertEquals(file82.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(file86);
        org.junit.Assert.assertNull("file86.getParent() == null", file86.getParent());
        org.junit.Assert.assertEquals(file86.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 280490536960L + "'", long87 == 280490536960L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSSourceFile90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(sourceFile92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + ":" + "'", str93, ":");
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(errorManager95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(jSErrorArray98);
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel3 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions0.setSourceMapDetailLevel(detailLevel3);
        compilerOptions0.inlineFunctions = true;
        compilerOptions0.setCommonJSModulePathPrefix(":");
        compilerOptions0.setCrossModuleCodeMotion(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy14 = compilerOptions11.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap15 = compilerOptions11.getTweakReplacements();
        boolean boolean16 = strMap15.isEmpty();
        java.lang.Object obj17 = null;
        com.google.javascript.rhino.Node node18 = strMap15.get(obj17);
        java.util.Set<java.lang.String> strSet19 = strMap15.keySet();
        compilerOptions0.setIdGenerators(strSet19);
        com.google.javascript.jscomp.CompilerOptions.Reach reach21 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setRemoveUnusedVariable(reach21);
        java.lang.String[] strArray33 = new java.lang.String[] { "InputId: *global*", "OFF", "*global*.  at *global* line (unknown line) : (unknown column)", "PARAM_LIST\n", "/", "*global*.  at *global* line (unknown line) : (unknown column)", "hi!", "/experiment/:/hi!", "PARAM_LIST" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        compilerOptions0.setReplaceStringsConfiguration("FINEST", (java.util.List<java.lang.String>) strList34);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.inlineGetters = false;
        compilerOptions0.setDefineToNumberLiteral("*global*.  at *global* line (unknown line) : (unknown column)", 32);
        boolean boolean44 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        boolean boolean47 = compilerOptions0.generateExports;
        compilerOptions0.setReplaceStringsPlaceholderToken("JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}");
        org.junit.Assert.assertNotNull(detailLevel3);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy14 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy14.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + reach21 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach21.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.crossModuleMethodMotion = true;
        compilerOptions8.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions8.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy17);
        com.google.javascript.jscomp.SourceMap.Format format19 = compilerOptions8.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format19);
        boolean boolean21 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean22 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.setLineBreak(false);
        compilerOptions0.setExportTestFunctions(false);
        compilerOptions0.inputDelimiter = "Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: NUMBER 0.0\n";
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(format19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.Node node37 = node6.getNext();
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel41 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions38.setSourceMapDetailLevel(detailLevel41);
        compilerOptions38.inlineFunctions = true;
        compilerOptions38.setCommonJSModulePathPrefix(":");
        compilerOptions38.setCrossModuleCodeMotion(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy52 = compilerOptions49.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap53 = compilerOptions49.getTweakReplacements();
        boolean boolean54 = strMap53.isEmpty();
        java.lang.Object obj55 = null;
        com.google.javascript.rhino.Node node56 = strMap53.get(obj55);
        java.util.Set<java.lang.String> strSet57 = strMap53.keySet();
        compilerOptions38.setIdGenerators(strSet57);
        node37.setDirectives(strSet57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.crossModuleMethodMotion = true;
        compilerOptions60.setProtectHiddenSideEffects(true);
        compilerOptions60.moveFunctionDeclarations = true;
        boolean boolean67 = compilerOptions60.inlineConstantVars;
        compilerOptions60.removeUnusedClassProperties = true;
        boolean boolean70 = strSet57.remove((java.lang.Object) true);
        java.util.Spliterator<java.lang.String> strSpliterator71 = strSet57.spliterator();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(detailLevel41);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy52 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy52.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSpliterator71);
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        com.google.javascript.jscomp.CheckLevel checkLevel4 = com.google.javascript.jscomp.CheckLevel.WARNING;
        com.google.javascript.jscomp.DiagnosticType diagnosticType6 = com.google.javascript.jscomp.DiagnosticType.make("WARNING", checkLevel4, "hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { ":/hi!", "US-ASCII" };
        com.google.javascript.jscomp.JSError jSError10 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", (-1), (-1), diagnosticType6, strArray9);
        int int11 = jSError10.getNodeSourceOffset();
        int int12 = jSError10.getLineNumber();
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.WARNING + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.WARNING));
        org.junit.Assert.assertNotNull(diagnosticType6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(jSError10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        boolean boolean8 = compilerOptions0.checkSuspiciousCode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str10 = compilerOptions9.syntheticBlockStartMarker;
        compilerOptions9.labelRenaming = true;
        boolean boolean13 = compilerOptions9.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.skipAllCompilerPasses();
        boolean boolean18 = compilerOptions14.flowSensitiveInlineVariables;
        java.lang.String[] strArray28 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        compilerOptions14.stripTypes = strSet29;
        compilerOptions9.setStripNameSuffixes((java.util.Set<java.lang.String>) strSet29);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions0.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean36 = compilerOptions35.moveFunctionDeclarations;
        compilerOptions35.crossModuleCodeMotion = true;
        compilerOptions35.checkSymbols = true;
        compilerOptions35.setExtractPrototypeMemberDeclarations(true);
        boolean boolean43 = compilerOptions35.removeUnusedVars;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode45 = null;
        compilerOptions44.setTracerMode(tracerMode45);
        boolean boolean47 = compilerOptions44.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel48 = compilerOptions44.sourceMapDetailLevel;
        compilerOptions44.setColorizeErrorOutput(true);
        compilerOptions44.collapseProperties = false;
        compilerOptions44.setSkipAllPasses(false);
        compilerOptions44.setRewriteNewDateGoogNow(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions57.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode63 = null;
        compilerOptions57.setLanguageOut(languageMode63);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy65 = null;
        compilerOptions57.variableRenaming = variableRenamingPolicy65;
        com.google.javascript.jscomp.CheckLevel checkLevel67 = compilerOptions57.checkUnreachableCode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions68.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy71 = compilerOptions68.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap72 = compilerOptions68.getTweakReplacements();
        boolean boolean73 = strMap72.isEmpty();
        java.lang.Object obj74 = null;
        com.google.javascript.rhino.Node node75 = strMap72.get(obj74);
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel79 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions76.setSourceMapDetailLevel(detailLevel79);
        boolean boolean81 = compilerOptions76.ideMode;
        compilerOptions76.setUnaliasableGlobals("");
        com.google.javascript.jscomp.CheckLevel checkLevel84 = compilerOptions76.checkUnreachableCode;
        com.google.javascript.rhino.Node node85 = strMap72.remove((java.lang.Object) checkLevel84);
        compilerOptions57.checkMissingGetCssNameLevel = checkLevel84;
        compilerOptions44.checkUnreachableCode = checkLevel84;
        compilerOptions35.setCheckRequires(checkLevel84);
        compilerOptions0.setCheckMissingReturn(checkLevel84);
        java.lang.String str90 = compilerOptions0.inputDelimiter;
        compilerOptions0.setCheckSuspiciousCode(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(detailLevel48);
        org.junit.Assert.assertTrue("'" + checkLevel67 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel67.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy71 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy71.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(detailLevel79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + checkLevel84 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel84.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "// Input %num%" + "'", str90, "// Input %num%");
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("OFF");
        boolean boolean2 = sourceFile1.isExtern();
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        java.lang.String str5 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.setOptimizeCalls(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.crossModuleMethodMotion = true;
        compilerOptions8.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions8.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy17);
        compilerOptions8.setTransformAMDToCJSModules(true);
        compilerOptions8.ambiguateProperties = true;
        compilerOptions8.inlineLocalFunctions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode28 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions25.setTracer(tracerMode28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode31 = null;
        compilerOptions30.setTracerMode(tracerMode31);
        boolean boolean33 = compilerOptions30.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel34 = compilerOptions30.sourceMapDetailLevel;
        compilerOptions30.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet37 = compilerOptions30.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode39 = null;
        compilerOptions38.setTracerMode(tracerMode39);
        boolean boolean41 = compilerOptions38.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel42 = compilerOptions38.sourceMapDetailLevel;
        compilerOptions38.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.crossModuleMethodMotion = true;
        compilerOptions45.optimizeParameters = true;
        compilerOptions45.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions45.checkGlobalNamesLevel;
        compilerOptions38.setReportMissingOverride(checkLevel53);
        compilerOptions30.setAggressiveVarCheck(checkLevel53);
        compilerOptions25.setCheckUnreachableCode(checkLevel53);
        com.google.javascript.jscomp.SourceMap.Format format57 = compilerOptions25.sourceMapFormat;
        compilerOptions8.setSourceMapFormat(format57);
        compilerOptions0.sourceMapFormat = format57;
        compilerOptions0.disambiguateProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel62 = compilerOptions0.checkGlobalThisLevel;
        boolean boolean63 = compilerOptions0.removeUnusedLocalVars;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode28.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(detailLevel34);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(detailLevel42);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(format57);
        org.junit.Assert.assertTrue("'" + checkLevel62 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel62.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile10 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int12 = sourceFile10.getLineOfOffset((int) (short) 1);
        java.lang.String str13 = sourceFile10.getName();
        java.lang.String str14 = sourceFile10.getName();
        jsAst6.setSourceFile(sourceFile10);
        com.google.javascript.jscomp.SourceFile sourceFile16 = jsAst6.getSourceFile();
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile20 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int22 = sourceFile20.getLineOfOffset((int) (short) 1);
        java.lang.String str23 = sourceFile20.getName();
        com.google.javascript.jscomp.JsAst jsAst24 = new com.google.javascript.jscomp.JsAst(sourceFile20);
        jsAst24.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile28 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int30 = sourceFile28.getLineOfOffset((int) (short) 1);
        java.lang.String str31 = sourceFile28.getName();
        java.lang.String str32 = sourceFile28.getName();
        jsAst24.setSourceFile(sourceFile28);
        com.google.javascript.jscomp.SourceFile sourceFile34 = jsAst24.getSourceFile();
        boolean boolean35 = sourceFile34.isExtern();
        int int37 = sourceFile34.getColumnOfOffset(36);
        jsAst6.setSourceFile(sourceFile34);
        java.io.File file41 = new java.io.File(":", "hi!");
        boolean boolean44 = file41.setExecutable(false, false);
        boolean boolean46 = file41.setReadable(false);
        java.io.File file47 = file41.getCanonicalFile();
        java.io.File file49 = new java.io.File(":");
        java.io.File file51 = new java.io.File(file49, "FINEST");
        boolean boolean52 = file41.renameTo(file49);
        com.google.javascript.jscomp.JSSourceFile jSSourceFile53 = com.google.javascript.jscomp.JSSourceFile.fromFile(file41);
        java.lang.String str55 = jSSourceFile53.getLine(42);
        jSSourceFile53.setOriginalPath("PARAM_LIST\n    PARAM_LIST\n");
        jSSourceFile53.clearCachedSource();
        // The following exception was thrown during execution in test generation
        try {
            jsAst6.setSourceFile((com.google.javascript.jscomp.SourceFile) jSSourceFile53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(sourceFile16);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(sourceFile28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(sourceFile34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36 + "'", int37 == 36);
        org.junit.Assert.assertEquals(file41.getParent(), ":");
        org.junit.Assert.assertEquals(file41.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(file47);
// flaky:         org.junit.Assert.assertEquals(file47.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertNull("file49.getParent() == null", file49.getParent());
        org.junit.Assert.assertEquals(file49.toString(), ":");
        org.junit.Assert.assertEquals(file51.getParent(), ":");
        org.junit.Assert.assertEquals(file51.toString(), ":/FINEST");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSSourceFile53);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("java.io.IOException: ", 43, (int) '#');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean9 = node8.isTry();
        java.lang.String str10 = node8.toString();
        boolean boolean11 = node4.hasChild(node8);
        boolean boolean12 = node4.isFromExterns();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        boolean boolean19 = node18.isIn();
        boolean boolean20 = node18.isVoid();
        node18.setOptionalArg(true);
        node18.setVarArgs(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node18.getJSDocInfo();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(42, node4, node18);
        boolean boolean27 = node18.isNoSideEffectsCall();
        boolean boolean28 = node18.isNot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING PARAM_LIST 49" + "'", str10, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Object[] objArray6 = jSTypeList3.toArray();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel10 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions7.setSourceMapDetailLevel(detailLevel10);
        compilerOptions7.inlineFunctions = true;
        compilerOptions7.setCommonJSModulePathPrefix(":");
        compilerOptions7.setCrossModuleCodeMotion(true);
        compilerOptions7.disableRuntimeTypeCheck();
        boolean boolean19 = compilerOptions7.removeUnusedLocalVars;
        boolean boolean20 = compilerOptions7.generateExports;
        compilerOptions7.foldConstants = true;
        boolean boolean23 = jSTypeList3.remove((java.lang.Object) compilerOptions7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.crossModuleMethodMotion = true;
        compilerOptions24.optimizeParameters = true;
        compilerOptions24.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions24.checkGlobalNamesLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode34 = null;
        compilerOptions33.setTracerMode(tracerMode34);
        boolean boolean36 = compilerOptions33.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel37 = compilerOptions33.sourceMapDetailLevel;
        compilerOptions33.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet40 = compilerOptions33.stripNameSuffixes;
        com.google.javascript.jscomp.SourceFile sourceFile42 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput44 = new com.google.javascript.jscomp.CompilerInput(sourceFile42, true);
        com.google.javascript.rhino.InputId inputId46 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput48 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput44, inputId46, true);
        java.lang.String str49 = compilerInput48.toString();
        boolean boolean50 = strSet40.contains((java.lang.Object) compilerInput48);
        java.lang.Object[] objArray51 = strSet40.toArray();
        compilerOptions24.setStripTypes(strSet40);
        compilerOptions24.labelRenaming = false;
        java.util.Set<java.lang.String> strSet55 = compilerOptions24.stripTypePrefixes;
        compilerOptions7.stripNameSuffixes = strSet55;
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(detailLevel10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(detailLevel37);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "*global*" + "'", str49, "*global*");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray58 = errorManager57.getErrors();
        com.google.javascript.jscomp.JSError[] jSErrorArray59 = errorManager57.getErrors();
        errorManager57.generateReport();
        com.google.javascript.jscomp.Compiler compiler61 = new com.google.javascript.jscomp.Compiler(errorManager57);
        java.lang.String str64 = compiler61.getSourceLine("JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of optimization iterations: {0}", 0);
        com.google.javascript.jscomp.SourceFile sourceFile66 = com.google.javascript.jscomp.SourceFile.fromFile("*global*.  at *global* line (unknown line) : (unknown column)");
        sourceFile66.setOriginalPath("");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node69 = compiler61.parse(sourceFile66);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertNotNull(jSErrorArray58);
        org.junit.Assert.assertNotNull(jSErrorArray59);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(sourceFile66);
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.coalesceVariableNames = true;
        java.lang.String str9 = compilerOptions0.aliasStringsBlacklist;
        boolean boolean10 = compilerOptions0.deadAssignmentElimination;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.stripNameSuffixes;
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean5 = node4.isTry();
        java.lang.String str6 = node4.toString();
        boolean boolean7 = node4.isIn();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship12 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node4, node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node11.new FileLevelJsDocBuilder();
        boolean boolean14 = node11.isSetterDef();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry16.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        node20.addChildrenToBack(node26);
        boolean boolean28 = node26.isAnd();
        com.google.javascript.rhino.Node node29 = node11.copyInformationFromForTree(node26);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node11.getJsDocBuilderForNode();
        boolean boolean33 = node11.isNumber();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING PARAM_LIST 49" + "'", str6, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setIdeMode(false);
        compilerOptions0.setDefineToBooleanLiteral("", true);
        boolean boolean12 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.generateExports = true;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList15 = compilerOptions0.sourceMapLocationMappings;
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locationMappingList15);
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile8 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile12 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput14 = new com.google.javascript.jscomp.CompilerInput(sourceFile12, true);
        java.lang.String str15 = sourceFile12.getCode();
        sourceFile12.setOriginalPath("Unversioned directory");
        // The following exception was thrown during execution in test generation
        try {
            jsAst6.setSourceFile(sourceFile12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.ErrorManager errorManager12 = compiler1.getErrorManager();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter13 = compiler1.getReverseAbstractInterpreter();
        com.google.javascript.jscomp.JSModule jSModule15 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler16 = new com.google.javascript.jscomp.Compiler();
        jSModule15.sortInputsByDeps(compiler16);
        java.lang.String str18 = compiler1.toSource(jSModule15);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions19.setRuntimeTypeCheckLogFunction("FINEST");
        compilerOptions19.renamePrefixNamespace = ":/hi!";
        compilerOptions19.setMarkAsCompiled(true);
        compilerOptions19.recordFunctionInformation = false;
        boolean boolean30 = compilerOptions19.checkControlStructures;
        boolean boolean31 = compilerOptions19.isExternExportsEnabled();
        compilerOptions19.setReplaceStringsPlaceholderToken("*global*.  at *global* line (unknown line) : (unknown column)");
        compiler1.initOptions(compilerOptions19);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(errorManager12);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        com.google.javascript.jscomp.JSSourceFile jSSourceFile2 = com.google.javascript.jscomp.JSSourceFile.fromCode("/experiment/:/hi!", "PARAM_LIST\n");
        org.junit.Assert.assertNotNull(jSSourceFile2);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray58 = errorManager57.getWarnings();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertNotNull(jSErrorArray58);
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        int int2 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable11 = jSTypeRegistry1.getTypesWithProperty(":");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        jSTypeRegistry1.setResolveMode(resolveMode12);
        boolean boolean14 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType17 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeIterable11);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        compilerOptions5.skipAllCompilerPasses();
        compilerOptions5.resetWarningsGuard();
        java.lang.String str10 = compilerOptions5.aliasStringsBlacklist;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy12 = null;
        compilerOptions5.setRenamingPolicy(variableRenamingPolicy11, propertyRenamingPolicy12);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy11, propertyRenamingPolicy17);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel19 = compilerOptions0.sourceMapDetailLevel;
        java.lang.String str20 = compilerOptions0.sourceMapOutputPath;
        com.google.javascript.jscomp.CodingConvention codingConvention21 = compilerOptions0.getCodingConvention();
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = null;
        compilerOptions0.setTweakReplacements(strMap22);
        compilerOptions0.collapseAnonymousFunctions = true;
        java.lang.String str26 = compilerOptions0.sourceMapOutputPath;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy11 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL + "'", variableRenamingPolicy11.equals(com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(detailLevel19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(codingConvention21);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        boolean boolean8 = file6.mkdirs();
        java.io.File file9 = file6.getAbsoluteFile();
        java.io.File file12 = new java.io.File(":", "hi!");
        boolean boolean15 = file12.setExecutable(true, false);
        boolean boolean17 = file12.setWritable(false);
        boolean boolean18 = file12.canWrite();
        java.net.URI uRI19 = file12.toURI();
        boolean boolean20 = file9.renameTo(file12);
        long long21 = file9.getTotalSpace();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280492969984L + "'", long7 == 280492969984L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/experiment/:");
        org.junit.Assert.assertEquals(file12.getParent(), ":");
        org.junit.Assert.assertEquals(file12.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(uRI19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 364740218880L + "'", long21 == 364740218880L);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        com.google.javascript.jscomp.Region region8 = sourceFile2.getRegion(29);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(region8);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        boolean boolean37 = node33.isGetProp();
        boolean boolean38 = node33.isAdd();
        boolean boolean39 = node33.isTrue();
        boolean boolean40 = node33.isSwitch();
        node33.setCharno(30);
        boolean boolean43 = node33.isFunction();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile8 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile10 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceFile10);
        java.lang.String str13 = compilerInput11.getLine(43);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        compilerOptions0.optimizeArgumentsArray = false;
        compilerOptions0.setSummaryDetailLevel(40);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setSyntheticBlockStartMarker("OFF");
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.setOutputCharset("DiagnosticGroup<checkProvides>");
        compilerOptions0.gatherCssNames = false;
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel3 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions0.setSourceMapDetailLevel(detailLevel3);
        boolean boolean5 = compilerOptions0.ideMode;
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy10 = compilerOptions0.anonymousFunctionNaming;
        compilerOptions0.setTweakToBooleanLiteral("goog.exportProperty", false);
        compilerOptions0.setCheckMissingGetCssNameBlacklist("Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n");
        org.junit.Assert.assertNotNull(detailLevel3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy10 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy10.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap4 = compilerOptions0.getTweakReplacements();
        boolean boolean5 = strMap4.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.Node>> strEntrySet6 = strMap4.entrySet();
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing7 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = null;
        compilerOptions8.variableRenaming = variableRenamingPolicy11;
        compilerOptions8.setProtectHiddenSideEffects(false);
        boolean boolean15 = strMap4.remove((java.lang.Object) tweakProcessing7, (java.lang.Object) false);
        boolean boolean16 = tweakProcessing7.shouldStrip();
        boolean boolean17 = tweakProcessing7.shouldStrip();
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strEntrySet6);
        org.junit.Assert.assertTrue("'" + tweakProcessing7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing7.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel3 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions0.setSourceMapDetailLevel(detailLevel3);
        compilerOptions0.inlineFunctions = true;
        compilerOptions0.setCommonJSModulePathPrefix(":");
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.setReplaceStringsPlaceholderToken("FINEST");
        compilerOptions0.setSyntheticBlockEndMarker("/experiment/:/hi!");
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        org.junit.Assert.assertNotNull(detailLevel3);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions18.checkRequires;
        compilerOptions0.setReportMissingOverride(checkLevel19);
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setRemoveClosureAsserts(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        com.google.javascript.jscomp.CompilerInput compilerInput9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput7, false);
        com.google.javascript.jscomp.JSModule jSModule11 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler();
        jSModule11.sortInputsByDeps(compiler12);
        java.lang.String str14 = jSModule11.getName();
        compilerInput7.setModule(jSModule11);
        java.lang.String str16 = compilerInput7.getCode();
        com.google.javascript.jscomp.CompilerInput compilerInput19 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput7, "*global*", true);
        com.google.javascript.jscomp.CompilerInput compilerInput20 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput19);
        com.google.javascript.rhino.InputId inputId21 = compilerInput19.getInputId();
        com.google.javascript.rhino.InputId inputId22 = compilerInput19.getInputId();
        com.google.javascript.rhino.InputId inputId23 = compilerInput19.getInputId();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING PARAM_LIST 49" + "'", str14, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(inputId21);
        org.junit.Assert.assertNotNull(inputId22);
        org.junit.Assert.assertNotNull(inputId23);
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Node tree inequality:\nTree1:\nNUMBER 1.645456103E12 47\n\n\nTree2:\nASSIGN_MOD\n\n\nSubtree1: NUMBER 1.645456103E12 47\n\n\nSubtree2: ASSIGN_MOD\n", "goog.exportSymbol");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: goog.exportSymbol");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n", jSTypeNative1);
        java.lang.String str3 = assertionFunctionSpec2.getFunctionName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n" + "'", str3, "Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n");
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.crossModuleMethodMotion = true;
        compilerOptions8.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions8.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy17);
        com.google.javascript.jscomp.SourceMap.Format format19 = compilerOptions8.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format19);
        compilerOptions0.setGroupVariableDeclarations(false);
        boolean boolean23 = compilerOptions0.labelRenaming;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(format19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.setRenamePrefix("PARAM_LIST 0");
        boolean boolean11 = compilerOptions0.optimizeReturns;
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isWith();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 0, "TYPEOF : 44\n", 37, (int) '4');
        node5.setSourceEncodedPosition(15);
        boolean boolean8 = node5.isDec();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry11.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        node15.addChildrenToBack(node21);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        boolean boolean29 = node28.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry31.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        boolean boolean36 = node35.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, node15, node28, node35, node42, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry48.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList56 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList56, jSTypeArray55);
        com.google.javascript.rhino.Node node58 = jSTypeRegistry54.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList56);
        node52.addChildrenToBack(node58);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry61.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        boolean boolean66 = node65.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList70 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList70, jSTypeArray69);
        com.google.javascript.rhino.Node node72 = jSTypeRegistry68.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList70);
        boolean boolean73 = node72.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList77 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList77, jSTypeArray76);
        com.google.javascript.rhino.Node node79 = jSTypeRegistry75.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList77);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, node52, node65, node72, node79, 0, 49);
        com.google.javascript.rhino.Node node83 = node45.useSourceInfoFrom(node65);
        boolean boolean84 = node83.hasChildren();
        boolean boolean85 = node83.isDefaultCase();
        boolean boolean86 = node83.isSwitch();
        boolean boolean87 = node83.isBreak();
        node83.setType(31);
        com.google.javascript.rhino.Node node90 = node83.removeChildren();
        boolean boolean91 = node83.isGetProp();
        com.google.javascript.rhino.Node node95 = com.google.javascript.rhino.Node.newNumber((double) 280487936000L, 30, 30);
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node((-9), node5, node83, node95);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode5 = compilerOptions0.getLanguageOut();
        compilerOptions0.setFoldConstants(true);
        boolean boolean8 = compilerOptions0.generatePseudoNames;
        java.lang.String str9 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.disambiguateProperties = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertNull(languageMode5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.error("WARNING: hi!", "PARAM_LIST\n");
        org.junit.Assert.assertNotNull(diagnosticType2);
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap4 = compilerOptions0.getTweakReplacements();
        boolean boolean5 = strMap4.isEmpty();
        java.lang.Object obj6 = null;
        com.google.javascript.rhino.Node node7 = strMap4.get(obj6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel11 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions8.setSourceMapDetailLevel(detailLevel11);
        boolean boolean13 = compilerOptions8.ideMode;
        compilerOptions8.setUnaliasableGlobals("");
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions8.checkUnreachableCode;
        com.google.javascript.rhino.Node node17 = strMap4.remove((java.lang.Object) checkLevel16);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection18 = strMap4.values();
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions19.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode25 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions19.setTracer(tracerMode25);
        compilerOptions19.setSyntheticBlockStartMarker("");
        java.util.Set<java.lang.String> strSet29 = compilerOptions19.stripNamePrefixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode31 = null;
        compilerOptions30.setTracerMode(tracerMode31);
        boolean boolean33 = compilerOptions30.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel34 = compilerOptions30.sourceMapDetailLevel;
        compilerOptions30.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet37 = compilerOptions30.stripNameSuffixes;
        com.google.javascript.jscomp.SourceFile sourceFile39 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput(sourceFile39, true);
        com.google.javascript.rhino.InputId inputId43 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput45 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput41, inputId43, true);
        java.lang.String str46 = compilerInput45.toString();
        boolean boolean47 = strSet37.contains((java.lang.Object) compilerInput45);
        java.lang.Object[] objArray48 = strSet37.toArray();
        java.lang.Object obj49 = null;
        boolean boolean50 = strSet37.contains(obj49);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        boolean boolean57 = jSTypeList52.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        boolean boolean64 = jSTypeList59.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        boolean boolean65 = jSTypeList52.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        boolean boolean66 = jSTypeList52.isEmpty();
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream67 = jSTypeList52.stream();
        boolean boolean68 = strSet37.retainAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        boolean boolean69 = strSet29.containsAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        int int70 = jSTypeList52.size();
        boolean boolean71 = strMap4.containsValue((java.lang.Object) jSTypeList52);
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        jSTypeRegistry73.clearNamedTypes();
        java.nio.charset.Charset charset75 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str76 = charset75.name();
        java.lang.String str77 = charset75.name();
        java.nio.charset.Charset charset78 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str79 = charset78.toString();
        boolean boolean80 = charset75.contains(charset78);
        java.lang.String str81 = charset75.name();
        com.google.javascript.rhino.ErrorReporter errorReporter82 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter82);
        jSTypeRegistry83.clearNamedTypes();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry83.createAnonymousObjectType();
        boolean boolean86 = charset75.equals((java.lang.Object) objectType85);
        jSTypeRegistry73.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType85);
        boolean boolean88 = jSTypeList52.add((com.google.javascript.rhino.jstype.JSType) objectType85);
        jSTypeList52.clear();
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(detailLevel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(nodeCollection18);
        org.junit.Assert.assertTrue("'" + tracerMode25 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode25.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(detailLevel34);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "*global*" + "'", str46, "*global*");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSTypeStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "US-ASCII" + "'", str76, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "US-ASCII" + "'", str77, "US-ASCII");
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "US-ASCII" + "'", str79, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "US-ASCII" + "'", str81, "US-ASCII");
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compiler1.isIdeMode();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter58 = compiler1.getReverseAbstractInterpreter();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker59 = null;
        compiler1.tracker = performanceTracker59;
        com.google.javascript.rhino.Node node61 = compiler1.getRoot();
        com.google.javascript.jscomp.Region region64 = compiler1.getSourceRegion("PARAM_LIST8468507651125183373Unversioned directory", 10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(region64);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        java.io.File file2 = java.io.File.createTempFile("2019/07/12 07:12", "NUMBER -1.0");
        boolean boolean3 = file2.isAbsolute();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/12 07:125837352834949457438NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = java.nio.charset.Charset.isSupported("PARAM_LIST [synthetic: 1]\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: PARAM_LIST [synthetic: 1]?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy5, propertyRenamingPolicy9);
        boolean boolean11 = compilerOptions0.checkControlStructures;
        compilerOptions0.syntheticBlockEndMarker = "FINEST";
        com.google.javascript.rhino.InputId inputId15 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = null;
        compilerOptions16.setTracerMode(tracerMode17);
        boolean boolean19 = compilerOptions16.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel20 = compilerOptions16.sourceMapDetailLevel;
        compilerOptions16.setColorizeErrorOutput(true);
        compilerOptions16.generatePseudoNames = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy25 = com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED;
        compilerOptions16.setVariableRenaming(variableRenamingPolicy25);
        boolean boolean27 = inputId15.equals((java.lang.Object) variableRenamingPolicy25);
        compilerOptions0.setVariableRenaming(variableRenamingPolicy25);
        java.io.PrintStream printStream29 = null;
        com.google.javascript.jscomp.Compiler compiler30 = new com.google.javascript.jscomp.Compiler(printStream29);
        java.lang.String str31 = compiler30.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions32.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode38 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions32.setTracer(tracerMode38);
        compiler30.initOptions(compilerOptions32);
        com.google.javascript.jscomp.SourceFile sourceFile43 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int45 = sourceFile43.getLineOfOffset((int) (short) 1);
        java.lang.String str46 = sourceFile43.getName();
        java.lang.String str47 = sourceFile43.getName();
        java.lang.String str48 = sourceFile43.getName();
        com.google.javascript.jscomp.SourceFile sourceFile51 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int53 = sourceFile51.getLineOfOffset((int) (short) 1);
        java.lang.String str54 = sourceFile51.getName();
        com.google.javascript.jscomp.JsAst jsAst55 = new com.google.javascript.jscomp.JsAst(sourceFile51);
        jsAst55.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput59 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst55, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile62 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int64 = sourceFile62.getLineOfOffset((int) (short) 1);
        java.lang.String str65 = sourceFile62.getName();
        java.lang.String str66 = sourceFile62.getName();
        java.lang.String str67 = sourceFile62.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput69 = new com.google.javascript.jscomp.CompilerInput(sourceFile62, true);
        com.google.javascript.jscomp.CompilerInput compilerInput70 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput69);
        com.google.javascript.jscomp.SourceFile sourceFile73 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int75 = sourceFile73.getLineOfOffset((int) (short) 1);
        int int77 = sourceFile73.getColumnOfOffset(8);
        compilerInput70.setSourceFile(sourceFile73);
        jsAst55.setSourceFile(sourceFile73);
        com.google.javascript.jscomp.CompilerOptions compilerOptions80 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions80.crossModuleMethodMotion = true;
        compilerOptions80.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result85 = compiler30.compile(sourceFile43, sourceFile73, compilerOptions80);
        double double86 = compiler30.getProgress();
        com.google.javascript.jscomp.ErrorManager errorManager87 = compiler30.getErrorManager();
        compilerOptions0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler) errorManager87);
        boolean boolean89 = compilerOptions0.checkControlStructures;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(detailLevel20);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy25 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED + "'", variableRenamingPolicy25.equals(com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + tracerMode38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode38.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(sourceFile51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(sourceFile62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(sourceFile73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertNotNull(result85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(errorManager87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        compilerOptions0.aliasExternals = true;
        boolean boolean5 = compilerOptions0.removeUnusedClassProperties;
        compilerOptions0.setCommonJSModulePathPrefix("PARAM_LIST");
        compilerOptions0.collapseVariableDeclarations = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile(":", "STRING PARAM_LIST");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Prefix string too short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int6 = sourceFile4.getLineOfOffset((int) (short) 1);
        java.io.Reader reader7 = sourceFile4.getCodeReader();
        int int8 = reader7.read();
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromReader("*global*", reader7);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        java.io.File file14 = new java.io.File(":", "hi!");
        boolean boolean17 = file14.setExecutable(true, false);
        long long18 = file14.lastModified();
        boolean boolean19 = file14.mkdir();
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder0.buildFromFile(file14);
        com.google.javascript.jscomp.SourceFile.Generator generator22 = null;
        com.google.javascript.jscomp.SourceFile sourceFile23 = builder0.buildFromGenerator("PARAM_LIST\n", generator22);
        com.google.javascript.jscomp.SourceFile.Builder builder25 = builder0.withOriginalPath(":/hi!");
        com.google.javascript.jscomp.SourceFile.Builder builder27 = builder25.withOriginalPath("InputId: FINEST");
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(file14.getParent(), ":");
        org.junit.Assert.assertEquals(file14.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645456452000L + "'", long18 == 1645456452000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter12 = compiler1.getReverseAbstractInterpreter();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        com.google.javascript.jscomp.type.FlowScope flowScope17 = null;
        com.google.javascript.jscomp.type.FlowScope flowScope19 = reverseAbstractInterpreter12.getPreciserScopeKnowingConditionOutcome(node16, flowScope17, false);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry28.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        node26.addChildrenToBack(node32);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry35.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry42.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry49.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, node26, node39, node46, node53, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry58.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        node62.addChildrenToBack(node68);
        com.google.javascript.rhino.Node node70 = node26.clonePropsFrom(node68);
        com.google.javascript.rhino.Node node71 = node68.getFirstChild();
        com.google.javascript.jscomp.type.FlowScope flowScope72 = null;
        com.google.javascript.jscomp.type.FlowScope flowScope74 = reverseAbstractInterpreter12.getPreciserScopeKnowingConditionOutcome(node68, flowScope72, false);
        boolean boolean75 = node68.isInc();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(flowScope19);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(flowScope74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.nio.charset.Charset charset3 = null;
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("STRING PARAM_LIST 49", charset3);
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int9 = sourceFile7.getLineOfOffset((int) (short) 1);
        java.lang.String str10 = sourceFile7.getName();
        com.google.javascript.jscomp.JsAst jsAst11 = new com.google.javascript.jscomp.JsAst(sourceFile7);
        jsAst11.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile13 = jsAst11.getSourceFile();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.optimizeParameters = true;
        compilerOptions14.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions14.checkGlobalNamesLevel;
        compilerOptions14.setCheckMissingGetCssNameBlacklist("");
        boolean boolean25 = compilerOptions14.removeTryCatchFinally;
        com.google.javascript.jscomp.Result result26 = compiler1.compile(sourceFile4, sourceFile13, compilerOptions14);
        compiler1.reportCodeChange();
        com.google.javascript.jscomp.Scope scope28 = compiler1.getTopScope();
        int int29 = compiler1.getWarningCount();
        boolean boolean30 = compiler1.isTypeCheckingEnabled();
        boolean boolean31 = compiler1.hasErrors();
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(result26);
        org.junit.Assert.assertNull(scope28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER -1.0", "/experiment/:/hi!");
        org.junit.Assert.assertNotNull(diagnosticType2);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str1 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.labelRenaming = true;
        boolean boolean4 = compilerOptions0.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        compilerOptions5.skipAllCompilerPasses();
        boolean boolean9 = compilerOptions5.flowSensitiveInlineVariables;
        java.lang.String[] strArray19 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        compilerOptions5.stripTypes = strSet20;
        compilerOptions0.setStripNameSuffixes((java.util.Set<java.lang.String>) strSet20);
        boolean boolean24 = compilerOptions0.ideMode;
        boolean boolean25 = compilerOptions0.collapseAnonymousFunctions;
        boolean boolean26 = compilerOptions0.shouldColorizeErrorOutput();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.checkTypes = false;
        boolean boolean18 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.crossModuleMethodMotion = true;
        compilerOptions19.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy24 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy28 = compilerOptions25.propertyRenaming;
        compilerOptions19.setRenamingPolicy(variableRenamingPolicy24, propertyRenamingPolicy28);
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy28);
        compilerOptions0.setReportPath("2019/07/12 07:12");
        boolean boolean33 = compilerOptions0.labelRenaming;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy28.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("/experiment/:/hi!/goog.exportSymbol6344102151034639300();", generator1);
        org.junit.Assert.assertNotNull(jSSourceFile2);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList5 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList5, jSTypeArray4);
        com.google.javascript.rhino.Node node7 = jSTypeRegistry3.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList5);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry9.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        node7.addChildrenToBack(node13);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry16.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry23.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry30.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, node7, node20, node27, node34, 0, 49);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node40 = node37.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.InputId inputId41 = node40.getInputId();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry43.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        boolean boolean48 = node47.isIn();
        boolean boolean49 = node47.isGetElem();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        java.lang.String str54 = node53.getQualifiedName();
        com.google.javascript.rhino.Node node55 = node53.getLastChild();
        com.google.javascript.rhino.Node node56 = node53.getLastSibling();
        boolean boolean57 = node56.isFromExterns();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(9, node40, node47, node56, 300, 11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setLooseTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel65 = compilerOptions64.checkRequires;
        compilerOptions61.setCheckProvides(checkLevel65);
        compilerOptions61.aliasAllStrings = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.crossModuleMethodMotion = true;
        compilerOptions69.skipAllCompilerPasses();
        boolean boolean73 = compilerOptions69.flowSensitiveInlineVariables;
        java.lang.String[] strArray83 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        compilerOptions69.stripTypes = strSet84;
        compilerOptions61.setAliasableStrings((java.util.Set<java.lang.String>) strSet84);
        java.util.Iterator<java.lang.String> strItor88 = strSet84.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator89 = strSet84.spliterator();
        node56.setDirectives((java.util.Set<java.lang.String>) strSet84);
        int int91 = node56.getChildCount();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel65 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel65.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strItor88);
        org.junit.Assert.assertNotNull(strSpliterator89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean10 = node9.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node9.siblings();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        boolean boolean13 = node12.isVar();
        int int14 = node12.getSideEffectFlags();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalNamesLevel;
        boolean boolean9 = compilerOptions0.removeUnusedPrototypeProperties;
        java.util.Set<java.lang.String> strSet10 = compilerOptions0.stripTypes;
        compilerOptions0.setRemoveTryCatchFinally(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel16 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions13.setSourceMapDetailLevel(detailLevel16);
        compilerOptions13.inlineFunctions = true;
        compilerOptions13.setCommonJSModulePathPrefix(":");
        compilerOptions13.setCrossModuleCodeMotion(true);
        compilerOptions13.setRemoveUnusedClassProperties(true);
        java.io.PrintStream printStream26 = null;
        com.google.javascript.jscomp.Compiler compiler27 = new com.google.javascript.jscomp.Compiler(printStream26);
        java.lang.String str28 = compiler27.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions29.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode35 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions29.setTracer(tracerMode35);
        compiler27.initOptions(compilerOptions29);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy38 = compilerOptions29.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.crossModuleMethodMotion = true;
        compilerOptions39.syntheticBlockEndMarker = "hi!";
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions39.aggressiveVarCheck;
        compilerOptions29.setCheckGlobalNamesLevel(checkLevel44);
        compilerOptions13.setCheckGlobalNamesLevel(checkLevel44);
        compilerOptions0.checkProvides = checkLevel44;
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(detailLevel16);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + tracerMode35 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode35.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy38 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy38.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        com.google.javascript.jscomp.VariableMap variableMap48 = result47.variableMap;
        com.google.javascript.jscomp.JSError[] jSErrorArray49 = result47.errors;
        java.util.Map<java.lang.String, java.lang.Integer> strMap50 = result47.cssNames;
        com.google.javascript.jscomp.VariableMap variableMap51 = result47.propertyMap;
        com.google.javascript.jscomp.VariableMap variableMap52 = result47.variableMap;
        boolean boolean53 = result47.success;
        java.lang.String str54 = result47.externExport;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNull(variableMap48);
        org.junit.Assert.assertNotNull(jSErrorArray49);
        org.junit.Assert.assertNull(strMap50);
        org.junit.Assert.assertNull(variableMap51);
        org.junit.Assert.assertNull(variableMap52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        compilerOptions0.setMarkNoSideEffectCalls(false);
        byte[] byteArray7 = compilerOptions0.inputPropertyMapSerialized;
        compilerOptions0.setLineLengthThreshold((int) (short) 10);
        compilerOptions0.setInferTypes(false);
        org.junit.Assert.assertNull(byteArray7);
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        boolean boolean37 = node6.isDelProp();
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        jSTypeRegistry39.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] { jSType41 };
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParameters(jSTypeArray42);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry46.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        node50.addChildrenToBack(node56);
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        boolean boolean71 = node70.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry73.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, node50, node63, node70, node77, 0, 49);
        boolean boolean81 = node50.isDo();
        boolean boolean82 = node50.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable83 = node50.children();
        com.google.javascript.jscomp.CodingConvention.Bind bind84 = new com.google.javascript.jscomp.CodingConvention.Bind(node6, node43, node50);
        boolean boolean85 = node50.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            double double86 = node50.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PARAM_LIST is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeIterable83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList5 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList5, jSTypeArray4);
        com.google.javascript.rhino.Node node7 = jSTypeRegistry3.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList5);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry9.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        node7.addChildrenToBack(node13);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry16.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry23.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry30.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, node7, node20, node27, node34, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry40.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry46.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        node44.addChildrenToBack(node50);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry53.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry60.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry67.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, node44, node57, node64, node71, 0, 49);
        com.google.javascript.rhino.Node node75 = node37.useSourceInfoFrom(node57);
        boolean boolean76 = node57.hasOneChild();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        boolean boolean85 = jSTypeList80.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.Node node86 = jSTypeRegistry78.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        boolean boolean87 = node86.isVarArgs();
        com.google.javascript.rhino.Node node88 = node57.clonePropsFrom(node86);
        boolean boolean89 = node88.isDebugger();
        com.google.javascript.rhino.Node node90 = node88.getParent();
        boolean boolean91 = node90.isGetterDef();
        boolean boolean92 = node90.isGetterDef();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(900, node90, 0, 54);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        java.io.File file3 = new java.io.File(":");
        java.io.File file5 = new java.io.File(file3, "FINEST");
        java.io.File file6 = java.io.File.createTempFile("OFF", "", file3);
        java.io.File file7 = file3.getCanonicalFile();
        java.io.File file9 = new java.io.File(file7, "hi!");
        boolean boolean10 = file7.mkdir();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), ":");
        org.junit.Assert.assertEquals(file5.getParent(), ":");
        org.junit.Assert.assertEquals(file5.toString(), ":/FINEST");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), ":");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), ":/OFF5114947454339529655");
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean3 = file2.createNewFile();
        long long4 = file2.length();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile5 = com.google.javascript.jscomp.JSSourceFile.fromFile(file2);
        long long6 = file2.getUsableSpace();
        boolean boolean9 = file2.setExecutable(true, true);
        boolean boolean10 = file2.createNewFile();
        java.io.File file11 = file2.getAbsoluteFile();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 4096L + "'", long4 == 4096L);
        org.junit.Assert.assertNotNull(jSSourceFile5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 280492363776L + "'", long6 == 280492363776L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment/:/hi!");
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile8 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile9 = jsAst6.getSourceFile();
        com.google.javascript.jscomp.SourceFile sourceFile12 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int14 = sourceFile12.getLineOfOffset((int) (short) 1);
        java.lang.String str15 = sourceFile12.getName();
        com.google.javascript.jscomp.JsAst jsAst16 = new com.google.javascript.jscomp.JsAst(sourceFile12);
        jsAst16.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile20 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int22 = sourceFile20.getLineOfOffset((int) (short) 1);
        java.lang.String str23 = sourceFile20.getName();
        java.lang.String str24 = sourceFile20.getName();
        jsAst16.setSourceFile(sourceFile20);
        com.google.javascript.jscomp.SourceFile sourceFile26 = jsAst16.getSourceFile();
        java.lang.String str27 = sourceFile26.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput28 = new com.google.javascript.jscomp.CompilerInput(sourceFile26);
        jsAst6.setSourceFile(sourceFile26);
        com.google.javascript.rhino.InputId inputId30 = jsAst6.getInputId();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(sourceFile26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(inputId30);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList5 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList5, jSTypeArray4);
        com.google.javascript.rhino.Node node7 = jSTypeRegistry3.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList5);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry9.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        node7.addChildrenToBack(node13);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry16.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry23.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry30.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, node7, node20, node27, node34, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry40.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry46.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        node44.addChildrenToBack(node50);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry53.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry60.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry67.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, node44, node57, node64, node71, 0, 49);
        com.google.javascript.rhino.Node node75 = node37.useSourceInfoFrom(node57);
        com.google.javascript.jscomp.CheckLevel checkLevel77 = null;
        com.google.javascript.jscomp.DiagnosticType diagnosticType79 = com.google.javascript.jscomp.DiagnosticType.make("*global*", checkLevel77, "");
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", ":" };
        com.google.javascript.jscomp.JSError jSError87 = com.google.javascript.jscomp.JSError.make("*global*", node75, diagnosticType79, strArray86);
        int int88 = jSError87.getLineNumber();
        java.lang.String str89 = jSError87.toString();
        com.google.javascript.jscomp.CheckLevel checkLevel90 = jSError87.getDefaultLevel();
        int int91 = jSError87.getLineNumber();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(diagnosticType79);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(jSError87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "*global*.  at *global* line (unknown line) : (unknown column)" + "'", str89, "*global*.  at *global* line (unknown line) : (unknown column)");
        org.junit.Assert.assertNull(checkLevel90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray1 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator3 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile4 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator3);
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile7 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator6);
        com.google.javascript.jscomp.SourceFile.Generator generator9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator9);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray11 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile4, jSSourceFile7, jSSourceFile10 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean13 = compilerOptions12.moveFunctionDeclarations;
        compilerOptions12.crossModuleCodeMotion = true;
        compiler0.init(jSSourceFileArray1, jSSourceFileArray11, compilerOptions12);
        compilerOptions12.setRewriteNewDateGoogNow(true);
        compilerOptions12.setCheckControlStructures(true);
        org.junit.Assert.assertNotNull(jSSourceFileArray1);
        org.junit.Assert.assertNotNull(jSSourceFile4);
        org.junit.Assert.assertNotNull(jSSourceFile7);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertNotNull(jSSourceFileArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
        java.lang.Iterable<com.google.javascript.jscomp.DiagnosticType> diagnosticTypeIterable2 = diagnosticGroup0.getTypes();
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        java.lang.Iterable<com.google.javascript.jscomp.DiagnosticType> diagnosticTypeIterable5 = diagnosticGroup0.getTypes();
        com.google.javascript.jscomp.DiagnosticType diagnosticType8 = com.google.javascript.jscomp.DiagnosticType.warning("DiagnosticGroup<checkProvides>", "goog.exportSymbol");
        boolean boolean9 = diagnosticGroup0.matches(diagnosticType8);
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
        org.junit.Assert.assertNotNull(diagnosticTypeIterable2);
        org.junit.Assert.assertNotNull(diagnosticTypeIterable5);
        org.junit.Assert.assertNotNull(diagnosticType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        boolean boolean7 = node6.isIn();
        boolean boolean8 = node6.isVoid();
        node6.setOptionalArg(true);
        node6.setVarArgs(true);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 10, node6, 300, 49);
        com.google.javascript.rhino.Node node16 = node15.getLastSibling();
        boolean boolean17 = node15.isExprResult();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions0.setTracer(tracerMode6);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy8 = compilerOptions0.variableRenaming;
        compilerOptions0.foldConstants = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setInlineLocalFunctions(false);
        compilerOptions11.moveFunctionDeclarations = true;
        compilerOptions11.setInlineLocalFunctions(false);
        boolean boolean18 = compilerOptions11.exportTestFunctions;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions11.checkGlobalThisLevel;
        compilerOptions11.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = compilerOptions11.errorFormat;
        compilerOptions0.errorFormat = errorFormat22;
        java.lang.String str24 = compilerOptions0.sourceMapOutputPath;
        org.junit.Assert.assertTrue("'" + tracerMode6 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode6.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy8.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        com.google.javascript.jscomp.ErrorFormat errorFormat0 = com.google.javascript.jscomp.ErrorFormat.SINGLELINE;
        java.io.PrintStream printStream1 = null;
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler(printStream1);
        java.lang.String str3 = compiler2.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions4 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions4.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions4.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode10 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions4.setTracer(tracerMode10);
        compiler2.initOptions(compilerOptions4);
        com.google.javascript.jscomp.SourceFile sourceFile15 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int17 = sourceFile15.getLineOfOffset((int) (short) 1);
        java.lang.String str18 = sourceFile15.getName();
        java.lang.String str19 = sourceFile15.getName();
        java.lang.String str20 = sourceFile15.getName();
        com.google.javascript.jscomp.SourceFile sourceFile23 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int25 = sourceFile23.getLineOfOffset((int) (short) 1);
        java.lang.String str26 = sourceFile23.getName();
        com.google.javascript.jscomp.JsAst jsAst27 = new com.google.javascript.jscomp.JsAst(sourceFile23);
        jsAst27.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput31 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst27, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile34 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int36 = sourceFile34.getLineOfOffset((int) (short) 1);
        java.lang.String str37 = sourceFile34.getName();
        java.lang.String str38 = sourceFile34.getName();
        java.lang.String str39 = sourceFile34.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput(sourceFile34, true);
        com.google.javascript.jscomp.CompilerInput compilerInput42 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput41);
        com.google.javascript.jscomp.SourceFile sourceFile45 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int47 = sourceFile45.getLineOfOffset((int) (short) 1);
        int int49 = sourceFile45.getColumnOfOffset(8);
        compilerInput42.setSourceFile(sourceFile45);
        jsAst27.setSourceFile(sourceFile45);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.crossModuleMethodMotion = true;
        compilerOptions52.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result57 = compiler2.compile(sourceFile15, sourceFile45, compilerOptions52);
        boolean boolean58 = compiler2.isIdeMode();
        java.lang.String str61 = compiler2.getSourceLine("*global*", (int) ' ');
        java.lang.String[] strArray62 = compiler2.toSourceArray();
        com.google.javascript.jscomp.MessageFormatter messageFormatter64 = errorFormat0.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler2, false);
        com.google.javascript.jscomp.JSModule jSModule66 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler67 = new com.google.javascript.jscomp.Compiler();
        jSModule66.sortInputsByDeps(compiler67);
        java.lang.String str69 = jSModule66.getName();
        java.lang.String[] strArray70 = compiler2.toSourceArray(jSModule66);
        boolean boolean71 = compiler2.acceptConstKeyword();
        org.junit.Assert.assertNotNull(errorFormat0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + tracerMode10 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode10.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(sourceFile34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(sourceFile45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(result57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(messageFormatter64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "STRING PARAM_LIST 49" + "'", str69, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName(":");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("FINEST");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = diagnosticGroups0.forName("goog.exportSymbol");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup8 = diagnosticGroups0.forName("Unversioned directory");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
        org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertNull(diagnosticGroup8);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        boolean boolean8 = file6.mkdirs();
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file6, charset9);
        java.io.File file13 = new java.io.File(":", "hi!");
        boolean boolean16 = file13.setExecutable(true, false);
        boolean boolean18 = file13.setWritable(false);
        boolean boolean19 = file13.canWrite();
        java.net.URI uRI20 = file13.toURI();
        boolean boolean21 = file6.renameTo(file13);
        boolean boolean22 = file13.mkdirs();
        java.io.File file24 = new java.io.File(file13, "PARAM_LIST [var_args_name: 1] [opt_arg: 1]");
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280489938944L + "'", long7 == 280489938944L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertEquals(file13.getParent(), ":");
        org.junit.Assert.assertEquals(file13.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals(file24.getParent(), ":/hi!");
        org.junit.Assert.assertEquals(file24.toString(), ":/hi!/PARAM_LIST [var_args_name: 1] [opt_arg: 1]");
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry9.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        node13.addChildrenToBack(node19);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList38 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList38, jSTypeArray37);
        com.google.javascript.rhino.Node node40 = jSTypeRegistry36.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, node13, node26, node33, node40, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry46.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        node50.addChildrenToBack(node56);
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        boolean boolean71 = node70.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry73.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, node50, node63, node70, node77, 0, 49);
        com.google.javascript.rhino.Node node81 = node43.useSourceInfoFrom(node63);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder82 = node63.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node83 = node5.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        com.google.javascript.rhino.Node node88 = node87.getLastChild();
        com.google.javascript.rhino.InputId inputId90 = new com.google.javascript.rhino.InputId("PARAM_LIST: PARAM_LIST\n");
        node87.setInputId(inputId90);
        java.lang.String str92 = inputId90.getIdName();
        node83.setInputId(inputId90);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "PARAM_LIST: PARAM_LIST\n" + "'", str92, "PARAM_LIST: PARAM_LIST\n");
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        com.google.javascript.jscomp.JSSourceFile jSSourceFile1 = com.google.javascript.jscomp.JSSourceFile.fromFile("Exceeded max number of code motion iterations: Unversioned directory");
        int int3 = jSSourceFile1.getLineOfOffset((-9));
        org.junit.Assert.assertNotNull(jSSourceFile1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setSyntheticBlockStartMarker("OFF");
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.inputDelimiter = "/experiment/:/hi!";
        compilerOptions0.convertToDottedProperties = false;
        compilerOptions0.setGeneratePseudoNames(true);
        boolean boolean15 = compilerOptions0.optimizeReturns;
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.setRemoveUnusedPrototypeProperties(false);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        compilerOptions0.setDefineReplacements(strMap20);
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        compilerOptions0.checkTypes = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler18 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.setExportTestFunctions(false);
        boolean boolean21 = compilerOptions0.rewriteFunctionExpressions;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(aliasTransformationHandler18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.coalesceVariableNames = true;
        java.lang.String str9 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.devirtualizePrototypeMethods = false;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy14 = com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy14);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.checkUnreachableCode;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("Node tree inequality:\nTree1:\nNUMBER 1.645456103E12 47\n\n\nTree2:\nASSIGN_MOD\n\n\nSubtree1: NUMBER 1.645456103E12 47\n\n\nSubtree2: ASSIGN_MOD\n");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy14 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC + "'", propertyRenamingPolicy14.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.inputDelimiter = "STRING PARAM_LIST 49";
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy10 = compilerOptions0.variableRenaming;
        com.google.javascript.rhino.InputId inputId12 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = null;
        compilerOptions13.setTracerMode(tracerMode14);
        boolean boolean16 = compilerOptions13.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel17 = compilerOptions13.sourceMapDetailLevel;
        compilerOptions13.setColorizeErrorOutput(true);
        compilerOptions13.generatePseudoNames = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy22 = com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED;
        compilerOptions13.setVariableRenaming(variableRenamingPolicy22);
        boolean boolean24 = inputId12.equals((java.lang.Object) variableRenamingPolicy22);
        compilerOptions0.variableRenaming = variableRenamingPolicy22;
        java.lang.String str26 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.CheckLevel checkLevel27 = compilerOptions0.checkRequires;
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy10 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy10.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(detailLevel17);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy22 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED + "'", variableRenamingPolicy22.equals(com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + checkLevel27 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel27.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        compiler9.reportCodeChange();
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode49 = compiler9.languageMode();
        java.lang.String str50 = compiler9.toSource();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertTrue("'" + languageMode49 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode49.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray0 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList1 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList1, jSTypeArray0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        boolean boolean6 = jSTypeList1.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        java.lang.Object[] objArray7 = jSTypeList1.toArray();
        java.util.stream.BaseStream[] baseStreamArray9 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.jstype.JSType, java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType>>[] jSTypeBaseStreamArray10 = (java.util.stream.BaseStream<com.google.javascript.rhino.jstype.JSType, java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType>>[]) baseStreamArray9;
        java.util.stream.BaseStream<com.google.javascript.rhino.jstype.JSType, java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType>>[] jSTypeBaseStreamArray11 = jSTypeList1.toArray((java.util.stream.BaseStream<com.google.javascript.rhino.jstype.JSType, java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType>>[]) baseStreamArray9);
        org.junit.Assert.assertNotNull(jSTypeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(baseStreamArray9);
        org.junit.Assert.assertNotNull(jSTypeBaseStreamArray10);
        org.junit.Assert.assertNotNull(jSTypeBaseStreamArray11);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        boolean boolean12 = compiler1.hasErrors();
        double double13 = compiler1.getProgress();
        int int14 = compiler1.getErrorCount();
        boolean boolean15 = compiler1.isIdeMode();
        com.google.javascript.jscomp.Scope scope16 = compiler1.getTopScope();
        int int17 = compiler1.getErrorCount();
        boolean boolean18 = compiler1.acceptConstKeyword();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(scope16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        com.google.javascript.jscomp.Result result68 = compiler9.getResult();
        com.google.javascript.jscomp.JSError[] jSErrorArray69 = result68.errors;
        java.lang.String str70 = result68.idGeneratorMap;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNotNull(result68);
        org.junit.Assert.assertNotNull(jSErrorArray69);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.syntheticBlockEndMarker = "hi!";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.aggressiveVarCheck;
        boolean boolean6 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseVariableDeclarations = true;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.enableRuntimeTypeCheck("*global*");
        compilerOptions0.setAliasableGlobals(":");
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        com.google.javascript.jscomp.JSSourceFile jSSourceFile1 = com.google.javascript.jscomp.JSSourceFile.fromFile("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = jSSourceFile1.getCode();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSSourceFile1);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray1 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator3 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile4 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator3);
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile7 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator6);
        com.google.javascript.jscomp.SourceFile.Generator generator9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator9);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray11 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile4, jSSourceFile7, jSSourceFile10 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean13 = compilerOptions12.moveFunctionDeclarations;
        compilerOptions12.crossModuleCodeMotion = true;
        compiler0.init(jSSourceFileArray1, jSSourceFileArray11, compilerOptions12);
        boolean boolean17 = compiler0.isTypeCheckingEnabled();
        com.google.javascript.jscomp.ErrorManager errorManager18 = compiler0.getErrorManager();
        compiler0.reportCodeChange();
        org.junit.Assert.assertNotNull(jSSourceFileArray1);
        org.junit.Assert.assertNotNull(jSSourceFile4);
        org.junit.Assert.assertNotNull(jSSourceFile7);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertNotNull(jSSourceFileArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(errorManager18);
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry11.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        boolean boolean16 = node15.isIn();
        boolean boolean17 = node15.isVoid();
        boolean boolean18 = node9.isEquivalentToTyped(node15);
        boolean boolean19 = node9.isScript();
        com.google.javascript.rhino.Node node20 = node9.getLastSibling();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        java.io.File file7 = new java.io.File(file2, "PARAM_LIST\n");
        boolean boolean9 = file2.setWritable(false);
        boolean boolean11 = file2.setReadable(false);
        java.io.File file12 = file2.getAbsoluteFile();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile13 = com.google.javascript.jscomp.JSSourceFile.fromFile(file2);
        boolean boolean14 = file2.canRead();
        boolean boolean16 = file2.setWritable(false);
        boolean boolean17 = file2.delete();
        long long18 = file2.getUsableSpace();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), ":/hi!");
        org.junit.Assert.assertEquals(file7.toString(), ":/hi!/PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(file12);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertNotNull(jSSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 280490459136L + "'", long18 == 280490459136L);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        compiler9.reportCodeChange();
        com.google.javascript.jscomp.Region region71 = compiler9.getSourceRegion("InputId: *global*", 40);
        double double72 = compiler9.getProgress();
        com.google.javascript.rhino.Node node73 = compiler9.getRoot();
        com.google.javascript.jscomp.ErrorManager errorManager74 = compiler9.getErrorManager();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = compiler9.getTypeRegistry();
        com.google.javascript.rhino.Node node76 = compiler9.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            compiler9.optimize();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: INTERNAL COMPILER ERROR.?Please report this problem.?null");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNull(region71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(errorManager74);
        org.junit.Assert.assertNotNull(jSTypeRegistry75);
        org.junit.Assert.assertNull(node76);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker67 = compiler9.tracker;
        com.google.javascript.jscomp.SourceFile sourceFile69 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput71 = new com.google.javascript.jscomp.CompilerInput(sourceFile69, true);
        com.google.javascript.rhino.InputId inputId73 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput75 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput71, inputId73, true);
        com.google.javascript.jscomp.CompilerInput compilerInput77 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput75, false);
        com.google.javascript.jscomp.JSModule jSModule79 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler80 = new com.google.javascript.jscomp.Compiler();
        jSModule79.sortInputsByDeps(compiler80);
        java.lang.String str82 = jSModule79.getName();
        compilerInput75.setModule(jSModule79);
        java.lang.String str84 = compiler9.toSource(jSModule79);
        com.google.javascript.jscomp.Region region87 = compiler9.getSourceRegion("java.io.IOException: OFF", (-4));
        com.google.javascript.rhino.InputId inputId89 = new com.google.javascript.rhino.InputId("FINEST");
        java.lang.String str90 = inputId89.getIdName();
        java.lang.String str91 = inputId89.getIdName();
        com.google.javascript.jscomp.CompilerInput compilerInput92 = compiler9.getInput(inputId89);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNull(performanceTracker67);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "STRING PARAM_LIST 49" + "'", str82, "STRING PARAM_LIST 49");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(region87);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "FINEST" + "'", str90, "FINEST");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "FINEST" + "'", str91, "FINEST");
        org.junit.Assert.assertNull(compilerInput92);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        jSModule1.removeAll();
        java.util.List<com.google.javascript.jscomp.JSModule> jSModuleList3 = jSModule1.getDependencies();
        com.google.javascript.jscomp.JSModule jSModule5 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = jSModule5.getByName("FINEST");
        com.google.javascript.jscomp.SourceFile sourceFile10 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int12 = sourceFile10.getLineOfOffset((int) (short) 1);
        java.lang.String str13 = sourceFile10.getName();
        java.lang.String str14 = sourceFile10.getName();
        java.lang.String str15 = sourceFile10.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput17 = new com.google.javascript.jscomp.CompilerInput(sourceFile10, true);
        com.google.javascript.jscomp.CompilerInput compilerInput18 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput17);
        com.google.javascript.jscomp.JSModule jSModule19 = compilerInput17.getModule();
        com.google.javascript.jscomp.JSModule jSModule21 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler22 = new com.google.javascript.jscomp.Compiler();
        jSModule21.sortInputsByDeps(compiler22);
        java.lang.String str24 = jSModule21.getName();
        compilerInput17.setModule(jSModule21);
        jSModule5.addDependency(jSModule21);
        com.google.javascript.jscomp.SourceFile sourceFile29 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int31 = sourceFile29.getLineOfOffset((int) (short) 1);
        int int33 = sourceFile29.getLineOfOffset(100);
        java.lang.String str34 = sourceFile29.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput35 = new com.google.javascript.jscomp.CompilerInput(sourceFile29);
        com.google.javascript.rhino.InputId inputId36 = compilerInput35.getInputId();
        jSModule5.addFirst(compilerInput35);
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput35);
        com.google.javascript.jscomp.SourceFile sourceFile42 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", ":", "goog.abstractMethod");
        java.lang.String str43 = sourceFile42.getName();
        compilerInput38.setSourceFile(sourceFile42);
        com.google.javascript.jscomp.CompilerInput compilerInput47 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput38, "WARNING: hi!", false);
        jSModule1.addFirst(compilerInput38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = compilerInput38.getPathRelativeToClosureBase();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSModuleList3);
        org.junit.Assert.assertNull(compilerInput7);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(jSModule19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "STRING PARAM_LIST 49" + "'", str24, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(sourceFile29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(inputId36);
        org.junit.Assert.assertNotNull(sourceFile42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        compiler9.reportCodeChange();
        com.google.javascript.jscomp.Region region71 = compiler9.getSourceRegion("InputId: *global*", 40);
        double double72 = compiler9.getProgress();
        com.google.javascript.jscomp.SourceFile sourceFile74 = com.google.javascript.jscomp.SourceFile.fromFile("PARAM_LIST");
        com.google.javascript.rhino.Node node75 = compiler9.parse(sourceFile74);
        com.google.javascript.rhino.InputId inputId77 = new com.google.javascript.rhino.InputId("*global*");
        java.lang.String str78 = inputId77.toString();
        com.google.javascript.jscomp.JSModule[] jSModuleArray79 = new com.google.javascript.jscomp.JSModule[] {};
        java.util.ArrayList<com.google.javascript.jscomp.JSModule> jSModuleList80 = new java.util.ArrayList<com.google.javascript.jscomp.JSModule>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList80, jSModuleArray79);
        com.google.javascript.jscomp.JSModule[] jSModuleArray82 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList80);
        boolean boolean83 = inputId77.equals((java.lang.Object) jSModuleArray82);
        com.google.javascript.jscomp.CompilerInput compilerInput84 = compiler9.getInput(inputId77);
        java.io.PrintStream printStream85 = null;
        com.google.javascript.jscomp.Compiler compiler86 = new com.google.javascript.jscomp.Compiler(printStream85);
        com.google.javascript.jscomp.ErrorManager errorManager87 = compiler86.getErrorManager();
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode88 = compiler86.languageMode();
        compilerInput84.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler86);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState90 = compiler86.getState();
        boolean boolean91 = compiler86.acceptConstKeyword();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNull(region71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(sourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "InputId: *global*" + "'", str78, "InputId: *global*");
        org.junit.Assert.assertNotNull(jSModuleArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSModuleArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(compilerInput84);
        org.junit.Assert.assertNotNull(errorManager87);
        org.junit.Assert.assertTrue("'" + languageMode88 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode88.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertNotNull(intermediateState90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compiler1.isIdeMode();
        java.lang.String str60 = compiler1.getSourceLine("*global*", (int) ' ');
        java.lang.String[] strArray61 = compiler1.toSourceArray();
        com.google.javascript.jscomp.JSError[] jSErrorArray62 = compiler1.getWarnings();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(jSErrorArray62);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler();
        jSModule1.sortInputsByDeps(compiler2);
        com.google.javascript.rhino.Node node4 = compiler2.getRoot();
        java.io.PrintStream printStream5 = null;
        com.google.javascript.jscomp.Compiler compiler6 = new com.google.javascript.jscomp.Compiler(printStream5);
        java.lang.String str7 = compiler6.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions8.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions8.setTracer(tracerMode14);
        compiler6.initOptions(compilerOptions8);
        com.google.javascript.jscomp.SourceFile sourceFile19 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int21 = sourceFile19.getLineOfOffset((int) (short) 1);
        java.lang.String str22 = sourceFile19.getName();
        java.lang.String str23 = sourceFile19.getName();
        java.lang.String str24 = sourceFile19.getName();
        com.google.javascript.jscomp.SourceFile sourceFile27 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int29 = sourceFile27.getLineOfOffset((int) (short) 1);
        java.lang.String str30 = sourceFile27.getName();
        com.google.javascript.jscomp.JsAst jsAst31 = new com.google.javascript.jscomp.JsAst(sourceFile27);
        jsAst31.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput35 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst31, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int40 = sourceFile38.getLineOfOffset((int) (short) 1);
        java.lang.String str41 = sourceFile38.getName();
        java.lang.String str42 = sourceFile38.getName();
        java.lang.String str43 = sourceFile38.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput45 = new com.google.javascript.jscomp.CompilerInput(sourceFile38, true);
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput45);
        com.google.javascript.jscomp.SourceFile sourceFile49 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int51 = sourceFile49.getLineOfOffset((int) (short) 1);
        int int53 = sourceFile49.getColumnOfOffset(8);
        compilerInput46.setSourceFile(sourceFile49);
        jsAst31.setSourceFile(sourceFile49);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.crossModuleMethodMotion = true;
        compilerOptions56.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result61 = compiler6.compile(sourceFile19, sourceFile49, compilerOptions56);
        com.google.javascript.jscomp.ErrorManager errorManager62 = compiler6.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray63 = errorManager62.getErrors();
        compiler2.setErrorManager(errorManager62);
        int int65 = errorManager62.getWarningCount();
        com.google.javascript.jscomp.Compiler compiler66 = new com.google.javascript.jscomp.Compiler(errorManager62);
        int int67 = errorManager62.getWarningCount();
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(sourceFile49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(result61);
        org.junit.Assert.assertNotNull(errorManager62);
        org.junit.Assert.assertNotNull(jSErrorArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry13.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry24.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry24.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] { jSType33 };
        com.google.javascript.rhino.jstype.FunctionType functionType35 = jSTypeRegistry7.createConstructorTypeWithVarArgs(jSType22, jSTypeArray34);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry44.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry44.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry55.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry55.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] { jSType64 };
        com.google.javascript.rhino.jstype.FunctionType functionType66 = jSTypeRegistry38.createConstructorTypeWithVarArgs(jSType53, jSTypeArray65);
        boolean boolean67 = jSTypeRegistry7.declareType("", jSType53);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        boolean boolean74 = jSTypeList69.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator75 = jSTypeList69.spliterator();
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry1.createFunctionTypeWithVarArgs(jSType53, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray80 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList81 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81, jSTypeArray80);
        boolean boolean83 = jSTypeList78.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81);
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator84 = jSTypeList78.spliterator();
        com.google.javascript.rhino.Node node85 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        jSTypeRegistry1.forwardDeclareType("/experiment/:/hi!");
        com.google.javascript.rhino.jstype.JSType jSType88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType89 = jSTypeRegistry1.createNullableType(jSType88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertNotNull(functionType35);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeSpliterator75);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeSpliterator84);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        boolean boolean6 = file2.canRead();
        boolean boolean9 = file2.setExecutable(false, false);
        long long10 = file2.getUsableSpace();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 280491106304L + "'", long10 == 280491106304L);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("", throwable1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions18.checkRequires;
        compilerOptions0.setReportMissingOverride(checkLevel19);
        compilerOptions0.setGatherCssNames(true);
        compilerOptions0.setLineBreak(false);
        boolean boolean25 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setSyntheticBlockStartMarker("/experiment/:");
        compilerOptions0.removeUnusedPrototypeProperties = false;
        boolean boolean30 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.setInlineConstantVars(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel36 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions33.setSourceMapDetailLevel(detailLevel36);
        compilerOptions33.inlineFunctions = true;
        compilerOptions33.setCommonJSModulePathPrefix(":");
        compilerOptions33.setCrossModuleCodeMotion(true);
        compilerOptions33.setRemoveUnusedClassProperties(true);
        java.io.PrintStream printStream46 = null;
        com.google.javascript.jscomp.Compiler compiler47 = new com.google.javascript.jscomp.Compiler(printStream46);
        java.lang.String str48 = compiler47.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions49.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode55 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions49.setTracer(tracerMode55);
        compiler47.initOptions(compilerOptions49);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy58 = compilerOptions49.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.crossModuleMethodMotion = true;
        compilerOptions59.syntheticBlockEndMarker = "hi!";
        com.google.javascript.jscomp.CheckLevel checkLevel64 = compilerOptions59.aggressiveVarCheck;
        compilerOptions49.setCheckGlobalNamesLevel(checkLevel64);
        compilerOptions33.setCheckGlobalNamesLevel(checkLevel64);
        compilerOptions0.checkUnreachableCode = checkLevel64;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(detailLevel36);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + tracerMode55 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode55.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy58 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy58.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel64 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel64.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.Node node37 = node6.getNext();
        com.google.javascript.rhino.Node node38 = node6.cloneNode();
        boolean boolean39 = node38.isIf();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        node4.putBooleanProp(2147483647, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry9.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        node13.addChildrenToBack(node19);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node4.copyInformationFrom(node13);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry25.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry31.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        node29.addChildrenToBack(node35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, node29, node42, node49, node56, 0, 49);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(46, "", 2, 51);
        boolean boolean65 = node49.isEquivalentToTyped(node64);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(2, node22, node64, (int) ':', 47);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node70 = node64.getAncestor((-9));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler();
        jSModule1.sortInputsByDeps(compiler2);
        com.google.javascript.rhino.Node node4 = compiler2.getRoot();
        java.io.PrintStream printStream5 = null;
        com.google.javascript.jscomp.Compiler compiler6 = new com.google.javascript.jscomp.Compiler(printStream5);
        java.lang.String str7 = compiler6.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions8.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions8.setTracer(tracerMode14);
        compiler6.initOptions(compilerOptions8);
        com.google.javascript.jscomp.SourceFile sourceFile19 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int21 = sourceFile19.getLineOfOffset((int) (short) 1);
        java.lang.String str22 = sourceFile19.getName();
        java.lang.String str23 = sourceFile19.getName();
        java.lang.String str24 = sourceFile19.getName();
        com.google.javascript.jscomp.SourceFile sourceFile27 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int29 = sourceFile27.getLineOfOffset((int) (short) 1);
        java.lang.String str30 = sourceFile27.getName();
        com.google.javascript.jscomp.JsAst jsAst31 = new com.google.javascript.jscomp.JsAst(sourceFile27);
        jsAst31.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput35 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst31, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int40 = sourceFile38.getLineOfOffset((int) (short) 1);
        java.lang.String str41 = sourceFile38.getName();
        java.lang.String str42 = sourceFile38.getName();
        java.lang.String str43 = sourceFile38.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput45 = new com.google.javascript.jscomp.CompilerInput(sourceFile38, true);
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput45);
        com.google.javascript.jscomp.SourceFile sourceFile49 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int51 = sourceFile49.getLineOfOffset((int) (short) 1);
        int int53 = sourceFile49.getColumnOfOffset(8);
        compilerInput46.setSourceFile(sourceFile49);
        jsAst31.setSourceFile(sourceFile49);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.crossModuleMethodMotion = true;
        compilerOptions56.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result61 = compiler6.compile(sourceFile19, sourceFile49, compilerOptions56);
        com.google.javascript.jscomp.ErrorManager errorManager62 = compiler6.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray63 = errorManager62.getErrors();
        compiler2.setErrorManager(errorManager62);
        int int65 = errorManager62.getWarningCount();
        com.google.javascript.jscomp.Compiler compiler66 = new com.google.javascript.jscomp.Compiler(errorManager62);
        compiler66.reportCodeChange();
        compiler66.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState69 = compiler66.getState();
        compiler66.disableThreads();
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(sourceFile49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(result61);
        org.junit.Assert.assertNotNull(errorManager62);
        org.junit.Assert.assertNotNull(jSErrorArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intermediateState69);
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.generatePseudoNames;
        java.util.Set<java.lang.String> strSet4 = compilerOptions0.stripTypes;
        boolean boolean5 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.generatePseudoNames = true;
        boolean boolean8 = compilerOptions0.devirtualizePrototypeMethods;
        compilerOptions0.setGenerateExports(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions18.checkRequires;
        compilerOptions0.setReportMissingOverride(checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions0.stripNameSuffixes;
        boolean boolean22 = compilerOptions0.coalesceVariableNames;
        compilerOptions0.gatherCssNames = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean5 = node3.getBooleanProp((int) (byte) 10);
        java.lang.String str9 = node3.toString(false, false, false);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry11.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        boolean boolean16 = node15.isIn();
        boolean boolean17 = node15.isGetElem();
        node15.setSourceEncodedPositionForTree(38);
        com.google.javascript.rhino.Node node20 = node3.srcref(node15);
        int int21 = node3.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING PARAM_LIST" + "'", str9, "STRING PARAM_LIST");
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        boolean boolean7 = node6.isIn();
        boolean boolean8 = node6.isVoid();
        node6.setOptionalArg(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode12 = null;
        compilerOptions11.setTracerMode(tracerMode12);
        boolean boolean14 = compilerOptions11.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel15 = compilerOptions11.sourceMapDetailLevel;
        compilerOptions11.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.crossModuleMethodMotion = true;
        compilerOptions18.optimizeParameters = true;
        compilerOptions18.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel26 = compilerOptions18.checkGlobalNamesLevel;
        compilerOptions11.setReportMissingOverride(checkLevel26);
        com.google.javascript.jscomp.DiagnosticType diagnosticType28 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray29 = null;
        com.google.javascript.jscomp.JSError jSError30 = com.google.javascript.jscomp.JSError.make("", node6, checkLevel26, diagnosticType28, strArray29);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.crossModuleMethodMotion = true;
        compilerOptions31.skipAllCompilerPasses();
        compilerOptions31.resetWarningsGuard();
        compilerOptions31.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode39 = null;
        compilerOptions38.setTracerMode(tracerMode39);
        boolean boolean41 = compilerOptions38.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel42 = compilerOptions38.sourceMapDetailLevel;
        compilerOptions38.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet45 = compilerOptions38.stripNameSuffixes;
        compilerOptions31.setReplaceStringsReservedStrings(strSet45);
        boolean boolean47 = strSet45.isEmpty();
        node6.setDirectives(strSet45);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.crossModuleMethodMotion = true;
        compilerOptions49.skipAllCompilerPasses();
        compilerOptions49.resetWarningsGuard();
        compilerOptions49.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode57 = null;
        compilerOptions56.setTracerMode(tracerMode57);
        boolean boolean59 = compilerOptions56.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel60 = compilerOptions56.sourceMapDetailLevel;
        compilerOptions56.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet63 = compilerOptions56.stripNameSuffixes;
        compilerOptions49.setReplaceStringsReservedStrings(strSet63);
        boolean boolean65 = strSet45.remove((java.lang.Object) compilerOptions49);
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions66.setInlineLocalFunctions(false);
        compilerOptions66.moveFunctionDeclarations = true;
        compilerOptions66.setInlineLocalFunctions(false);
        boolean boolean73 = strSet45.contains((java.lang.Object) compilerOptions66);
        compilerOptions66.setRuntimeTypeCheckLogFunction("// Input %num%");
        compilerOptions66.deadAssignmentElimination = false;
        boolean boolean78 = compilerOptions66.disambiguateProperties;
        compilerOptions66.removeUnusedClassProperties = false;
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(detailLevel15);
        org.junit.Assert.assertTrue("'" + checkLevel26 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel26.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType28);
        org.junit.Assert.assertNotNull(jSError30);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(detailLevel42);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(detailLevel60);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 10, 51, 39);
        boolean boolean4 = node3.isWhile();
        boolean boolean5 = node3.isString();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList12 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList12, jSTypeArray11);
        com.google.javascript.rhino.Node node14 = jSTypeRegistry10.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList12);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry16.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        node14.addChildrenToBack(node20);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry23.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry30.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry37.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, node14, node27, node34, node41, 0, 49);
        boolean boolean45 = node14.isDo();
        boolean boolean46 = node14.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node14.children();
        node14.addSuppression("Node tree inequality:\nTree1:\nPARAM_LIST\n    NAME \n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: PARAM_LIST\n    NAME \n\n\nSubtree2: NUMBER -1.0\n");
        int int50 = node14.getCharno();
        node6.putProp(15, (java.lang.Object) node14);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        java.util.logging.Level level0 = java.util.logging.Level.OFF;
        java.lang.String str1 = level0.toString();
        java.lang.String str2 = level0.toString();
        java.lang.String str3 = level0.getName();
        org.junit.Assert.assertNotNull(level0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "OFF" + "'", str1, "OFF");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OFF" + "'", str2, "OFF");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OFF" + "'", str3, "OFF");
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setProtectHiddenSideEffects(true);
        java.lang.String str5 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("Exceeded max number of code motion iterations: Unversioned directory");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("/");
        jSModule1.setDepth(53);
        jSModule1.removeAll();
        com.google.javascript.jscomp.Compiler compiler5 = null;
        jSModule1.sortInputsByDeps(compiler5);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.setManageClosureDependencies(false);
        compilerOptions0.setCoalesceVariableNames(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        java.lang.String str48 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy52 = compilerOptions49.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap53 = compilerOptions49.getTweakReplacements();
        boolean boolean54 = strMap53.isEmpty();
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy58 = compilerOptions55.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap59 = compilerOptions55.getTweakReplacements();
        boolean boolean60 = strMap59.isEmpty();
        strMap59.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry63.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        boolean boolean68 = node67.isIn();
        boolean boolean69 = strMap59.containsValue((java.lang.Object) node67);
        boolean boolean70 = strMap53.containsKey((java.lang.Object) strMap59);
        com.google.javascript.rhino.InputId inputId72 = new com.google.javascript.rhino.InputId("*global*");
        java.lang.String str73 = inputId72.toString();
        boolean boolean74 = strMap59.containsKey((java.lang.Object) inputId72);
        com.google.javascript.jscomp.CompilerInput compilerInput75 = compiler9.getInput(inputId72);
        com.google.javascript.rhino.Node node76 = compiler9.getRoot();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy52 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy52.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy58 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy58.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "InputId: *global*" + "'", str73, "InputId: *global*");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(compilerInput75);
        org.junit.Assert.assertNull(node76);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        compilerOptions0.setReportPath("OFF");
        java.lang.String str19 = compilerOptions0.locale;
        boolean boolean20 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setIgnoreCajaProperties(true);
        compilerOptions0.setFoldConstants(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.JSError jSError2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = diagnosticGroup0.matches(jSError2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("PARAM_LIST", "PARAM_LIST");
        sourceFile2.clearCachedSource();
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Object obj10 = null;
        boolean boolean11 = jSTypeList3.remove(obj10);
        java.lang.Object obj12 = null;
        int int13 = jSTypeList3.indexOf(obj12);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.skipAllCompilerPasses();
        compilerOptions14.resetWarningsGuard();
        compilerOptions14.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode22 = null;
        compilerOptions21.setTracerMode(tracerMode22);
        boolean boolean24 = compilerOptions21.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel25 = compilerOptions21.sourceMapDetailLevel;
        compilerOptions21.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet28 = compilerOptions21.stripNameSuffixes;
        compilerOptions14.setReplaceStringsReservedStrings(strSet28);
        int int30 = strSet28.size();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry32.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream37 = jSTypeList34.parallelStream();
        boolean boolean38 = strSet28.containsAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        boolean boolean39 = jSTypeList3.containsAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream46 = jSTypeList43.parallelStream();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry48.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream53 = jSTypeList50.parallelStream();
        java.util.Spliterator<com.google.javascript.rhino.jstype.JSType> jSTypeSpliterator54 = jSTypeList50.spliterator();
        boolean boolean55 = jSTypeList43.containsAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        boolean boolean62 = jSTypeList57.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList64, jSTypeArray63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList67 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList67, jSTypeArray66);
        boolean boolean69 = jSTypeList64.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList67);
        boolean boolean70 = jSTypeList57.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList67);
        boolean boolean71 = jSTypeList57.isEmpty();
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream72 = jSTypeList57.parallelStream();
        boolean boolean73 = jSTypeList43.containsAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        int int74 = jSTypeList34.lastIndexOf((java.lang.Object) jSTypeList43);
        com.google.javascript.jscomp.JSModule jSModule76 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.CompilerInput compilerInput78 = jSModule76.getByName("FINEST");
        boolean boolean80 = jSModule76.removeByName("*global*");
        java.util.List<java.lang.String> strList81 = jSModule76.getProvides();
        boolean boolean82 = jSTypeList43.remove((java.lang.Object) strList81);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream83 = jSTypeList43.stream();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(detailLevel25);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSTypeStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeStream46);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSTypeStream53);
        org.junit.Assert.assertNotNull(jSTypeSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(jSTypeStream72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(compilerInput78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSTypeStream83);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.rhino.InputId inputId8 = jsAst6.getInputId();
        com.google.javascript.jscomp.JSModule jSModule10 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler11 = new com.google.javascript.jscomp.Compiler();
        jSModule10.sortInputsByDeps(compiler11);
        com.google.javascript.jscomp.SourceFile.Builder builder13 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile17 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int19 = sourceFile17.getLineOfOffset((int) (short) 1);
        java.io.Reader reader20 = sourceFile17.getCodeReader();
        int int21 = reader20.read();
        com.google.javascript.jscomp.SourceFile sourceFile22 = builder13.buildFromReader("*global*", reader20);
        jSModule10.add(sourceFile22);
        com.google.javascript.jscomp.JSModule jSModule25 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler26 = new com.google.javascript.jscomp.Compiler();
        jSModule25.sortInputsByDeps(compiler26);
        com.google.javascript.jscomp.SourceFile.Builder builder28 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile32 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int34 = sourceFile32.getLineOfOffset((int) (short) 1);
        java.io.Reader reader35 = sourceFile32.getCodeReader();
        int int36 = reader35.read();
        com.google.javascript.jscomp.SourceFile sourceFile37 = builder28.buildFromReader("*global*", reader35);
        jSModule25.add(sourceFile37);
        boolean boolean40 = jSModule25.removeByName("PARAM_LIST");
        jSModule10.addDependency(jSModule25);
        com.google.javascript.jscomp.SourceFile sourceFile43 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput45 = new com.google.javascript.jscomp.CompilerInput(sourceFile43, true);
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput49 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput45, inputId47, true);
        com.google.javascript.jscomp.CompilerInput compilerInput51 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput49, false);
        jSModule10.addFirst(compilerInput49);
        com.google.javascript.jscomp.CompilerInput compilerInput54 = jSModule10.getByName("");
        com.google.javascript.jscomp.SourceFile sourceFile56 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput58 = new com.google.javascript.jscomp.CompilerInput(sourceFile56, true);
        com.google.javascript.rhino.InputId inputId60 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput62 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput58, inputId60, true);
        com.google.javascript.jscomp.CompilerInput compilerInput64 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput62, false);
        com.google.javascript.jscomp.JSModule jSModule66 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler67 = new com.google.javascript.jscomp.Compiler();
        jSModule66.sortInputsByDeps(compiler67);
        java.lang.String str69 = jSModule66.getName();
        compilerInput62.setModule(jSModule66);
        jSModule66.setDepth((int) (byte) 0);
        jSModule10.addDependency(jSModule66);
        boolean boolean75 = jSModule66.removeByName("/experiment/:");
        java.io.PrintStream printStream76 = null;
        com.google.javascript.jscomp.Compiler compiler77 = new com.google.javascript.jscomp.Compiler(printStream76);
        java.lang.String str78 = compiler77.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions79 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions79.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions79.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode85 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions79.setTracer(tracerMode85);
        compiler77.initOptions(compilerOptions79);
        boolean boolean88 = compiler77.hasErrors();
        double double89 = compiler77.getProgress();
        int int90 = compiler77.getErrorCount();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry91 = compiler77.getTypeRegistry();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter92 = compiler77.getReverseAbstractInterpreter();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter93 = compiler77.getReverseAbstractInterpreter();
        jSModule66.sortInputsByDeps(compiler77);
        double double95 = compiler77.getProgress();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState96 = compiler77.getState();
        int int97 = compiler77.getErrorCount();
        com.google.javascript.rhino.Node node98 = jsAst6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler77);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(inputId8);
        org.junit.Assert.assertNotNull(sourceFile17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(reader20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertNotNull(sourceFile32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(reader35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(compilerInput54);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "STRING PARAM_LIST 49" + "'", str69, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + tracerMode85 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode85.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(jSTypeRegistry91);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter92);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter93);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(intermediateState96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int6 = sourceFile4.getLineOfOffset((int) (short) 1);
        java.io.Reader reader7 = sourceFile4.getCodeReader();
        int int8 = reader7.read();
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromReader("*global*", reader7);
        reader7.reset();
        boolean boolean11 = reader7.markSupported();
        long long13 = reader7.skip(1645456104000L);
        java.nio.CharBuffer charBuffer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = reader7.read(charBuffer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        jSTypeRegistry6.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] { jSType8 };
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParameters(jSTypeArray9);
        int int11 = node3.getIndexOfChild(node10);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        node18.addChildrenToBack(node24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, node18, node31, node38, node45, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry51.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry57.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        node55.addChildrenToBack(node61);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        boolean boolean69 = node68.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry71.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        boolean boolean76 = node75.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry78.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, node55, node68, node75, node82, 0, 49);
        com.google.javascript.rhino.Node node86 = node48.useSourceInfoFrom(node68);
        boolean boolean87 = node68.isExprResult();
        int int88 = node3.getIndexOfChild(node68);
        boolean boolean89 = node68.hasMoreThanOneChild();
        boolean boolean90 = node68.isVar();
        node68.setWasEmptyNode(false);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = node68.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PARAM_LIST is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        com.google.javascript.jscomp.VariableMap variableMap48 = result47.namedAnonFunctionMap;
        java.lang.String str49 = result47.debugLog;
        java.util.Map<java.lang.String, java.lang.Integer> strMap50 = result47.cssNames;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNull(variableMap48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(strMap50);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("TYPEOF : 44\n");
        boolean boolean2 = node1.isObjectLit();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeIterable3);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        java.io.File file2 = java.io.File.createTempFile("InputId: *global*", "hi!");
        long long3 = file2.getFreeSpace();
        boolean boolean4 = file2.isAbsolute();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/InputId: *global*1873084019347271153hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 299089756160L + "'", long3 == 299089756160L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        java.io.File file59 = new java.io.File(":", "hi!");
        boolean boolean62 = file59.setExecutable(false, false);
        java.io.File file63 = file59.getParentFile();
        long long64 = file63.getUsableSpace();
        boolean boolean65 = file63.mkdirs();
        java.nio.charset.Charset charset66 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile67 = com.google.javascript.jscomp.JSSourceFile.fromFile(file63, charset66);
        com.google.javascript.jscomp.JSModule[] jSModuleArray68 = new com.google.javascript.jscomp.JSModule[] {};
        java.util.ArrayList<com.google.javascript.jscomp.JSModule> jSModuleList69 = new java.util.ArrayList<com.google.javascript.jscomp.JSModule>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList69, jSModuleArray68);
        com.google.javascript.jscomp.JSModule[] jSModuleArray71 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection<com.google.javascript.jscomp.JSModule>) jSModuleList69);
        com.google.javascript.jscomp.CompilerOptions compilerOptions72 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions72.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions72.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode78 = null;
        compilerOptions72.setLanguageOut(languageMode78);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy80 = null;
        compilerOptions72.variableRenaming = variableRenamingPolicy80;
        com.google.javascript.jscomp.CheckLevel checkLevel82 = compilerOptions72.checkUnreachableCode;
        com.google.javascript.jscomp.Result result83 = compiler1.compile(jSSourceFile67, jSModuleArray71, compilerOptions72);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap84 = result83.functionInformationMap;
        java.lang.String str85 = result83.debugLog;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertEquals(file59.getParent(), ":");
        org.junit.Assert.assertEquals(file59.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertNull("file63.getParent() == null", file63.getParent());
        org.junit.Assert.assertEquals(file63.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 280490639360L + "'", long64 == 280490639360L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSSourceFile67);
        org.junit.Assert.assertNotNull(jSModuleArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSModuleArray71);
        org.junit.Assert.assertTrue("'" + checkLevel82 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel82.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(result83);
        org.junit.Assert.assertNull(functionInformationMap84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(97, 900, 31);
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.generatePseudoNames;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray4 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList5 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList5, locationMappingArray4);
        compilerOptions0.sourceMapLocationMappings = locationMappingList5;
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = true;
        compilerOptions0.aliasKeywords = true;
        boolean boolean12 = compilerOptions0.rewriteFunctionExpressions;
        boolean boolean13 = compilerOptions0.labelRenaming;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locationMappingArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setIdeMode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        compilerOptions9.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy14 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy18 = compilerOptions15.propertyRenaming;
        compilerOptions9.setRenamingPolicy(variableRenamingPolicy14, propertyRenamingPolicy18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.crossModuleMethodMotion = true;
        compilerOptions20.skipAllCompilerPasses();
        boolean boolean24 = compilerOptions20.flowSensitiveInlineVariables;
        java.lang.String[] strArray34 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        compilerOptions20.stripTypes = strSet35;
        compilerOptions9.setStripNamePrefixes((java.util.Set<java.lang.String>) strSet35);
        compilerOptions0.setReplaceStringsReservedStrings((java.util.Set<java.lang.String>) strSet35);
        compilerOptions0.setDebugFunctionSideEffectsPath("/experiment/:/hi!");
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions0.aggressiveVarCheck;
        boolean boolean43 = compilerOptions0.foldConstants;
        compilerOptions0.aliasAllStrings = true;
        java.lang.String str46 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy18 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy18.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str2 = charset1.name();
        java.lang.String str3 = charset1.name();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str5 = charset4.toString();
        boolean boolean6 = charset1.contains(charset4);
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromFile("/", charset4);
        java.nio.charset.Charset charset9 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str10 = charset9.name();
        java.lang.String str11 = charset9.name();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile12 = com.google.javascript.jscomp.JSSourceFile.fromFile("STRING PARAM_LIST 49: hi!", charset9);
        boolean boolean13 = charset4.contains(charset9);
        java.io.File file16 = new java.io.File(":", "hi!");
        boolean boolean19 = file16.setExecutable(false, false);
        java.io.File file20 = file16.getParentFile();
        long long21 = file20.getUsableSpace();
        boolean boolean22 = file20.mkdirs();
        java.nio.charset.Charset charset23 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile24 = com.google.javascript.jscomp.JSSourceFile.fromFile(file20, charset23);
        java.io.File file27 = new java.io.File(":", "hi!");
        boolean boolean30 = file27.setExecutable(true, false);
        boolean boolean32 = file27.setWritable(false);
        boolean boolean33 = file27.canWrite();
        java.net.URI uRI34 = file27.toURI();
        boolean boolean35 = file20.renameTo(file27);
        java.nio.charset.Charset charset36 = java.nio.charset.Charset.defaultCharset();
        com.google.javascript.jscomp.SourceFile sourceFile37 = com.google.javascript.jscomp.SourceFile.fromFile(file20, charset36);
        int int38 = charset9.compareTo(charset36);
        java.lang.String str39 = charset9.name();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "US-ASCII" + "'", str5, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "US-ASCII" + "'", str10, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "US-ASCII" + "'", str11, "US-ASCII");
        org.junit.Assert.assertNotNull(jSSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(file16.getParent(), ":");
        org.junit.Assert.assertEquals(file16.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertNull("file20.getParent() == null", file20.getParent());
        org.junit.Assert.assertEquals(file20.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 280491175936L + "'", long21 == 280491175936L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSSourceFile24);
        org.junit.Assert.assertEquals(file27.getParent(), ":");
        org.junit.Assert.assertEquals(file27.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "US-ASCII" + "'", str39, "US-ASCII");
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.markNoSideEffectCalls = false;
        compilerOptions0.lineBreak = true;
        com.google.javascript.jscomp.MessageBundle messageBundle7 = compilerOptions0.messageBundle;
        compilerOptions0.setShadowVariables(false);
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        org.junit.Assert.assertNull(messageBundle7);
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.net.URI uRI6 = file2.toURI();
        java.io.File file7 = new java.io.File(uRI6);
        boolean boolean8 = file7.canWrite();
        boolean boolean11 = file7.setExecutable(false, true);
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/:/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler();
        jSModule1.sortInputsByDeps(compiler2);
        com.google.javascript.jscomp.SourceFile.Builder builder4 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile8 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int10 = sourceFile8.getLineOfOffset((int) (short) 1);
        java.io.Reader reader11 = sourceFile8.getCodeReader();
        int int12 = reader11.read();
        com.google.javascript.jscomp.SourceFile sourceFile13 = builder4.buildFromReader("*global*", reader11);
        jSModule1.add(sourceFile13);
        com.google.javascript.jscomp.JSModule jSModule16 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler17 = new com.google.javascript.jscomp.Compiler();
        jSModule16.sortInputsByDeps(compiler17);
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile23 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int25 = sourceFile23.getLineOfOffset((int) (short) 1);
        java.io.Reader reader26 = sourceFile23.getCodeReader();
        int int27 = reader26.read();
        com.google.javascript.jscomp.SourceFile sourceFile28 = builder19.buildFromReader("*global*", reader26);
        jSModule16.add(sourceFile28);
        boolean boolean31 = jSModule16.removeByName("PARAM_LIST");
        jSModule1.addDependency(jSModule16);
        com.google.javascript.jscomp.SourceFile sourceFile34 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput36 = new com.google.javascript.jscomp.CompilerInput(sourceFile34, true);
        com.google.javascript.rhino.InputId inputId38 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput36, inputId38, true);
        com.google.javascript.jscomp.CompilerInput compilerInput42 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40, false);
        jSModule1.addFirst(compilerInput40);
        com.google.javascript.jscomp.CompilerInput compilerInput45 = jSModule1.getByName("");
        com.google.javascript.jscomp.SourceFile sourceFile47 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput49 = new com.google.javascript.jscomp.CompilerInput(sourceFile47, true);
        com.google.javascript.rhino.InputId inputId51 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput53 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput49, inputId51, true);
        com.google.javascript.jscomp.CompilerInput compilerInput55 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput53, false);
        com.google.javascript.jscomp.JSModule jSModule57 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler58 = new com.google.javascript.jscomp.Compiler();
        jSModule57.sortInputsByDeps(compiler58);
        java.lang.String str60 = jSModule57.getName();
        compilerInput53.setModule(jSModule57);
        jSModule57.setDepth((int) (byte) 0);
        jSModule1.addDependency(jSModule57);
        boolean boolean66 = jSModule57.removeByName("/experiment/:");
        java.io.PrintStream printStream67 = null;
        com.google.javascript.jscomp.Compiler compiler68 = new com.google.javascript.jscomp.Compiler(printStream67);
        java.lang.String str69 = compiler68.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions70.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions70.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode76 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions70.setTracer(tracerMode76);
        compiler68.initOptions(compilerOptions70);
        boolean boolean79 = compiler68.hasErrors();
        double double80 = compiler68.getProgress();
        int int81 = compiler68.getErrorCount();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry82 = compiler68.getTypeRegistry();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter83 = compiler68.getReverseAbstractInterpreter();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter84 = compiler68.getReverseAbstractInterpreter();
        jSModule57.sortInputsByDeps(compiler68);
        com.google.javascript.jscomp.CompilerOptions compilerOptions86 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str87 = compilerOptions86.syntheticBlockStartMarker;
        compilerOptions86.labelRenaming = true;
        compilerOptions86.setMoveFunctionDeclarations(false);
        compilerOptions86.renamePrefixNamespace = "/";
        compiler68.initOptions(compilerOptions86);
        compilerOptions86.setInlineConstantVars(true);
        compilerOptions86.setFoldConstants(false);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(reader11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(reader26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(sourceFile28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(compilerInput45);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "STRING PARAM_LIST 49" + "'", str60, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + tracerMode76 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode76.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(jSTypeRegistry82);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter83);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter84);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        boolean boolean7 = file2.setWritable(false);
        boolean boolean8 = file2.canWrite();
        java.net.URI uRI9 = file2.toURI();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file2);
        long long11 = file2.getUsableSpace();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(jSSourceFile10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 280490467328L + "'", long11 == 280490467328L);
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        java.io.IOException iOException1 = new java.io.IOException("sun.util.logging.resources.logging");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        node11.addChildrenToBack(node17);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        boolean boolean25 = node24.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, node11, node24, node31, node38, 0, 49);
        com.google.javascript.jscomp.CodingConvention.Bind bind42 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node4, node38);
        boolean boolean43 = node38.isIn();
        boolean boolean44 = node38.isVar();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray48 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList49, jSTypeArray48);
        com.google.javascript.rhino.Node node51 = jSTypeRegistry47.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList49);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry53.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        node51.addChildrenToBack(node57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry60.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry67.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        boolean boolean72 = node71.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter73);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList76 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList76, jSTypeArray75);
        com.google.javascript.rhino.Node node78 = jSTypeRegistry74.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, node51, node64, node71, node78, 0, 49);
        boolean boolean82 = node81.isBlock();
        com.google.javascript.rhino.Node node83 = node38.useSourceInfoIfMissingFrom(node81);
        boolean boolean84 = node38.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker67 = compiler9.tracker;
        com.google.javascript.jscomp.SourceFile sourceFile69 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput71 = new com.google.javascript.jscomp.CompilerInput(sourceFile69, true);
        com.google.javascript.rhino.InputId inputId73 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput75 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput71, inputId73, true);
        com.google.javascript.jscomp.CompilerInput compilerInput77 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput75, false);
        com.google.javascript.jscomp.JSModule jSModule79 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler80 = new com.google.javascript.jscomp.Compiler();
        jSModule79.sortInputsByDeps(compiler80);
        java.lang.String str82 = jSModule79.getName();
        compilerInput75.setModule(jSModule79);
        java.lang.String str84 = compiler9.toSource(jSModule79);
        com.google.javascript.jscomp.SourceFile sourceFile87 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int89 = sourceFile87.getLineOfOffset((int) (short) 1);
        java.lang.String str90 = sourceFile87.getName();
        jSModule79.add(sourceFile87);
        jSModule79.setDepth(100);
        com.google.javascript.jscomp.CompilerInput compilerInput95 = jSModule79.getByName("java.io.IOException: OFF");
        java.util.List<com.google.javascript.jscomp.CompilerInput> compilerInputList96 = jSModule79.getInputs();
        com.google.javascript.jscomp.CompilerInput compilerInput98 = jSModule79.getByName("PARAM_LIST: PARAM_LIST\n");
        java.lang.String str99 = jSModule79.toString();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNull(performanceTracker67);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "STRING PARAM_LIST 49" + "'", str82, "STRING PARAM_LIST 49");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(sourceFile87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertNull(compilerInput95);
        org.junit.Assert.assertNotNull(compilerInputList96);
        org.junit.Assert.assertNull(compilerInput98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "STRING PARAM_LIST 49" + "'", str99, "STRING PARAM_LIST 49");
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        com.google.javascript.jscomp.Result result68 = compiler9.getResult();
        compiler9.rebuildInputsFromModules();
        com.google.javascript.rhino.InputId inputId70 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput71 = compiler9.getInput(inputId70);
        int int72 = compiler9.getWarningCount();
        com.google.javascript.jscomp.SourceFile sourceFile74 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        boolean boolean75 = sourceFile74.isExtern();
        com.google.javascript.jscomp.JsAst jsAst76 = new com.google.javascript.jscomp.JsAst(sourceFile74);
        com.google.javascript.rhino.InputId inputId77 = jsAst76.getInputId();
        com.google.javascript.jscomp.SourceFile sourceFile80 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int82 = sourceFile80.getLineOfOffset((int) (short) 1);
        java.lang.String str83 = sourceFile80.getName();
        com.google.javascript.jscomp.JsAst jsAst84 = new com.google.javascript.jscomp.JsAst(sourceFile80);
        jsAst84.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile88 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int90 = sourceFile88.getLineOfOffset((int) (short) 1);
        java.lang.String str91 = sourceFile88.getName();
        java.lang.String str92 = sourceFile88.getName();
        jsAst84.setSourceFile(sourceFile88);
        com.google.javascript.jscomp.SourceFile sourceFile94 = jsAst84.getSourceFile();
        java.lang.String str95 = sourceFile94.getCode();
        jsAst76.setSourceFile(sourceFile94);
        // The following exception was thrown during execution in test generation
        try {
            compiler9.addNewScript(jsAst76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNotNull(result68);
        org.junit.Assert.assertNull(compilerInput71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(sourceFile74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(inputId77);
        org.junit.Assert.assertNotNull(sourceFile80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(sourceFile88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
        org.junit.Assert.assertNotNull(sourceFile94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions5.propertyRenaming;
        java.lang.String[] strArray11 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerOptions5.setStripTypes((java.util.Set<java.lang.String>) strSet12);
        compilerOptions0.stripNamePrefixes = strSet12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy19 = compilerOptions16.propertyRenaming;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap20 = compilerOptions16.getTweakReplacements();
        boolean boolean21 = strSet12.remove((java.lang.Object) compilerOptions16);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions22.checkRequires;
        compilerOptions22.setRewriteNewDateGoogNow(true);
        compilerOptions22.setSyntheticBlockStartMarker("OFF");
        compilerOptions22.skipAllCompilerPasses();
        compilerOptions22.jqueryPass = false;
        java.lang.String[] strArray36 = new java.lang.String[] { "PARAM_LIST\n", "/", "STRING PARAM_LIST 49", "hi!", "/" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        compilerOptions22.stripNameSuffixes = strSet37;
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        java.util.stream.Stream<com.google.javascript.rhino.jstype.JSType> jSTypeStream46 = jSTypeList43.parallelStream();
        boolean boolean47 = strSet37.retainAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        boolean boolean48 = strSet12.retainAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = jSTypeList43.subList((int) (byte) 100, 300);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 300");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy19 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy19.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.generatePseudoNames;
        java.util.Set<java.lang.String> strSet4 = compilerOptions0.stripTypes;
        boolean boolean5 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.generatePseudoNames = true;
        compilerOptions0.setCheckCaja(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setIdeMode(false);
        compilerOptions0.setDefineToBooleanLiteral("", true);
        boolean boolean12 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.setRenamePrefix(":");
        compilerOptions0.setChainCalls(true);
        compilerOptions0.setMarkAsCompiled(false);
        compilerOptions0.setOutputCharset("goog.abstractMethod");
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode22 = null;
        compilerOptions21.setTracerMode(tracerMode22);
        boolean boolean24 = compilerOptions21.generatePseudoNames;
        java.util.Set<java.lang.String> strSet25 = compilerOptions21.stripTypes;
        compilerOptions0.aliasableStrings = strSet25;
        compilerOptions0.setOptimizeArgumentsArray(true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", ":", "goog.abstractMethod");
        java.lang.String str4 = sourceFile3.getName();
        java.lang.String str5 = sourceFile3.getCode();
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput(sourceFile3, true);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "goog.abstractMethod" + "'", str5, "goog.abstractMethod");
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        com.google.javascript.jscomp.ErrorManager errorManager57 = compiler1.getErrorManager();
        java.lang.String str58 = compiler1.toSource();
        com.google.javascript.jscomp.CodingConvention codingConvention59 = compiler1.getCodingConvention();
        boolean boolean61 = codingConvention59.isValidEnumKey("PARAM_LIST");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType62 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean67 = node66.isTry();
        java.lang.String str68 = node66.toString();
        boolean boolean69 = node66.isIn();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship74 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType62, node66, node73);
        node66.setSourceEncodedPositionForTree((int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node66.getJSDocInfo();
        int int78 = node66.getLength();
        int int79 = node66.getSourcePosition();
        com.google.javascript.jscomp.CodingConvention.Bind bind80 = codingConvention59.describeFunctionBind(node66);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertNotNull(errorManager57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(codingConvention59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + subclassType62 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType62.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "STRING PARAM_LIST 49" + "'", str68, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNull(bind80);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTransformAMDToCJSModules(false);
        boolean boolean7 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.setInlineGetters(true);
        compilerOptions0.setAliasExternals(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.crossModuleMethodMotion = true;
        compilerOptions12.skipAllCompilerPasses();
        compilerOptions12.resetWarningsGuard();
        compilerOptions12.setInlineLocalVariables(false);
        compilerOptions12.setIdeMode(false);
        compilerOptions12.setDefineToBooleanLiteral("", true);
        boolean boolean24 = compilerOptions12.recordFunctionInformation;
        compilerOptions12.setRenamePrefix(":");
        compilerOptions12.setAliasStringsBlacklist("/");
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy29 = com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED;
        compilerOptions12.setVariableRenaming(variableRenamingPolicy29);
        java.io.PrintStream printStream31 = null;
        com.google.javascript.jscomp.Compiler compiler32 = new com.google.javascript.jscomp.Compiler(printStream31);
        java.lang.String str33 = compiler32.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions34.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode40 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions34.setTracer(tracerMode40);
        compiler32.initOptions(compilerOptions34);
        compilerOptions34.setCommonJSModulePathPrefix("");
        compilerOptions34.setSyntheticBlockStartMarker("java.io.IOException: OFF");
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy47 = compilerOptions34.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy29, propertyRenamingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy29 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED + "'", variableRenamingPolicy29.equals(com.google.javascript.jscomp.VariableRenamingPolicy.UNSPECIFIED));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + tracerMode40 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode40.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy47 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy47.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(false, false);
        java.io.File file6 = file2.getParentFile();
        long long7 = file6.getUsableSpace();
        boolean boolean8 = file6.mkdirs();
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile10 = com.google.javascript.jscomp.JSSourceFile.fromFile(file6, charset9);
        java.io.File file13 = new java.io.File(":", "hi!");
        boolean boolean16 = file13.setExecutable(true, false);
        boolean boolean18 = file13.setWritable(false);
        boolean boolean19 = file13.canWrite();
        java.net.URI uRI20 = file13.toURI();
        boolean boolean21 = file6.renameTo(file13);
        boolean boolean22 = file13.setReadOnly();
        boolean boolean23 = file13.canWrite();
        java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str25 = charset24.name();
        java.lang.String str26 = charset24.name();
        java.lang.String str27 = charset24.name();
        com.google.javascript.jscomp.SourceFile sourceFile28 = com.google.javascript.jscomp.SourceFile.fromFile(file13, charset24);
        boolean boolean30 = file13.setExecutable(true);
        boolean boolean31 = file13.setReadOnly();
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.crossModuleMethodMotion = true;
        compilerOptions32.skipAllCompilerPasses();
        compilerOptions32.resetWarningsGuard();
        compilerOptions32.setInlineLocalVariables(false);
        compilerOptions32.setIdeMode(false);
        compilerOptions32.setDefineToBooleanLiteral("", true);
        boolean boolean44 = compilerOptions32.isRemoveUnusedClassProperties();
        boolean boolean45 = file13.equals((java.lang.Object) boolean44);
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), ":");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280491065344L + "'", long7 == 280491065344L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSSourceFile10);
        org.junit.Assert.assertEquals(file13.getParent(), ":");
        org.junit.Assert.assertEquals(file13.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "US-ASCII" + "'", str25, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "US-ASCII" + "'", str26, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "US-ASCII" + "'", str27, "US-ASCII");
        org.junit.Assert.assertNotNull(sourceFile28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        node5.addChildrenToBack(node11);
        boolean boolean13 = node11.isAnd();
        java.lang.String str14 = node11.toStringTree();
        boolean boolean15 = node11.isInstanceOf();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PARAM_LIST\n" + "'", str14, "PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        double double57 = compiler1.getProgress();
        com.google.javascript.jscomp.SourceFile sourceFile60 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int62 = sourceFile60.getLineOfOffset((int) (short) 1);
        java.lang.String str63 = sourceFile60.getName();
        java.lang.String str64 = sourceFile60.getName();
        java.lang.String str65 = sourceFile60.getName();
        com.google.javascript.rhino.Node node66 = compiler1.parse(sourceFile60);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker67 = compiler1.tracker;
        com.google.javascript.jscomp.Region region70 = compiler1.getSourceRegion("java.io.IOException: ", 31);
        com.google.javascript.jscomp.Scope scope71 = compiler1.getTopScope();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(sourceFile60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(performanceTracker67);
        org.junit.Assert.assertNull(region70);
        org.junit.Assert.assertNull(scope71);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compilerOptions51.aliasKeywords;
        boolean boolean58 = compilerOptions51.disambiguateProperties;
        compilerOptions51.setCheckSymbols(false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy5, propertyRenamingPolicy9);
        compilerOptions0.setTransformAMDToCJSModules(true);
        boolean boolean13 = compilerOptions0.rewriteFunctionExpressions;
        compilerOptions0.smartNameRemoval = false;
        compilerOptions0.renamePrefixNamespace = "";
        boolean boolean18 = compilerOptions0.removeUnusedVars;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        boolean boolean75 = node56.isExprResult();
        int int76 = node56.getLength();
        boolean boolean77 = node56.isOptionalArg();
        boolean boolean78 = node56.isNoSideEffectsCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node56.siblings();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 1);
        boolean boolean83 = node82.isThrow();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((-1), node82);
        com.google.javascript.rhino.Node node85 = node56.copyInformationFromForTree(node82);
        boolean boolean86 = node56.isContinue();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray22 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile25 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray32 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile25, jSSourceFile28, jSSourceFile31 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean34 = compilerOptions33.moveFunctionDeclarations;
        compilerOptions33.crossModuleCodeMotion = true;
        compiler21.init(jSSourceFileArray22, jSSourceFileArray32, compilerOptions33);
        com.google.javascript.jscomp.JSModule jSModule39 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler();
        jSModule39.sortInputsByDeps(compiler40);
        com.google.javascript.jscomp.JSModule jSModule43 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler();
        jSModule43.sortInputsByDeps(compiler44);
        com.google.javascript.jscomp.SourceFile.Builder builder46 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int52 = sourceFile50.getLineOfOffset((int) (short) 1);
        java.io.Reader reader53 = sourceFile50.getCodeReader();
        int int54 = reader53.read();
        com.google.javascript.jscomp.SourceFile sourceFile55 = builder46.buildFromReader("*global*", reader53);
        jSModule43.add(sourceFile55);
        com.google.javascript.jscomp.JSModule[] jSModuleArray57 = new com.google.javascript.jscomp.JSModule[] { jSModule39, jSModule43 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel61 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions58.setSourceMapDetailLevel(detailLevel61);
        boolean boolean63 = compilerOptions58.ideMode;
        compilerOptions58.renamePrefix = "hi!";
        com.google.javascript.jscomp.Result result66 = compiler9.compile(jSSourceFileArray32, jSModuleArray57, compilerOptions58);
        com.google.javascript.jscomp.Result result67 = compiler9.getResult();
        java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputIdMap68 = compiler9.getInputsById();
        com.google.javascript.jscomp.JSError[] jSErrorArray69 = compiler9.getWarnings();
        double double70 = compiler9.getProgress();
        boolean boolean71 = compiler9.acceptEcmaScript5();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSSourceFileArray22);
        org.junit.Assert.assertNotNull(jSSourceFile25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFileArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(reader53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(sourceFile55);
        org.junit.Assert.assertNotNull(jSModuleArray57);
        org.junit.Assert.assertNotNull(detailLevel61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(result66);
        org.junit.Assert.assertNotNull(result67);
        org.junit.Assert.assertNotNull(inputIdMap68);
        org.junit.Assert.assertNotNull(jSErrorArray69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        boolean boolean37 = node6.isDo();
        boolean boolean38 = node6.isWhile();
        boolean boolean39 = node6.hasOneChild();
        boolean boolean40 = node6.isWhile();
        node6.setSourceFileForTesting("java.io.IOException: java.io.IOException: java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions0.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions0.setTracer(tracerMode6);
        compilerOptions0.setSyntheticBlockStartMarker("");
        compilerOptions0.setAliasStringsBlacklist("InputId: *global*");
        compilerOptions0.setLineBreak(false);
        compilerOptions0.setAliasExternals(true);
        compilerOptions0.exportTestFunctions = true;
        org.junit.Assert.assertTrue("'" + tracerMode6 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode6.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable11 = jSTypeRegistry1.getTypesWithProperty(":");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        jSTypeRegistry13.clearNamedTypes();
        jSTypeRegistry13.forwardDeclareType("STRING PARAM_LIST 49");
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType17);
        com.google.javascript.jscomp.SourceFile sourceFile20 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput22 = new com.google.javascript.jscomp.CompilerInput(sourceFile20, true);
        com.google.javascript.rhino.InputId inputId24 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput26 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput22, inputId24, true);
        java.io.PrintStream printStream27 = null;
        com.google.javascript.jscomp.Compiler compiler28 = new com.google.javascript.jscomp.Compiler(printStream27);
        java.lang.String str29 = compiler28.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions30.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode36 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions30.setTracer(tracerMode36);
        compiler28.initOptions(compilerOptions30);
        compilerInput26.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler28);
        com.google.javascript.jscomp.JSError[] jSErrorArray40 = compiler28.getMessages();
        boolean boolean41 = compiler28.acceptConstKeyword();
        compiler28.reportCodeChange();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = compiler28.getTypeRegistry();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        jSTypeRegistry45.clearNamedTypes();
        jSTypeRegistry45.forwardDeclareType("STRING PARAM_LIST 49");
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        boolean boolean59 = jSTypeList54.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry52.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        jSTypeRegistry52.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable64 = jSTypeRegistry52.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry52.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList76 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList76, jSTypeArray75);
        boolean boolean78 = jSTypeList73.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList76);
        com.google.javascript.rhino.Node node79 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        jSTypeRegistry71.forwardDeclareType("PARAM_LIST");
        jSTypeRegistry71.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = jSTypeRegistry71.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry52.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType83);
        jSTypeRegistry45.registerPropertyOnType("STRING PARAM_LIST 49", (com.google.javascript.rhino.jstype.JSType) objectType83);
        com.google.javascript.rhino.jstype.JSType jSType86 = jSTypeRegistry43.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType83);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType83);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(jSTypeIterable11);
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + tracerMode36 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode36.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeRegistry43);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSTypeIterable64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(jSType87);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compiler1.isIdeMode();
        com.google.javascript.jscomp.JSError[] jSErrorArray58 = compiler1.getMessages();
        java.lang.String[] strArray59 = compiler1.toSourceArray();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = compiler1.getTypeRegistry();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSErrorArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(jSTypeRegistry60);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode5 = compilerOptions0.getLanguageOut();
        compilerOptions0.setFoldConstants(true);
        compilerOptions0.optimizeArgumentsArray = true;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel10 = compilerOptions0.sourceMapDetailLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.checkGlobalNamesLevel;
        boolean boolean12 = compilerOptions0.smartNameRemoval;
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean15 = compilerOptions0.smartNameRemoval;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setAliasKeywords(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertNull(languageMode5);
        org.junit.Assert.assertNotNull(detailLevel10);
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        boolean boolean4 = compilerOptions0.removeUnusedVars;
        compilerOptions0.setExternExports(false);
        compilerOptions0.setCheckSuspiciousCode(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        java.io.File file2 = new java.io.File("sun.util.logging.resources.logging", "Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n");
        boolean boolean3 = file2.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "sun.util.logging.resources.logging");
        org.junit.Assert.assertEquals(file2.toString(), "sun.util.logging.resources.logging/Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int4 = sourceFile2.getLineOfOffset((int) (short) 1);
        java.lang.String str5 = sourceFile2.getName();
        com.google.javascript.jscomp.JsAst jsAst6 = new com.google.javascript.jscomp.JsAst(sourceFile2);
        jsAst6.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst6, "*global*", false);
        com.google.javascript.rhino.InputId inputId11 = compilerInput10.getInputId();
        com.google.javascript.jscomp.CompilerInput compilerInput13 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput10, false);
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput13, "PARAM_LIST\n    PARAM_LIST\n", true);
        java.lang.String str17 = compilerInput16.toString();
        boolean boolean18 = compilerInput16.isExtern();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(inputId11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PARAM_LIST\n    PARAM_LIST\n" + "'", str17, "PARAM_LIST\n    PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        jSTypeRegistry6.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] { jSType8 };
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParameters(jSTypeArray9);
        int int11 = node3.getIndexOfChild(node10);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry14.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        node18.addChildrenToBack(node24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry27.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry41.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, node18, node31, node38, node45, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry51.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry57.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        node55.addChildrenToBack(node61);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        boolean boolean69 = node68.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry71.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        boolean boolean76 = node75.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry78.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, node55, node68, node75, node82, 0, 49);
        com.google.javascript.rhino.Node node86 = node48.useSourceInfoFrom(node68);
        boolean boolean87 = node68.isExprResult();
        int int88 = node3.getIndexOfChild(node68);
        boolean boolean89 = node68.hasMoreThanOneChild();
        boolean boolean90 = node68.isVar();
        boolean boolean91 = node68.isInc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        boolean boolean12 = compiler1.hasErrors();
        int int13 = compiler1.getErrorCount();
        com.google.javascript.jscomp.Scope scope14 = compiler1.getTopScope();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(scope14);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        boolean boolean8 = jSTypeList3.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        boolean boolean10 = node9.isInc();
        java.lang.Object obj12 = node9.getProp((int) 'a');
        boolean boolean13 = node9.isQuotedString();
        node9.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        boolean boolean4 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        boolean boolean7 = compilerOptions0.removeUnusedClassProperties;
        java.lang.String str8 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.reportMissingOverride;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.crossModuleMethodMotion = true;
        compilerOptions8.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions14.propertyRenaming;
        compilerOptions8.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy17);
        com.google.javascript.jscomp.SourceMap.Format format19 = compilerOptions8.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format19);
        boolean boolean21 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean22 = compilerOptions0.removeTryCatchFinally;
        com.google.javascript.jscomp.SourceMap.Format format23 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setAliasExternals(true);
        java.lang.String str26 = compilerOptions0.syntheticBlockEndMarker;
        compilerOptions0.setDebugFunctionSideEffectsPath("DiagnosticGroup<checkProvides>");
        compilerOptions0.renamePrefix = "STRING PARAM_LIST 0";
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(format19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(format23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        boolean boolean8 = compilerOptions0.checkSuspiciousCode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str10 = compilerOptions9.syntheticBlockStartMarker;
        compilerOptions9.labelRenaming = true;
        boolean boolean13 = compilerOptions9.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.skipAllCompilerPasses();
        boolean boolean18 = compilerOptions14.flowSensitiveInlineVariables;
        java.lang.String[] strArray28 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        compilerOptions14.stripTypes = strSet29;
        compilerOptions9.setStripNameSuffixes((java.util.Set<java.lang.String>) strSet29);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet29);
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = null;
        compilerOptions0.setTweakReplacements(strMap34);
        compilerOptions0.setInferTypes(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode38 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions0.setTracer(tracerMode38);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean42 = compilerOptions0.aliasKeywords;
        compilerOptions0.setGenerateExports(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + tracerMode38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode38.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("2019/07/12 07:12");
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList5 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList5, jSTypeArray4);
        com.google.javascript.rhino.Node node7 = jSTypeRegistry3.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList5);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry9.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        node7.addChildrenToBack(node13);
        boolean boolean15 = node13.isSwitch();
        node13.setIsSyntheticBlock(true);
        java.io.PrintStream printStream18 = null;
        com.google.javascript.jscomp.Compiler compiler19 = new com.google.javascript.jscomp.Compiler(printStream18);
        java.lang.String str20 = compiler19.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions21.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode27 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions21.setTracer(tracerMode27);
        compiler19.initOptions(compilerOptions21);
        com.google.javascript.jscomp.SourceFile sourceFile32 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int34 = sourceFile32.getLineOfOffset((int) (short) 1);
        java.lang.String str35 = sourceFile32.getName();
        java.lang.String str36 = sourceFile32.getName();
        java.lang.String str37 = sourceFile32.getName();
        com.google.javascript.jscomp.SourceFile sourceFile40 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int42 = sourceFile40.getLineOfOffset((int) (short) 1);
        java.lang.String str43 = sourceFile40.getName();
        com.google.javascript.jscomp.JsAst jsAst44 = new com.google.javascript.jscomp.JsAst(sourceFile40);
        jsAst44.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput48 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst44, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile51 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int53 = sourceFile51.getLineOfOffset((int) (short) 1);
        java.lang.String str54 = sourceFile51.getName();
        java.lang.String str55 = sourceFile51.getName();
        java.lang.String str56 = sourceFile51.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput58 = new com.google.javascript.jscomp.CompilerInput(sourceFile51, true);
        com.google.javascript.jscomp.CompilerInput compilerInput59 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput58);
        com.google.javascript.jscomp.SourceFile sourceFile62 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int64 = sourceFile62.getLineOfOffset((int) (short) 1);
        int int66 = sourceFile62.getColumnOfOffset(8);
        compilerInput59.setSourceFile(sourceFile62);
        jsAst44.setSourceFile(sourceFile62);
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.crossModuleMethodMotion = true;
        compilerOptions69.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result74 = compiler19.compile(sourceFile32, sourceFile62, compilerOptions69);
        com.google.javascript.jscomp.ErrorManager errorManager75 = compiler19.getErrorManager();
        java.lang.String str76 = compiler19.toSource();
        com.google.javascript.jscomp.CodingConvention codingConvention77 = compiler19.getCodingConvention();
        compiler19.disableThreads();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = compiler19.getTypeRegistry();
        com.google.javascript.rhino.jstype.JSType jSType80 = assertionFunctionSpec1.getAssertedType(node13, jSTypeRegistry79);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + tracerMode27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode27.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(sourceFile40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(sourceFile51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(sourceFile62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(result74);
        org.junit.Assert.assertNotNull(errorManager75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(codingConvention77);
        org.junit.Assert.assertNotNull(jSTypeRegistry79);
        org.junit.Assert.assertNull(jSType80);
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.clearNamedTypes();
        jSTypeRegistry1.forwardDeclareType("STRING PARAM_LIST 49");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry1.getNativeType(jSTypeNative5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        boolean boolean37 = node6.isDo();
        boolean boolean38 = node6.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node6.children();
        node6.addSuppression("Node tree inequality:\nTree1:\nPARAM_LIST\n    NAME \n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: PARAM_LIST\n    NAME \n\n\nSubtree2: NUMBER -1.0\n");
        int int42 = node6.getCharno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = null;
        node6.setJSDocInfo(jSDocInfo43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("java.io.IOException: ", 43, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean54 = node53.isTry();
        java.lang.String str55 = node53.toString();
        boolean boolean56 = node49.hasChild(node53);
        boolean boolean57 = node49.isFromExterns();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        boolean boolean65 = node63.isVoid();
        node63.setOptionalArg(true);
        node63.setVarArgs(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node63.getJSDocInfo();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(42, node49, node63);
        com.google.javascript.rhino.Node node72 = node49.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node6.addChildToBack(node72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "STRING PARAM_LIST 49" + "'", str55, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.sourceMapOutputPath = "/experiment/:/hi!";
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.flowSensitiveInlineVariables = false;
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isNew();
        boolean boolean6 = node3.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        java.io.File file1 = new java.io.File(":");
        java.io.File file3 = new java.io.File(file1, "FINEST");
        boolean boolean4 = file1.setReadOnly();
        java.io.File file7 = new java.io.File(":", "hi!");
        boolean boolean10 = file7.setExecutable(true, false);
        boolean boolean11 = file1.renameTo(file7);
        java.io.File file14 = new java.io.File(":", "hi!");
        boolean boolean17 = file14.setExecutable(true, false);
        java.io.File file19 = new java.io.File(file14, "PARAM_LIST\n");
        java.io.File file20 = file19.getParentFile();
        boolean boolean21 = file20.createNewFile();
        java.io.File file22 = file20.getAbsoluteFile();
        long long23 = file20.lastModified();
        java.nio.file.Path path24 = file20.toPath();
        boolean boolean25 = file7.renameTo(file20);
        com.google.javascript.jscomp.SourceFile sourceFile26 = com.google.javascript.jscomp.SourceFile.fromFile(file7);
        sourceFile26.clearCachedSource();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), ":");
        org.junit.Assert.assertEquals(file3.getParent(), ":");
        org.junit.Assert.assertEquals(file3.toString(), ":/FINEST");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals(file7.getParent(), ":");
        org.junit.Assert.assertEquals(file7.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(file14.getParent(), ":");
        org.junit.Assert.assertEquals(file14.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals(file19.getParent(), ":/hi!");
        org.junit.Assert.assertEquals(file19.toString(), ":/hi!/PARAM_LIST\n");
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), ":");
        org.junit.Assert.assertEquals(file20.toString(), ":/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment/:/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645456452000L + "'", long23 == 1645456452000L);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(sourceFile26);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        boolean boolean75 = node74.hasChildren();
        boolean boolean76 = node74.isDefaultCase();
        boolean boolean77 = node74.isSwitch();
        boolean boolean78 = node74.isBreak();
        node74.setType(31);
        com.google.javascript.rhino.Node node81 = node74.cloneNode();
        boolean boolean82 = node81.isFor();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType83 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        boolean boolean88 = node87.isTry();
        java.lang.String str89 = node87.toString();
        boolean boolean90 = node87.isIn();
        com.google.javascript.rhino.Node node94 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 16, (int) (byte) -1);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship95 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType83, node87, node94);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder96 = node94.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node97 = node81.getChildBefore(node94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + subclassType83 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType83.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "STRING PARAM_LIST 49" + "'", str89, "STRING PARAM_LIST 49");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        boolean boolean4 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        boolean boolean7 = compilerOptions0.removeUnusedClassProperties;
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: ");
        compilerOptions0.setAliasKeywords(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setIdeMode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        compilerOptions9.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy14 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy18 = compilerOptions15.propertyRenaming;
        compilerOptions9.setRenamingPolicy(variableRenamingPolicy14, propertyRenamingPolicy18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.crossModuleMethodMotion = true;
        compilerOptions20.skipAllCompilerPasses();
        boolean boolean24 = compilerOptions20.flowSensitiveInlineVariables;
        java.lang.String[] strArray34 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        compilerOptions20.stripTypes = strSet35;
        compilerOptions9.setStripNamePrefixes((java.util.Set<java.lang.String>) strSet35);
        compilerOptions0.setReplaceStringsReservedStrings((java.util.Set<java.lang.String>) strSet35);
        compilerOptions0.setDebugFunctionSideEffectsPath("/experiment/:/hi!");
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions0.aggressiveVarCheck;
        boolean boolean43 = compilerOptions0.foldConstants;
        boolean boolean44 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        byte[] byteArray47 = compilerOptions0.inputVariableMapSerialized;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy18 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy18.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(byteArray47);
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions0.setTracer(tracerMode3);
        compilerOptions0.setFoldConstants(true);
        compilerOptions0.flowSensitiveInlineVariables = true;
        compilerOptions0.setTweakToStringLiteral("InputId: *global*", "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode13 = null;
        compilerOptions12.setTracerMode(tracerMode13);
        boolean boolean15 = compilerOptions12.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel16 = compilerOptions12.sourceMapDetailLevel;
        compilerOptions12.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet19 = compilerOptions12.stripNameSuffixes;
        com.google.javascript.jscomp.SourceFile sourceFile21 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput23 = new com.google.javascript.jscomp.CompilerInput(sourceFile21, true);
        com.google.javascript.rhino.InputId inputId25 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput27 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput23, inputId25, true);
        java.lang.String str28 = compilerInput27.toString();
        boolean boolean29 = strSet19.contains((java.lang.Object) compilerInput27);
        java.lang.Object[] objArray30 = strSet19.toArray();
        compilerOptions0.setReplaceStringsReservedStrings(strSet19);
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setCommonJSModulePathPrefix("");
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(detailLevel16);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "*global*" + "'", str28, "*global*");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(2147483647);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setAmbiguateProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions4 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = null;
        compilerOptions4.setTracerMode(tracerMode5);
        boolean boolean7 = compilerOptions4.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel8 = compilerOptions4.sourceMapDetailLevel;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode9 = compilerOptions4.getLanguageOut();
        compilerOptions4.setFoldConstants(true);
        boolean boolean12 = compilerOptions4.generatePseudoNames;
        java.lang.String str13 = compilerOptions4.aliasStringsBlacklist;
        java.lang.String[] strArray20 = new java.lang.String[] { ":/hi!", "DiagnosticGroup<checkProvides>", "// Input %num%", "/experiment/:/hi!", "STRING PARAM_LIST", "InputId: *global*" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        compilerOptions4.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList21);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList21);
        com.google.javascript.jscomp.ErrorFormat errorFormat25 = null;
        compilerOptions0.errorFormat = errorFormat25;
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(detailLevel8);
        org.junit.Assert.assertNull(languageMode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy9 = compilerOptions6.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy5, propertyRenamingPolicy9);
        boolean boolean11 = compilerOptions0.checkControlStructures;
        boolean boolean12 = compilerOptions0.crossModuleCodeMotion;
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.setRemoveUnusedClassProperties(false);
        compilerOptions0.setComputeFunctionSideEffects(true);
        compilerOptions0.setManageClosureDependencies(false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy9 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy9.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.disabled("PARAM_LIST [var_args_name: 1] [opt_arg: 1]", "PARAM_LIST\n");
        org.junit.Assert.assertNotNull(diagnosticType2);
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.setExternExports(true);
        compilerOptions0.setInlineGetters(false);
        compilerOptions0.setOutputCharset("DiagnosticGroup<>");
        compilerOptions0.preferLineBreakAtEndOfFile = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        boolean boolean8 = compilerOptions0.lineBreak;
        compilerOptions0.setAliasAllStrings(false);
        compilerOptions0.setShadowVariables(false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy12 = compilerOptions9.propertyRenaming;
        compilerOptions0.propertyRenaming = propertyRenamingPolicy12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions14.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = null;
        compilerOptions16.setTracerMode(tracerMode17);
        boolean boolean19 = compilerOptions16.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel20 = compilerOptions16.sourceMapDetailLevel;
        compilerOptions16.setColorizeErrorOutput(true);
        compilerOptions16.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy28 = compilerOptions25.propertyRenaming;
        compilerOptions16.propertyRenaming = propertyRenamingPolicy28;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions16.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions16.checkRequires;
        compilerOptions14.setCheckRequires(checkLevel31);
        compilerOptions0.setCheckProvides(checkLevel31);
        boolean boolean34 = compilerOptions0.inlineGetters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.crossModuleMethodMotion = true;
        compilerOptions35.skipAllCompilerPasses();
        compilerOptions35.resetWarningsGuard();
        compilerOptions35.setInlineLocalVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode43 = null;
        compilerOptions42.setTracerMode(tracerMode43);
        boolean boolean45 = compilerOptions42.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel46 = compilerOptions42.sourceMapDetailLevel;
        compilerOptions42.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet49 = compilerOptions42.stripNameSuffixes;
        compilerOptions35.setReplaceStringsReservedStrings(strSet49);
        boolean boolean51 = strSet49.isEmpty();
        compilerOptions0.stripNameSuffixes = strSet49;
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.closurePass = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy12 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy12.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(detailLevel20);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy28.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(detailLevel46);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        boolean boolean37 = node33.isGetProp();
        boolean boolean38 = node33.isFalse();
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        compilerOptions0.setSummaryDetailLevel(49);
        compilerOptions0.setRemoveTryCatchFinally(true);
        compilerOptions0.generatePseudoNames = false;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.locale = "java.io.IOException: ";
        boolean boolean13 = compilerOptions0.isRemoveUnusedClassProperties();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        java.io.PrintStream printStream2 = null;
        com.google.javascript.jscomp.Compiler compiler3 = new com.google.javascript.jscomp.Compiler(printStream2);
        java.lang.String str4 = compiler3.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions5.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode11 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions5.setTracer(tracerMode11);
        compiler3.initOptions(compilerOptions5);
        com.google.javascript.jscomp.SourceFile sourceFile16 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int18 = sourceFile16.getLineOfOffset((int) (short) 1);
        java.lang.String str19 = sourceFile16.getName();
        java.lang.String str20 = sourceFile16.getName();
        java.lang.String str21 = sourceFile16.getName();
        com.google.javascript.jscomp.SourceFile sourceFile24 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int26 = sourceFile24.getLineOfOffset((int) (short) 1);
        java.lang.String str27 = sourceFile24.getName();
        com.google.javascript.jscomp.JsAst jsAst28 = new com.google.javascript.jscomp.JsAst(sourceFile24);
        jsAst28.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput32 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst28, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile35 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int37 = sourceFile35.getLineOfOffset((int) (short) 1);
        java.lang.String str38 = sourceFile35.getName();
        java.lang.String str39 = sourceFile35.getName();
        java.lang.String str40 = sourceFile35.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput42 = new com.google.javascript.jscomp.CompilerInput(sourceFile35, true);
        com.google.javascript.jscomp.CompilerInput compilerInput43 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput42);
        com.google.javascript.jscomp.SourceFile sourceFile46 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int48 = sourceFile46.getLineOfOffset((int) (short) 1);
        int int50 = sourceFile46.getColumnOfOffset(8);
        compilerInput43.setSourceFile(sourceFile46);
        jsAst28.setSourceFile(sourceFile46);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.crossModuleMethodMotion = true;
        compilerOptions53.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result58 = compiler3.compile(sourceFile16, sourceFile46, compilerOptions53);
        boolean boolean59 = compiler3.isIdeMode();
        jSModule1.sortInputsByDeps(compiler3);
        java.util.List<java.lang.String> strList61 = jSModule1.getRequires();
        java.util.Set<com.google.javascript.jscomp.JSModule> jSModuleSet62 = jSModule1.getThisAndAllDependencies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + tracerMode11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode11.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(sourceFile24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(sourceFile35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(sourceFile46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(result58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(jSModuleSet62);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.collapseProperties = false;
        compilerOptions0.setSkipAllPasses(false);
        compilerOptions0.setPropertyAffinity(false);
        compilerOptions0.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str16 = compilerOptions15.syntheticBlockStartMarker;
        compilerOptions15.labelRenaming = true;
        boolean boolean19 = compilerOptions15.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.crossModuleMethodMotion = true;
        compilerOptions20.skipAllCompilerPasses();
        boolean boolean24 = compilerOptions20.flowSensitiveInlineVariables;
        java.lang.String[] strArray34 = new java.lang.String[] { "*global*", "", "FINEST", "FINEST", "STRING PARAM_LIST 49", "STRING PARAM_LIST 49", "hi!", ":", "FINEST" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        compilerOptions20.stripTypes = strSet35;
        compilerOptions15.setStripNameSuffixes((java.util.Set<java.lang.String>) strSet35);
        boolean boolean39 = compilerOptions15.ideMode;
        compilerOptions15.setLooseTypes(true);
        compilerOptions15.setAmbiguateProperties(true);
        java.util.Set<java.lang.String> strSet44 = compilerOptions15.aliasableStrings;
        java.lang.Object[] objArray45 = strSet44.toArray();
        compilerOptions0.stripNameSuffixes = strSet44;
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions0.brokenClosureRequiresLevel;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel1 = compilerOptions0.checkRequires;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setSyntheticBlockStartMarker("OFF");
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.setUnaliasableGlobals("FINEST");
        compilerOptions0.setAliasKeywords(true);
        compilerOptions0.labelRenaming = false;
        compilerOptions0.setAppNameStr("JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}");
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing15 = compilerOptions0.getTweakProcessing();
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing15.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        java.io.PrintStream printStream1 = new java.io.PrintStream("goog.abstractMethod");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "/");
        java.io.PrintStream printStream5 = printStream1.append((java.lang.CharSequence) ":/hi!");
        com.google.javascript.jscomp.Compiler compiler6 = new com.google.javascript.jscomp.Compiler(printStream5);
        java.util.Locale locale7 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray10 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator12 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile13 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator12);
        com.google.javascript.jscomp.SourceFile.Generator generator15 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile16 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator15);
        com.google.javascript.jscomp.SourceFile.Generator generator18 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile19 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator18);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray20 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile13, jSSourceFile16, jSSourceFile19 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean22 = compilerOptions21.moveFunctionDeclarations;
        compilerOptions21.crossModuleCodeMotion = true;
        compiler9.init(jSSourceFileArray10, jSSourceFileArray20, compilerOptions21);
        java.io.PrintStream printStream26 = printStream5.format(locale7, ":/hi!/PARAM_LIST\n", (java.lang.Object[]) jSSourceFileArray10);
        printStream26.println("java.io.IOException: sun.util.logging.resources.logging");
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(printStream5);
        org.junit.Assert.assertNotNull(jSSourceFileArray10);
        org.junit.Assert.assertNotNull(jSSourceFile13);
        org.junit.Assert.assertNotNull(jSSourceFile16);
        org.junit.Assert.assertNotNull(jSSourceFile19);
        org.junit.Assert.assertNotNull(jSSourceFileArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.JSSourceFile jSSourceFile2 = com.google.javascript.jscomp.JSSourceFile.fromInputStream("PARAM_LIST\n", inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel4 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.crossModuleMethodMotion = true;
        compilerOptions7.optimizeParameters = true;
        compilerOptions7.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions7.checkGlobalNamesLevel;
        compilerOptions0.setReportMissingOverride(checkLevel15);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        compilerOptions0.setTweakToStringLiteral("java.io.IOException: ", "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode24 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions21.setTracer(tracerMode24);
        com.google.javascript.jscomp.CompilerOptions.Reach reach26 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions21.setInlineVariables(reach26);
        compilerOptions0.setInlineFunctions(reach26);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions29.checkRequires;
        compilerOptions29.setOutputJsStringUsage(true);
        java.util.Set<java.lang.String> strSet33 = compilerOptions29.stripNamePrefixes;
        boolean boolean34 = compilerOptions29.reserveRawExports;
        boolean boolean35 = compilerOptions29.checkSuspiciousCode;
        compilerOptions29.enableExternExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions38.checkRequires;
        compilerOptions38.setRewriteNewDateGoogNow(true);
        compilerOptions38.setSyntheticBlockStartMarker("OFF");
        compilerOptions38.setChainCalls(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.crossModuleMethodMotion = true;
        compilerOptions46.setProtectHiddenSideEffects(true);
        compilerOptions46.setInputDelimiter("PARAM_LIST\n");
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap53 = null;
        compilerOptions46.cssRenamingMap = cssRenamingMap53;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode56 = null;
        compilerOptions55.setTracerMode(tracerMode56);
        boolean boolean58 = compilerOptions55.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel59 = compilerOptions55.sourceMapDetailLevel;
        compilerOptions55.setColorizeErrorOutput(true);
        java.util.Set<java.lang.String> strSet62 = compilerOptions55.stripNameSuffixes;
        strSet62.clear();
        com.google.javascript.jscomp.SourceFile sourceFile66 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int68 = sourceFile66.getLineOfOffset((int) (short) 1);
        java.lang.String str69 = sourceFile66.getName();
        java.lang.String str70 = sourceFile66.getName();
        java.lang.String str71 = sourceFile66.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput73 = new com.google.javascript.jscomp.CompilerInput(sourceFile66, true);
        com.google.javascript.jscomp.SourceAst sourceAst74 = compilerInput73.getAst();
        boolean boolean75 = strSet62.remove((java.lang.Object) sourceAst74);
        compilerOptions46.setExtraAnnotationNames(strSet62);
        compilerOptions38.setReplaceStringsReservedStrings(strSet62);
        compilerOptions38.setFoldConstants(true);
        boolean boolean80 = compilerOptions38.printInputDelimiter;
        com.google.javascript.jscomp.CompilerOptions compilerOptions81 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions81.crossModuleMethodMotion = true;
        compilerOptions81.optimizeParameters = true;
        compilerOptions81.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel89 = compilerOptions81.checkGlobalNamesLevel;
        boolean boolean90 = compilerOptions81.removeUnusedPrototypeProperties;
        java.util.Set<java.lang.String> strSet91 = compilerOptions81.stripTypes;
        compilerOptions81.setRemoveTryCatchFinally(true);
        com.google.javascript.jscomp.SourceMap.Format format94 = compilerOptions81.sourceMapFormat;
        compilerOptions38.setSourceMapFormat(format94);
        compilerOptions29.setSourceMapFormat(format94);
        compilerOptions0.setSourceMapFormat(format94);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(detailLevel4);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + tracerMode24 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode24.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + reach26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach26.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(detailLevel59);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(sourceFile66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(sourceAst74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + checkLevel89 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel89.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(format94);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        java.io.File file7 = new java.io.File(file2, "PARAM_LIST\n");
        boolean boolean8 = file7.mkdir();
        java.lang.String str9 = file7.toString();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(file7.getParent(), ":/hi!");
        org.junit.Assert.assertEquals(file7.toString(), ":/hi!/PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":/hi!/PARAM_LIST\n" + "'", str9, ":/hi!/PARAM_LIST\n");
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel3 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        compilerOptions0.setSourceMapDetailLevel(detailLevel3);
        boolean boolean5 = compilerOptions0.ideMode;
        compilerOptions0.convertToDottedProperties = true;
        org.junit.Assert.assertNotNull(detailLevel3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceFile1, true);
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, inputId5, true);
        java.io.PrintStream printStream8 = null;
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        java.lang.String str10 = compiler9.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions11.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions11.setTracer(tracerMode17);
        compiler9.initOptions(compilerOptions11);
        compilerInput7.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler9);
        com.google.javascript.jscomp.JSError[] jSErrorArray21 = compiler9.getMessages();
        com.google.javascript.jscomp.SourceFile sourceFile23 = new com.google.javascript.jscomp.SourceFile("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray25 = new com.google.javascript.jscomp.JSSourceFile[] {};
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator27);
        com.google.javascript.jscomp.SourceFile.Generator generator30 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile31 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator30);
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile34 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("*global*", generator33);
        com.google.javascript.jscomp.JSSourceFile[] jSSourceFileArray35 = new com.google.javascript.jscomp.JSSourceFile[] { jSSourceFile28, jSSourceFile31, jSSourceFile34 };
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean37 = compilerOptions36.moveFunctionDeclarations;
        compilerOptions36.crossModuleCodeMotion = true;
        compiler24.init(jSSourceFileArray25, jSSourceFileArray35, compilerOptions36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean42 = compilerOptions41.moveFunctionDeclarations;
        compilerOptions41.crossModuleCodeMotion = true;
        compilerOptions41.setExportTestFunctions(false);
        com.google.javascript.jscomp.Result result47 = compiler9.compile(sourceFile23, jSSourceFileArray35, compilerOptions41);
        com.google.javascript.jscomp.VariableMap variableMap48 = result47.variableMap;
        com.google.javascript.jscomp.VariableMap variableMap49 = result47.namedAnonFunctionMap;
        java.lang.String str50 = result47.debugLog;
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(jSErrorArray21);
        org.junit.Assert.assertNotNull(jSSourceFileArray25);
        org.junit.Assert.assertNotNull(jSSourceFile28);
        org.junit.Assert.assertNotNull(jSSourceFile31);
        org.junit.Assert.assertNotNull(jSSourceFile34);
        org.junit.Assert.assertNotNull(jSSourceFileArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(result47);
        org.junit.Assert.assertNull(variableMap48);
        org.junit.Assert.assertNull(variableMap49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, true);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry4.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList12 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList12, jSTypeArray11);
        com.google.javascript.rhino.Node node14 = jSTypeRegistry10.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList12);
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry10.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry21.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry21.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] { jSType30 };
        com.google.javascript.rhino.jstype.FunctionType functionType32 = jSTypeRegistry4.createConstructorTypeWithVarArgs(jSType19, jSTypeArray31);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry34.createNamedType(":", "", (int) (byte) 1, 48);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry34.createNamedType("FINEST", "/", 32, (int) (short) 1);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry4.createNullableType(jSType48);
        boolean boolean51 = jSTypeRegistry4.hasNamespace("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        boolean boolean60 = jSTypeList55.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        jSTypeRegistry53.forwardDeclareType("PARAM_LIST");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable65 = jSTypeRegistry53.getTypesWithProperty("*global*");
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry53.createNamedType("PARAM_LIST", "/experiment/:/hi!", 51, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray73 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList74 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList74, jSTypeArray73);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList77 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList77, jSTypeArray76);
        boolean boolean79 = jSTypeList74.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList77);
        com.google.javascript.rhino.Node node80 = jSTypeRegistry72.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList74);
        jSTypeRegistry72.forwardDeclareType("PARAM_LIST");
        jSTypeRegistry72.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.ObjectType objectType84 = jSTypeRegistry72.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry53.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType84);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = jSTypeRegistry4.createObjectType(objectType84);
        jSTypeRegistry2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType84);
        jSTypeRegistry2.resetForTypeCheck();
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertNotNull(functionType32);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeIterable65);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(objectType84);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNotNull(objectType86);
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        jSModule1.removeAll();
        com.google.javascript.jscomp.SourceFile sourceFile4 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput6 = new com.google.javascript.jscomp.CompilerInput(sourceFile4, true);
        com.google.javascript.rhino.InputId inputId8 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput6, inputId8, true);
        java.lang.String str11 = compilerInput10.toString();
        com.google.javascript.jscomp.SourceFile sourceFile12 = compilerInput10.getSourceFile();
        jSModule1.remove(compilerInput10);
        com.google.javascript.jscomp.CompilerInput compilerInput15 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput10, true);
        com.google.javascript.jscomp.SourceAst sourceAst16 = compilerInput10.getAst();
        com.google.javascript.jscomp.SourceFile sourceFile19 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int21 = sourceFile19.getLineOfOffset((int) (short) 1);
        int int23 = sourceFile19.getLineOfOffset(100);
        java.lang.String str24 = sourceFile19.getName();
        java.io.Reader reader25 = sourceFile19.getCodeReader();
        int int27 = sourceFile19.getLineOfOffset(1);
        // The following exception was thrown during execution in test generation
        try {
            compilerInput10.setSourceFile(sourceFile19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "*global*" + "'", str11, "*global*");
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(sourceAst16);
        org.junit.Assert.assertNotNull(sourceFile19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(reader25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.lang.String[] strArray6 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerOptions0.setStripTypes((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode11 = null;
        compilerOptions10.setTracerMode(tracerMode11);
        boolean boolean13 = compilerOptions10.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel14 = compilerOptions10.sourceMapDetailLevel;
        compilerOptions10.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.crossModuleMethodMotion = true;
        compilerOptions17.optimizeParameters = true;
        compilerOptions17.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions17.checkGlobalNamesLevel;
        compilerOptions10.setReportMissingOverride(checkLevel25);
        compilerOptions0.setCheckUnreachableCode(checkLevel25);
        compilerOptions0.syntheticBlockStartMarker = "*global*";
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions0.checkMissingReturn;
        boolean boolean31 = compilerOptions0.optimizeArgumentsArray;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedPrototypeProperties(true);
        java.util.Set<java.lang.String> strSet36 = compilerOptions0.stripNamePrefixes;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(detailLevel14);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions0.setTracer(tracerMode3);
        compilerOptions0.setFoldConstants(true);
        java.lang.String str7 = compilerOptions0.renamePrefix;
        compilerOptions0.setDisambiguateProperties(true);
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.setOptimizeArgumentsArray(false);
        compilerOptions0.setRemoveUnusedLocalVars(false);
        compilerOptions0.optimizeCalls = true;
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setTweakToDoubleLiteral("/", (double) 43);
        boolean boolean10 = compilerOptions0.removeTryCatchFinally;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode11 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions0.setTracer(tracerMode11);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = null;
        compilerOptions0.setCheckMissingReturn(checkLevel13);
        compilerOptions0.setSyntheticBlockStartMarker("/experiment/:/hi!");
        boolean boolean17 = compilerOptions0.removeDeadCode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = null;
        compilerOptions18.setTracerMode(tracerMode19);
        boolean boolean21 = compilerOptions18.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = compilerOptions18.sourceMapDetailLevel;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode23 = compilerOptions18.getLanguageOut();
        compilerOptions18.setFoldConstants(true);
        boolean boolean26 = compilerOptions18.generatePseudoNames;
        compilerOptions18.checkSymbols = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode30 = null;
        compilerOptions29.setTracerMode(tracerMode30);
        boolean boolean32 = compilerOptions29.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel33 = compilerOptions29.sourceMapDetailLevel;
        compilerOptions18.setSourceMapDetailLevel(detailLevel33);
        compilerOptions0.setSourceMapDetailLevel(detailLevel33);
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("PARAM_LIST", 49, 0);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry43.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry49.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        node47.addChildrenToBack(node53);
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry56.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry63.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        boolean boolean68 = node67.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry70.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, node47, node60, node67, node74, 0, 49);
        com.google.javascript.jscomp.CodingConvention.Bind bind78 = new com.google.javascript.jscomp.CodingConvention.Bind(node36, node40, node74);
        boolean boolean79 = node74.isIn();
        boolean boolean80 = node74.isVar();
        boolean boolean81 = node74.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node74.children();
        boolean boolean83 = detailLevel33.apply(node74);
        node74.removeProp((int) '/');
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + tracerMode11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode11.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(detailLevel22);
        org.junit.Assert.assertNull(languageMode23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(detailLevel33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        java.io.PrintStream printStream1 = new java.io.PrintStream("goog.abstractMethod");
        printStream1.print(39L);
        printStream1.println();
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((float) (byte) 0);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        java.io.File file2 = new java.io.File(":", "hi!");
        boolean boolean5 = file2.setExecutable(true, false);
        boolean boolean7 = file2.setWritable(false);
        boolean boolean8 = file2.canWrite();
        java.net.URI uRI9 = file2.toURI();
        java.lang.String str10 = file2.getCanonicalPath();
        java.io.File file11 = file2.getAbsoluteFile();
        java.io.File file12 = file2.getAbsoluteFile();
        boolean boolean13 = file2.canRead();
        java.io.File file14 = file2.getCanonicalFile();
        org.junit.Assert.assertEquals(file2.getParent(), ":");
        org.junit.Assert.assertEquals(file2.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/experiment/:/hi!" + "'", str10, "/experiment/:/hi!");
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertNotNull(file12);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/experiment/:/hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment/:");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/:/hi!");
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        java.lang.String str2 = compiler1.getAstDotGraph();
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setReplaceStringsPlaceholderToken("hi!");
        compilerOptions3.setTweakToDoubleLiteral("", (double) (short) 1);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        compilerOptions3.setTracer(tracerMode9);
        compiler1.initOptions(compilerOptions3);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        java.lang.String str18 = sourceFile14.getName();
        java.lang.String str19 = sourceFile14.getName();
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int24 = sourceFile22.getLineOfOffset((int) (short) 1);
        java.lang.String str25 = sourceFile22.getName();
        com.google.javascript.jscomp.JsAst jsAst26 = new com.google.javascript.jscomp.JsAst(sourceFile22);
        jsAst26.clearAst();
        com.google.javascript.jscomp.CompilerInput compilerInput30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) jsAst26, "*global*", false);
        com.google.javascript.jscomp.SourceFile sourceFile33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int35 = sourceFile33.getLineOfOffset((int) (short) 1);
        java.lang.String str36 = sourceFile33.getName();
        java.lang.String str37 = sourceFile33.getName();
        java.lang.String str38 = sourceFile33.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput40 = new com.google.javascript.jscomp.CompilerInput(sourceFile33, true);
        com.google.javascript.jscomp.CompilerInput compilerInput41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput40);
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int46 = sourceFile44.getLineOfOffset((int) (short) 1);
        int int48 = sourceFile44.getColumnOfOffset(8);
        compilerInput41.setSourceFile(sourceFile44);
        jsAst26.setSourceFile(sourceFile44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.crossModuleMethodMotion = true;
        compilerOptions51.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.Result result56 = compiler1.compile(sourceFile14, sourceFile44, compilerOptions51);
        boolean boolean57 = compiler1.isIdeMode();
        java.lang.String str60 = compiler1.getSourceLine("*global*", (int) ' ');
        java.lang.String[] strArray61 = compiler1.toSourceArray();
        com.google.javascript.jscomp.Region region64 = compiler1.getSourceRegion("STRING PARAM_LIST 49", 51);
        boolean boolean65 = compiler1.isTypeCheckingEnabled();
        com.google.javascript.jscomp.CodingConvention codingConvention66 = compiler1.getCodingConvention();
        boolean boolean68 = codingConvention66.isSuperClassReference("hi!");
        boolean boolean70 = codingConvention66.isValidEnumKey("Node tree inequality:\nTree1:\nNUMBER 2.80487936E11 30\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NUMBER 2.80487936E11 30\n\n\nSubtree2: PARAM_LIST\n");
        boolean boolean72 = codingConvention66.isPrivate("PARAM_LIST: PARAM_LIST\n");
        java.util.Collection<java.lang.String> strCollection73 = codingConvention66.getIndirectlyDeclaredProperties();
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList77 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList77, jSTypeArray76);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        boolean boolean82 = jSTypeList77.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry75.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList77);
        boolean boolean84 = node83.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable85 = node83.siblings();
        com.google.javascript.rhino.Node node86 = node83.cloneTree();
        int int87 = node86.getSourcePosition();
        com.google.javascript.rhino.Node node88 = node86.getLastSibling();
        node86.putBooleanProp(800, true);
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship92 = codingConvention66.getDelegateRelationship(node86);
        com.google.javascript.rhino.Node node94 = node86.getAncestor((int) (byte) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(result56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(region64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(codingConvention66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strCollection73);
        org.junit.Assert.assertNotNull(jSTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(nodeIterable85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(delegateRelationship92);
        org.junit.Assert.assertNull(node94);
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int6 = sourceFile4.getLineOfOffset((int) (short) 1);
        java.io.Reader reader7 = sourceFile4.getCodeReader();
        int int8 = reader7.read();
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromReader("*global*", reader7);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        java.io.File file14 = new java.io.File(":", "hi!");
        boolean boolean17 = file14.setExecutable(true, false);
        long long18 = file14.lastModified();
        boolean boolean19 = file14.mkdir();
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder0.buildFromFile(file14);
        com.google.javascript.jscomp.SourceFile.Builder builder22 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile26 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int28 = sourceFile26.getLineOfOffset((int) (short) 1);
        java.io.Reader reader29 = sourceFile26.getCodeReader();
        int int30 = reader29.read();
        com.google.javascript.jscomp.SourceFile sourceFile31 = builder22.buildFromReader("*global*", reader29);
        java.nio.charset.Charset charset32 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder33 = builder22.withCharset(charset32);
        java.io.File file36 = new java.io.File(":", "hi!");
        boolean boolean39 = file36.setExecutable(true, false);
        long long40 = file36.lastModified();
        boolean boolean41 = file36.mkdir();
        com.google.javascript.jscomp.SourceFile sourceFile42 = builder22.buildFromFile(file36);
        com.google.javascript.jscomp.SourceFile.Builder builder44 = builder22.withOriginalPath("java.io.IOException: OFF");
        com.google.javascript.jscomp.SourceFile sourceFile48 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int50 = sourceFile48.getLineOfOffset((int) (short) 1);
        int int52 = sourceFile48.getLineOfOffset(100);
        java.lang.String str53 = sourceFile48.getName();
        java.io.Reader reader54 = sourceFile48.getCodeReader();
        reader54.mark((int) ':');
        com.google.javascript.jscomp.SourceFile sourceFile57 = builder44.buildFromReader("PARAM_LIST", reader54);
        com.google.javascript.jscomp.SourceFile sourceFile58 = builder0.buildFromReader("/experiment/:", reader54);
        boolean boolean59 = reader54.markSupported();
        reader54.reset();
        int int61 = reader54.read();
        com.google.javascript.jscomp.SourceFile sourceFile64 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        java.io.Reader reader65 = sourceFile64.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile68 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int70 = sourceFile68.getLineOfOffset((int) (short) 1);
        int int72 = sourceFile68.getLineOfOffset(100);
        java.lang.String str73 = sourceFile68.getName();
        java.io.Reader reader74 = sourceFile68.getCodeReader();
        reader74.mark((int) ':');
        char[] charArray81 = new char[] { '#', '#', ' ', ':' };
        int int82 = reader74.read(charArray81);
        int int85 = reader65.read(charArray81, (int) (short) 0, (int) (byte) 1);
        int int86 = reader54.read(charArray81);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(file14.getParent(), ":");
        org.junit.Assert.assertEquals(file14.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645456452000L + "'", long18 == 1645456452000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(sourceFile26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(reader29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(sourceFile31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals(file36.getParent(), ":");
        org.junit.Assert.assertEquals(file36.toString(), ":/hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645456452000L + "'", long40 == 1645456452000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(sourceFile42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(reader54);
        org.junit.Assert.assertNotNull(sourceFile57);
        org.junit.Assert.assertNotNull(sourceFile58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(sourceFile64);
        org.junit.Assert.assertNotNull(reader65);
        org.junit.Assert.assertNotNull(sourceFile68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(reader74);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "## :");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "## :");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#, #,  , :]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.lang.String[] strArray6 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerOptions0.setStripTypes((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode13 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions10.setTracer(tracerMode13);
        com.google.javascript.jscomp.CompilerOptions.Reach reach15 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions10.setInlineVariables(reach15);
        compilerOptions0.setRemoveUnusedVariable(reach15);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + tracerMode13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode13.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + reach15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach15.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode1 = null;
        compilerOptions0.setTracerMode(tracerMode1);
        boolean boolean3 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.CompilerOptions compilerOptions4 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions4.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        compilerOptions4.setTracer(tracerMode7);
        compilerOptions4.setFoldConstants(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode12 = null;
        compilerOptions11.setTracerMode(tracerMode12);
        boolean boolean14 = compilerOptions11.coalesceVariableNames;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel15 = compilerOptions11.sourceMapDetailLevel;
        compilerOptions11.setColorizeErrorOutput(true);
        compilerOptions11.collapseProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy23 = compilerOptions20.propertyRenaming;
        compilerOptions11.propertyRenaming = propertyRenamingPolicy23;
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions11.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CheckLevel checkLevel26 = compilerOptions11.checkRequires;
        compilerOptions4.reportMissingOverride = checkLevel26;
        compilerOptions0.setAggressiveVarCheck(checkLevel26);
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.setOptimizeParameters(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setLooseTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str37 = compilerOptions36.syntheticBlockStartMarker;
        compilerOptions36.labelRenaming = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.crossModuleMethodMotion = true;
        compilerOptions40.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.crossModuleMethodMotion = true;
        compilerOptions45.skipAllCompilerPasses();
        compilerOptions45.resetWarningsGuard();
        java.lang.String str50 = compilerOptions45.aliasStringsBlacklist;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy51 = com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy52 = null;
        compilerOptions45.setRenamingPolicy(variableRenamingPolicy51, propertyRenamingPolicy52);
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy57 = compilerOptions54.propertyRenaming;
        compilerOptions40.setRenamingPolicy(variableRenamingPolicy51, propertyRenamingPolicy57);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy59 = com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
        compilerOptions36.setRenamingPolicy(variableRenamingPolicy51, propertyRenamingPolicy59);
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String str62 = compilerOptions61.syntheticBlockStartMarker;
        compilerOptions61.labelRenaming = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.crossModuleMethodMotion = true;
        compilerOptions65.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions70.crossModuleMethodMotion = true;
        compilerOptions70.skipAllCompilerPasses();
        compilerOptions70.resetWarningsGuard();
        java.lang.String str75 = compilerOptions70.aliasStringsBlacklist;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy76 = com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy77 = null;
        compilerOptions70.setRenamingPolicy(variableRenamingPolicy76, propertyRenamingPolicy77);
        com.google.javascript.jscomp.CompilerOptions compilerOptions79 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions79.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy82 = compilerOptions79.propertyRenaming;
        compilerOptions65.setRenamingPolicy(variableRenamingPolicy76, propertyRenamingPolicy82);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy84 = com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
        compilerOptions61.setRenamingPolicy(variableRenamingPolicy76, propertyRenamingPolicy84);
        compilerOptions33.setRenamingPolicy(variableRenamingPolicy51, propertyRenamingPolicy84);
        compilerOptions0.propertyRenaming = propertyRenamingPolicy84;
        java.nio.charset.Charset charset88 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str89 = charset88.name();
        java.util.Locale locale90 = null;
        java.lang.String str91 = charset88.displayName(locale90);
        java.nio.ByteBuffer byteBuffer93 = charset88.encode("/experiment/:/hi!");
        java.util.Set<java.lang.String> strSet94 = charset88.aliases();
        compilerOptions0.setAliasableStrings(strSet94);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap96 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap96;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(detailLevel15);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy23 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy23.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel26 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel26.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy51 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL + "'", variableRenamingPolicy51.equals(com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy57 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy57.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy59 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC + "'", propertyRenamingPolicy59.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC));
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy76 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL + "'", variableRenamingPolicy76.equals(com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy82 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy82.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy84 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC + "'", propertyRenamingPolicy84.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC));
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "US-ASCII" + "'", str89, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "US-ASCII" + "'", str91, "US-ASCII");
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        jSModule1.removeAll();
        com.google.javascript.jscomp.SourceFile sourceFile6 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int8 = sourceFile6.getLineOfOffset((int) (short) 1);
        int int10 = sourceFile6.getLineOfOffset(100);
        java.lang.String str11 = sourceFile6.getName();
        java.io.Reader reader12 = sourceFile6.getCodeReader();
        reader12.reset();
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromReader("PARAM_LIST", reader12);
        java.lang.String str15 = sourceFile14.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput(sourceFile14);
        jSModule1.add(compilerInput16);
        java.util.List<java.lang.String> strList18 = jSModule1.getProvides();
        boolean boolean20 = jSModule1.removeByName("Node tree inequality:\nTree1:\nPARAM_LIST\n    NAME \n\n\nTree2:\nBITXOR  43 [opt_arg: 1]\n\n\nSubtree1: PARAM_LIST\n    NAME \n\n\nSubtree2: BITXOR  43 [opt_arg: 1]\n");
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(reader12);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PARAM_LIST" + "'", str15, "PARAM_LIST");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        boolean boolean11 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.setMarkAsCompiled(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.crossModuleMethodMotion = true;
        compilerOptions14.optimizeParameters = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy22 = compilerOptions19.propertyRenaming;
        java.lang.String[] strArray25 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerOptions19.setStripTypes((java.util.Set<java.lang.String>) strSet26);
        compilerOptions14.stripNamePrefixes = strSet26;
        boolean boolean30 = strSet26.isEmpty();
        compilerOptions0.stripNamePrefixes = strSet26;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy35 = compilerOptions32.propertyRenaming;
        boolean boolean36 = compilerOptions32.disambiguateProperties;
        compilerOptions32.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode40 = null;
        compilerOptions39.setTracerMode(tracerMode40);
        boolean boolean42 = compilerOptions39.generatePseudoNames;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray43 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList44 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44, locationMappingArray43);
        compilerOptions39.sourceMapLocationMappings = locationMappingList44;
        compilerOptions32.sourceMapLocationMappings = locationMappingList44;
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44);
        compilerOptions0.collapseAnonymousFunctions = true;
        compilerOptions0.extractPrototypeMemberDeclarations = false;
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy22 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy22.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy35 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy35.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locationMappingArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        jSModule1.removeAll();
        java.util.List<com.google.javascript.jscomp.JSModule> jSModuleList3 = jSModule1.getDependencies();
        java.util.Set<com.google.javascript.jscomp.JSModule> jSModuleSet4 = jSModule1.getAllDependencies();
        java.util.Set<com.google.javascript.jscomp.JSModule> jSModuleSet5 = jSModule1.getThisAndAllDependencies();
        com.google.javascript.jscomp.JSModule jSModule7 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler8 = new com.google.javascript.jscomp.Compiler();
        jSModule7.sortInputsByDeps(compiler8);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.io.Reader reader17 = sourceFile14.getCodeReader();
        int int18 = reader17.read();
        com.google.javascript.jscomp.SourceFile sourceFile19 = builder10.buildFromReader("*global*", reader17);
        jSModule7.add(sourceFile19);
        com.google.javascript.jscomp.JSModule jSModule22 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler();
        jSModule22.sortInputsByDeps(compiler23);
        com.google.javascript.jscomp.SourceFile.Builder builder25 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile29 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int31 = sourceFile29.getLineOfOffset((int) (short) 1);
        java.io.Reader reader32 = sourceFile29.getCodeReader();
        int int33 = reader32.read();
        com.google.javascript.jscomp.SourceFile sourceFile34 = builder25.buildFromReader("*global*", reader32);
        jSModule22.add(sourceFile34);
        boolean boolean37 = jSModule22.removeByName("PARAM_LIST");
        jSModule7.addDependency(jSModule22);
        com.google.javascript.jscomp.SourceFile sourceFile40 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput42 = new com.google.javascript.jscomp.CompilerInput(sourceFile40, true);
        com.google.javascript.rhino.InputId inputId44 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput42, inputId44, true);
        com.google.javascript.jscomp.CompilerInput compilerInput48 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput46, false);
        jSModule7.addFirst(compilerInput46);
        com.google.javascript.jscomp.CompilerInput compilerInput51 = jSModule7.getByName("");
        com.google.javascript.jscomp.SourceFile sourceFile53 = new com.google.javascript.jscomp.SourceFile("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput55 = new com.google.javascript.jscomp.CompilerInput(sourceFile53, true);
        com.google.javascript.rhino.InputId inputId57 = new com.google.javascript.rhino.InputId("*global*");
        com.google.javascript.jscomp.CompilerInput compilerInput59 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput55, inputId57, true);
        com.google.javascript.jscomp.CompilerInput compilerInput61 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput59, false);
        com.google.javascript.jscomp.JSModule jSModule63 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler64 = new com.google.javascript.jscomp.Compiler();
        jSModule63.sortInputsByDeps(compiler64);
        java.lang.String str66 = jSModule63.getName();
        compilerInput59.setModule(jSModule63);
        jSModule63.setDepth((int) (byte) 0);
        jSModule7.addDependency(jSModule63);
        java.util.Set<com.google.javascript.jscomp.JSModule> jSModuleSet71 = jSModule7.getThisAndAllDependencies();
        com.google.javascript.jscomp.CompilerInput compilerInput73 = jSModule7.getByName("WARNING: hi!");
        jSModule1.addDependency(jSModule7);
        int int75 = jSModule1.getDepth();
        org.junit.Assert.assertNotNull(jSModuleList3);
        org.junit.Assert.assertNotNull(jSModuleSet4);
        org.junit.Assert.assertNotNull(jSModuleSet5);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(reader17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(sourceFile19);
        org.junit.Assert.assertNotNull(sourceFile29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(reader32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(sourceFile34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(compilerInput51);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "STRING PARAM_LIST 49" + "'", str66, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(jSModuleSet71);
        org.junit.Assert.assertNull(compilerInput73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        java.lang.String[] strArray6 = new java.lang.String[] { "*global*", ":" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerOptions0.setStripTypes((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.removeDeadCode = true;
        compilerOptions0.jqueryPass = true;
        com.google.javascript.jscomp.MessageBundle messageBundle15 = null;
        compilerOptions0.messageBundle = messageBundle15;
        compilerOptions0.setTweakToStringLiteral("/experiment/:", "DiagnosticGroup<checkProvides>");
        java.lang.String str20 = compilerOptions0.sourceMapOutputPath;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray3 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList4 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList4, jSTypeArray3);
        com.google.javascript.rhino.Node node6 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        node6.addChildrenToBack(node12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry29.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node6, node19, node26, node33, 0, 49);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry45.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        node43.addChildrenToBack(node49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry59.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, node43, node56, node63, node70, 0, 49);
        com.google.javascript.rhino.Node node74 = node36.useSourceInfoFrom(node56);
        boolean boolean75 = node74.hasChildren();
        boolean boolean76 = node74.isDefaultCase();
        boolean boolean77 = node74.isSwitch();
        boolean boolean78 = node74.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            double double79 = node74.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        java.io.PrintStream printStream1 = new java.io.PrintStream("JSC_OPTIMIZE_LOOP_ERROR");
        printStream1.println(800);
        printStream1.println(0.0d);
        java.io.PrintStream printStream7 = null;
        com.google.javascript.jscomp.Compiler compiler8 = new com.google.javascript.jscomp.Compiler(printStream7);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile sourceFile11 = com.google.javascript.jscomp.SourceFile.fromFile("STRING PARAM_LIST 49", charset10);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int16 = sourceFile14.getLineOfOffset((int) (short) 1);
        java.lang.String str17 = sourceFile14.getName();
        com.google.javascript.jscomp.JsAst jsAst18 = new com.google.javascript.jscomp.JsAst(sourceFile14);
        jsAst18.clearAst();
        com.google.javascript.jscomp.SourceFile sourceFile20 = jsAst18.getSourceFile();
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.crossModuleMethodMotion = true;
        compilerOptions21.optimizeParameters = true;
        compilerOptions21.setTweakToDoubleLiteral("*global*", (double) (byte) 10);
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions21.checkGlobalNamesLevel;
        compilerOptions21.setCheckMissingGetCssNameBlacklist("");
        boolean boolean32 = compilerOptions21.removeTryCatchFinally;
        com.google.javascript.jscomp.Result result33 = compiler8.compile(sourceFile11, sourceFile20, compilerOptions21);
        com.google.javascript.jscomp.JSModule jSModule35 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.CompilerInput compilerInput37 = jSModule35.getByName("FINEST");
        com.google.javascript.jscomp.SourceFile sourceFile40 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
        int int42 = sourceFile40.getLineOfOffset((int) (short) 1);
        java.lang.String str43 = sourceFile40.getName();
        java.lang.String str44 = sourceFile40.getName();
        java.lang.String str45 = sourceFile40.getName();
        com.google.javascript.jscomp.CompilerInput compilerInput47 = new com.google.javascript.jscomp.CompilerInput(sourceFile40, true);
        com.google.javascript.jscomp.CompilerInput compilerInput48 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput47);
        com.google.javascript.jscomp.JSModule jSModule49 = compilerInput47.getModule();
        com.google.javascript.jscomp.JSModule jSModule51 = new com.google.javascript.jscomp.JSModule("STRING PARAM_LIST 49");
        com.google.javascript.jscomp.Compiler compiler52 = new com.google.javascript.jscomp.Compiler();
        jSModule51.sortInputsByDeps(compiler52);
        java.lang.String str54 = jSModule51.getName();
        compilerInput47.setModule(jSModule51);
        jSModule35.addDependency(jSModule51);
        java.lang.String[] strArray57 = compiler8.toSourceArray(jSModule51);
        java.io.PrintStream printStream58 = printStream1.printf("*global*.  at *global* line (unknown line) : (unknown column)", (java.lang.Object[]) strArray57);
        printStream58.flush();
        printStream58.print('a');
        org.junit.Assert.assertNotNull(sourceFile11);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(result33);
        org.junit.Assert.assertNull(compilerInput37);
        org.junit.Assert.assertNotNull(sourceFile40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(jSModule49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "STRING PARAM_LIST 49" + "'", str54, "STRING PARAM_LIST 49");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(printStream58);
    }
}

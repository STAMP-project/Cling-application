import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("mer");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("Italian", strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("Italian", strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList27, filteringMode28);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList27, filteringMode30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getCountry();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale43 = new java.util.Locale("fr");
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale35, locale37, locale39, locale40, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getCountry();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Locale locale61 = new java.util.Locale("fr");
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale53, locale55, locale57, locale58, locale61, locale62, locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList65, filteringMode68);
        java.util.Locale locale70 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale locale72 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode28.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode30.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "IT" + "'", str36, "IT");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "IT" + "'", str54, "IT");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode68.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode73.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList74);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfHalfday();
        org.joda.time.DurationField durationField17 = julianChronology10.hours();
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime53.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusMonths((int) (byte) 1);
        boolean boolean68 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.millisOfDay();
        java.lang.String str71 = property70.getName();
        org.joda.time.LocalDateTime localDateTime72 = property70.withMinimumValue();
        java.lang.String str73 = property70.getName();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(chronology74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.secondOfMinute();
        org.joda.time.LocalDateTime.Property property79 = localDateTime75.yearOfEra();
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.util.Locale locale81 = java.util.Locale.JAPANESE;
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.lang.String str83 = locale81.getDisplayVariant(locale82);
        java.lang.String str84 = locale80.getDisplayVariant(locale82);
        int int85 = property79.getMaximumShortTextLength(locale80);
        java.lang.String str86 = property70.getAsShortText(locale80);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "millisOfDay" + "'", str71, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "millisOfDay" + "'", str73, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "128" + "'", str86, "128");
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond(164038);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 164038 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        java.lang.String str26 = dateTimeFieldType24.getName();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology37);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology37.year();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology37.weekyearOfCentury();
        int int43 = julianChronology37.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType24.getField((org.joda.time.Chronology) julianChronology37);
        org.joda.time.DurationField durationField45 = julianChronology37.weekyears();
        org.joda.time.DurationField durationField46 = julianChronology37.millis();
        long long49 = durationField46.getMillis(50183280, 1645455630202L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991750253L + "'", long21 == 1676991750253L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfYear" + "'", str26, "dayOfYear");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 50183280L + "'", long49 == 50183280L);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder0.clearExtensions();
        java.util.Locale.Builder builder22 = builder0.clearExtensions();
        java.util.Locale.Builder builder23 = builder0.clear();
        java.util.Locale.Builder builder25 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder28 = builder0.setExtension('a', "kor");
        java.util.Locale.Builder builder30 = builder0.setVariant("Italian");
        java.util.Locale locale31 = builder0.build();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology11.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = dateTimeZone25.getName(2419200000022L, locale28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(1644936887631L, dateTimeZone25);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        long long44 = chronology37.set((org.joda.time.ReadablePartial) localDateTime42, (long) '4');
        org.joda.time.Chronology chronology45 = chronology37.withUTC();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) '4');
        int[] intArray60 = chronology45.get((org.joda.time.ReadablePartial) localDateTime56, 0L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        int int66 = mutableDateTime63.getMinuteOfDay();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        mutableDateTime69.setZone(dateTimeZone70);
        org.joda.time.Chronology chronology72 = mutableDateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfCentury();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.minus(readablePeriod75);
        int int77 = mutableDateTime63.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime79 = dateTime76.plus(readablePeriod78);
        org.joda.time.DateTime dateTime80 = dateTime76.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.DateTime dateTime82 = dateTime80.plus(readableDuration81);
        org.joda.time.DateTime dateTime83 = localDateTime56.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime.Property property84 = dateTime82.millisOfDay();
        int int85 = mutableDateTime30.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime86 = dateTime82.toDateTime();
        org.joda.time.DateTime.Property property87 = dateTime82.millisOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.028" + "'", str29, "+00:00:00.028");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DurationField durationField16 = julianChronology11.days();
        org.joda.time.DurationField durationField17 = julianChronology11.seconds();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DurationField durationField19 = julianChronology11.days();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) (-3840000L), (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology11.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        java.lang.String str24 = julianChronology11.toString();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str24, "JulianChronology[+00:00:00.028,mdfw=1]");
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readableDuration30);
        org.joda.time.DateTime dateTime33 = dateTime29.withWeekyear(0);
        org.joda.time.DateTime dateTime35 = dateTime29.withWeekOfWeekyear((int) '#');
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime45.minusMillis((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime45.minuteOfHour();
        long long51 = dateTime45.getMillis();
        int int52 = dateTime45.getEra();
        org.joda.time.DateTime.Property property53 = dateTime45.centuryOfEra();
        org.joda.time.DateTime dateTime54 = property53.getDateTime();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        int int60 = mutableDateTime57.getMinuteOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfCentury();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readablePeriod69);
        int int71 = mutableDateTime57.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.plus(readablePeriod72);
        org.joda.time.DateTime dateTime75 = dateTime70.plusYears(1);
        long long76 = dateTime75.getMillis();
        org.joda.time.DateTime dateTime78 = dateTime75.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property80 = dateTime75.property(dateTimeFieldType79);
        org.joda.time.DateTime.Property property81 = dateTime75.era();
        int int82 = property53.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime83 = property53.withMaximumValue();
        java.lang.String str84 = property53.toString();
        java.util.Locale locale85 = java.util.Locale.US;
        java.lang.String str86 = property53.getAsShortText(locale85);
        org.joda.time.DateTime dateTime87 = property53.withMaximumValue();
        boolean boolean88 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime.Property property89 = dateTime87.millisOfDay();
        org.joda.time.DateTime dateTime91 = property89.addWrapFieldToCopy(790);
        org.joda.time.DateTime.Property property92 = dateTime91.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645455750382L + "'", long51 == 1645455750382L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1676991750382L + "'", long76 == 1676991750382L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Property[centuryOfEra]" + "'", str84, "Property[centuryOfEra]");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "20" + "'", str86, "20");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readablePeriod9);
        org.joda.time.DateTime dateTime12 = dateTime8.minusMillis((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime8.minuteOfHour();
        long long14 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime8.minusMinutes(5);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 9, dateTimeZone17);
        mutableDateTime18.addMillis(53693413);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.era();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(100L);
        int int36 = localDateTime35.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime44);
        long long47 = julianChronology31.set((org.joda.time.ReadablePartial) localDateTime35, 604800099L);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology59);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology59.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology59.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = julianChronology59.getZone();
        java.lang.String str66 = dateTimeZone64.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology67 = gJChronology48.withZone(dateTimeZone64);
        org.joda.time.Chronology chronology68 = julianChronology31.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField69 = julianChronology31.dayOfMonth();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        mutableDateTime72.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology75 = mutableDateTime72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = mutableDateTime72.getZone();
        java.lang.String str78 = dateTimeZone76.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology80 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone76, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology80);
        org.joda.time.DateTimeField dateTimeField82 = julianChronology80.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField83 = julianChronology80.millisOfDay();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology80.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone85 = julianChronology80.getZone();
        org.joda.time.Chronology chronology86 = julianChronology31.withZone(dateTimeZone85);
        org.joda.time.DateTimeField dateTimeField87 = julianChronology31.hourOfDay();
        org.joda.time.Chronology chronology88 = julianChronology31.withUTC();
        org.joda.time.MutableDateTime mutableDateTime89 = mutableDateTime18.toMutableDateTime(chronology88);
        mutableDateTime18.add(324L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455750423L + "'", long14 == 1645455750423L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1123200100L + "'", long47 == 1123200100L);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(julianChronology80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = property3.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy(1676991223588L);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getOffset(3233600L);
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean5 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("giappone");
        timeZone7.setID("4472085-12-01T00:00:00.000Z");
        boolean boolean10 = timeZone7.observesDaylightTime();
        timeZone7.setID("2022-02-21T14:55:47.465Z");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        int int15 = timeZone13.getOffset((long) 59);
        int int17 = timeZone13.getOffset(56000L);
        boolean boolean18 = timeZone13.observesDaylightTime();
        boolean boolean19 = timeZone7.hasSameRules(timeZone13);
        boolean boolean20 = timeZone0.hasSameRules(timeZone7);
        boolean boolean21 = timeZone7.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone22.observesDaylightTime();
        java.lang.String str24 = timeZone22.getID();
        int int26 = timeZone22.getOffset((long) (short) 1);
        boolean boolean27 = timeZone7.hasSameRules(timeZone22);
        java.lang.String str30 = timeZone7.getDisplayName(true, 0);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT" + "'", str24, "GMT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT+00:00" + "'", str30, "GMT+00:00");
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DurationField durationField36 = julianChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = julianChronology35.seconds();
        int int39 = julianChronology35.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology35.millisOfDay();
        long long42 = dateTimeField40.roundHalfFloor(0L);
        int int43 = dateTime20.get(dateTimeField40);
        org.joda.time.DateTime.Property property44 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime45 = property44.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime46 = property44.withMinimumValue();
        int int47 = dateTime46.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991750490L + "'", long21 == 1676991750490L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 54150518 + "'", int43 == 54150518);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(23L);
        int int2 = mutableDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withPeriodAdded(readablePeriod8, (int) (short) 100);
        int int11 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withYear(893);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        java.lang.String str17 = mutableDateTime16.toString();
        mutableDateTime16.setDate((long) (short) 100);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(100L);
        boolean boolean30 = dateTimeZone26.isLocalDateTimeGap(localDateTime29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minus(readablePeriod31);
        boolean boolean33 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds((-19044));
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(100L);
        int int40 = localDateTime39.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = property46.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean55 = localDateTime53.isSupported(dateTimeFieldType54);
        int int56 = localDateTime37.indexOf(dateTimeFieldType54);
        mutableDateTime1.set(dateTimeFieldType54, 1376);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime61.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology69 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology69);
        org.joda.time.DateTimeField dateTimeField71 = julianChronology69.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField72 = julianChronology69.millisOfDay();
        org.joda.time.DateTimeField dateTimeField73 = julianChronology69.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology69.dayOfYear();
        org.joda.time.DurationField durationField75 = julianChronology69.seconds();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology69.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology69.minuteOfDay();
        long long81 = julianChronology69.add((long) 164038, 1645455499448L, 570);
        boolean boolean82 = dateTimeFieldType54.isSupported((org.joda.time.Chronology) julianChronology69);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str17, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(julianChronology69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 937909634849398L + "'", long81 == 937909634849398L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfYear();
        int int16 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField19 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMillis((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime28.minuteOfHour();
        long long34 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime28.minusMinutes(5);
        org.joda.time.DateTime dateTime38 = dateTime28.plusHours(53644655);
        org.joda.time.DateTime dateTime40 = dateTime28.minusHours((int) (short) 0);
        org.joda.time.DateTime.Property property41 = dateTime40.weekOfWeekyear();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks(1);
        org.joda.time.LocalDateTime localDateTime44 = dateTime43.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 4);
        java.lang.String str51 = property48.getName();
        org.joda.time.LocalDateTime localDateTime52 = property48.withMinimumValue();
        int[] intArray53 = localDateTime52.getValues();
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime44, intArray53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime44.plusSeconds(53758745);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        mutableDateTime59.setZone(dateTimeZone60);
        int int62 = mutableDateTime59.getMinuteOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfCentury();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.minus(readablePeriod71);
        int int73 = mutableDateTime59.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime75 = dateTime72.plus(readablePeriod74);
        org.joda.time.DateTime dateTime77 = dateTime72.plusYears(1);
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTime dateTime80 = dateTime77.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime81 = dateTime80.toLocalDateTime();
        org.joda.time.DateTime dateTime83 = dateTime80.plusDays((int) (short) 0);
        org.joda.time.DateTime dateTime85 = dateTime83.plusMillis(24);
        org.joda.time.DateTime dateTime87 = dateTime83.minusSeconds(71);
        int int88 = dateTime87.getCenturyOfEra();
        org.joda.time.DateTime dateTime89 = localDateTime44.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime91 = dateTime89.withMinuteOfHour((-16395695));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16395695 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645455750540L + "'", long34 == 1645455750540L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfDay" + "'", str51, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1676991750540L + "'", long78 == 1676991750540L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 20 + "'", int88 == 20);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        int int11 = property5.getMaximumShortTextLength(locale6);
        org.joda.time.DurationField durationField12 = property5.getRangeDurationField();
        org.joda.time.DurationField durationField13 = property5.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property5.addToCopy((long) 8);
        int int16 = localDateTime15.getYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2030 + "'", int16 == 2030);
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1676991224530L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        java.util.Locale locale11 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = dateTimeFormatter2.parseLocalTime("2022-02-21T14:54:56.323Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.lang.String str2 = timeZone0.getID();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("97");
        boolean boolean5 = timeZone0.hasSameRules(timeZone4);
        java.lang.String str6 = timeZone4.getID();
        java.util.TimeZone.setDefault(timeZone4);
        java.time.ZoneId zoneId8 = timeZone4.toZoneId();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId8);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone28);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) '4');
        org.joda.time.DurationField durationField32 = chronology24.hours();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        int int47 = durationField32.compareTo(durationField46);
        long long50 = durationField32.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType51 = durationField32.getType();
        mutableDateTime2.add(durationFieldType51, 4);
        org.joda.time.DateTimeField dateTimeField54 = mutableDateTime2.getRoundingField();
        int int55 = mutableDateTime2.getSecondOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        java.lang.String str59 = mutableDateTime58.toString();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime58.year();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant62 = null;
        mutableDateTime61.setTime(readableInstant62);
        mutableDateTime61.addMonths(9);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime61.year();
        org.joda.time.chrono.JulianChronology julianChronology67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(chronology70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.secondOfMinute();
        boolean boolean75 = dateTimeZone69.isLocalDateTimeGap(localDateTime71);
        org.joda.time.Chronology chronology76 = julianChronology67.withZone(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        mutableDateTime61.setZone(dateTimeZone69);
        mutableDateTime2.setZoneRetainFields(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 14400 + "'", int55 == 14400);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str59, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(julianChronology67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(localDateTime77);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfDay();
        org.joda.time.Chronology chronology8 = localDateTime4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plus(readablePeriod9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        int int4 = localDateTime3.getDayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale11 = new java.util.Locale("fr");
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale3, locale5, locale7, locale8, locale11, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getCountry();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale29 = new java.util.Locale("fr");
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale21, locale23, locale25, locale26, locale29, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList33, filteringMode36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale49 = new java.util.Locale("fr");
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale41, locale43, locale45, locale46, locale49, locale50, locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getCountry();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.getDisplayScript();
        java.util.Locale locale67 = new java.util.Locale("fr");
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale59, locale61, locale63, locale64, locale67, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList71, filteringMode74);
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList75);
        java.util.Collection<java.lang.String> strCollection77 = null;
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection77);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap79 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap79);
        java.util.Collection<java.lang.String> strCollection81 = null;
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList80, strCollection81);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "IT" + "'", str4, "IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "IT" + "'", str22, "IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode36.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "IT" + "'", str42, "IT");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "IT" + "'", str60, "IT");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode74.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(languageRangeList80);
        org.junit.Assert.assertNotNull(strList82);
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53808898);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant1.withMillis(187200000L);
        org.joda.time.Instant instant6 = instant3.withDurationAdded(1645455311744L, 2052);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant3);
        int int8 = gJChronology7.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology7.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology7);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.DateTime dateTime17 = dateTime7.plusHours(53644655);
        org.joda.time.DateTime dateTime19 = dateTime7.minusHours((int) (short) 0);
        int int20 = dateTime7.getMonthOfYear();
        org.joda.time.DateTime.Property property21 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime23 = property21.addToCopy((-16395695));
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfDay();
        org.joda.time.DateMidnight dateMidnight25 = dateTime23.toDateMidnight();
        org.joda.time.DateTime.Property property26 = dateTime23.year();
        org.joda.time.DateTime dateTime27 = property26.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455750739L + "'", long13 == 1645455750739L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime13 = property11.addWrapFieldToCopy(1);
        org.joda.time.DateTime dateTime14 = property11.roundHalfCeilingCopy();
        int int15 = dateTime14.getCenturyOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology10.add(readablePeriod15, (long) (short) 100, (int) 'x');
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime24 = dateTime23.toLocalDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33, (int) (short) 1);
        org.joda.time.DurationField durationField38 = julianChronology37.weeks();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 10);
        org.joda.time.Chronology chronology48 = julianChronology37.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology37.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = julianChronology37.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str55 = dateTimeZone51.getName(2419200000022L, locale54);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(1644936887631L, dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime25, dateTimeZone51);
        org.joda.time.DateTime.Property property58 = dateTime25.secondOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991750790L + "'", long21 == 1676991750790L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.028" + "'", str55, "+00:00:00.028");
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.year();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int23 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.MutableDateTime mutableDateTime24 = property13.roundHalfFloor();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey(100L);
        long long35 = dateTimeZone31.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField37 = gJChronology36.days();
        org.joda.time.DurationField durationField38 = gJChronology36.years();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology36.getZone();
        mutableDateTime24.setChronology((org.joda.time.Chronology) gJChronology36);
        java.lang.String str41 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long50 = gJChronology36.getDateTimeMillis(53808898, 54072832, 627, (-2), 50254553, 142, 54066989);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str41, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale5 = dateTimeFormatter4.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withOffsetParsed();
        boolean boolean7 = dateTimeFormatter4.isPrinter();
        boolean boolean8 = dateTimeFormatter4.isOffsetParsed();
        boolean boolean9 = dateTimeFormatter4.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean16 = dateTimeZone14.isStandardOffset(1676991224530L);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeZone14.getShortName((long) 10, locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter12.withLocale(locale18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(100L);
        int int40 = localDateTime39.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withPeriodAdded(readablePeriod43, (int) (short) 100);
        long long47 = chronology35.set((org.joda.time.ReadablePartial) localDateTime39, (long) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime28.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.withDurationAdded(readableDuration49, (int) (short) -1);
        java.util.Locale locale54 = new java.util.Locale("IT");
        java.lang.String str55 = localDateTime51.toString("35", locale54);
        java.lang.String str56 = locale18.getDisplayName(locale54);
        java.lang.String str57 = locale54.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale54.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter4.withLocale(locale54);
        boolean boolean61 = dateTimeFormatter60.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatter60.getPrinter();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:00" + "'", str19, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "35" + "'", str55, "35");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(dateTimePrinter62);
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        int int12 = gJChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField13 = gJChronology11.eras();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        boolean boolean22 = gJChronology11.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = gJChronology11.withZone(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.Chronology chronology3 = dateTime0.getChronology();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMonths((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minus(readableDuration18);
        int int20 = localDateTime15.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusHours(2020);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear(3043);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = localDateTime22.toString(dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 128 + "'", int20 == 128);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        int int4 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZone(dateTimeZone9);
        boolean boolean11 = dateTimeFormatter10.isParser();
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology23);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = julianChronology23.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology31 = gJChronology12.withZone(dateTimeZone28);
        java.lang.String str32 = gJChronology12.toString();
        org.joda.time.DurationField durationField33 = gJChronology12.days();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        int int40 = property39.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime41 = property39.roundFloorCopy();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withEra((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int57 = localDateTime55.indexOf(dateTimeFieldType56);
        int int58 = localDateTime41.indexOf(dateTimeFieldType56);
        org.joda.time.DateTime dateTime59 = localDateTime41.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter10.withZone(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str32, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 86399999 + "'", int40 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(julianChronology52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(gJChronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.hours();
        org.joda.time.DurationField durationField19 = julianChronology10.hours();
        org.joda.time.DurationField durationField20 = julianChronology10.months();
        org.joda.time.DurationField durationField21 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.centuryOfEra();
        java.lang.String str5 = property4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.getMutableDateTime();
        mutableDateTime6.addDays(49);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[centuryOfEra]" + "'", str5, "Property[centuryOfEra]");
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getExtension('a');
        int int7 = property3.getMaximumShortTextLength(locale4);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet12 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale17.getExtension('a');
        int int20 = property16.getMaximumShortTextLength(locale17);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.util.Set<java.lang.String> strSet24 = locale17.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet25 = locale17.getUnicodeLocaleAttributes();
        strSet25.clear();
        boolean boolean27 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Spliterator<java.lang.String> strSpliterator28 = strSet12.spliterator();
        java.lang.Object[] objArray29 = strSet12.toArray();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.addToCopy(1969);
        org.joda.time.Interval interval8 = property4.toInterval();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology21);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology21.centuryOfEra();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str28 = dateTimeFieldType27.toString();
        int int29 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType27.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property31 = localDateTime9.property(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 902 + "'", int3 == 902);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearOfCentury" + "'", str28, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.Chronology chronology7 = chronology5.withUTC();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.minuteOfHour();
        java.lang.Object obj12 = mutableDateTime10.clone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-03-01T00:00:00.000+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-03-01T00:00:00.000+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-03-01T00:00:00.000+00:00:00.028");
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.DurationField durationField16 = gJChronology11.months();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.hourOfHalfday();
        org.joda.time.DurationField durationField18 = gJChronology11.days();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.DurationField durationField30 = julianChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = julianChronology29.seconds();
        int int33 = julianChronology29.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology29.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = julianChronology29.add(readablePeriod35, (long) 23, 99);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology29.year();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology29);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfYear();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime44.centuryOfEra();
        boolean boolean47 = localDateTime41.equals((java.lang.Object) property46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.minus(readableDuration48);
        boolean boolean50 = gJChronology11.equals((java.lang.Object) localDateTime41);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str13, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 23L + "'", long38 == 23L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        int int3 = localDateTime2.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) 'a');
        int int8 = localDateTime7.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withHourOfDay(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusSeconds((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDayOfYear(10800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10800 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey(100L);
        long long17 = dateTimeZone13.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField19 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(588, 1380, (int) (short) 1, 237, 9, 6, 142, (org.joda.time.Chronology) gJChronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 237 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withYear((-1));
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMinutes(1959);
        int int20 = localDateTime16.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withYear((int) (byte) -1);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(100L);
        int int36 = localDateTime35.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTime dateTime46 = dateTime31.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withField(dateTimeFieldType47, (int) (byte) 1);
        boolean boolean50 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        int int51 = localDateTime26.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime26.plusMonths(24);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(100L);
        int int56 = localDateTime55.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minus(readablePeriod59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withYear(1970);
        boolean boolean63 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime62);
        int int64 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        mutableDateTime67.setZone(dateTimeZone68);
        org.joda.time.Chronology chronology70 = mutableDateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfCentury();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology70);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readablePeriod73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime78 = dateTime74.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property79 = dateTime74.hourOfDay();
        org.joda.time.DateTime.Property property80 = dateTime74.yearOfEra();
        org.joda.time.DateTime.Property property81 = dateTime74.weekOfWeekyear();
        org.joda.time.DateTime dateTime83 = property81.setCopy(4);
        org.joda.time.DateTime dateTime85 = dateTime83.minusSeconds(53700029);
        org.joda.time.DateTime dateTime87 = dateTime83.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime dateTime89 = dateTime83.minusMillis(335);
        org.joda.time.DateTime dateTime90 = localDateTime62.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Instant instant12 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant13 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField15 = gJChronology11.months();
        long long17 = durationField15.getValueAsLong((long) 2000);
        long long20 = durationField15.getDifferenceAsLong(1645455298934L, 1645455501040L);
        long long22 = durationField15.getMillis(0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        java.util.Locale locale2 = new java.util.Locale("2022-02-28T14:59:29.578", "0035-12-31T23:49:00.001-01:00");
        java.lang.Object obj3 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-28t14:59:29.578_0035-12-31T23:49:00.001-01:00");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "2022-02-28t14:59:29.578_0035-12-31T23:49:00.001-01:00");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "2022-02-28t14:59:29.578_0035-12-31T23:49:00.001-01:00");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "2022-02-28t14:59:29.578_0035-12-31T23:49:00.001-01:00");
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology19 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField20 = gJChronology0.weeks();
        org.joda.time.DurationField durationField21 = gJChronology0.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = gJChronology0.getDateTimeMillis(292278993, 71, 23, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.DurationField durationField39 = julianChronology38.weeks();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime42.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 10);
        org.joda.time.Chronology chronology49 = julianChronology38.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology38.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = julianChronology38.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        int int55 = dateTimeZone52.getStandardOffset((long) 3043);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime7.toMutableDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = null;
        org.joda.time.format.DateTimeParser dateTimeParser60 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter59, dateTimeParser60);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatter61.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter61.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter63.withPivotYear((java.lang.Integer) 8);
        java.util.Locale locale66 = java.util.Locale.PRC;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter65.withLocale(locale66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter67.withOffsetParsed();
        java.util.Locale locale69 = dateTimeFormatter68.getLocale();
        java.lang.String str70 = dateTimeZone52.getName((-517470932764799965L), locale69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.yearOfCentury();
        long long74 = dateTimeField72.roundHalfFloor(1000L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 28 + "'", int55 == 28);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNull(dateTimePrinter62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.028" + "'", str70, "+00:00:00.028");
        org.junit.Assert.assertNotNull(gJChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-28L) + "'", long74 == (-28L));
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfDay();
        java.lang.String str16 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str16, "JulianChronology[+00:00:00.028,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        java.lang.String str10 = mutableDateTime9.toString();
        mutableDateTime9.setDate((long) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        mutableDateTime9.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        long long31 = dateTimeZone19.getMillisKeepLocal(dateTimeZone27, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField33 = mutableDateTime32.getRoundingField();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.year();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology45);
        org.joda.time.DateTimeField dateTimeField47 = julianChronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology45.minuteOfDay();
        org.joda.time.DurationField durationField50 = julianChronology45.days();
        org.joda.time.DurationField durationField51 = julianChronology45.seconds();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology45.minuteOfHour();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.dayOfYear();
        mutableDateTime56.setDate((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime56.secondOfDay();
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "hi!");
        int int70 = property65.getMaximumTextLength(locale69);
        int int71 = dateTimeField53.getMaximumShortTextLength(locale69);
        boolean boolean72 = mutableDateTime32.equals((java.lang.Object) locale69);
        int int73 = mutableDateTime32.getHourOfDay();
        boolean boolean74 = mutableDateTime5.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.setYear(14400);
        int int78 = mutableDateTime5.getMinuteOfHour();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str10, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNull(dateTimeField33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!_hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.weekOfWeekyear();
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime10 = property8.setCopy(893);
        org.joda.time.DateTime dateTime12 = property8.addToCopy(833L);
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(124);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.DurationField durationField33 = julianChronology10.millis();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = julianChronology10.add(readablePeriod35, 1676987549543L, 2102);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1676987549543L + "'", long38 == 1676987549543L);
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDateTime(837, (int) 'x', 0, 457070, 0, 50461112, 50264);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457070 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        int int4 = property3.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(54104127);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withWeekyear(54041481);
        java.util.Date date10 = localDateTime9.toDate();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 86399999 + "'", int4 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 06 00:00:00 GMT+00:00 54041481");
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField12 = gJChronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfWeek();
        org.joda.time.Chronology chronology17 = gJChronology11.withUTC();
        org.joda.time.DurationField durationField18 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        boolean boolean16 = dateTimeZone14.isStandardOffset(1676991223131L);
        java.lang.String str17 = dateTimeZone14.toString();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfDay();
        org.joda.time.DurationField durationField21 = gJChronology18.hours();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.028" + "'", str17, "+00:00:00.028");
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        long long22 = julianChronology10.getDateTimeMillis((long) (byte) 0, (int) (short) 10, 6, 53, (int) '#');
        org.joda.time.DurationField durationField23 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.centuryOfEra();
        java.util.Locale locale27 = new java.util.Locale("English (Canada)");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.toLanguageTag();
        java.lang.String str30 = dateTimeField24.getAsShortText(1705280640000L, locale27);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 36413007L + "'", long22 == 36413007L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale27.toString(), "english (canada)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "und" + "'", str29, "und");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "21" + "'", str30, "21");
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime8 = dateTime6.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime6.withHourOfDay(54002012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54002012 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology15 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.dayOfMonth();
        int int17 = property16.getLeapAmount();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 902 + "'", int13 == 902);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int49 = localDateTime21.getMillisOfDay();
        org.joda.time.Chronology chronology50 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology50);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 128 + "'", int49 == 128);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        long long8 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property3.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = localDateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.era();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter16.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withOffsetParsed();
        java.util.Locale locale19 = dateTimeFormatter18.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter18.getParser();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology32);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology32.year();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology32.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter18.withChronology((org.joda.time.Chronology) julianChronology32);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology32.minuteOfDay();
        boolean boolean40 = property13.equals((java.lang.Object) julianChronology32);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfDay" + "'", str6, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime3.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.year();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(100L);
        int int20 = localDateTime19.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime22);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.MutableDateTime mutableDateTime25 = property14.roundHalfFloor();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey(100L);
        long long36 = dateTimeZone32.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField38 = gJChronology37.days();
        org.joda.time.DurationField durationField39 = gJChronology37.years();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology37.getZone();
        mutableDateTime25.setChronology((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology37.getZone();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology37.minuteOfHour();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(obj0, (org.joda.time.Chronology) gJChronology37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime46.withWeekOfWeekyear(739);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 739 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getOffset(3233600L);
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean5 = timeZone0.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(10);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology20.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology28 = gJChronology9.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = localDateTime8.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale35.getExtension('a');
        int int38 = property34.getMaximumShortTextLength(locale35);
        java.lang.String str39 = locale35.getISO3Country();
        java.lang.String str40 = dateTimeZone25.getName((-432000000000L), locale35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime43.getZone();
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = julianChronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology51.clockhourOfHalfday();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = mutableDateTime57.getZone();
        java.lang.String str63 = dateTimeZone61.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone61, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField66 = julianChronology65.millisOfDay();
        boolean boolean67 = julianChronology51.equals((java.lang.Object) julianChronology65);
        org.joda.time.DurationField durationField68 = julianChronology65.centuries();
        boolean boolean69 = dateTimeZone25.equals((java.lang.Object) durationField68);
        java.util.TimeZone timeZone70 = dateTimeZone25.toTimeZone();
        java.util.TimeZone.setDefault(timeZone70);
        boolean boolean72 = timeZone0.hasSameRules(timeZone70);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 337 + "'", int3 == 337);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.028" + "'", str40, "+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(julianChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(julianChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(50625123L);
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean9 = localDateTime1.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withWeekyear(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears(70);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withMillisOfDay(2000);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.plusWeeks(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime3.hourOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime16.secondOfDay();
        org.joda.time.DurationField durationField26 = property25.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfCeiling();
        mutableDateTime27.setDayOfYear(3);
        int int30 = property13.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setWeekyear(12022);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readablePeriod39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        int int48 = mutableDateTime45.getMinuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readablePeriod57);
        int int59 = mutableDateTime45.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfCentury();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone70);
        long long73 = chronology66.set((org.joda.time.ReadablePartial) localDateTime71, (long) '4');
        org.joda.time.DurationField durationField74 = chronology66.seconds();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime58.toMutableDateTime(chronology66);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime78 = dateTime76.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(100L);
        int int81 = localDateTime80.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone85);
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.millisOfDay();
        org.joda.time.LocalDateTime localDateTime89 = property87.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime80.withFields((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.DateTime dateTime91 = dateTime76.withFields((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime90.withField(dateTimeFieldType92, (int) (byte) 1);
        boolean boolean95 = mutableDateTime75.isSupported(dateTimeFieldType92);
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType92.getDurationType();
        boolean boolean97 = mutableDateTime27.isSupported(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 52L + "'", long73 == 52L);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(durationFieldType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfFloor();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(100L);
        int int36 = localDateTime35.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withPeriodAdded(readablePeriod39, (int) (short) 100);
        long long43 = chronology31.set((org.joda.time.ReadablePartial) localDateTime35, (long) (short) 0);
        org.joda.time.DateTime dateTime44 = dateTime24.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths((int) (byte) 100);
        int int47 = property15.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime50.getZone();
        java.lang.String str56 = dateTimeZone54.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology58 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone54, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology58);
        org.joda.time.DateTimeField dateTimeField60 = julianChronology58.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology58.millisOfDay();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology58.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = julianChronology58.getZone();
        org.joda.time.DurationField durationField64 = julianChronology58.seconds();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime46.toMutableDateTime((org.joda.time.Chronology) julianChronology58);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.centuryOfEra();
        boolean boolean67 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3043 + "'", int47 == 3043);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(julianChronology58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        java.lang.String[] strArray10 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray17 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray24 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray31 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[][] strArray32 = new java.lang.String[][] { strArray10, strArray17, strArray24, strArray31 };
        java.lang.String[][] strArray33 = strSet2.toArray(strArray32);
        int int34 = strSet2.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey(100L);
        long long45 = dateTimeZone41.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.weekyear();
        java.lang.String str48 = gJChronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.weekyearOfCentury();
        boolean boolean51 = strSet2.equals((java.lang.Object) dateTimeField50);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet2.parallelStream();
        java.util.Locale.LanguageRange languageRange54 = new java.util.Locale.LanguageRange("Italy");
        java.lang.String str55 = languageRange54.getRange();
        java.lang.String str56 = languageRange54.getRange();
        java.util.Locale.LanguageRange languageRange58 = new java.util.Locale.LanguageRange("Italy");
        java.lang.String str59 = languageRange58.getRange();
        java.lang.String str60 = languageRange58.getRange();
        java.util.Locale.LanguageRange languageRange62 = new java.util.Locale.LanguageRange("Italy");
        java.lang.String str63 = languageRange62.getRange();
        java.lang.String str64 = languageRange62.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] { languageRange54, languageRange58, languageRange62 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        org.joda.time.tz.Provider provider68 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone70 = provider68.getZone("English");
        java.util.Set<java.lang.String> strSet71 = provider68.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator72 = strSet71.spliterator();
        java.lang.String str73 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strSet71);
        java.util.stream.Stream<java.lang.String> strStream74 = strSet71.stream();
        boolean boolean75 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet71);
        java.util.stream.Stream<java.lang.String> strStream76 = strSet71.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(gJChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str48, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "italy" + "'", str55, "italy");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "italy" + "'", str56, "italy");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "italy" + "'", str59, "italy");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "italy" + "'", str60, "italy");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "italy" + "'", str63, "italy");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "italy" + "'", str64, "italy");
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strStream76);
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean11 = dateTimeZone9.isStandardOffset(1676991224530L);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 10, locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter7.withLocale(locale13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withPeriodAdded(readablePeriod38, (int) (short) 100);
        long long42 = chronology30.set((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 0);
        org.joda.time.DateTime dateTime43 = dateTime23.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime34.withDurationAdded(readableDuration44, (int) (short) -1);
        java.util.Locale locale49 = new java.util.Locale("IT");
        java.lang.String str50 = localDateTime46.toString("35", locale49);
        java.lang.String str51 = locale13.getDisplayName(locale49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withLocale(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1645455296));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeFormatter55.getZone();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "35" + "'", str50, "35");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.setScript("year");
        java.util.Locale locale9 = builder8.build();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        java.lang.String str21 = mutableDateTime20.toString();
        mutableDateTime20.setDate((long) (short) 100);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime17.toDateTime(dateTimeZone30);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = dateTime17.toString("0", locale35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfYear();
        mutableDateTime39.setDate((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime39.secondOfDay();
        java.util.Locale locale50 = new java.util.Locale("IT");
        int int51 = property48.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale35.getDisplayVariant(locale50);
        java.lang.String str53 = locale9.getDisplayScript(locale35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr__#Year");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str21, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Year" + "'", str53, "Year");
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.secondOfDay();
        boolean boolean17 = property9.equals((java.lang.Object) property16);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((long) 2022);
        boolean boolean20 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.hourOfDay();
        int int22 = localDateTime19.getDayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology10.weekyear();
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) julianChronology10);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) localDateTime20, (long) '4');
        org.joda.time.Chronology chronology23 = chronology15.withUTC();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        long long36 = chronology29.set((org.joda.time.ReadablePartial) localDateTime34, (long) '4');
        int[] intArray38 = chronology23.get((org.joda.time.ReadablePartial) localDateTime34, 0L);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, locale39);
        long long43 = dateTimeField9.getDifferenceAsLong((long) 'u', (long) 55);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) long43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withWeekyear(53938);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfCentury(2720);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2720 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.millisOfSecond();
        int int14 = dateTimeField12.getMinimumValue(946771200000L);
        int int16 = dateTimeField12.getMaximumValue(63781052510520L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999 + "'", int16 == 999);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.centuryOfEra();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.year();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = localDateTime16.getField(611);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 611");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        java.lang.String str10 = dateTime7.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:02:31.970+00:00:00.028" + "'", str10, "2022-02-21T15:02:31.970+00:00:00.028");
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withWeekyear(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime.Property property16 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        java.lang.String str22 = mutableDateTime21.toString();
        mutableDateTime21.setDate((long) (short) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        mutableDateTime21.setZoneRetainFields(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        boolean boolean35 = dateTimeZone31.isLocalDateTimeGap(localDateTime34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusMinutes(6);
        int int40 = property16.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        boolean boolean42 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime3.plusHours(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime3.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int47 = localDateTime3.getValue(50284974);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 50284974");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str22, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField23 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.yearOfEra();
        long long29 = julianChronology10.add(1645444800000L, 20110100L, 53737910);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.centuryOfEra();
        java.lang.String str31 = julianChronology10.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1082320188691000L + "'", long29 == 1082320188691000L);
        org.junit.Assert.assertNotNull(dateTimeField30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str31, "JulianChronology[+00:00:00.028,mdfw=1]");
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        long long19 = julianChronology10.add(1645455239306L, (long) 4, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DurationField durationField36 = julianChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.halfdayOfDay();
        boolean boolean38 = dateTimeZone22.equals((java.lang.Object) julianChronology35);
        org.joda.time.Chronology chronology39 = julianChronology10.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone41 = julianChronology10.getZone();
        org.joda.time.DurationField durationField42 = julianChronology10.millis();
        org.joda.time.DurationField durationField43 = julianChronology10.minutes();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455239306L + "'", long19 == 1645455239306L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.secondOfDay();
        boolean boolean17 = property9.equals((java.lang.Object) property16);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((long) 2022);
        boolean boolean20 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.centuryOfEra();
        boolean boolean29 = localDateTime19.equals((java.lang.Object) dateTimeField28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.dayOfYear();
        mutableDateTime32.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime32.setMonthOfYear((int) (byte) 1);
        mutableDateTime32.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime32.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfCeiling();
        org.joda.time.Interval interval47 = property45.toInterval();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime53 = property52.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.set((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.monthOfYear();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = property56.getAsText(locale57);
        org.joda.time.MutableDateTime mutableDateTime59 = property45.set("22", locale57);
        int int60 = dateTimeField28.getMaximumTextLength(locale57);
        java.lang.String str61 = locale57.getCountry();
        java.lang.String str62 = locale57.toLanguageTag();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "janvier" + "'", str58, "janvier");
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FR" + "'", str61, "FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fr-FR" + "'", str62, "fr-FR");
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfCeilingCopy();
        long long22 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime20, 1676991244989L);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays((int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L);
        int int29 = localDateTime28.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime28.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime28.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(100L);
        int int48 = localDateTime47.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime50);
        int int52 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.property(dateTimeFieldType53);
        int int55 = localDateTime24.get(dateTimeFieldType53);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream59 = strSet58.parallelStream();
        java.lang.String[] strArray66 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray73 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray80 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray87 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[][] strArray88 = new java.lang.String[][] { strArray66, strArray73, strArray80, strArray87 };
        java.lang.String[][] strArray89 = strSet58.toArray(strArray88);
        int int90 = strSet58.size();
        boolean boolean91 = localDateTime24.equals((java.lang.Object) strSet58);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1123200052L + "'", long22 == 1123200052L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 70 + "'", int55 == 70);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getExtension('a');
        int int7 = property3.getMaximumShortTextLength(locale4);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet12 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setRegion("IT");
        java.util.Locale locale17 = new java.util.Locale("fr");
        java.util.Locale.Builder builder18 = builder13.setLocale(locale17);
        java.util.Locale locale19 = builder13.build();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale20.getDisplayLanguage(locale21);
        java.lang.String str24 = locale19.getDisplayName(locale20);
        java.lang.String str25 = locale4.getDisplayLanguage(locale20);
        java.util.Set<java.lang.String> strSet26 = locale20.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor27 = strSet26.iterator();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanese" + "'", str23, "Japanese");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str24, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u82f1\u8a9e" + "'", str25, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strItor27);
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("739");
        java.util.Locale locale7 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeZone1.getDisplayName(true, 53781451, locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53781451");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals(locale7.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        long long14 = dateTimeZone6.previousTransition(1645455231587L);
        int int16 = dateTimeZone6.getOffsetFromLocal(54000049L);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str21 = locale18.getExtension('a');
        java.lang.String str22 = dateTimeZone6.getShortName(1676991394806L, locale18);
        boolean boolean24 = dateTimeZone6.isStandardOffset(1645455652372L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2050L + "'", long12 == 2050L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455231587L + "'", long14 == 1645455231587L);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 28 + "'", int16 == 28);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNull(str21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.028" + "'", str22, "+00:00:00.028");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale8.getExtension('a');
        int int11 = property7.getMaximumShortTextLength(locale8);
        java.lang.String str12 = locale8.getISO3Country();
        java.lang.String str13 = locale8.toLanguageTag();
        java.lang.String str14 = locale0.getDisplayCountry(locale8);
        java.lang.String str15 = locale8.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) (byte) 10);
        org.joda.time.Instant instant4 = instant2.plus(1676991283786L);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant2.minus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant2.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded(1645455504786L, 53748);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.plus(readableDuration12);
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.centuryOfEra();
        int int16 = dateTimeField15.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime50.withYearOfCentury(52);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((long) 894);
        org.joda.time.DateTime dateTime58 = dateTime50.plus(3840097L);
        org.joda.time.DateTime dateTime60 = dateTime50.minusDays((-2720));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears(70);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plus(readablePeriod7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 20);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusWeeks(82800100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20, (int) (short) 1);
        org.joda.time.DurationField durationField25 = julianChronology24.weeks();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology24.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = julianChronology24.seconds();
        int int28 = julianChronology24.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology24.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = julianChronology24.add(readablePeriod30, (long) 23, 99);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology24.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField38.getType();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        boolean boolean41 = localDateTime8.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 23L + "'", long33 == 23L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.secondOfDay();
        java.lang.String str17 = julianChronology10.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str17, "JulianChronology[+00:00:00.028,mdfw=1]");
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.minus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths(40);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(100L);
        int int33 = localDateTime32.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime32.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime32.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(100L);
        int int52 = localDateTime51.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime54);
        int int56 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minus(readablePeriod57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        int int61 = localDateTime60.size();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.era();
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime55.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.DateTime dateTime65 = dateTime28.withFields((org.joda.time.ReadablePartial) localDateTime64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField67 = localDateTime64.getField(833);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 833");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(760, 20, 0, 53837230, 80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53837230 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.minusMonths((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minus(readableDuration21);
        int int23 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        long long21 = property20.remainder();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property36 = dateTime31.hourOfDay();
        org.joda.time.DateTime.Property property37 = dateTime31.yearOfEra();
        org.joda.time.DateTime.Property property38 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTime dateTime40 = property38.setCopy(4);
        long long41 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str49 = nameProvider43.getName(locale45, "35", "52");
        org.joda.time.LocalDateTime localDateTime50 = property20.setCopy("49", locale45);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime54.getZone();
        java.lang.String str60 = dateTimeZone58.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology62 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58, (int) (short) 1);
        org.joda.time.DurationField durationField63 = julianChronology62.weeks();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology62.weekOfWeekyear();
        org.joda.time.DurationField durationField65 = julianChronology62.seconds();
        int int66 = julianChronology62.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField67 = julianChronology62.weekyears();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = julianChronology62.add(readablePeriod68, (long) 3, (int) 'u');
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(100L);
        int int74 = localDateTime73.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minus(readablePeriod77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.millisOfDay();
        org.joda.time.LocalDateTime.Property property80 = localDateTime76.millisOfDay();
        int[] intArray82 = julianChronology62.get((org.joda.time.ReadablePartial) localDateTime76, (long) 'u');
        int[] intArray84 = dateTimeField16.addWrapField((org.joda.time.ReadablePartial) localDateTime50, 0, intArray82, 51);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime50.minusWeeks(0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1643036552248L) + "'", long41 == (-1643036552248L));
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(julianChronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3L + "'", long71 == 3L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[5, 12, 19, 145]");
        org.junit.Assert.assertNotNull(intArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[5, 12, 19, 145]");
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        java.lang.String str20 = mutableDateTime19.toString();
        mutableDateTime19.setDate((long) (short) 100);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(100L);
        boolean boolean33 = dateTimeZone29.isLocalDateTimeGap(localDateTime32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minus(readablePeriod34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMinutes(6);
        int[] intArray39 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime35, 31536000000L);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.minusMillis(292272992);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.plusMillis(1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime35.minusSeconds(648);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.plus(readablePeriod46);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str20, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 12, 19, 28]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.Chronology chronology7 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(100L);
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMillis((int) (short) 1);
        long long21 = chronology7.set((org.joda.time.ReadablePartial) localDateTime19, 1645455237282L);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfEra(53662389);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withWeekyear(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear(465830);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 604800127L + "'", long21 == 604800127L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology23);
        long long26 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology11.dayOfWeek();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(3787358400001L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.LocalDateTime localDateTime29 = dateTime28.toLocalDateTime();
        org.joda.time.DateTime dateTime31 = dateTime28.withYearOfEra(53797);
        org.joda.time.DateTime.Property property32 = dateTime28.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime28.withWeekOfWeekyear(53902074);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53902074 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(julianChronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645455752425L + "'", long26 == 1645455752425L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey(100L);
        long long17 = dateTimeZone13.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.weekyear();
        org.joda.time.DurationField durationField20 = gJChronology18.hours();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.year();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology18.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(2090, 0, 50258385, (-53), 53998, 53934, (-2), dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        int int20 = mutableDateTime17.getMinuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        int int31 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readablePeriod32);
        org.joda.time.DateTime dateTime35 = dateTime30.plusYears(1);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime39 = dateTime38.toLocalDateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.withEarlierOffsetAtOverlap();
        int int41 = property14.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = property14.withMaximumValue();
        java.lang.String str43 = property14.getName();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1676991752449L + "'", long36 == 1676991752449L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "weekyear" + "'", str43, "weekyear");
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.withYearOfEra(53644655);
        org.joda.time.DateTime dateTime8 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime.Property property10 = dateTime8.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime2.copy();
        mutableDateTime20.add(1645455435780L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey(100L);
        long long33 = dateTimeZone29.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.weekyear();
        java.lang.String str36 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology34.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology34.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime20.toMutableDateTime(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str36, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter5.getPrinter();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.DurationField durationField19 = julianChronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology18.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = julianChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.era();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology18.era();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30, (int) (short) 1);
        org.joda.time.DurationField durationField35 = julianChronology34.weeks();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 10);
        org.joda.time.Chronology chronology45 = julianChronology34.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = julianChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology34.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = julianChronology34.getZone();
        org.joda.time.Chronology chronology49 = julianChronology18.withZone(dateTimeZone48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter5.withZone(dateTimeZone48);
        java.lang.Integer int51 = dateTimeFormatter50.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.parse("2022-02-21T14:58:20.344+00:00:00.028", dateTimeFormatter50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(int51);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = property3.roundCeilingCopy();
        java.lang.String str9 = property3.toString();
        java.lang.String str10 = property3.getName();
        org.joda.time.LocalDateTime localDateTime11 = property3.withMaximumValue();
        int int12 = localDateTime11.size();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[millisOfDay]" + "'", str9, "Property[millisOfDay]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology11.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        int int28 = dateTimeZone25.getStandardOffset((long) 3043);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(1676991241391L, dateTimeZone25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(100L);
        int int49 = localDateTime48.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withPeriodAdded(readablePeriod52, (int) (short) 100);
        long long56 = chronology44.set((org.joda.time.ReadablePartial) localDateTime48, (long) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime37.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.minus(readableDuration58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime57.minus(readableDuration60);
        int int62 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime29);
        mutableDateTime63.add((long) 66);
        int int66 = mutableDateTime63.getCenturyOfEra();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 28 + "'", int28 == 28);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20 + "'", int66 == 20);
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int49 = localDateTime21.getMillisOfDay();
        org.joda.time.Chronology chronology50 = localDateTime21.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        int int53 = localDateTime21.indexOf(dateTimeFieldType51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime21.minusMonths((-877838));
        int int56 = localDateTime55.getEra();
        org.joda.time.Chronology chronology57 = localDateTime55.getChronology();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 128 + "'", int49 == 128);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        java.util.Locale locale3 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        java.lang.String str8 = mutableDateTime7.toString();
        mutableDateTime7.setDate((long) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) locale3, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MILLISOFDAY" + "'", str4, "MILLISOFDAY");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str8, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.028" + "'", str20, "+00:00:00.028");
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        java.lang.String str6 = property4.getAsString();
        java.util.Locale locale10 = new java.util.Locale("Italian", "6");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setRegion("IT");
        java.util.Locale locale15 = new java.util.Locale("fr");
        java.util.Locale.Builder builder16 = builder11.setLocale(locale15);
        java.util.Locale locale17 = builder11.build();
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.lang.String str22 = locale17.getDisplayName(locale18);
        java.lang.String str23 = locale17.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale17.getDisplayScript(locale24);
        java.lang.String str26 = locale10.getDisplayVariant(locale17);
        org.joda.time.LocalDateTime localDateTime27 = property4.setCopy("82800052", locale10);
        org.joda.time.DurationField durationField28 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 902 + "'", int3 == 902);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertEquals(locale10.toString(), "italian_6");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese" + "'", str21, "Japanese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str22, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str23, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNull(durationField28);
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone10);
        long long13 = chronology6.set((org.joda.time.ReadablePartial) localDateTime11, (long) '4');
        org.joda.time.DurationField durationField14 = chronology6.hours();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 53, chronology6);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = julianChronology26.getZone();
        org.joda.time.Chronology chronology41 = chronology6.withZone(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone40);
        long long46 = dateTimeZone40.adjustOffset(187200000L, true);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getTimeZone("hi!");
        int int50 = timeZone49.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.Chronology chronology52 = gJChronology47.withZone(dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = gJChronology47.get(readablePeriod53, 1642118399972L, 1645455431904L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 187200000L + "'", long46 == 187200000L);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.add((long) 52);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = localDateTime37.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        long long48 = julianChronology26.set((org.joda.time.ReadablePartial) localDateTime37, 0L);
        org.joda.time.DurationField durationField49 = julianChronology26.years();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType15.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DurationField durationField51 = julianChronology26.centuries();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType13.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology26.monthOfYear();
        mutableDateTime8.setChronology((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField55 = julianChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology26.clockhourOfHalfday();
        org.joda.time.DurationField durationField57 = julianChronology26.months();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1123200056L + "'", long48 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(893);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        org.joda.time.Chronology chronology18 = localDateTime15.getChronology();
        java.lang.String str19 = localDateTime15.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "89370-01-01T00:00:02.102" + "'", str19, "89370-01-01T00:00:02.102");
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.joda.time.DurationField durationField19 = julianChronology10.hours();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, 1969);
        int int21 = dateTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean25 = dateTime17.equals((java.lang.Object) timeZone24);
        java.util.TimeZone timeZone26 = null;
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = timeZone24.getDisplayName(false, 780);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 780");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 728 + "'", int21 == 728);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        mutableDateTime3.setDate((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        long long25 = dateTimeZone13.getMillisKeepLocal(dateTimeZone21, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = mutableDateTime26.getRoundingField();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.year();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology39);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology39.minuteOfDay();
        org.joda.time.DurationField durationField44 = julianChronology39.days();
        org.joda.time.DurationField durationField45 = julianChronology39.seconds();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology39.minuteOfHour();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.dayOfYear();
        mutableDateTime50.setDate((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime50.secondOfDay();
        java.util.Locale locale63 = new java.util.Locale("", "hi!", "hi!");
        int int64 = property59.getMaximumTextLength(locale63);
        int int65 = dateTimeField47.getMaximumShortTextLength(locale63);
        boolean boolean66 = mutableDateTime26.equals((java.lang.Object) locale63);
        boolean boolean68 = mutableDateTime26.isEqual(19L);
        int int69 = mutableDateTime26.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime26.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime71 = property70.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime73 = property70.addWrapField(1970);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime73.setDateTime(53831432, 492, 82641, 0, 2090, 0, 53750);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2090 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str4, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(julianChronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals(locale63.toString(), "_HI!_hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 28 + "'", int69 == 28);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        int int4 = strSet2.size();
        java.util.Iterator<java.lang.String> strItor5 = strSet2.iterator();
        java.util.stream.Stream<java.lang.String> strStream6 = strSet2.stream();
        java.lang.String[] strArray16 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        int int19 = strSet17.size();
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet17.spliterator();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet17.parallelStream();
        boolean boolean22 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet17);
        strSet17.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(strSpliterator20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone7);
        java.lang.Object obj11 = mutableDateTime10.clone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        int int17 = mutableDateTime14.getMinuteOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readablePeriod26);
        int int28 = mutableDateTime14.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.plus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime27.plusYears(1);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property37 = dateTime32.property(dateTimeFieldType36);
        org.joda.time.DateTime.Property property38 = dateTime32.era();
        org.joda.time.DateTime dateTime40 = dateTime32.minusDays(0);
        boolean boolean41 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.080+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.080+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.080+00:00:00.028");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1676991752784L + "'", long33 == 1676991752784L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 52);
        int int14 = localDateTime13.size();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        int int29 = localDateTime24.indexOf(dateTimeFieldType27);
        java.lang.String str30 = localDateTime24.toString();
        int int31 = localDateTime24.size();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.plusWeeks(12);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusHours(168);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusHours(53913);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime33.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property40 = localDateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 902 + "'", int28 == 902);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str30, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder0.clearExtensions();
        java.util.Locale.Builder builder22 = builder0.clearExtensions();
        java.util.Locale.Builder builder23 = builder0.clear();
        java.util.Locale.Builder builder25 = builder0.addUnicodeLocaleAttribute("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder0.setVariant("2022-02-08T14:01:00.009");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-08T14:01:00.009 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1645455339224L, chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        mutableDateTime2.setMillis(readableInstant3);
        java.lang.String[] strArray7 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16, (int) (short) 1);
        org.joda.time.DurationField durationField21 = julianChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = julianChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.weekOfWeekyear();
        boolean boolean25 = strSet8.contains((java.lang.Object) julianChronology20);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology20.minuteOfHour();
        int int27 = mutableDateTime2.get(dateTimeField26);
        int int28 = mutableDateTime2.getSecondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36, (int) (short) 1);
        org.joda.time.DurationField durationField41 = julianChronology40.weeks();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 10);
        org.joda.time.Chronology chronology51 = julianChronology40.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = julianChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology40.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = julianChronology40.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int57 = dateTimeZone54.getStandardOffset((long) 3043);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(1676991241391L, dateTimeZone54);
        java.lang.String str59 = dateTimeZone54.toString();
        java.lang.String str61 = dateTimeZone54.getName(1645455605841L);
        mutableDateTime2.setZoneRetainFields(dateTimeZone54);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 28 + "'", int57 == 28);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.028" + "'", str59, "+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.028" + "'", str61, "+00:00:00.028");
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(893);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withPeriodAdded(readablePeriod38, (int) (short) 100);
        long long42 = chronology30.set((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 0);
        org.joda.time.DateTime dateTime43 = dateTime23.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTime dateTime44 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property45 = dateTime23.year();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.secondOfDay();
        boolean boolean20 = dateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTime.Property property23 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime25 = dateTime22.withYearOfEra(1);
        org.joda.time.DateTime dateTime27 = dateTime22.withYear(69);
        boolean boolean28 = dateTime22.isEqualNow();
        org.joda.time.DateTime dateTime30 = dateTime22.plusWeeks(0);
        org.joda.time.DateTime dateTime33 = dateTime22.withDurationAdded(212400000L, 40);
        org.joda.time.DateTime.Property property34 = dateTime33.secondOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.DateTime dateTime17 = property14.addWrapFieldToCopy(100);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(53);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime18, dateTimeZone20);
        int int22 = localDateTime21.getEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfCentury();
        int int16 = mutableDateTime2.getMinuteOfDay();
        mutableDateTime2.setSecondOfDay(51);
        mutableDateTime2.addMinutes(28);
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime2.getZone();
        mutableDateTime2.addMinutes(337);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        long long24 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone27, (long) 'a');
        long long34 = dateTimeZone27.convertLocalToUTC(1645455232454L, true, (long) 12);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str36 = dateTimeZone27.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        java.lang.String str40 = mutableDateTime39.toString();
        mutableDateTime39.setDate((long) (short) 100);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        mutableDateTime39.setZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        long long54 = dateTimeZone27.getMillisKeepLocal(dateTimeZone49, 1645455302153L);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3840125L + "'", long30 == 3840125L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645459072454L + "'", long34 == 1645459072454L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:04" + "'", str36, "-01:04");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str40, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645451462125L + "'", long54 == 1645451462125L);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField16 = julianChronology10.centuries();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1676991224530L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withDefaultYear(292272992);
        boolean boolean14 = dateTimeFormatter13.isOffsetParsed();
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(writer15, 1688396359636L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DurationField durationField12 = julianChronology10.centuries();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        long long16 = durationField13.getDifferenceAsLong(0L, (long) 19409);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) 0L);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-19L) + "'", long16 == (-19L));
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField13 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = julianChronology10.get(readablePeriod15, 1645455367309000L, 1676991424895L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime5.add(readableDuration7);
        boolean boolean9 = mutableDateTime5.isBeforeNow();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfYear();
        long long11 = property10.remainder();
        org.joda.time.Interval interval12 = property10.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        java.lang.String str16 = mutableDateTime15.toString();
        mutableDateTime15.setDate((long) (short) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone25);
        int int27 = mutableDateTime15.getYearOfCentury();
        mutableDateTime15.addWeekyears((int) 'x');
        mutableDateTime15.addDays(1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        mutableDateTime34.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        long long44 = chronology37.set((org.joda.time.ReadablePartial) localDateTime42, (long) '4');
        org.joda.time.DurationField durationField45 = chronology37.hours();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) '4');
        org.joda.time.DurationField durationField59 = chronology51.hours();
        int int60 = durationField45.compareTo(durationField59);
        long long63 = durationField45.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType64 = durationField45.getType();
        mutableDateTime15.add(durationFieldType64, 4);
        java.lang.String str67 = mutableDateTime15.toString();
        mutableDateTime15.setWeekyear(893);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        mutableDateTime72.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology75 = mutableDateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfCentury();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.minus(readablePeriod78);
        org.joda.time.DateTime dateTime81 = dateTime77.minusMillis((int) '4');
        org.joda.time.DateTime.Property property82 = dateTime77.minuteOfHour();
        long long83 = dateTime77.getMillis();
        org.joda.time.DateTime dateTime85 = dateTime77.minusMinutes(5);
        org.joda.time.DateTime dateTime87 = dateTime85.plusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.DateTime dateTime89 = dateTime87.plus(readableDuration88);
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime89.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone90);
        int int92 = mutableDateTime15.getYearOfEra();
        org.joda.time.DateTime dateTime93 = mutableDateTime15.toDateTimeISO();
        long long94 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 29L + "'", long11 == 29L);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str16, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 70 + "'", int27 == 70);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType64);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2090-01-06T04:00:00.029+00:00:00.028" + "'", str67, "2090-01-06T04:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1645455753076L + "'", long83 == 1645455753076L);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 893 + "'", int92 == 893);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 393363L + "'", long94 == 393363L);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.DateTime dateTime17 = dateTime7.plusHours(53644655);
        org.joda.time.DateTime dateTime19 = dateTime7.minusHours((int) (short) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.joda.time.DateTime.Property property22 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime19.minusMonths(54126040);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455753150L + "'", long13 == 1645455753150L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0");
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readableDuration24);
        org.joda.time.DateTime.Property property26 = dateTime25.secondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(100L);
        int int46 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.withPeriodAdded(readablePeriod49, (int) (short) 100);
        long long53 = chronology41.set((org.joda.time.ReadablePartial) localDateTime45, (long) (short) 0);
        org.joda.time.DateTime dateTime54 = dateTime34.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.plus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withWeekyear(0);
        org.joda.time.DateTime dateTime62 = dateTime56.withWeekOfWeekyear((int) '#');
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes(10);
        boolean boolean65 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.withYearOfEra(240);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str11, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.hourOfDay();
        int int20 = dateTimeField19.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13, (int) (short) 1);
        long long19 = dateTimeZone13.convertUTCToLocal((long) 2022);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology32);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology32.minuteOfDay();
        org.joda.time.DurationField durationField37 = julianChronology32.days();
        org.joda.time.DurationField durationField38 = julianChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology32.millisOfSecond();
        org.joda.time.DurationField durationField40 = julianChronology32.hours();
        org.joda.time.DateTimeZone dateTimeZone41 = julianChronology32.getZone();
        long long44 = dateTimeZone41.convertLocalToUTC((long) 22, true);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = dateTimeZone41.getShortName(1645459072454L, locale46);
        long long49 = dateTimeZone13.getMillisKeepLocal(dateTimeZone41, (long) 31);
        int int51 = dateTimeZone13.getOffsetFromLocal(1645455713609L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(julianChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2050L + "'", long19 == 2050L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-6L) + "'", long44 == (-6L));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.028" + "'", str47, "+00:00:00.028");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 31L + "'", long49 == 31L);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 28 + "'", int51 == 28);
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale.Builder builder8 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder0.removeUnicodeLocaleAttribute("1970-01-01T00:00:53.728+00:00:00.028");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-01-01T00:00:53.728+00:00:00.028 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        mutableDateTime4.setSecondOfDay(8);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        java.lang.String str10 = mutableDateTime9.toString();
        mutableDateTime9.setDate((long) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        mutableDateTime9.setZoneRetainFields(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        mutableDateTime4.setZone(dateTimeZone19);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime4.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str10, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        int int16 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusWeeks(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean29 = localDateTime24.isSupported(dateTimeFieldType28);
        long long31 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime24, 1645455386928L);
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology10.getZone();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1123200056L + "'", long31 == 1123200056L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusHours((-292269054));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime17.minuteOfHour();
        long long23 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime17.minusMinutes(5);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTime dateTime30 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime32 = dateTime27.minusWeeks(82800056);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfDay" + "'", str6, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645455753300L + "'", long23 == 1645455753300L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.monthOfYear();
        java.lang.String str22 = julianChronology10.toString();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str22, "JulianChronology[+00:00:00.028,mdfw=1]");
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyearOfCentury();
        org.joda.time.Chronology chronology16 = gJChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.weekOfWeekyear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone30);
        long long33 = chronology26.set((org.joda.time.ReadablePartial) localDateTime31, (long) '4');
        org.joda.time.DurationField durationField34 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField35 = chronology26.hourOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) localDateTime46, (long) '4');
        org.joda.time.Chronology chronology49 = chronology41.withUTC();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone59);
        long long62 = chronology55.set((org.joda.time.ReadablePartial) localDateTime60, (long) '4');
        int[] intArray64 = chronology49.get((org.joda.time.ReadablePartial) localDateTime60, 0L);
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = locale66.getDisplayName();
        java.lang.String str68 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime60, (int) '#', locale66);
        java.lang.String str69 = locale66.toLanguageTag();
        java.util.Locale.setDefault(locale66);
        java.util.Set<java.lang.Character> charSet71 = locale66.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet72 = locale66.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            long long73 = dateTimeField18.set(53819972L, "1970-01-01T00:00:00.080+00:00:00.028", locale66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.080+00:00:00.028\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str13, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u82f1\u8a9e" + "'", str67, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "35" + "'", str68, "35");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "en" + "'", str69, "en");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertNotNull(charSet72);
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis(45539L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(50257988, 661, 674, 412, 927, 82560052, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 412 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology24.millisOfDay();
        boolean boolean26 = julianChronology10.equals((java.lang.Object) julianChronology24);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology10.dayOfMonth();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField29 = julianChronology10.eras();
        java.lang.String str30 = durationField29.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(julianChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eras" + "'", str30, "eras");
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = julianChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField2 = julianChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = julianChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime2.year();
        int int23 = mutableDateTime2.getSecondOfDay();
        java.lang.String str24 = mutableDateTime2.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0035-01-01T00:00:00.029+00:00:00.028" + "'", str24, "0035-01-01T00:00:00.029+00:00:00.028");
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime5.getFields();
        int int9 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.minusSeconds(465830);
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone1.nextTransition(1645455239609L);
        boolean boolean7 = dateTimeZone1.isStandardOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645455239609L + "'", long5 == 1645455239609L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.Chronology chronology7 = chronology5.withUTC();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.minuteOfHour();
        int int12 = property11.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime12.toMutableDateTimeISO();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime20.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24, (int) (short) 1);
        long long30 = dateTimeZone24.convertUTCToLocal((long) 2022);
        long long32 = dateTimeZone24.previousTransition(1645455231587L);
        org.joda.time.DateTime dateTime33 = mutableDateTime12.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 54, dateTimeZone24);
        mutableDateTime8.setZoneRetainFields(dateTimeZone24);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfYear();
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime38.secondOfDay();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime38.era();
        int int49 = mutableDateTime38.getRoundingMode();
        int int50 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) mutableDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime38.setSecondOfDay(54041959);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54041959 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(julianChronology28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2050L + "'", long30 == 2050L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645455231587L + "'", long32 == 1645455231587L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 28 + "'", int50 == 28);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        mutableDateTime2.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfCentury();
        int int16 = mutableDateTime2.getMinuteOfDay();
        mutableDateTime2.setWeekyear(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add(53700029);
        org.joda.time.MutableDateTime mutableDateTime22 = property19.roundFloor();
        int int23 = mutableDateTime22.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = mutableDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime22.toMutableDateTimeISO();
        boolean boolean28 = mutableDateTime26.isEqual((long) 1);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        java.lang.String str16 = dateTimeField14.getAsShortText((long) 2000);
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str25 = nameProvider19.getName(locale21, "35", "52");
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale27.getDisplayVariant(locale29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology41);
        org.joda.time.DateTimeField dateTimeField43 = julianChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology41.millisOfDay();
        org.joda.time.DurationField durationField45 = julianChronology41.centuries();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology41.hourOfDay();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = dateTimeField46.getAsShortText((long) (byte) 10, locale48);
        java.lang.String str50 = locale29.getDisplayScript(locale48);
        java.lang.String str53 = nameProvider19.getShortName(locale48, "hi!", "hi!");
        java.util.Locale locale56 = new java.util.Locale("23", "2022-02-21T14:53:56.659Z");
        java.lang.String str59 = nameProvider19.getName(locale56, "2022-02-21T14:57:08.780Z", "italiano (Italia)");
        long long60 = dateTimeField14.set(1645455548992L, "8", locale56);
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.util.Locale locale64 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category62, locale64);
        java.lang.String str66 = dateTimeField14.getAsText(54066989, locale64);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str13, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals(locale56.toString(), "23_2022-02-21T14:53:56.659Z");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644332348992L + "'", long60 == 1644332348992L);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category62.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "54066989" + "'", str66, "54066989");
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        long long26 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime14, 604800099L);
        org.joda.time.DurationField durationField27 = julianChronology10.eras();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.halfdayOfDay();
        int int29 = julianChronology10.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1123200100L + "'", long26 == 1123200100L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime8.withTime(53748, 19, 1002454678, 53656101);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53748 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(54063381, 353, 50189077, 50254553, 1970, (-141918), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50254553 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str13, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.Chronology chronology7 = chronology5.withUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMillis((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime15.minuteOfHour();
        long long21 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime15.minusMinutes(5);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.Chronology chronology25 = chronology5.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455753644L + "'", long21 == 1645455753644L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        int int32 = mutableDateTime29.getMinuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        int int43 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy(4);
        org.joda.time.DateTimeField dateTimeField52 = property49.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property49.getFieldType();
        org.joda.time.DateTime.Property property54 = dateTime44.property(dateTimeFieldType53);
        java.lang.String str55 = property54.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "millisOfDay" + "'", str55, "millisOfDay");
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime24 = dateTime23.toLocalDateTime();
        org.joda.time.DateTime dateTime26 = dateTime23.plusDays((int) (short) 0);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis(1645455385014L);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.withPeriodAdded(readablePeriod29, 54106991);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991753683L + "'", long21 == 1676991753683L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        mutableDateTime3.setDate((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        long long25 = dateTimeZone13.getMillisKeepLocal(dateTimeZone21, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = mutableDateTime26.getRoundingField();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.year();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        java.lang.String str30 = mutableDateTime26.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str4, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.028+00:00:00.028" + "'", str30, "1970-01-01T00:00:00.028+00:00:00.028");
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.weekyear();
        org.joda.time.DurationField durationField17 = julianChronology10.hours();
        org.joda.time.DurationField durationField18 = julianChronology10.weeks();
        int int19 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = julianChronology10.minutes();
        int int20 = durationField18.getValue((long) 1645455055);
        java.lang.String str21 = durationField18.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27424 + "'", int20 == 27424);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minutes" + "'", str21, "minutes");
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime5.getFields();
        int int9 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(399);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfCeilingCopy();
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minus(readablePeriod8);
        java.lang.String str10 = localDateTime9.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.080" + "'", str6, "1970-01-01T00:00:00.080");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.080" + "'", str10, "1970-01-01T00:00:00.080");
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime0.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withField(dateTimeFieldType16, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.seconds();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime44.toMutableDateTime(chronology52);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = dateTime62.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(100L);
        int int67 = localDateTime66.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = property73.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime66.withFields((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.DateTime dateTime77 = dateTime62.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withField(dateTimeFieldType78, (int) (byte) 1);
        boolean boolean81 = mutableDateTime61.isSupported(dateTimeFieldType78);
        boolean boolean82 = localDateTime14.isSupported(dateTimeFieldType78);
        int int83 = localDateTime14.getYear();
        int int84 = localDateTime14.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime2.setMonthOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.year();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int23 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DurationField durationField24 = property13.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime26 = property13.set((-16395695));
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.secondOfMinute();
        mutableDateTime26.add(0L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = dateTime9.toLocalDateTime();
        int int17 = localDateTime16.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plus(readableDuration18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMaximumValue();
        int int22 = property20.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime24 = property20.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDurationAdded(readableDuration16, 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfCeilingCopy();
        java.lang.String str6 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property3.setCopy(53);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfFloorCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.secondOfDay();
        java.util.Locale locale24 = new java.util.Locale("IT");
        int int25 = property22.getMaximumShortTextLength(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale26.getDisplayVariant(locale28);
        java.lang.String str31 = locale24.getDisplayName(locale28);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.util.Locale locale36 = new java.util.Locale("1923-02-21T14:57:15.483Z", "Chinese (Taiwan)", "2022-02-21T14:54:56.323Z");
        java.lang.String str37 = locale32.getDisplayName(locale36);
        java.lang.String str38 = locale28.getDisplayLanguage(locale32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = property3.setCopy("monthOfYear", locale32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "80" + "'", str6, "80");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "italiano" + "'", str31, "italiano");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale36.toString(), "1923-02-21t14:57:15.483z_CHINESE (TAIWAN)_2022-02-21T14:54:56.323Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English (United Kingdom)" + "'", str37, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Italian" + "'", str38, "Italian");
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 54, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.secondOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfMonth((int) (short) 1);
        java.util.Date date16 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMinutes((int) ' ');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str26 = dateTimeFieldType25.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology38);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property45.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plus(readablePeriod48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.DateTime dateTime58 = localDateTime49.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        long long60 = julianChronology38.set((org.joda.time.ReadablePartial) localDateTime49, 0L);
        org.joda.time.DurationField durationField61 = julianChronology38.years();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType27.getField((org.joda.time.Chronology) julianChronology38);
        org.joda.time.DurationField durationField63 = julianChronology38.centuries();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology38);
        int int65 = localDateTime20.get(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType25.getRangeDurationType();
        boolean boolean67 = localDateTime18.isSupported(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfHour" + "'", str26, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1123200056L + "'", long60 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime5.add(readableDuration7);
        boolean boolean9 = mutableDateTime5.isBeforeNow();
        int int10 = mutableDateTime5.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime5.add(readablePeriod11, 661);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey(100L);
        long long24 = dateTimeZone20.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.Instant instant26 = gJChronology25.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone27 = instant26.getZone();
        java.util.Date date28 = instant26.toDate();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromDateFields(date28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime32.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readableDuration42);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = localDateTime43.getFields();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusHours(1969);
        int int47 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusSeconds(0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.secondOfMinute();
        int int55 = property54.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime56 = property54.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy(4);
        org.joda.time.DateTimeField dateTimeField63 = property60.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property60.getFieldType();
        boolean boolean65 = localDateTime56.isSupported(dateTimeFieldType64);
        boolean boolean66 = localDateTime43.isSupported(dateTimeFieldType64);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime5.property(dateTimeFieldType64);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Fri Oct 15 00:00:00 GMT+00:00 1582");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(julianChronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("English");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("Thu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setRegion("JulianChronology[+00:00:00.028,mdfw=1]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: JulianChronology[+00:00:00.028,mdfw=1] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        long long11 = dateTimeZone7.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Instant instant13 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField15 = gJChronology12.centuries();
        org.joda.time.DurationField durationField16 = gJChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology12.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(1645455348364L, dateTimeZone19);
        mutableDateTime21.setMillis(1645455249225L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(100L);
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39);
        org.joda.time.DateTime dateTime42 = dateTime37.plusYears(1);
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int47 = localDateTime20.getYearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        mutableDateTime64.setZone(dateTimeZone65);
        org.joda.time.Chronology chronology67 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        long long74 = chronology67.set((org.joda.time.ReadablePartial) localDateTime72, (long) '4');
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime20, intArray76);
        org.joda.time.DateTimeField dateTimeField78 = julianChronology10.year();
        org.joda.time.DurationField durationField79 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology10.hourOfHalfday();
        long long84 = dateTimeField82.roundHalfCeiling(1676991455375L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1676991599972L + "'", long84 == 1676991599972L);
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, 1969);
        int int21 = dateTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean25 = dateTime17.equals((java.lang.Object) timeZone24);
        java.util.TimeZone.setDefault(timeZone24);
        java.util.TimeZone.setDefault(timeZone24);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 137 + "'", int21 == 137);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone10);
        long long13 = chronology6.set((org.joda.time.ReadablePartial) localDateTime11, (long) '4');
        org.joda.time.DurationField durationField14 = chronology6.hours();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 53, chronology6);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = julianChronology26.getZone();
        org.joda.time.Chronology chronology41 = chronology6.withZone(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime43.copy();
        org.joda.time.Chronology chronology45 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        java.lang.String str48 = dateTimeField46.getAsText(50186067L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "70" + "'", str48, "70");
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology11.add(readablePeriod15, (long) (short) 1, 8);
        org.joda.time.DurationField durationField19 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology11.getZone();
        boolean boolean22 = dateTimeZone21.isFixed();
        long long24 = dateTimeZone21.previousTransition(1645455320396L);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(1645455590524L, dateTimeZone21);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.secondOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455320396L + "'", long24 == 1645455320396L);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology19 = gJChronology0.withZone(dateTimeZone16);
        java.lang.String str20 = gJChronology0.toString();
        org.joda.time.DurationField durationField21 = gJChronology0.days();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology0.year();
        org.joda.time.Chronology chronology24 = gJChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gJChronology0.add(readablePeriod25, (long) 100, 90);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology0.clockhourOfDay();
        long long31 = dateTimeField29.roundHalfCeiling(3600049L);
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str20, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3599972L + "'", long31 == 3599972L);
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.minuteOfHour();
        int int20 = dateTimeField19.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.plusWeeks(12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str26 = dateTimeFieldType25.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology38);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property45.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plus(readablePeriod48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.DateTime dateTime58 = localDateTime49.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        long long60 = julianChronology38.set((org.joda.time.ReadablePartial) localDateTime49, 0L);
        org.joda.time.DurationField durationField61 = julianChronology38.years();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType27.getField((org.joda.time.Chronology) julianChronology38);
        org.joda.time.DurationField durationField63 = julianChronology38.centuries();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType25.getField((org.joda.time.Chronology) julianChronology38);
        int int65 = localDateTime20.get(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime20.withCenturyOfEra((int) 'a');
        boolean boolean68 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withHourOfDay((-536933));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -536933 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 902 + "'", int13 == 902);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str15, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfHour" + "'", str26, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1123200056L + "'", long60 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.plusWeeks(12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours(168);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusHours(53913);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readableDuration23);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 902 + "'", int13 == 902);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str15, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 54, dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField12 = julianChronology11.millis();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(1970);
        long long23 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime19, 1676991326139L);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology11.weekyear();
        java.lang.String str27 = julianChronology11.toString();
        org.joda.time.DurationField durationField28 = julianChronology11.years();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1728000100L + "'", long23 == 1728000100L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JulianChronology[+00:00:00.028]" + "'", str27, "JulianChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("gennaio", strMap1);
        java.lang.String[] strArray12 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        int int15 = strSet13.size();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet13.stream();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setRegion("IT");
        java.util.Locale locale21 = new java.util.Locale("fr");
        java.util.Locale.Builder builder22 = builder17.setLocale(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        strSet23.clear();
        boolean boolean25 = strSet13.containsAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.stream.Stream<java.lang.String> strStream26 = strSet13.parallelStream();
        java.lang.String str27 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList45, filteringMode46);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList45, filteringMode48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strMap50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strMap52);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, localeCollection54);
        java.util.Locale locale56 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList58, strMap59);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode46.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale11 = new java.util.Locale("fr");
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale3, locale5, locale7, locale8, locale11, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getCountry();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale29 = new java.util.Locale("fr");
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale21, locale23, locale25, locale26, locale29, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList33, filteringMode36);
        java.lang.String[] strArray40 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49, (int) (short) 1);
        org.joda.time.DurationField durationField54 = julianChronology53.weeks();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology53.weekOfWeekyear();
        org.joda.time.Chronology chronology56 = julianChronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology53.weekOfWeekyear();
        boolean boolean58 = strSet41.contains((java.lang.Object) julianChronology53);
        boolean boolean60 = strSet41.add("eng");
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getDisplayScript();
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleKeys();
        boolean boolean64 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet63);
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.lang.String str66 = locale65.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator68 = strSet67.spliterator();
        boolean boolean69 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet67);
        int int70 = strSet41.size();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder71.setRegion("IT");
        java.util.Locale locale75 = new java.util.Locale("fr");
        java.util.Locale.Builder builder76 = builder71.setLocale(locale75);
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray78 = strSet77.toArray();
        boolean boolean79 = strSet41.removeAll((java.util.Collection<java.lang.String>) strSet77);
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet41.spliterator();
        java.lang.String str81 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet41);
        boolean boolean82 = strSet41.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "IT" + "'", str4, "IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "IT" + "'", str22, "IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode36.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(julianChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        long long24 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone27, (long) 'a');
        long long32 = dateTimeZone12.nextTransition(5907461414400000000L);
        java.lang.String str33 = dateTimeZone12.getID();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3840125L + "'", long30 == 3840125L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 5907461414400000000L + "'", long32 == 5907461414400000000L);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.028" + "'", str33, "+00:00:00.028");
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = julianChronology10.getZone();
        java.lang.String str22 = dateTimeZone20.getName(0L);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        int int25 = dateTimeZone20.getStandardOffset((-364L));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime28.era();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime28.minusSeconds(49);
        boolean boolean39 = localDateTime37.equals((java.lang.Object) 13046400000L);
        int int40 = localDateTime37.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean44 = dateTimeZone20.isLocalDateTimeGap(localDateTime42);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.028" + "'", str22, "+00:00:00.028");
        org.junit.Assert.assertNotNull(gJChronology23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 28 + "'", int25 == 28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        int int3 = localDateTime2.getMonthOfYear();
        int int4 = localDateTime2.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property19 = dateTime14.hourOfDay();
        int int20 = dateTime14.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = dateTime14.toLocalDateTime();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        int int23 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfCentury();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime32 = dateTime30.minusHours(86399999);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readablePeriod39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        int int48 = mutableDateTime45.getMinuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readablePeriod57);
        int int59 = mutableDateTime45.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime60.toMutableDateTime();
        org.joda.time.DateTime dateTime63 = dateTime60.withCenturyOfEra((int) 'u');
        org.joda.time.DateTime dateTime65 = dateTime60.withMillisOfDay(12);
        boolean boolean66 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean67 = localDateTime21.equals((java.lang.Object) dateTime60);
        org.joda.time.DateTime dateTime68 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime70 = dateTime60.minusHours((-19044));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 80 + "'", int4 == 80);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plus((-61062681599999L));
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        java.lang.String str20 = property19.getAsString();
        java.lang.String str21 = property19.toString();
        java.lang.String str22 = property19.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "21" + "'", str20, "21");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[dayOfMonth]" + "'", str21, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[dayOfMonth]" + "'", str22, "Property[dayOfMonth]");
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField12 = gJChronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.yearOfCentury();
        org.joda.time.DurationField durationField19 = gJChronology11.seconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 10);
        java.lang.String str30 = dateTimeZone26.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        java.lang.String str33 = dateTimeZone26.getName((long) 2052);
        int int35 = dateTimeZone26.getOffset(1676991394223L);
        org.joda.time.Chronology chronology36 = gJChronology11.withZone(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.028" + "'", str30, "+00:00:00.028");
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.028" + "'", str33, "+00:00:00.028");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 28 + "'", int35 == 28);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        long long28 = dateTimeZone24.convertLocalToUTC((long) '#', false, 1676991293413L);
        boolean boolean30 = dateTimeZone24.isStandardOffset(1676991362745L);
        java.lang.String str31 = dateTimeZone24.toString();
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.028" + "'", str31, "+00:00:00.028");
        org.junit.Assert.assertNotNull(julianChronology32);
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        int int5 = mutableDateTime2.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.year();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(100L);
        int int26 = localDateTime25.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        int int35 = mutableDateTime32.getMinuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        int int46 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.plus(readablePeriod47);
        org.joda.time.DateTime dateTime50 = dateTime45.plusYears(1);
        org.joda.time.DateTime dateTime53 = dateTime45.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime54 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime55 = dateTime20.withFields((org.joda.time.ReadablePartial) localDateTime28);
        int int56 = localDateTime28.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime28.withDayOfYear(49);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime28.plusHours(53700);
        int int61 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime28.withPeriodAdded(readablePeriod62, 82800100);
        int[] intArray65 = localDateTime28.getValues();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 128 + "'", int56 == 128);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 8, 128]");
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        int int3 = property2.getLeapAmount();
        org.joda.time.DateTime dateTime4 = property2.roundCeilingCopy();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        long long19 = julianChronology10.add(1645455239306L, (long) 4, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DurationField durationField36 = julianChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.halfdayOfDay();
        boolean boolean38 = dateTimeZone22.equals((java.lang.Object) julianChronology35);
        org.joda.time.Chronology chronology39 = julianChronology10.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone41 = julianChronology10.getZone();
        org.joda.time.DurationField durationField42 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology10.millisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455239306L + "'", long19 == 1645455239306L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis(187200000L);
        org.joda.time.Instant instant5 = instant2.withDurationAdded(1645455311744L, 2052);
        org.joda.time.Instant instant8 = instant2.withDurationAdded(1645455616449L, 353);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) ' ');
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant1.withMillis(187200000L);
        org.joda.time.Instant instant6 = instant3.withDurationAdded(1645455311744L, 2052);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant3);
        int int8 = gJChronology7.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str13 = dateTimeZone11.getShortName((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 3, dateTimeZone11);
        int int16 = dateTimeZone11.getStandardOffset(1645488000000L);
        org.joda.time.Chronology chronology17 = gJChronology7.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology7.millisOfSecond();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        java.lang.String str12 = mutableDateTime10.toString();
        java.lang.Object obj13 = mutableDateTime10.clone();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.secondOfMinute();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.dayOfWeek();
        java.lang.String str16 = mutableDateTime10.toString();
        mutableDateTime10.addYears(365);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.080+00:00:00.028" + "'", str12, "1970-01-01T00:00:00.080+00:00:00.028");
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.080+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.080+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.080+00:00:00.028");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.080+00:00:00.028" + "'", str16, "1970-01-01T00:00:00.080+00:00:00.028");
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime8.withSecondOfMinute(52);
        org.joda.time.DateTime.Property property13 = dateTime8.secondOfMinute();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) julianChronology10);
        mutableDateTime15.setDate(1868L);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime15.add(readablePeriod18);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getOffset(3233600L);
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withPeriodAdded(readablePeriod5, (int) (short) 100);
        int int8 = localDateTime1.getYearOfCentury();
        int int9 = localDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology10 = localDateTime1.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology22.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey(100L);
        org.joda.time.Chronology chronology33 = julianChronology22.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology22.yearOfCentury();
        org.joda.time.DurationField durationField35 = julianChronology22.halfdays();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 53656101, (org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField37 = julianChronology22.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.secondOfMinute();
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusDays((int) ' ');
        boolean boolean50 = localDateTime39.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        int int51 = localDateTime39.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime39.withYearOfEra(7);
        int int54 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDateTime53);
        int[] intArray55 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            chronology10.validate((org.joda.time.ReadablePartial) localDateTime53, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.clockhourOfDay();
        long long18 = julianChronology10.add((long) 2922789, (long) 0, (int) (byte) 0);
        org.joda.time.DurationField durationField19 = julianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology10.getZone();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2922789L + "'", long18 == 2922789L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) localDateTime38, (long) '4');
        org.joda.time.DurationField durationField41 = chronology33.seconds();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime25.toMutableDateTime(chronology33);
        org.joda.time.DateTime dateTime44 = dateTime25.plusMinutes(53660571);
        org.joda.time.DateTime dateTime46 = dateTime25.withWeekyear(1959);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((int) ' ');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.dayOfYear();
        boolean boolean18 = dateTimeField17.isSupported();
        int int19 = dateTimeField17.getMaximumValue();
        boolean boolean20 = localDateTime5.equals((java.lang.Object) dateTimeField17);
        boolean boolean21 = dateTimeField17.isLenient();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 366 + "'", int19 == 366);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology11 = dateTimeFormatter8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter8.withDefaultYear((-2772));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter8.withPivotYear((int) (byte) -1);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("IT");
        java.util.Locale.setDefault(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter8.withLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTimeFormatter19.parseDateTime("1969-12-31T23:00:00.052-01:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DurationField durationField16 = julianChronology11.days();
        org.joda.time.DurationField durationField17 = julianChronology11.seconds();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DurationField durationField19 = julianChronology11.days();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) (-3840000L), (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology11.getZone();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(100L);
        int int47 = localDateTime46.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.withPeriodAdded(readablePeriod50, (int) (short) 100);
        long long54 = chronology42.set((org.joda.time.ReadablePartial) localDateTime46, (long) (short) 0);
        org.joda.time.DateTime dateTime55 = dateTime35.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) (byte) 100);
        int int58 = property26.getDifference((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property26.getFieldType();
        int int60 = dateTime22.get(dateTimeFieldType59);
        int int61 = dateTime22.getMillisOfDay();
        org.joda.time.Instant instant62 = dateTime22.toInstant();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3043 + "'", int58 == 3043);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 54154820 + "'", int61 == 54154820);
        org.junit.Assert.assertNotNull(instant62);
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.lang.String str6 = nameProvider0.getName(locale2, "35", "52");
        java.util.Locale locale7 = null;
        java.lang.String str10 = nameProvider0.getShortName(locale7, "2022-02-21T14:54:29.555Z", "2022-02-21T14:54:56.528Z");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        java.lang.String str22 = dateTimeZone18.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1645455306), dateTimeZone18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.secondOfMinute();
        int int31 = property30.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundCeilingCopy();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale33);
        java.lang.String str37 = property30.getAsText(locale33);
        java.lang.String str38 = dateTimeZone18.getShortName(1676991401413L, locale33);
        java.util.Locale locale39 = locale33.stripExtensions();
        java.lang.String str42 = nameProvider0.getShortName(locale39, "dayOfMonth", "1494");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime46.getZone();
        java.lang.String str52 = dateTimeZone50.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone50, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology54);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology54.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology54.minuteOfDay();
        org.joda.time.DurationField durationField59 = julianChronology54.days();
        org.joda.time.DurationField durationField60 = julianChronology54.seconds();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology54.millisOfSecond();
        org.joda.time.DurationField durationField62 = julianChronology54.hours();
        org.joda.time.DateTimeZone dateTimeZone63 = julianChronology54.getZone();
        long long66 = dateTimeZone63.convertLocalToUTC((long) 22, true);
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = dateTimeZone63.getShortName(1645459072454L, locale68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.lang.String str76 = locale74.getExtension('a');
        int int77 = property73.getMaximumShortTextLength(locale74);
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        java.lang.String str80 = locale74.getDisplayCountry(locale78);
        java.lang.String str81 = locale68.getDisplayScript(locale78);
        java.lang.String str82 = locale78.getScript();
        java.lang.String str85 = nameProvider0.getShortName(locale78, "2022-02-28T14:59:29.578", "DurationField[halfdays]");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.028" + "'", str22, "+00:00:00.028");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "34" + "'", str37, "34");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.028" + "'", str38, "+00:00:00.028");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(julianChronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-6L) + "'", long66 == (-6L));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.028" + "'", str69, "+00:00:00.028");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey(100L);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 54, dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField31 = julianChronology30.millis();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(100L);
        int int34 = localDateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYear(1970);
        long long42 = julianChronology30.set((org.joda.time.ReadablePartial) localDateTime38, 1676991326139L);
        org.joda.time.DateTimeField dateTimeField43 = julianChronology30.weekyear();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology30.dayOfMonth();
        boolean boolean45 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) julianChronology30);
        int int46 = localDateTime9.get(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime9.plus(readablePeriod47);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 902 + "'", int13 == 902);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str15, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(julianChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1728000100L + "'", long42 == 1728000100L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.weekyear();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology10.getZone();
        org.joda.time.DurationField durationField16 = julianChronology10.years();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.weekyearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.lang.String str6 = property3.getAsString();
        boolean boolean7 = property3.isLeap();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.hourOfHalfday();
        long long23 = julianChronology11.add(0L, 0L, 39);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.withSecondOfMinute(1);
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(893);
        org.joda.time.DateTime.Property property9 = dateTime4.hourOfDay();
        int int10 = dateTime4.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime4.withDayOfYear(53845);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53845 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DurationFieldType durationFieldType14 = durationField13.getType();
        long long17 = durationField13.getMillis((long) 50305612, 1645268033775L);
        long long19 = durationField13.getValueAsLong(8785637756873L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3018336720000L + "'", long17 == 3018336720000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 146427295L + "'", long19 == 146427295L);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal((-1L));
        long long8 = dateTimeZone2.convertLocalToUTC((long) 5, true, 604800000L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645455662919L, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3600001L) + "'", long4 == (-3600001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3600005L + "'", long8 == 3600005L);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.plusSeconds(2022);
        org.joda.time.DateTime.Property property9 = dateTime6.year();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        java.lang.String str11 = property9.getName();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "year" + "'", str11, "year");
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getOffset(3233600L);
        timeZone0.setID("Wed");
        java.util.TimeZone timeZone6 = null;
        boolean boolean7 = timeZone0.hasSameRules(timeZone6);
        java.lang.Object obj8 = timeZone0.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: sun.util.calendar.ZoneInfo");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "sun.util.calendar.ZoneInfo[id=\"Wed\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "sun.util.calendar.ZoneInfo[id=\"Wed\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "sun.util.calendar.ZoneInfo[id=\"Wed\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZone(dateTimeZone4);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2720, 97, 245, (-52), 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.DateTime dateTime17 = dateTime7.plusHours(53644655);
        org.joda.time.DateTime dateTime19 = dateTime7.minusHours((int) (short) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfDay();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime23 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime19.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = property24.addToCopy(50268728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 731907526 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455754993L + "'", long13 == 1645455754993L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(23);
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfMonth();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("eng");
        java.util.Set<java.lang.String> strSet8 = provider5.getAvailableIDs();
        java.util.Set<java.lang.String> strSet9 = provider5.getAvailableIDs();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream13 = strSet12.parallelStream();
        boolean boolean14 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str16 = dateTimeFieldType15.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) localDateTime27, (long) '4');
        org.joda.time.Chronology chronology30 = chronology22.withUTC();
        boolean boolean31 = dateTimeFieldType15.isSupported(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology43.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plus(readablePeriod53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTime dateTime63 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        long long65 = julianChronology43.set((org.joda.time.ReadablePartial) localDateTime54, 0L);
        org.joda.time.DurationField durationField66 = julianChronology43.years();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType32.getField((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeField dateTimeField68 = julianChronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(100L);
        int int72 = localDateTime71.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minus(readablePeriod75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.minusMillis(10);
        long long81 = julianChronology43.set((org.joda.time.ReadablePartial) localDateTime79, 194766213283544L);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType15.getField((org.joda.time.Chronology) julianChronology43);
        boolean boolean83 = strSet9.equals((java.lang.Object) dateTimeFieldType15);
        int int84 = dateTime1.get(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType15.getDurationType();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType15.getDurationType();
        java.lang.String str87 = dateTimeFieldType15.getName();
        java.lang.String str88 = dateTimeFieldType15.getName();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfCentury" + "'", str16, "yearOfCentury");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1123200056L + "'", long65 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1728000090L + "'", long81 == 1728000090L);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 22 + "'", int84 == 22);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "yearOfCentury" + "'", str87, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "yearOfCentury" + "'", str88, "yearOfCentury");
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField2 = julianChronology0.years();
        org.joda.time.DurationField durationField3 = julianChronology0.weeks();
        boolean boolean4 = durationField3.isPrecise();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withHourOfDay(5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfWeek();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy(84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = property11.setCopy("\u5354\u5b9a\u4e16\u754c\u6642 (MILLISOFDAY,-0001-01-01T00:00:00.056)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"????? (MILLISOFDAY,-0001-01-01T00:00:00.056)\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1969-11-30T00:00:00.056Z");
        timeZone1.setRawOffset(97);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(gJChronology5);
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.size();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMonths(893);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusDays(86399999);
        int int7 = localDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        int int13 = mutableDateTime10.getMinuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        int int24 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.plus(readablePeriod25);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime29.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.era();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = julianChronology26.getZone();
        org.joda.time.Chronology chronology41 = julianChronology10.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology10.hourOfHalfday();
        java.lang.String str43 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology10.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str43, "JulianChronology[+00:00:00.028,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime2.toMutableDateTimeISO();
        mutableDateTime7.setTime((long) 53816493);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) ' ');
        org.joda.time.DateTime dateTime25 = dateTime21.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(23);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded(readableDuration28, 1969);
        int int31 = dateTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean35 = dateTime27.equals((java.lang.Object) timeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        mutableDateTime7.setZoneRetainFields(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 186 + "'", int31 == 186);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfYear();
        int int16 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = julianChronology10.getZone();
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = julianChronology18.weeks();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        java.lang.String str23 = mutableDateTime22.toString();
        mutableDateTime22.setDate((long) (short) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime28.getZone();
        mutableDateTime22.setZoneRetainFields(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        long long44 = dateTimeZone32.getMillisKeepLocal(dateTimeZone40, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        long long50 = dateTimeZone32.getMillisKeepLocal(dateTimeZone47, (long) 'a');
        org.joda.time.Chronology chronology51 = julianChronology18.withZone(dateTimeZone47);
        org.joda.time.Chronology chronology52 = julianChronology18.withUTC();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str23, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3840125L + "'", long50 == 3840125L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        mutableDateTime8.setTime((-1645455548807L));
        int int12 = mutableDateTime8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        java.lang.String str6 = property3.getName();
        int int7 = property3.getMaximumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfDay" + "'", str6, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-16395695));
        java.lang.String str2 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-04:33:15.695" + "'", str2, "-04:33:15.695");
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField13 = gJChronology11.hours();
        org.joda.time.DurationField durationField14 = gJChronology11.seconds();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        int int18 = durationField15.getDifference((long) 679, (-27424256L));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfDay();
        org.joda.time.Chronology chronology16 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.centuries();
        long long22 = durationField19.getValueAsLong((long) (-1), (long) 53700029);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology11.weekyear();
        org.joda.time.DurationField durationField27 = julianChronology11.minutes();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(3600026L, (org.joda.time.Chronology) julianChronology11);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        java.lang.String[] strArray9 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        int int12 = strSet10.size();
        java.util.stream.Stream<java.lang.String> strStream13 = strSet10.stream();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setRegion("IT");
        java.util.Locale locale18 = new java.util.Locale("fr");
        java.util.Locale.Builder builder19 = builder14.setLocale(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        strSet20.clear();
        boolean boolean22 = strSet10.containsAll((java.util.Collection<java.lang.String>) strSet20);
        org.joda.time.base.BasePartial[] basePartialArray23 = new org.joda.time.base.BasePartial[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.base.BasePartial[] basePartialArray24 = strSet10.toArray(basePartialArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(basePartialArray23);
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder0.clearExtensions();
        java.util.Locale.Builder builder22 = builder0.clearExtensions();
        java.util.Locale.Builder builder23 = builder0.clear();
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder23.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.removeUnicodeLocaleAttribute("\u5927\u97d3\u6c11\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        long long12 = dateTimeZone6.convertUTCToLocal((long) 2022);
        long long14 = dateTimeZone6.previousTransition(1645455231587L);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (byte) 1);
        org.joda.time.Chronology chronology17 = julianChronology16.withUTC();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2050L + "'", long12 == 2050L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455231587L + "'", long14 == 1645455231587L);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.Chronology chronology15 = gJChronology11.withUTC();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        java.lang.String str19 = mutableDateTime18.toString();
        mutableDateTime18.setDate((long) (short) 100);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        int int36 = mutableDateTime33.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.monthOfYear();
        mutableDateTime33.addMonths(53641391);
        int int40 = mutableDateTime30.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime33.copy();
        org.joda.time.DateTime dateTime42 = mutableDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey(100L);
        long long54 = dateTimeZone49.adjustOffset(22L, false);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime41.toMutableDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology56 = gJChronology11.withZone(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str13, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str19, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 22L + "'", long54 == 22L);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.add((long) 52);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = localDateTime37.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        long long48 = julianChronology26.set((org.joda.time.ReadablePartial) localDateTime37, 0L);
        org.joda.time.DurationField durationField49 = julianChronology26.years();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType15.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DurationField durationField51 = julianChronology26.centuries();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType13.getField((org.joda.time.Chronology) julianChronology26);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology26.monthOfYear();
        mutableDateTime8.setChronology((org.joda.time.Chronology) julianChronology26);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime8.copy();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1123200056L + "'", long48 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("97");
        int int2 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        java.lang.String str5 = timeZone3.getID();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("97");
        boolean boolean8 = timeZone3.hasSameRules(timeZone7);
        timeZone7.setID("-0001-01-01T00:00:00.056");
        timeZone7.setID("Giappone");
        boolean boolean13 = timeZone1.hasSameRules(timeZone7);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone14.observesDaylightTime();
        java.lang.String str16 = timeZone14.getID();
        int int18 = timeZone14.getOffset(1645455281008L);
        java.util.TimeZone.setDefault(timeZone14);
        boolean boolean20 = timeZone1.hasSameRules(timeZone14);
        java.lang.Object obj21 = timeZone14.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GMT" + "'", str16, "GMT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) localDateTime38, (long) '4');
        org.joda.time.DurationField durationField41 = chronology33.seconds();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime25.toMutableDateTime(chronology33);
        int int43 = dateTime25.getWeekOfWeekyear();
        java.util.Date date44 = dateTime25.toDate();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.fromDateFields(date44);
        int int46 = localDateTime45.getCenturyOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        int int52 = mutableDateTime49.getMinuteOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.minus(readablePeriod61);
        int int63 = mutableDateTime49.compareTo((org.joda.time.ReadableInstant) dateTime62);
        mutableDateTime49.setYear((int) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime49.add(readableDuration66);
        org.joda.time.DateTime dateTime68 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(100L);
        int int74 = localDateTime73.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.minusMillis((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minus(readablePeriod80);
        int int82 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Mon Feb 21 15:02:35 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfDay(50257988);
        org.joda.time.DateTime dateTime55 = dateTime50.plusSeconds(225);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfSecond();
        org.joda.time.Chronology chronology15 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfDay();
        int int17 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime26.withSecondOfMinute(52);
        int int31 = dateTime26.getMillisOfSecond();
        org.joda.time.DateTime.Property property32 = dateTime26.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime26);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusDays(0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime39.setZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(100L);
        int int56 = localDateTime55.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZone(dateTimeZone63);
        int int65 = mutableDateTime62.getMinuteOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.minus(readablePeriod74);
        int int76 = mutableDateTime62.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.plus(readablePeriod77);
        org.joda.time.DateTime dateTime80 = dateTime75.plusYears(1);
        org.joda.time.DateTime dateTime83 = dateTime75.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime84 = localDateTime58.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime85 = dateTime50.withFields((org.joda.time.ReadablePartial) localDateTime58);
        int int86 = localDateTime58.getMillisOfDay();
        org.joda.time.Chronology chronology87 = localDateTime58.getChronology();
        int[] intArray88 = localDateTime58.getValues();
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime36, intArray88);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime36.withMillisOfSecond(20);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 626 + "'", int31 == 626);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 128 + "'", int86 == 128);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(intArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 8, 128]");
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfCeiling();
        java.lang.String str13 = mutableDateTime12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime23.withCenturyOfEra(53);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.Chronology chronology49 = chronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) '4', chronology47);
        mutableDateTime51.setHourOfDay(0);
        boolean boolean54 = dateTime40.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        boolean boolean55 = dateTime29.isBefore((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addDays(3043);
        boolean boolean58 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        mutableDateTime61.setZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime61.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey(100L);
        long long69 = dateTimeZone65.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.weekyear();
        java.lang.String str72 = gJChronology70.toString();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology70.clockhourOfDay();
        org.joda.time.DurationField durationField75 = gJChronology70.weekyears();
        mutableDateTime51.setChronology((org.joda.time.Chronology) gJChronology70);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.028" + "'", str13, "1970-01-01T00:00:00.000+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(gJChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str72, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(54072832);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillis((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(100L);
        int int53 = localDateTime52.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withYear(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.property(dateTimeFieldType60);
        org.joda.time.DateTime.Property property62 = dateTime50.property(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType60.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType60.getDurationType();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        mutableDateTime68.setZone(dateTimeZone69);
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = mutableDateTime68.getZone();
        java.lang.String str74 = dateTimeZone72.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology76 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone72, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField77 = julianChronology76.dayOfYear();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        mutableDateTime80.setZone(dateTimeZone81);
        org.joda.time.Chronology chronology83 = mutableDateTime80.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = mutableDateTime80.getZone();
        java.lang.String str86 = dateTimeZone84.getNameKey(100L);
        org.joda.time.Chronology chronology87 = julianChronology76.withZone(dateTimeZone84);
        org.joda.time.DateTimeField dateTimeField88 = julianChronology76.yearOfCentury();
        org.joda.time.DurationField durationField89 = julianChronology76.halfdays();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) 53656101, (org.joda.time.Chronology) julianChronology76);
        org.joda.time.DurationField durationField91 = julianChronology76.minutes();
        org.joda.time.DurationField durationField92 = julianChronology76.millis();
        org.joda.time.DateTimeField dateTimeField93 = julianChronology76.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField94 = dateTimeFieldType60.getField((org.joda.time.Chronology) julianChronology76);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(julianChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
// flaky:         org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        long long33 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime22, 0L);
        org.joda.time.DurationField durationField34 = julianChronology11.years();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField36 = julianChronology11.hours();
        org.joda.time.DurationField durationField37 = julianChronology11.millis();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology11.secondOfMinute();
        org.joda.time.DurationField durationField40 = julianChronology11.weeks();
        org.joda.time.DurationField durationField41 = julianChronology11.millis();
        org.joda.time.Chronology chronology42 = julianChronology11.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1123200056L + "'", long33 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getOffset(3233600L);
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean5 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("giappone");
        timeZone7.setID("4472085-12-01T00:00:00.000Z");
        boolean boolean10 = timeZone7.observesDaylightTime();
        timeZone7.setID("2022-02-21T14:55:47.465Z");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        int int15 = timeZone13.getOffset((long) 59);
        int int17 = timeZone13.getOffset(56000L);
        boolean boolean18 = timeZone13.observesDaylightTime();
        boolean boolean19 = timeZone7.hasSameRules(timeZone13);
        boolean boolean20 = timeZone0.hasSameRules(timeZone7);
        boolean boolean21 = timeZone7.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone22.observesDaylightTime();
        java.lang.String str24 = timeZone22.getID();
        int int26 = timeZone22.getOffset((long) (short) 1);
        boolean boolean27 = timeZone7.hasSameRules(timeZone22);
        timeZone7.setRawOffset(568);
        java.lang.Object obj30 = timeZone7.clone();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT" + "'", str24, "GMT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:55:47.465Z\",offset=568,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:55:47.465Z\",offset=568,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:55:47.465Z\",offset=568,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int15 = localDateTime13.indexOf(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusHours(505);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.dayOfWeek();
        org.joda.time.DurationField durationField20 = property19.getDurationField();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.halfdayOfDay();
        org.joda.time.DurationField durationField14 = julianChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.centuryOfEra();
        org.joda.time.DurationField durationField17 = julianChronology11.hours();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-61062681599999L), (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.era();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.minus(readablePeriod22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.Chronology chronology37 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfDay();
        mutableDateTime26.setRounding(dateTimeField38);
        mutableDateTime26.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime26.add(readableDuration42, 894);
        boolean boolean45 = dateTime23.isBefore((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime26.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime26.setWeekOfWeekyear(987);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 987 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property16 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.joda.time.DateTime dateTime18 = property16.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 23);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.halfdayOfDay();
        boolean boolean18 = dateTimeZone2.equals((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekyear();
        java.lang.String str20 = julianChronology15.toString();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology15.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = julianChronology15.getDateTimeMillis(1676991529490L, 839, 495, 53816493, 82800052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 839 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str20, "JulianChronology[+00:00:00.028,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        long long11 = dateTimeZone7.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Instant instant13 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(3941687631L, dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        java.util.Locale locale2 = new java.util.Locale("-3600000", "2022-02-21T13:57:24.785-01:04");
        org.junit.Assert.assertEquals(locale2.toString(), "-3600000_2022-02-21T13:57:24.785-01:04");
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfDay();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeField16.getAsText(53780, locale18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.clockhourOfHalfday();
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str40 = dateTimeField34.getAsShortText((int) 'a', locale39);
        java.lang.String str41 = dateTimeField16.getAsShortText(142, locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = locale39.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "53780" + "'", str19, "53780");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "97" + "'", str40, "97");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "142" + "'", str41, "142");
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.setScript("year");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale10 = builder8.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr__#Year");
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645455744833L);
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        mutableDateTime2.add((long) (byte) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        java.lang.String str24 = mutableDateTime23.toString();
        mutableDateTime23.setDate((long) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        int int35 = mutableDateTime23.getYearOfCentury();
        mutableDateTime23.addWeekyears((int) 'x');
        mutableDateTime23.addDays(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) '4');
        org.joda.time.DurationField durationField53 = chronology45.hours();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone63);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) localDateTime64, (long) '4');
        org.joda.time.DurationField durationField67 = chronology59.hours();
        int int68 = durationField53.compareTo(durationField67);
        long long71 = durationField53.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType72 = durationField53.getType();
        mutableDateTime23.add(durationFieldType72, 4);
        mutableDateTime2.add(durationFieldType72, 4);
        long long77 = mutableDateTime2.getMillis();
        int int78 = mutableDateTime2.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfMonth(120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str24, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 3787358400001L + "'", long77 == 3787358400001L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        int int16 = gJChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str13, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.minuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology30);
        org.joda.time.DateTimeField dateTimeField32 = julianChronology30.centuryOfEra();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology30);
        org.joda.time.DateTimeField dateTimeField34 = julianChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology30.hourOfDay();
        long long39 = julianChronology30.add(1645455239306L, (long) 4, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) 23);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51, (int) (short) 1);
        org.joda.time.DurationField durationField56 = julianChronology55.weeks();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology55.halfdayOfDay();
        boolean boolean58 = dateTimeZone42.equals((java.lang.Object) julianChronology55);
        org.joda.time.Chronology chronology59 = julianChronology30.withZone(dateTimeZone42);
        java.lang.String str61 = dateTimeZone42.getName(194766213283544L);
        org.joda.time.Chronology chronology62 = julianChronology10.withZone(dateTimeZone42);
        boolean boolean64 = dateTimeZone42.isStandardOffset((-517470932764799965L));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(julianChronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455239306L + "'", long39 == 1645455239306L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:04" + "'", str61, "-01:04");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        int int3 = localDateTime2.getMonthOfYear();
        int int4 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusHours((int) '4');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str9 = dateTimeFieldType8.toString();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology22);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology22.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = julianChronology22.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology30 = gJChronology11.withZone(dateTimeZone27);
        java.lang.String str31 = gJChronology11.toString();
        org.joda.time.DurationField durationField32 = gJChronology11.days();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology11.year();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology11.minuteOfDay();
        boolean boolean36 = dateTimeFieldType8.isSupported((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType8.getRangeDurationType();
        boolean boolean38 = localDateTime6.isSupported(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 80 + "'", int4 == 80);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfCentury" + "'", str9, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(julianChronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str31, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1676991224530L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withDefaultYear(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = julianChronology26.seconds();
        int int30 = julianChronology26.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = julianChronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology26.year();
        long long37 = dateTimeField34.addWrapField(55L, 180);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.util.Locale.setDefault(category39, locale41);
        java.lang.String str43 = dateTimeField34.getAsText(457070L, locale41);
        java.lang.String str44 = locale41.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter15.withLocale(locale41);
        java.io.Writer writer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(writer46, 1645455527981L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5680368000055L + "'", long37 == 5680368000055L);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1969" + "'", str43, "1969");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str12 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.property(dateTimeFieldType11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.property(dateTimeFieldType11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime2.add(readableDuration15, (-1));
        org.joda.time.Chronology chronology18 = mutableDateTime2.getChronology();
        org.joda.time.Instant instant19 = mutableDateTime2.toInstant();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime2.add(readableDuration20, 927);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime2.getZone();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundHalfEven();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int26 = localDateTime24.indexOf(dateTimeFieldType25);
        mutableDateTime10.set(dateTimeFieldType25, 38819);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime10.era();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundFloor();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime32 = property29.add(54132624);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(julianChronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.Chronology chronology7 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.secondOfDay();
        long long14 = chronology5.getDateTimeMillis(1L, 5, (int) '#', 10, 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.secondOfDay();
        boolean boolean26 = property18.equals((java.lang.Object) property25);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((long) 2022);
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePartial) localDateTime28, (long) (-1));
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withPeriodAdded(readablePeriod31, 4);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withWeekyear(99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYearOfCentury(54150518);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54150518 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 20110072L + "'", long14 == 20110072L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 27]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus(readablePeriod7);
        int int9 = localDateTime8.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime9.withCenturyOfEra(53);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.Chronology chronology35 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) '4', chronology33);
        mutableDateTime37.setHourOfDay(0);
        boolean boolean40 = dateTime26.isEqual((org.joda.time.ReadableInstant) mutableDateTime37);
        boolean boolean41 = dateTime15.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        int int42 = mutableDateTime37.getYearOfEra();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        java.lang.String str46 = mutableDateTime45.toString();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime45.year();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime48.add(readableDuration50);
        boolean boolean52 = mutableDateTime48.isBeforeNow();
        mutableDateTime48.setMillisOfDay(1969);
        int int55 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfCentury();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readablePeriod64);
        org.joda.time.DateTime dateTime67 = dateTime63.minusMillis((int) '4');
        org.joda.time.DateTime.Property property68 = dateTime63.minuteOfHour();
        long long69 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime71 = dateTime63.minusMinutes(5);
        org.joda.time.DateTime dateTime73 = dateTime63.plusHours(53644655);
        org.joda.time.DateTime dateTime75 = dateTime73.minus((-1645455306L));
        org.joda.time.Chronology chronology76 = dateTime75.getChronology();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.DateTime dateTime79 = dateTime75.withDurationAdded(readableDuration77, 53644655);
        mutableDateTime48.setMillis((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime48.yearOfCentury();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime48.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str46, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645455756114L + "'", long69 == 1645455756114L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29, 2196);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology10.halfdayOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 36070072L + "'", long28 == 36070072L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField23 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (short) 0);
        org.joda.time.DurationField durationField16 = dateTimeField15.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy(4);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.secondOfDay();
        boolean boolean34 = property26.equals((java.lang.Object) property33);
        org.joda.time.LocalDateTime localDateTime36 = property26.addToCopy((long) 2022);
        boolean boolean37 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readablePeriod44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int51 = localDateTime49.get(dateTimeFieldType50);
        int int52 = localDateTime47.indexOf(dateTimeFieldType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone62);
        long long65 = chronology58.set((org.joda.time.ReadablePartial) localDateTime63, (long) '4');
        org.joda.time.DateTimeField dateTimeField66 = chronology58.yearOfEra();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType50.getField(chronology58);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        mutableDateTime70.setZone(dateTimeZone71);
        org.joda.time.Chronology chronology73 = mutableDateTime70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = mutableDateTime70.getZone();
        java.lang.String str76 = dateTimeZone74.getNameKey(100L);
        long long78 = dateTimeZone74.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField80 = gJChronology79.secondOfDay();
        int int81 = gJChronology79.getMinimumDaysInFirstWeek();
        boolean boolean82 = dateTimeFieldType50.isSupported((org.joda.time.Chronology) gJChronology79);
        org.joda.time.LocalDateTime.Property property83 = localDateTime36.property(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime36.plusWeeks(3);
        int int86 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDateTime36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField88 = localDateTime36.getField(82560001);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 82560001");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 902 + "'", int51 == 902);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(gJChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 292272992 + "'", int86 == 292272992);
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        long long26 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime14, 604800099L);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology38);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = julianChronology38.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology46 = gJChronology27.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology47 = julianChronology10.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology10.dayOfMonth();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology59);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology59.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology59.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = julianChronology59.getZone();
        org.joda.time.Chronology chronology65 = julianChronology10.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = julianChronology10.hourOfDay();
        org.joda.time.DurationField durationField67 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = julianChronology10.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1123200100L + "'", long26 == 1123200100L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        java.util.Locale locale1 = new java.util.Locale("\u661f\u671f\u4e09");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        java.lang.String str10 = dateTimeZone8.getNameKey(100L);
        long long12 = dateTimeZone8.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.weekyear();
        org.joda.time.Chronology chronology15 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.hourOfDay();
        org.joda.time.DurationField durationField17 = gJChronology13.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.secondOfMinute();
        boolean boolean20 = locale1.equals((java.lang.Object) dateTimeField19);
        org.junit.Assert.assertEquals(locale1.toString(), "\u661f\u671f\u4e09");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("Italian (Italy)");
        java.lang.String str19 = dateTimeField15.getAsShortText(240, locale18);
        java.util.Locale locale23 = new java.util.Locale("53", "JPN", "1971-01-04T00:00:00.000Z");
        java.lang.String str24 = locale18.getDisplayLanguage(locale23);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "240" + "'", str19, "240");
        org.junit.Assert.assertEquals(locale23.toString(), "53_JPN_1971-01-04T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        java.util.Locale locale3 = new java.util.Locale("1970-01-01T00:00:00.052Z", "DurationField[hours]", "53923557");
        org.junit.Assert.assertEquals(locale3.toString(), "1970-01-01t00:00:00.052z_DURATIONFIELD[HOURS]_53923557");
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        int int19 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.DateTime dateTime20 = mutableDateTime2.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime2.toMutableDateTimeISO();
        long long22 = mutableDateTime2.getMillis();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime2.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfCeiling();
        mutableDateTime24.setMillisOfDay(902);
        int int27 = mutableDateTime24.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61062681599999L) + "'", long22 == (-61062681599999L));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = dateTime7.isSupported(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusWeeks(82560052);
        int int12 = dateTime11.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withDefaultYear(1);
        boolean boolean9 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology10 = dateTimeFormatter3.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("2022-02-21T14:58:03.331Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(chronology10);
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property18 = dateTime13.hourOfDay();
        int int19 = dateTime13.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = dateTime13.toLocalDateTime();
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        int int22 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime20.era();
        boolean boolean29 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter9.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withOffsetParsed();
        java.util.Locale locale12 = dateTimeFormatter11.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withOffsetParsed();
        java.util.Locale locale14 = dateTimeFormatter11.getLocale();
        int int15 = dateTimeFormatter11.getDefaultYear();
        boolean boolean16 = dateTimeFormatter11.isPrinter();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology27.millisOfSecond();
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter11.withChronology(chronology30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1968), 5370022, 54066989, 53797644, 50181702, 54066151, 50311123, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53797644 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime14 = property10.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime15 = property10.roundFloor();
        mutableDateTime15.addMonths(53940);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setHourOfDay(50100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withPeriodAdded(readablePeriod5, (int) (short) 100);
        int int8 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withYear(893);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        int int12 = localDateTime10.getMinuteOfHour();
        int int13 = localDateTime10.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withMillisOfSecond(50285);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50285 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 893 + "'", int13 == 893);
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 8);
        java.util.Locale locale7 = java.util.Locale.PRC;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        boolean boolean13 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        long long15 = dateTimeZone11.nextTransition(1645455239609L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter8.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        int int22 = mutableDateTime19.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.monthOfYear();
        mutableDateTime19.addMonths(53641391);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfCeiling();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getLanguage();
        java.lang.String str33 = locale28.getDisplayVariant(locale29);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.setRegion("IT");
        java.util.Locale locale38 = new java.util.Locale("fr");
        java.util.Locale.Builder builder39 = builder34.setLocale(locale38);
        java.util.Locale locale40 = builder34.build();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale41.getDisplayLanguage(locale42);
        java.lang.String str45 = locale40.getDisplayName(locale41);
        java.lang.String str46 = locale40.getDisplayName();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale40.getDisplayScript(locale47);
        java.lang.String str49 = locale28.getDisplayScript(locale47);
        int int50 = property26.getMaximumShortTextLength(locale28);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = dateTime51.plus((long) 'x');
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime53.withTimeAtStartOfDay();
        java.util.Locale locale57 = java.util.Locale.US;
        java.util.Calendar calendar58 = dateTime53.toCalendar(locale57);
        int int59 = property26.getMaximumShortTextLength(locale57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter8.withLocale(locale57);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeFormatter60.getZone();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645455239609L + "'", long15 == 1645455239609L);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja" + "'", str32, "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Japanese" + "'", str44, "Japanese");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str45, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str46, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645455756581,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.028,offset=28,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=36,MILLISECOND=609,ZONE_OFFSET=28,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNull(dateTimeZone61);
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        boolean boolean22 = strSet3.add("eng");
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        boolean boolean26 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getDisplayScript();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet29.spliterator();
        boolean boolean31 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Iterator<java.lang.String> strItor32 = strSet29.iterator();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.parallelStream();
        java.lang.String[] strArray43 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray50 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray57 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray64 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[][] strArray65 = new java.lang.String[][] { strArray43, strArray50, strArray57, strArray64 };
        java.lang.String[][] strArray66 = strSet35.toArray(strArray65);
        java.lang.String[] strArray76 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        int int79 = strSet77.size();
        boolean boolean80 = strSet35.retainAll((java.util.Collection<java.lang.String>) strSet77);
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strSet85);
        java.util.Locale.LanguageRange[] languageRangeArray87 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList88 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList88, languageRangeArray87);
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet91 = locale90.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList88, (java.util.Collection<java.lang.String>) strSet91);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strList92, filteringMode93);
        java.util.Locale locale95 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet96 = locale95.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strSet96);
        boolean boolean98 = strSet35.containsAll((java.util.Collection<java.lang.String>) strList97);
        boolean boolean99 = strSet29.containsAll((java.util.Collection<java.lang.String>) strList97);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 6 + "'", int79 == 6);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(languageRangeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + filteringMode93 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode93.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en");
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(strList97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology19 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology0.hourOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28, (int) (short) 1);
        org.joda.time.DurationField durationField33 = julianChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology32.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = julianChronology32.seconds();
        int int36 = julianChronology32.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology32.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology32.clockhourOfHalfday();
        org.joda.time.DurationField durationField39 = julianChronology32.days();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology32.millisOfDay();
        org.joda.time.DurationField durationField41 = julianChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology32.year();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(100L);
        int int45 = localDateTime44.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = property51.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime44.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime44.minusMonths((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minus(readablePeriod59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.minus(readableDuration61);
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        boolean boolean65 = locale64.hasExtensions();
        java.lang.String str66 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, (int) 'u', locale64);
        java.lang.String str67 = dateTimeField20.getAsShortText(495, locale64);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.lang.String str69 = locale68.getDisplayLanguage();
        java.lang.String str70 = locale68.getISO3Language();
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str73 = locale72.getDisplayScript();
        java.util.Set<java.lang.String> strSet74 = locale72.getUnicodeLocaleKeys();
        java.lang.String str75 = locale72.getLanguage();
        java.lang.String str76 = locale71.getDisplayVariant(locale72);
        java.lang.String str77 = locale68.getDisplayScript(locale72);
        java.lang.String str78 = locale64.getDisplayVariant(locale68);
        java.util.Locale locale80 = new java.util.Locale("JulianChronology[UTC]");
        java.lang.String str81 = locale64.getDisplayCountry(locale80);
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(julianChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "117" + "'", str66, "117");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "495" + "'", str67, "495");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u82f1\u8a9e" + "'", str69, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "eng" + "'", str70, "eng");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ja" + "'", str75, "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals(locale80.toString(), "julianchronology[utc]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey(100L);
        long long39 = dateTimeZone35.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.secondOfDay();
        int int42 = gJChronology40.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime27, (org.joda.time.Chronology) gJChronology40);
        java.lang.String str44 = gJChronology40.toString();
        org.joda.time.Instant instant45 = gJChronology40.getGregorianCutover();
        // The following exception was thrown during execution in test generation
        try {
            long long49 = gJChronology40.add(1676991603329L, 1677152798038L, 946688400);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1677152798038 * 946688400");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str44, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(instant45);
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 8);
        java.util.Locale locale7 = java.util.Locale.PRC;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        java.util.Locale locale10 = dateTimeFormatter9.getLocale();
        int int11 = dateTimeFormatter9.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTimeFormatter9.parseDateTime("2023");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withDurationAdded(readableDuration28, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.plusMinutes(99);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property35.addWrapFieldToCopy(120);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime40.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology48.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = julianChronology48.add(readablePeriod52, (long) (short) 1, 8);
        org.joda.time.DurationField durationField56 = julianChronology48.days();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology48.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone58 = julianChronology48.getZone();
        java.lang.String str60 = dateTimeZone58.getName(1676991250197L);
        java.lang.String str61 = dateTimeZone58.getID();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        mutableDateTime65.setZone(dateTimeZone66);
        org.joda.time.Chronology chronology68 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime65.getZone();
        java.lang.String str71 = dateTimeZone69.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology73 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone69, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology73);
        org.joda.time.DateTimeField dateTimeField75 = julianChronology73.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology73.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology73.minuteOfDay();
        org.joda.time.DurationField durationField78 = julianChronology73.days();
        org.joda.time.DurationField durationField79 = julianChronology73.seconds();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology73.millisOfSecond();
        org.joda.time.DurationField durationField81 = julianChronology73.hours();
        org.joda.time.DateTimeZone dateTimeZone82 = julianChronology73.getZone();
        long long85 = dateTimeZone82.convertLocalToUTC((long) 22, true);
        java.util.Locale locale87 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str88 = dateTimeZone82.getShortName(1645459072454L, locale87);
        java.util.Locale locale91 = new java.util.Locale("1970-01-01T00:00:00.000Z", "minuteOfHour");
        java.util.Locale locale92 = java.util.Locale.getDefault();
        java.lang.String str93 = locale91.getDisplayVariant(locale92);
        java.lang.String str94 = locale91.getDisplayScript();
        java.lang.String str95 = locale87.getDisplayLanguage(locale91);
        java.lang.String str96 = dateTimeZone58.getName(3840019L, locale91);
        int int97 = property35.getMaximumShortTextLength(locale91);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(julianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.028" + "'", str60, "+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.028" + "'", str61, "+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(julianChronology73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-6L) + "'", long85 == (-6L));
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.028" + "'", str88, "+00:00:00.028");
        org.junit.Assert.assertEquals(locale91.toString(), "1970-01-01t00:00:00.000z_MINUTEOFHOUR");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "French" + "'", str95, "French");
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "+00:00:00.028" + "'", str96, "+00:00:00.028");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 8 + "'", int97 == 8);
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        java.lang.String str13 = gJChronology11.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology11.getDateTimeMillis(50271, 50126099, 337, 53998);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50126099 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str13, "GJChronology[+00:00:00.028]");
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.minuteOfHour();
        int int22 = dateTimeField21.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime15.minusYears(99);
        org.joda.time.DateTime dateTime27 = dateTime15.plusWeeks(1);
        org.joda.time.DateTime dateTime29 = dateTime15.withCenturyOfEra(52);
        org.joda.time.DateTime dateTime31 = dateTime29.plus(1645455374162L);
        org.joda.time.DateTime dateTime33 = dateTime31.minusYears(2922790);
        boolean boolean35 = dateTime31.equals((java.lang.Object) 10L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = julianChronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = julianChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology11.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(1645455295378L, (org.joda.time.Chronology) julianChronology11);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 2629197056873L);
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 0);
        int int11 = dateTime10.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int25 = localDateTime23.get(dateTimeFieldType24);
        int int26 = localDateTime21.indexOf(dateTimeFieldType24);
        org.joda.time.DateTime.Property property27 = dateTime10.property(dateTimeFieldType24);
        int int28 = dateTime10.getEra();
        int int29 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTime dateTime31 = dateTime10.minusWeeks(53797);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54156 + "'", int11 == 54156);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 902 + "'", int25 == 902);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 902 + "'", int29 == 902);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        long long24 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone27, (long) 'a');
        long long34 = dateTimeZone27.convertLocalToUTC(1645455232454L, true, (long) 12);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str36 = dateTimeZone27.toString();
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int41 = localDateTime39.get(dateTimeFieldType40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.year();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(1969);
        boolean boolean46 = dateTimeZone27.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withFieldAdded(durationFieldType47, 54106991);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3840125L + "'", long30 == 3840125L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645459072454L + "'", long34 == 1645459072454L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:04" + "'", str36, "-01:04");
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 902 + "'", int41 == 902);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(70);
        org.joda.time.DateTime dateTime27 = dateTime25.withYear((int) 'u');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime25.plusDays(58);
        org.joda.time.DateTime dateTime33 = dateTime25.minusWeeks(44);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str11, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.minuteOfDay();
        long long28 = julianChronology10.getDateTimeMillis((long) 0, 10, 1, 10, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology10.millisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey(100L);
        long long41 = dateTimeZone37.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.Instant instant43 = gJChronology42.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.clockhourOfDay();
        org.joda.time.DurationField durationField45 = gJChronology42.centuries();
        org.joda.time.DurationField durationField46 = gJChronology42.minutes();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology42.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology42.getZone();
        org.joda.time.Chronology chronology50 = julianChronology10.withZone(dateTimeZone49);
        long long54 = dateTimeZone49.convertLocalToUTC(1676991475045L, false, (long) 550);
        org.joda.time.tz.NameProvider nameProvider56 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str62 = nameProvider56.getName(locale58, "35", "52");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider56);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        mutableDateTime66.setZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = mutableDateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfCentury();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone73);
        long long76 = chronology69.set((org.joda.time.ReadablePartial) localDateTime74, (long) '4');
        org.joda.time.Chronology chronology77 = chronology69.withUTC();
        org.joda.time.DateTimeField dateTimeField78 = chronology69.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(100L);
        int int81 = localDateTime80.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minus(readablePeriod84);
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.year();
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str88 = dateTimeField78.getAsText((org.joda.time.ReadablePartial) localDateTime85, locale87);
        java.lang.String str91 = nameProvider56.getShortName(locale87, "en", "GJChronology[UTC]");
        java.util.Locale locale92 = locale87.stripExtensions();
        java.lang.String str93 = dateTimeZone49.getName(3840097L, locale87);
        java.lang.String str95 = dateTimeZone49.getName(1676991607330L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 36070072L + "'", long28 == 36070072L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1676991475017L + "'", long54 == 1676991475017L);
        org.junit.Assert.assertNotNull(nameProvider56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0" + "'", str88, "0");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00:00.028" + "'", str93, "+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00:00.028" + "'", str95, "+00:00:00.028");
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DateTimeField dateTimeField13 = chronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.clockhourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology29);
        org.joda.time.DurationField durationField31 = julianChronology29.seconds();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology29.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        int int38 = mutableDateTime35.getMinuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readablePeriod47);
        int int49 = mutableDateTime35.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime35.dayOfYear();
        int int51 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        java.util.Locale locale57 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime65 = property62.set((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.monthOfYear();
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = property66.getAsText(locale67);
        java.lang.String str69 = locale57.getDisplayScript(locale67);
        java.lang.String str70 = dateTimeZone32.getShortName(1645455345042L, locale67);
        java.lang.String str71 = dateTimeField17.getAsText((int) (short) 1, locale67);
        java.lang.String str72 = locale67.toLanguageTag();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 28 + "'", int51 == 28);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertEquals(locale57.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "janvier" + "'", str68, "janvier");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.028" + "'", str70, "+00:00:00.028");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr-FR" + "'", str72, "fr-FR");
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime24 = dateTime23.toLocalDateTime();
        org.joda.time.DateTime dateTime26 = dateTime23.plusDays((int) (short) 0);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(24);
        org.joda.time.DateTime dateTime30 = dateTime26.minusSeconds(71);
        org.joda.time.DateTime dateTime32 = dateTime30.minusYears(53700029);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths(2022);
        org.joda.time.DateTime dateTime36 = dateTime33.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991756868L + "'", long21 == 1676991756868L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField12 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("IT");
        java.util.Locale locale4 = new java.util.Locale("fr");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.setScript("year");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("82560052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 82560052 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        java.util.Locale locale1 = new java.util.Locale("2022-02-21T14:54:29.555Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-21t14:54:29.555z");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(411);
        int int3 = dateTimeZone1.getStandardOffset(388800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1479600000 + "'", int3 == 1479600000);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        java.lang.String str9 = mutableDateTime8.toString();
        mutableDateTime8.addMillis((int) '4');
        int int12 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMillis((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime36.minuteOfHour();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.secondOfDay();
        boolean boolean49 = dateTime36.isEqual((org.joda.time.ReadableInstant) mutableDateTime44);
        int int50 = dateTime25.compareTo((org.joda.time.ReadableInstant) mutableDateTime44);
        mutableDateTime44.setTime(8L);
        mutableDateTime44.setDate((long) 19409);
        boolean boolean55 = localDateTime13.equals((java.lang.Object) mutableDateTime44);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfCentury();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology65);
        java.lang.String str67 = mutableDateTime66.toString();
        mutableDateTime66.setDate((long) (short) 100);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        mutableDateTime72.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology75 = mutableDateTime72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = mutableDateTime72.getZone();
        mutableDateTime66.setZoneRetainFields(dateTimeZone76);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime63.toDateTime(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.toDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.minusMillis(28);
        org.joda.time.DateTime dateTime85 = dateTime83.withMillisOfDay(55);
        org.joda.time.DateTime dateTime87 = dateTime83.plusDays(50);
        org.joda.time.DateTime dateTime88 = dateTime83.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime90 = dateTime83.withDayOfYear(8);
        mutableDateTime44.setMillis((org.joda.time.ReadableInstant) dateTime83);
        int int92 = dateTime83.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime93 = dateTime83.toLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str9, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str67, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("English");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet3.spliterator();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(1645455234867L);
        org.joda.time.DateTime dateTime7 = instant6.toDateTimeISO();
        org.joda.time.Instant instant9 = instant6.plus((long) 53660571);
        boolean boolean10 = strSet3.equals((java.lang.Object) instant6);
        org.joda.time.DateTimeZone dateTimeZone11 = instant6.getZone();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant6.plus(readableDuration12);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSpliterator4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology10.days();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField18 = julianChronology10.days();
        int int21 = durationField18.getValue((long) 53688657, (long) 53);
        java.lang.String str22 = durationField18.toString();
        long long23 = durationField18.getUnitMillis();
        boolean boolean24 = durationField18.isPrecise();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DurationField[days]" + "'", str22, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400000L + "'", long23 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1676991224530L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withDefaultYear(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 14);
        boolean boolean16 = dateTimeFormatter15.isOffsetParsed();
        java.lang.StringBuffer stringBuffer17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(100L);
        int int23 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusHours(53748);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plus(readableDuration31);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(stringBuffer17, (org.joda.time.ReadablePartial) localDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology11.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = dateTimeZone25.getName(2419200000022L, locale28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(1644936887631L, dateTimeZone25);
        long long33 = dateTimeZone25.convertLocalToUTC((long) 19409, true);
        java.lang.String str34 = dateTimeZone25.toString();
        java.util.TimeZone timeZone35 = dateTimeZone25.toTimeZone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        java.lang.String str39 = mutableDateTime38.toString();
        mutableDateTime38.setDate((long) (short) 100);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        mutableDateTime38.setZoneRetainFields(dateTimeZone48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime52.getZone();
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 10);
        long long60 = dateTimeZone48.getMillisKeepLocal(dateTimeZone56, (long) (byte) 10);
        java.lang.String str62 = dateTimeZone48.getNameKey(946684800000L);
        java.util.TimeZone timeZone63 = dateTimeZone48.toTimeZone();
        boolean boolean64 = timeZone35.hasSameRules(timeZone63);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.028" + "'", str29, "+00:00:00.028");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 19381L + "'", long33 == 19381L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.028" + "'", str34, "+00:00:00.028");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str39, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
// flaky:         org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYear(1);
        org.joda.time.DateTime dateTime33 = dateTime29.minusYears(53660571);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths(53800);
        org.joda.time.DateTime dateTime37 = dateTime33.withMillisOfDay(35760052);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1645455256248L);
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        int int8 = mutableDateTime5.getMinuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        int int19 = mutableDateTime5.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfEven();
        mutableDateTime21.addYears((-259144));
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.getMutableDateTime();
        int int27 = mutableDateTime26.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        long long26 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime14, 604800099L);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology38);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = julianChronology38.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology46 = gJChronology27.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology47 = julianChronology10.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology10.dayOfMonth();
        org.joda.time.DurationField durationField49 = julianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField51 = julianChronology10.eras();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1123200100L + "'", long26 == 1123200100L);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(julianChronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long32 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime21, 0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '4');
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone56);
        long long59 = chronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) '4');
        org.joda.time.DurationField durationField60 = chronology52.hours();
        int int61 = durationField46.compareTo(durationField60);
        long long64 = durationField46.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType65 = durationField46.getType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime21.withFieldAdded(durationFieldType65, (int) '#');
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMillis((-259144));
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.minus(readableDuration70);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1123200056L + "'", long32 == 1123200056L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        mutableDateTime2.setMinuteOfDay(0);
        mutableDateTime2.addMinutes(99);
        java.lang.String str13 = mutableDateTime2.toString();
        mutableDateTime2.addMillis(24962074);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T01:39:00.029+00:00:00.028" + "'", str13, "1970-01-01T01:39:00.029+00:00:00.028");
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.hourOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) ' ');
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        long long23 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.withPeriodAdded(readablePeriod24, 54074678);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime21.withDurationAdded(readableDuration27, 800);
        java.lang.String str30 = dateTime21.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-457071L) + "'", long23 == (-457071L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T15:02:37.176+00:00:00.028" + "'", str30, "2022-02-21T15:02:37.176+00:00:00.028");
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 10);
        org.joda.time.Chronology chronology22 = julianChronology11.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology11.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(10522040400000L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology11.monthOfYear();
        org.joda.time.DurationField durationField29 = julianChronology11.hours();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology19 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.Instant instant20 = gJChronology0.getGregorianCutover();
        org.joda.time.Instant instant21 = gJChronology0.getGregorianCutover();
        org.joda.time.DurationField durationField22 = gJChronology0.months();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = gJChronology0.get(readablePeriod23, 1645455706963L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u5354\u5b9a\u4e16\u754c\u6642 (MILLISOFDAY,-0001-01-01T00:00:00.056)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????(millisofday");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.plusWeeks(12);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = julianChronology29.add(readablePeriod33, (long) (short) 1, 8);
        org.joda.time.DurationField durationField37 = julianChronology29.minutes();
        boolean boolean38 = localDateTime9.equals((java.lang.Object) julianChronology29);
        java.lang.String str39 = localDateTime9.toString();
        int int40 = localDateTime9.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime9.withEra(168);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 168 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 902 + "'", int13 == 902);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str15, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str39, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("jpn", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap5);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis(187200000L);
        org.joda.time.Instant instant5 = instant2.withDurationAdded(1645455311744L, 2052);
        org.joda.time.Instant instant7 = instant2.minus(5923640846717493685L);
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.Instant instant10 = instant7.minus(1814400000L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfYear();
        org.joda.time.DurationField durationField16 = julianChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        java.lang.String str26 = dateTimeFieldType24.getName();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology37);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology37.year();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology37.weekyearOfCentury();
        int int43 = julianChronology37.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType24.getField((org.joda.time.Chronology) julianChronology37);
        org.joda.time.DurationField durationField45 = julianChronology37.minutes();
        long long47 = durationField45.getMillis(1645455449055L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991757255L + "'", long21 == 1676991757255L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfYear" + "'", str26, "dayOfYear");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(julianChronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 98727326943300000L + "'", long47 == 98727326943300000L);
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(100L);
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.minusWeeks((int) '4');
        int int26 = localDateTime25.getEra();
        int int27 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime11.minus(readableDuration28);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone10);
        long long13 = chronology6.set((org.joda.time.ReadablePartial) localDateTime11, (long) '4');
        org.joda.time.DurationField durationField14 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology6.weekyears();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(946771200000L, chronology6);
        boolean boolean19 = dateTime17.isBefore(1676991293413L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(23);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withDurationAdded(readableDuration38, 1969);
        int int41 = dateTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean45 = dateTime37.equals((java.lang.Object) timeZone44);
        org.joda.time.Chronology chronology46 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime17.withChronology(chronology46);
        int int48 = dateTime47.getMillisOfSecond();
        org.joda.time.DateTime dateTime50 = dateTime47.withCenturyOfEra(8);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 327 + "'", int41 == 327);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 28 + "'", int48 == 28);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(893);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1645455238371L, dateTimeZone36);
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfDay();
        org.joda.time.DateTime.Property property39 = dateTime37.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime26.toMutableDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readablePeriod50);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMillis((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime49.minuteOfHour();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime57.secondOfDay();
        boolean boolean62 = dateTime49.isEqual((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.DateTime dateTime64 = dateTime49.withWeekOfWeekyear((int) (byte) 10);
        int int65 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime.Property property66 = dateTime64.minuteOfDay();
        org.joda.time.DateTime dateTime67 = property66.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime68 = property66.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 28 + "'", int65 == 28);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        int int12 = gJChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.year();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        java.lang.String str19 = mutableDateTime18.toString();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        int int26 = localDateTime25.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.property(dateTimeFieldType27);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime18.property(dateTimeFieldType27);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime18.copy();
        int int32 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) mutableDateTime31);
        long long34 = dateTimeZone15.nextTransition((long) 320);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str19, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfHour" + "'", str28, "minuteOfHour");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 28 + "'", int32 == 28);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 320L + "'", long34 == 320L);
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, (int) (short) 0);
        long long4 = instant3.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology16);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology16.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property23.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTime dateTime36 = localDateTime27.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        long long38 = julianChronology16.set((org.joda.time.ReadablePartial) localDateTime27, 0L);
        org.joda.time.DurationField durationField39 = julianChronology16.years();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType5.getField((org.joda.time.Chronology) julianChronology16);
        org.joda.time.DurationField durationField41 = julianChronology16.hours();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology16.weekyear();
        int int43 = instant3.get(dateTimeField42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        int int47 = localDateTime46.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plus(readableDuration48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readablePeriod60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property66 = dateTime61.hourOfDay();
        int int67 = property66.getMaximumValueOverall();
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder68.setRegion("IT");
        java.util.Locale locale72 = new java.util.Locale("fr");
        java.util.Locale.Builder builder73 = builder68.setLocale(locale72);
        java.util.Locale locale74 = builder68.build();
        int int75 = property66.getMaximumShortTextLength(locale74);
        java.lang.String str76 = locale74.getCountry();
        java.lang.String str77 = locale74.getDisplayScript();
        java.lang.String str78 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, locale74);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455757424L + "'", long4 == 1645455757424L);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(julianChronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1123200056L + "'", long38 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 23 + "'", int67 == 23);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970" + "'", str78, "1970");
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.secondOfDay();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readablePeriod19);
        org.joda.time.DateTime dateTime21 = localDateTime18.toDateTime();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        int int23 = property11.getDifference((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime.Property property24 = dateTime21.monthOfYear();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minus(readablePeriod17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes(6);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime25.getZone();
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology33);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology33.secondOfDay();
        org.joda.time.DurationField durationField40 = julianChronology33.minutes();
        org.joda.time.DurationField durationField41 = julianChronology33.weeks();
        long long44 = durationField41.subtract((long) 69, 59);
        boolean boolean45 = property21.equals((java.lang.Object) long44);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-35683199931L) + "'", long44 == (-35683199931L));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        long long16 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) '4');
        org.joda.time.Chronology chronology17 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.year();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale27);
        boolean boolean29 = strSet2.remove((java.lang.Object) dateTimeField18);
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime35 = property34.roundHalfFloor();
        int int36 = instant30.compareTo((org.joda.time.ReadableInstant) mutableDateTime35);
        boolean boolean37 = strSet2.remove((java.lang.Object) instant30);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant30.minus(readableDuration38);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.yearOfEra();
        org.joda.time.DateTime.Property property16 = dateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = property16.setCopy(4);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(50133152);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.hourOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.minuteOfHour();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 180, dateTimeZone12);
        long long15 = dateTimeZone12.convertUTCToLocal(22L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 2023, dateTimeZone12);
        mutableDateTime9.setZoneRetainFields(dateTimeZone12);
        mutableDateTime9.addDays(832);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 50L + "'", long15 == 50L);
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = julianChronology15.seconds();
        int int19 = julianChronology15.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField20 = julianChronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(45, 54041090, 54139400, 120, 53660571, (org.joda.time.Chronology) julianChronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(893);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1645455238371L, dateTimeZone36);
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfDay();
        org.joda.time.DateTime.Property property39 = dateTime37.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime26.toMutableDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey(100L);
        long long52 = dateTimeZone48.nextTransition((long) (short) 0);
        java.lang.String str54 = dateTimeZone48.getNameKey((long) (byte) 1);
        java.lang.String str55 = dateTimeZone48.toString();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTime dateTime57 = dateTime26.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillisOfDay(53938);
        org.joda.time.DateTime dateTime62 = dateTime59.withDurationAdded(1676991385046L, 168);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime62.withDayOfYear(1645455055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455055 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
// flaky:         org.junit.Assert.assertNull(str54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.028" + "'", str55, "+00:00:00.028");
        org.junit.Assert.assertNotNull(gJChronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        java.lang.String str17 = mutableDateTime16.toString();
        mutableDateTime16.setDate((long) (short) 100);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime13.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime13.withTimeAtStartOfDay();
        int int31 = property3.compareTo((org.joda.time.ReadableInstant) dateTime30);
        int int32 = property3.get();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str17, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 80 + "'", int32 == 80);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 82800);
        int int8 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime11.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey(100L);
        long long19 = dateTimeZone15.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.weekyear();
        java.lang.String str22 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfMonth();
        org.joda.time.Chronology chronology24 = gJChronology20.withUTC();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter4.withChronology(chronology24);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str22, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GJChronology[UTC]" + "'", str25, "GJChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        long long33 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime22, 0L);
        org.joda.time.DurationField durationField34 = julianChronology11.years();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField36 = julianChronology11.hours();
        org.joda.time.DurationField durationField37 = julianChronology11.millis();
        org.joda.time.DateTimeZone dateTimeZone38 = julianChronology11.getZone();
        java.lang.String str39 = julianChronology11.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1123200056L + "'", long33 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str39, "JulianChronology[+00:00:00.028,mdfw=1]");
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        mutableDateTime8.setDate((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime8.setMonthOfYear((int) (byte) 1);
        mutableDateTime8.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime8.yearOfCentury();
        boolean boolean22 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setWeekyear((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        int int30 = mutableDateTime27.getMinuteOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readablePeriod39);
        int int41 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.plus(readablePeriod42);
        org.joda.time.DateTime dateTime45 = dateTime40.plusYears(1);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime49 = dateTime48.toLocalDateTime();
        org.joda.time.DateTime dateTime51 = dateTime48.plusDays(0);
        int int52 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime8.yearOfCentury();
        org.joda.time.DurationField durationField54 = property53.getRangeDurationField();
        long long57 = durationField54.getDifferenceAsLong(0L, 1676991317040L);
        long long59 = durationField54.getValueAsLong(0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1676991757691L + "'", long46 == 1676991757691L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfYear();
        int int16 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField17 = julianChronology10.hours();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField20 = julianChronology10.years();
        long long23 = durationField20.getMillis(0L, (long) 190800000);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = dateTimeField25.set(1645455603765L, "weekOfWeekyear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekOfWeekyear\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths((int) 'u');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(99);
        java.lang.String str10 = localDateTime9.toString();
        int int11 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(25);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1951-01-01T00:00:00.080" + "'", str10, "1951-01-01T00:00:00.080");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 80 + "'", int11 == 80);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfYear(121);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) (byte) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury(5);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology27.clockhourOfHalfday();
        org.joda.time.DateTime dateTime31 = dateTime16.withChronology((org.joda.time.Chronology) julianChronology27);
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        long long33 = dateTime31.getMillis();
        org.joda.time.LocalDateTime localDateTime34 = dateTime31.toLocalDateTime();
        org.joda.time.DateTime dateTime36 = dateTime31.plusYears(50257988);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(julianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1108998157710L + "'", long33 == 1108998157710L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getExtension('a');
        int int7 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        int int23 = mutableDateTime20.getMinuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readablePeriod32);
        int int34 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) localDateTime46, (long) '4');
        org.joda.time.DurationField durationField49 = chronology41.seconds();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime33.toMutableDateTime(chronology41);
        int int51 = property3.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime52 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withWeekyear(53811769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMonthOfYear(386);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 386 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime27.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long35 = dateTime27.getMillis();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey(100L);
        long long46 = dateTimeZone42.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) long35, dateTimeZone42);
        org.joda.time.DateTime dateTime48 = localDateTime15.toDateTime(dateTimeZone42);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime50 = property49.roundCeilingCopy();
        org.joda.time.DateTime dateTime51 = property49.withMinimumValue();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        int int57 = mutableDateTime54.getMinuteOfDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readablePeriod66);
        int int68 = mutableDateTime54.compareTo((org.joda.time.ReadableInstant) dateTime67);
        mutableDateTime54.setYear((int) '#');
        boolean boolean71 = dateTime51.isAfter((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateTime dateTime73 = dateTime51.plusMonths(50133152);
        long long74 = dateTime51.getMillis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645455757815L + "'", long35 == 1645455757815L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1646924437815L + "'", long74 == 1646924437815L);
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property8.roundFloor();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        java.lang.String[] strArray13 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        int int16 = strSet14.size();
        java.util.stream.Stream<java.lang.String> strStream17 = strSet14.stream();
        boolean boolean18 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray34 = new java.lang.String[] { "56", "Coordinated Universal Time", "2022-02-21T14:53:56.659Z", "eng", "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)", "days", "yearOfCentury", "weekOfWeekyear", "", "italiano", "Italy", "-0001-01-01T00:00:00.056", "-01:00", "English (Canada)", "italiano" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.setRegion("IT");
        java.util.Locale locale41 = new java.util.Locale("fr");
        java.util.Locale.Builder builder42 = builder37.setLocale(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleAttributes();
        strSet43.clear();
        boolean boolean45 = strSet35.addAll((java.util.Collection<java.lang.String>) strSet43);
        boolean boolean46 = strSet43.isEmpty();
        boolean boolean47 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        boolean boolean50 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime53.getZone();
        java.lang.String str59 = dateTimeZone57.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology61);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology61.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology61.year();
        org.joda.time.DurationField durationField66 = julianChronology61.weekyears();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology61.dayOfYear();
        boolean boolean68 = strSet49.equals((java.lang.Object) dateTimeField67);
        org.joda.time.DurationField durationField69 = dateTimeField67.getLeapDurationField();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(julianChronology61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(durationField69);
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder0.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.setLanguageTag("japanese");
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder24.setExtension(' ', "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1676991224530L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        java.lang.String str7 = mutableDateTime6.toString();
        mutableDateTime6.setDate((long) (short) 100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime12.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        int int18 = mutableDateTime6.getYearOfCentury();
        mutableDateTime6.addWeekyears((int) 'x');
        mutableDateTime6.addDays(1);
        mutableDateTime6.add((long) (byte) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        java.lang.String str28 = mutableDateTime27.toString();
        mutableDateTime27.setDate((long) (short) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone37);
        int int39 = mutableDateTime27.getYearOfCentury();
        mutableDateTime27.addWeekyears((int) 'x');
        mutableDateTime27.addDays(1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        mutableDateTime46.setZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone53);
        long long56 = chronology49.set((org.joda.time.ReadablePartial) localDateTime54, (long) '4');
        org.joda.time.DurationField durationField57 = chronology49.hours();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        mutableDateTime60.setZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone67);
        long long70 = chronology63.set((org.joda.time.ReadablePartial) localDateTime68, (long) '4');
        org.joda.time.DurationField durationField71 = chronology63.hours();
        int int72 = durationField57.compareTo(durationField71);
        long long75 = durationField57.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType76 = durationField57.getType();
        mutableDateTime27.add(durationFieldType76, 4);
        mutableDateTime6.add(durationFieldType76, 4);
        org.joda.time.Instant instant81 = new org.joda.time.Instant((java.lang.Object) mutableDateTime6);
        int int82 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant81);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str7, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str28, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 52L + "'", long70 == 52L);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3600000) + "'", int82 == (-3600000));
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DurationField durationField12 = julianChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = julianChronology11.seconds();
        int int15 = julianChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.millisOfDay();
        org.joda.time.Chronology chronology17 = julianChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology11.halfdayOfDay();
        org.joda.time.DurationField durationField20 = julianChronology11.millis();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology11.monthOfYear();
        org.joda.time.DurationField durationField23 = julianChronology11.hours();
        java.lang.String str24 = julianChronology11.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        java.lang.String str35 = dateTimeZone31.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        java.lang.String str38 = dateTimeZone31.getName((long) 2052);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology40 = julianChronology11.withZone(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 53660571, dateTimeZone31);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str24, "JulianChronology[+00:00:00.028,mdfw=1]");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.028" + "'", str35, "+00:00:00.028");
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.028" + "'", str38, "+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 180, dateTimeZone1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        mutableDateTime5.setDate((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime5.setMonthOfYear((int) (byte) 1);
        mutableDateTime5.addMinutes((int) (short) 0);
        mutableDateTime5.setWeekyear(19);
        mutableDateTime5.setMillis((long) 22);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(100L);
        int int24 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withPeriodAdded(readablePeriod27, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDateTime23.isSupported(dateTimeFieldType30);
        int int32 = mutableDateTime5.get(dateTimeFieldType30);
        boolean boolean33 = mutableDateTime2.isSupported(dateTimeFieldType30);
        mutableDateTime2.setSecondOfDay(669);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.secondOfMinute();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.Chronology chronology9 = julianChronology0.withZone(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField10 = julianChronology0.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = julianChronology0.getZone();
        org.joda.time.DurationField durationField12 = julianChronology0.minutes();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("+53:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+53:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder20.setLanguage("");
        java.util.Locale locale23 = builder20.build();
        java.util.Locale.Builder builder24 = builder20.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("GMT");
        java.util.Locale.Builder builder28 = builder24.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder24.addUnicodeLocaleAttribute("\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths((int) 'u');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(99);
        int int10 = localDateTime9.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusDays(434);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minus(readableDuration17);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 80 + "'", int10 == 80);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        java.lang.String[] strArray13 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        int int16 = strSet14.size();
        java.util.stream.Stream<java.lang.String> strStream17 = strSet14.stream();
        boolean boolean18 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray34 = new java.lang.String[] { "56", "Coordinated Universal Time", "2022-02-21T14:53:56.659Z", "eng", "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)", "days", "yearOfCentury", "weekOfWeekyear", "", "italiano", "Italy", "-0001-01-01T00:00:00.056", "-01:00", "English (Canada)", "italiano" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.setRegion("IT");
        java.util.Locale locale41 = new java.util.Locale("fr");
        java.util.Locale.Builder builder42 = builder37.setLocale(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleAttributes();
        strSet43.clear();
        boolean boolean45 = strSet35.addAll((java.util.Collection<java.lang.String>) strSet43);
        boolean boolean46 = strSet43.isEmpty();
        boolean boolean47 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        boolean boolean50 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZone(dateTimeZone54);
        org.joda.time.Chronology chronology56 = mutableDateTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime53.getZone();
        java.lang.String str59 = dateTimeZone57.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology61);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology61.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology61.year();
        org.joda.time.DurationField durationField66 = julianChronology61.weekyears();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology61.dayOfYear();
        boolean boolean68 = strSet49.equals((java.lang.Object) dateTimeField67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime71.setZone(dateTimeZone72);
        org.joda.time.Chronology chronology74 = mutableDateTime71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = mutableDateTime71.getZone();
        java.lang.String str77 = dateTimeZone75.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology79 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone75, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology79);
        org.joda.time.DateTimeField dateTimeField81 = julianChronology79.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology79.millisOfDay();
        org.joda.time.DateTimeField dateTimeField83 = julianChronology79.year();
        org.joda.time.DateTimeField dateTimeField84 = julianChronology79.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology79.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField86 = julianChronology79.weekOfWeekyear();
        org.joda.time.DurationField durationField87 = julianChronology79.minutes();
        org.joda.time.DateTimeField dateTimeField88 = julianChronology79.millisOfDay();
        org.joda.time.DateTimeField dateTimeField89 = julianChronology79.monthOfYear();
        org.joda.time.DateTimeField dateTimeField90 = julianChronology79.minuteOfDay();
        org.joda.time.DurationField durationField91 = julianChronology79.weekyears();
        boolean boolean92 = strSet49.contains((java.lang.Object) julianChronology79);
        java.util.Spliterator<java.lang.String> strSpliterator93 = strSet49.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(julianChronology61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(julianChronology79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSpliterator93);
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.year();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.yearOfCentury();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1611586464368L), (org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField19 = julianChronology11.seconds();
        int int22 = durationField19.getDifference(54000049L, 86400027L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-32399) + "'", int22 == (-32399));
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.DateTime dateTime17 = dateTime7.plusHours(53644655);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays(53);
        boolean boolean22 = dateTime17.isBefore((-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime17.withMinuteOfHour(969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455758109L + "'", long13 == 1645455758109L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 194766213758109L + "'", long18 == 194766213758109L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField15 = julianChronology10.weekyears();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = julianChronology10.add(readablePeriod16, (long) 3, (int) 'u');
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L);
        int int22 = localDateTime21.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.millisOfDay();
        int[] intArray30 = julianChronology10.get((org.joda.time.ReadablePartial) localDateTime24, (long) 'u');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology41);
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        int int50 = property49.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime51 = property49.roundFloorCopy();
        boolean boolean52 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        boolean boolean53 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property54 = localDateTime24.yearOfEra();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime61.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime63 = mutableDateTime62.toDateTime();
        org.joda.time.DateTime dateTime65 = dateTime63.withMillis(1676991389543L);
        boolean boolean67 = dateTime65.isAfter(1608432970364L);
        int int68 = dateTime65.getHourOfDay();
        int int69 = property54.getDifference((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1969, 12, 19, 145]");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 86399999 + "'", int50 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 14 + "'", int68 == 14);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-53) + "'", int69 == (-53));
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.withYearOfEra(53644655);
        org.joda.time.DateTime dateTime8 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.plus(readablePeriod9);
        org.joda.time.LocalDate localDate11 = dateTime2.toLocalDate();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(53644655);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime9.plusMonths(2022);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis(59);
        org.joda.time.DateTime dateTime21 = dateTime17.withYearOfCentury((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime17.withTime(0, 53818, 82560100, 215);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53818 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(54124872);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        int int3 = localDateTime2.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) 'a');
        int int8 = localDateTime7.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withHourOfDay(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfMonth(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury(975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 975 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53656101);
        int int8 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(268);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter10.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        int int18 = mutableDateTime15.getMinuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        int int29 = mutableDateTime15.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime15.dayOfYear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime15.centuryOfEra();
        org.joda.time.DurationField durationField32 = property31.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime34 = property31.addWrapField(386);
        mutableDateTime34.setTime(1645455634363L);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = dateTimeFormatter10.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "", 38819);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.minuteOfDay();
        org.joda.time.DurationField durationField26 = julianChronology10.days();
        boolean boolean27 = durationField26.isPrecise();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = durationField26.getMillis(1676991272129L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1676991272129 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology19 = gJChronology0.withZone(dateTimeZone16);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime23.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology31.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.dayOfYear();
        int int37 = julianChronology31.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField38 = julianChronology31.hours();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology31.millisOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        java.lang.String str53 = mutableDateTime52.toString();
        mutableDateTime52.setDate((long) (short) 100);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        mutableDateTime58.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime58.getZone();
        mutableDateTime52.setZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime49.toDateTime(dateTimeZone62);
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = dateTime49.toString("0", locale67);
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = null;
        org.joda.time.format.DateTimeParser dateTimeParser70 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter69, dateTimeParser70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean75 = dateTimeZone73.isStandardOffset(1676991224530L);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = dateTimeZone73.getShortName((long) 10, locale77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter71.withLocale(locale77);
        java.lang.String str80 = locale67.getDisplayScript(locale77);
        long long81 = dateTimeField39.set(36413035L, "49", locale77);
        java.util.Locale.setDefault(category20, locale77);
        boolean boolean83 = gJChronology0.equals((java.lang.Object) locale77);
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(julianChronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str53, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-01:00" + "'", str78, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 21L + "'", long81 == 21L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        org.joda.time.DateTime.Property property15 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        int int22 = mutableDateTime19.getMinuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        int int33 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.plus(readablePeriod34);
        org.joda.time.DateTime dateTime37 = dateTime32.plusYears(1);
        org.joda.time.DateTime dateTime40 = dateTime32.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime32.minusYears(99);
        org.joda.time.DateTime dateTime44 = dateTime32.withYearOfCentury(6);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime32, chronology50);
        mutableDateTime53.setDate((long) (byte) 100);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfCeiling();
        mutableDateTime57.addWeeks(19);
        long long60 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime63.setZone(dateTimeZone64);
        org.joda.time.Chronology chronology66 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime63.getZone();
        java.lang.String str69 = dateTimeZone67.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology71 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone67, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology71);
        org.joda.time.DateTimeField dateTimeField73 = julianChronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology71.millisOfDay();
        org.joda.time.DateTimeField dateTimeField75 = julianChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology71.dayOfYear();
        org.joda.time.DurationField durationField77 = julianChronology71.seconds();
        org.joda.time.DateTimeField dateTimeField78 = julianChronology71.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology71.weekyear();
        boolean boolean80 = property15.equals((java.lang.Object) julianChronology71);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 51L + "'", long60 == 51L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(julianChronology71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        java.lang.String str9 = mutableDateTime8.toString();
        mutableDateTime8.addMillis((int) '4');
        int int12 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField14 = property3.getField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str9, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        long long33 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime22, 0L);
        org.joda.time.DurationField durationField34 = julianChronology11.years();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField36 = julianChronology11.hours();
        org.joda.time.DurationField durationField37 = julianChronology11.millis();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.secondOfDay();
        boolean boolean50 = property42.equals((java.lang.Object) property49);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((long) 52);
        int int53 = localDateTime52.size();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.weekOfWeekyear();
        int[] intArray56 = julianChronology11.get((org.joda.time.ReadablePartial) localDateTime52, 1676991283786L);
        org.joda.time.DurationField durationField57 = julianChronology11.days();
        long long60 = durationField57.getMillis(215, 120000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1123200056L + "'", long33 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[2023, 2, 8, 53683814]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 18576000000L + "'", long60 == 18576000000L);
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        int int15 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        int int26 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime31.getZone();
        java.lang.String str37 = dateTimeZone35.getNameKey(100L);
        long long39 = dateTimeZone35.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.secondOfDay();
        int int42 = gJChronology40.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime27, (org.joda.time.Chronology) gJChronology40);
        boolean boolean45 = dateTime27.isEqual(1676991223131L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.minus(readablePeriod54);
        org.joda.time.DateTime dateTime57 = dateTime53.minusMillis((int) '4');
        org.joda.time.DateTime.Property property58 = dateTime53.year();
        org.joda.time.DateTime dateTime60 = dateTime53.plusMillis(894);
        boolean boolean61 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology62 = dateTime53.getChronology();
        org.joda.time.DateTime dateTime64 = dateTime53.withMillisOfDay(53897);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        mutableDateTime67.setZone(dateTimeZone68);
        org.joda.time.Chronology chronology70 = mutableDateTime67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = mutableDateTime67.getZone();
        java.lang.String str73 = dateTimeZone71.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology75 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone71, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology75);
        org.joda.time.DateTimeField dateTimeField77 = julianChronology75.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField78 = julianChronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology75.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone80 = julianChronology75.getZone();
        java.lang.String str82 = dateTimeZone80.getNameKey((long) (byte) -1);
        org.joda.time.chrono.JulianChronology julianChronology83 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone80);
        org.joda.time.DurationField durationField84 = julianChronology83.centuries();
        org.joda.time.DateTimeField dateTimeField85 = julianChronology83.monthOfYear();
        org.joda.time.DateTime dateTime86 = dateTime64.toDateTime((org.joda.time.Chronology) julianChronology83);
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.DateTime dateTime88 = dateTime86.minus(readableDuration87);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(julianChronology75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
// flaky:         org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(julianChronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        int int14 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.addWeekyears((int) 'x');
        mutableDateTime2.addDays(1);
        mutableDateTime2.add((long) (byte) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        java.lang.String str24 = mutableDateTime23.toString();
        mutableDateTime23.setDate((long) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime29.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        int int35 = mutableDateTime23.getYearOfCentury();
        mutableDateTime23.addWeekyears((int) 'x');
        mutableDateTime23.addDays(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) '4');
        org.joda.time.DurationField durationField53 = chronology45.hours();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        mutableDateTime56.setZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = mutableDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone63);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) localDateTime64, (long) '4');
        org.joda.time.DurationField durationField67 = chronology59.hours();
        int int68 = durationField53.compareTo(durationField67);
        long long71 = durationField53.add((long) '4', (long) 0);
        org.joda.time.DurationFieldType durationFieldType72 = durationField53.getType();
        mutableDateTime23.add(durationFieldType72, 4);
        mutableDateTime2.add(durationFieldType72, 4);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime78 = property77.roundHalfEven();
        mutableDateTime78.addHours(19);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime78.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime82 = property81.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime83.yearOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str24, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean6 = dateTimeZone4.isStandardOffset(1676991224530L);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone4.getShortName((long) 10, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime15.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.secondOfDay();
        boolean boolean33 = property25.equals((java.lang.Object) property32);
        org.joda.time.LocalDateTime localDateTime35 = property25.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra(893);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readablePeriod38);
        org.joda.time.Chronology chronology40 = localDateTime37.getChronology();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime37, (-1), locale42);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale42.getDisplayVariant(locale47);
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str55 = nameProvider49.getName(locale51, "35", "52");
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder56.setRegion("IT");
        java.util.Locale locale60 = new java.util.Locale("fr");
        java.util.Locale.Builder builder61 = builder56.setLocale(locale60);
        java.util.Locale locale62 = builder56.build();
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale63.getDisplayLanguage(locale64);
        java.lang.String str67 = locale62.getDisplayName(locale63);
        java.lang.String str68 = locale62.getDisplayName();
        java.lang.String str71 = nameProvider49.getName(locale62, "Italian", "6");
        java.lang.String str72 = locale47.getDisplayCountry(locale62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter12.withLocale(locale47);
        org.joda.time.Chronology chronology74 = dateTimeFormatter73.getChronolgy();
        java.util.Locale locale75 = dateTimeFormatter73.getLocale();
        java.lang.Object obj76 = locale75.clone();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(nameProvider49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Japanese" + "'", str66, "Japanese");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str67, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "French" + "'", str68, "French");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japon" + "'", str72, "Japon");
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNull(chronology74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "ja_JP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "ja_JP");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "ja_JP");
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.hourOfHalfday();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillis((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(100L);
        int int53 = localDateTime52.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withYear(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.property(dateTimeFieldType60);
        org.joda.time.DateTime.Property property62 = dateTime50.property(dateTimeFieldType60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        mutableDateTime66.setZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = mutableDateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = mutableDateTime66.getZone();
        java.lang.String str72 = dateTimeZone70.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone70, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField75 = julianChronology74.dayOfYear();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        mutableDateTime78.setZone(dateTimeZone79);
        org.joda.time.Chronology chronology81 = mutableDateTime78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = mutableDateTime78.getZone();
        java.lang.String str84 = dateTimeZone82.getNameKey(100L);
        org.joda.time.Chronology chronology85 = julianChronology74.withZone(dateTimeZone82);
        org.joda.time.DateTimeField dateTimeField86 = julianChronology74.yearOfCentury();
        org.joda.time.DurationField durationField87 = julianChronology74.halfdays();
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime((long) 53656101, (org.joda.time.Chronology) julianChronology74);
        org.joda.time.DurationField durationField89 = julianChronology74.minutes();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType60.getField((org.joda.time.Chronology) julianChronology74);
        org.joda.time.DateTimeField dateTimeField91 = julianChronology74.yearOfEra();
        boolean boolean92 = dateTimeField91.isSupported();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(julianChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((-259144));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.plus(readableDuration27);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTime();
        org.joda.time.LocalDateTime localDateTime30 = dateTime29.toLocalDateTime();
        int int31 = dateTime29.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991758527L + "'", long21 == 1676991758527L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        java.lang.String[] strArray13 = new java.lang.String[] { "-0001-01-01T00:00:00.056", "1970-01-01T00:00:00.001Z", "-0001-01-01T00:00:00.056", "hi!", "", "+00:00", "-0001-01-01T00:00:00.056", "English", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        int int16 = strSet14.size();
        java.util.stream.Stream<java.lang.String> strStream17 = strSet14.stream();
        boolean boolean18 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.stream.Stream<java.lang.String> strStream19 = strSet14.parallelStream();
        java.lang.String[] strArray22 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        mutableDateTime27.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime27.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31, (int) (short) 1);
        org.joda.time.DurationField durationField36 = julianChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.weekOfWeekyear();
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology35.weekOfWeekyear();
        boolean boolean40 = strSet23.contains((java.lang.Object) julianChronology35);
        boolean boolean42 = strSet23.add("eng");
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        boolean boolean46 = strSet23.containsAll((java.util.Collection<java.lang.String>) strSet45);
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getDisplayScript();
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet49.spliterator();
        boolean boolean51 = strSet23.retainAll((java.util.Collection<java.lang.String>) strSet49);
        boolean boolean52 = strSet49.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet49.parallelStream();
        boolean boolean54 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.stream.Stream<java.lang.String> strStream55 = strSet14.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(julianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strStream55);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str12 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.property(dateTimeFieldType11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.property(dateTimeFieldType11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime2.add(readableDuration15, (-1));
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime2.add(readablePeriod18, 893);
        mutableDateTime2.setWeekyear((int) '4');
        mutableDateTime2.addWeeks(53797);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfCeiling();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra((int) (short) 0);
        org.joda.time.Chronology chronology14 = localDateTime11.getChronology();
        int int15 = localDateTime11.getMonthOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.minuteOfDay();
        org.joda.time.DurationField durationField20 = julianChronology15.days();
        org.joda.time.DurationField durationField21 = julianChronology15.seconds();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology15.millisOfSecond();
        org.joda.time.DurationField durationField23 = julianChronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology15.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) 22, true);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = dateTimeZone24.getShortName(1645459072454L, locale29);
        long long33 = dateTimeZone24.convertLocalToUTC(1676991337473L, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(237, 0, 50117, 12, 525055, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 525055 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-6L) + "'", long27 == (-6L));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.028" + "'", str30, "+00:00:00.028");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1676991337445L + "'", long33 == 1676991337445L);
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readableDuration18);
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime21.add(readableDuration23, 893);
        mutableDateTime21.setDayOfYear(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfCeilingCopy();
        int int33 = localDateTime32.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str35 = dateTimeFieldType34.toString();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.property(dateTimeFieldType34);
        int int37 = mutableDateTime21.get(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime19.withField(dateTimeFieldType34, 457070);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457070 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455758620L + "'", long13 == 1645455758620L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "minuteOfHour" + "'", str35, "minuteOfHour");
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone1.previousTransition((long) (-3840000));
        int int7 = dateTimeZone1.getStandardOffset(1645455431873L);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3840000L) + "'", long5 == (-3840000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        java.lang.String str15 = localDateTime9.toString();
        int int16 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.plusWeeks(12);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology29.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = julianChronology29.add(readablePeriod33, (long) (short) 1, 8);
        org.joda.time.DurationField durationField37 = julianChronology29.minutes();
        boolean boolean38 = localDateTime9.equals((java.lang.Object) julianChronology29);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        mutableDateTime41.setZone(dateTimeZone42);
        org.joda.time.Chronology chronology44 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime41.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology49);
        org.joda.time.DateTimeField dateTimeField51 = julianChronology49.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = julianChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology49.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = julianChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology49.weekyear();
        org.joda.time.DurationField durationField56 = julianChronology49.hours();
        boolean boolean57 = localDateTime9.equals((java.lang.Object) durationField56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        int int60 = localDateTime9.get(dateTimeFieldType58);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime9.plus(readableDuration61);
        int int63 = localDateTime62.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 902 + "'", int13 == 902);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str15, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(julianChronology49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-2) + "'", int60 == (-2));
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        int int10 = mutableDateTime7.getMinuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        int int21 = mutableDateTime7.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.plus((-61062681599999L));
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        long long38 = chronology31.set((org.joda.time.ReadablePartial) localDateTime36, (long) '4');
        org.joda.time.DurationField durationField39 = chronology31.hours();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 53, chronology31);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime43.getZone();
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone47, (int) (short) 1);
        org.joda.time.DurationField durationField52 = julianChronology51.weeks();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime55.getZone();
        java.lang.String str61 = dateTimeZone59.getNameKey((long) 10);
        org.joda.time.Chronology chronology62 = julianChronology51.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology51.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = julianChronology51.getZone();
        org.joda.time.Chronology chronology66 = chronology31.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = mutableDateTime24.toDateTime(dateTimeZone65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withZone(dateTimeZone65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter3.withDefaultYear(53824464);
        boolean boolean71 = dateTimeFormatter3.isParser();
        int int72 = dateTimeFormatter3.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.parse("Japanese (Japan)", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(julianChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2000 + "'", int72 == 2000);
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645455294167L);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks((int) (short) -1);
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusYears(70);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        boolean boolean14 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime1.minusDays(32400080);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale5 = dateTimeFormatter4.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter4.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 53662389);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 53797644);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean22 = dateTimeZone20.isStandardOffset(1676991224530L);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = dateTimeZone20.getShortName((long) 10, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter18.withLocale(locale24);
        org.joda.time.Chronology chronology27 = dateTimeFormatter26.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withDefaultYear(19);
        java.util.Locale locale30 = dateTimeFormatter26.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter15.withLocale(locale30);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long19 = dateTime11.getMillis();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime11.toGregorianCalendar();
        java.lang.String str21 = dateTime11.toString();
        org.joda.time.DateTime dateTime23 = dateTime11.plusSeconds(0);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds(53);
        org.joda.time.DateTime dateTime27 = dateTime23.withSecondOfMinute(24);
        org.joda.time.DateTime.Property property28 = dateTime23.centuryOfEra();
        org.joda.time.DateTime dateTime29 = property28.getDateTime();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readablePeriod38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property44 = dateTime39.hourOfDay();
        int int45 = dateTime39.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = dateTime39.toLocalDateTime();
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        int int48 = localDateTime46.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.plusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withField(dateTimeFieldType54, 38);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime46.minusMonths(386);
        boolean boolean59 = property28.equals((java.lang.Object) localDateTime46);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455758713L + "'", long19 == 1645455758713L);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T15:02:38.741+00:00:00.028" + "'", str21, "2022-02-21T15:02:38.741+00:00:00.028");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        mutableDateTime2.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.minuteOfHour();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.getMutableDateTime();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey(100L);
        long long25 = dateTimeZone21.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.weekyear();
        java.lang.String str28 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfMonth();
        java.lang.String str30 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.monthOfYear();
        org.joda.time.DurationField durationField32 = gJChronology26.millis();
        boolean boolean33 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) gJChronology26);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.DurationField durationField45 = julianChronology44.weeks();
        boolean boolean46 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) julianChronology44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        mutableDateTime49.setZone(dateTimeZone50);
        org.joda.time.Chronology chronology52 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime49.getZone();
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField58 = julianChronology57.dayOfYear();
        org.joda.time.DurationField durationField59 = julianChronology57.days();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology57.weekyearOfCentury();
        boolean boolean61 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) julianChronology57);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = julianChronology57.getDateTimeMillis((-6), 53808898, 82560052, 70, 0, 380, 53954555);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 902 + "'", int13 == 902);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str28, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GJChronology[+00:00:00.028]" + "'", str30, "GJChronology[+00:00:00.028]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(julianChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645455234867L);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant5 = instant1.withDurationAdded(readableDuration3, 86399999);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant1.withDurationAdded(readableDuration6, 2196);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.era();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        long long26 = julianChronology10.set((org.joda.time.ReadablePartial) localDateTime14, 604800099L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plus(readablePeriod33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int40 = localDateTime38.get(dateTimeFieldType39);
        int int41 = localDateTime36.indexOf(dateTimeFieldType39);
        java.lang.String str42 = localDateTime36.toString();
        org.joda.time.DateTimeField dateTimeField44 = localDateTime36.getField((int) (short) 1);
        org.joda.time.LocalDateTime.Property property45 = localDateTime36.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str47 = dateTimeFieldType46.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        mutableDateTime50.setZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) localDateTime58, (long) '4');
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        boolean boolean62 = dateTimeFieldType46.isSupported(chronology61);
        boolean boolean63 = localDateTime36.isSupported(dateTimeFieldType46);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType46.getField(chronology64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime14.property(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getDurationType();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime14.withFieldAdded(durationFieldType68, (-1645455306));
        org.joda.time.DateTime dateTime71 = localDateTime14.toDateTime();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1123200100L + "'", long26 == 1123200100L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 902 + "'", int40 == 902);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-0001-01-01T00:00:00.084" + "'", str42, "-0001-01-01T00:00:00.084");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "yearOfCentury" + "'", str47, "yearOfCentury");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T14:58:59.428+00:00:00.028");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:58:59.428+00:00:00.028");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime19 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(893);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1645455238371L, dateTimeZone36);
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfDay();
        org.joda.time.DateTime.Property property39 = dateTime37.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime26.toMutableDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime44.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey(100L);
        long long52 = dateTimeZone48.nextTransition((long) (short) 0);
        java.lang.String str54 = dateTimeZone48.getNameKey((long) (byte) 1);
        java.lang.String str55 = dateTimeZone48.toString();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTime dateTime57 = dateTime26.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillisOfDay(53938);
        org.joda.time.DateTime dateTime62 = dateTime59.withDurationAdded(1676991385046L, 168);
        org.joda.time.DateTime.Property property63 = dateTime59.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
// flaky:         org.junit.Assert.assertNull(str54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.028" + "'", str55, "+00:00:00.028");
        org.junit.Assert.assertNotNull(gJChronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(669, 836, 912, 53660571, 5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53660571 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime5.getFields();
        int int9 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.minusSeconds(465830);
        int int14 = localDateTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime9.plusMonths(2022);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis(59);
        org.joda.time.DateTime dateTime21 = dateTime17.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime17.withWeekyear(83340);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime17.withWeekOfWeekyear(53953);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53953 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = julianChronology11.add(readablePeriod15, (long) (short) 1, 8);
        org.joda.time.DurationField durationField19 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology11.getZone();
        java.lang.String str23 = dateTimeZone21.getName(1676991250197L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30, (int) (short) 1);
        org.joda.time.DurationField durationField35 = julianChronology34.weeks();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology34.weekOfWeekyear();
        org.joda.time.Chronology chronology37 = julianChronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology34.era();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology34.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = julianChronology34.getZone();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        long long43 = dateTimeZone21.getMillisKeepLocal(dateTimeZone40, (long) 833);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(1676991348061L, dateTimeZone21);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime47.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology55 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = julianChronology55.dayOfYear();
        org.joda.time.DurationField durationField57 = julianChronology55.minutes();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology55.yearOfEra();
        org.joda.time.DurationField durationField59 = julianChronology55.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology55.weekyearOfCentury();
        org.joda.time.DurationField durationField61 = julianChronology55.days();
        boolean boolean62 = dateTimeZone21.equals((java.lang.Object) durationField61);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.028" + "'", str23, "+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 833L + "'", long43 == 833L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(julianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes((int) (short) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455758915L + "'", long13 == 1645455758915L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean26 = localDateTime18.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withWeekyear(4);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withWeekyear(0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology43.minuteOfDay();
        org.joda.time.DurationField durationField48 = julianChronology43.days();
        org.joda.time.DurationField durationField49 = julianChronology43.seconds();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology43.minuteOfHour();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.dayOfYear();
        mutableDateTime54.setDate((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime54.secondOfDay();
        java.util.Locale locale67 = new java.util.Locale("", "hi!", "hi!");
        int int68 = property63.getMaximumTextLength(locale67);
        int int69 = dateTimeField51.getMaximumShortTextLength(locale67);
        java.lang.String str70 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale67);
        java.lang.Class<?> wildcardClass71 = dateTimeField16.getClass();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals(locale67.toString(), "_HI!_hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645455238371L, dateTimeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = gJChronology11.getDateTimeMillis(1479600000, (-1645455332), 53999233, 53934, 50481179, 50130368, 292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53934 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey(100L);
        long long11 = dateTimeZone7.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.secondOfDay();
        java.lang.Object obj14 = null;
        boolean boolean15 = gJChronology12.equals(obj14);
        org.joda.time.DurationField durationField16 = gJChronology12.millis();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        int int22 = mutableDateTime19.getMinuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime25.setMonthOfYear((int) (byte) 1);
        mutableDateTime25.addMinutes((int) (short) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime25.yearOfCentury();
        boolean boolean39 = mutableDateTime19.isEqual((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plus(readablePeriod46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int53 = localDateTime51.get(dateTimeFieldType52);
        int int54 = localDateTime49.indexOf(dateTimeFieldType52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime57.setZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone64);
        long long67 = chronology60.set((org.joda.time.ReadablePartial) localDateTime65, (long) '4');
        org.joda.time.DateTimeField dateTimeField68 = chronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType52.getField(chronology60);
        mutableDateTime25.set(dateTimeFieldType52, (int) (short) 10);
        boolean boolean72 = gJChronology12.equals((java.lang.Object) (short) 10);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology12.getZone();
        java.lang.String str75 = dateTimeZone74.toString();
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(900L, dateTimeZone74);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        mutableDateTime76.add(readablePeriod77);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 902 + "'", int53 == 902);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.028" + "'", str75, "+00:00:00.028");
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 1970);
        boolean boolean2 = mutableDateTime1.isBeforeNow();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime5.getZone();
        java.lang.String str11 = dateTimeZone9.getNameKey(100L);
        long long13 = dateTimeZone9.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField15 = gJChronology14.days();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.secondOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.months();
        org.joda.time.DurationFieldType durationFieldType19 = durationField18.getType();
        mutableDateTime1.add(durationFieldType19, 53912719);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.year();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.hours();
        org.joda.time.DurationField durationField19 = julianChronology10.hours();
        org.joda.time.DurationField durationField20 = julianChronology10.months();
        org.joda.time.DurationField durationField21 = julianChronology10.months();
        org.joda.time.Chronology chronology22 = julianChronology10.withUTC();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(99, 8, 3, (int) (byte) 0, 3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime10.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime22.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey(100L);
        org.joda.time.Chronology chronology29 = julianChronology18.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone26);
        boolean boolean31 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime6.minus(readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41, (int) (short) 1);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(1676991233699L, (org.joda.time.Chronology) julianChronology45);
        int int47 = dateTime46.getMonthOfYear();
        boolean boolean48 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(julianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        long long33 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime22, 0L);
        org.joda.time.DurationField durationField34 = julianChronology11.years();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(100L);
        int int40 = localDateTime39.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.minusMillis(10);
        long long49 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime47, 194766213283544L);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology11.era();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale57.getExtension('a');
        int int60 = property56.getMaximumShortTextLength(locale57);
        boolean boolean61 = locale57.hasExtensions();
        java.lang.String str62 = dateTimeField51.getAsText(86399999L, locale57);
        boolean boolean63 = locale57.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1123200056L + "'", long33 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1728000090L + "'", long49 == 1728000090L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        int int14 = property3.getMinimumValue();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readableDuration27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime30.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime30.minusMonths((int) (byte) 1);
        boolean boolean45 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withMinuteOfHour(51);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime26.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime26.minusYears(345);
        int int52 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(julianChronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Instant instant12 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean21 = dateTimeZone19.isStandardOffset(1676991224530L);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = dateTimeZone19.getShortName((long) 10, locale23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withLocale(locale23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        mutableDateTime28.setZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(100L);
        int int45 = localDateTime44.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withPeriodAdded(readablePeriod48, (int) (short) 100);
        long long52 = chronology40.set((org.joda.time.ReadablePartial) localDateTime44, (long) (short) 0);
        org.joda.time.DateTime dateTime53 = dateTime33.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime44.withDurationAdded(readableDuration54, (int) (short) -1);
        java.util.Locale locale59 = new java.util.Locale("IT");
        java.lang.String str60 = localDateTime56.toString("35", locale59);
        java.lang.String str61 = locale23.getDisplayName(locale59);
        java.lang.String str62 = dateTimeZone13.getName((long) (short) 100, locale59);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        mutableDateTime66.setZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = mutableDateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = mutableDateTime66.getZone();
        java.lang.String str72 = dateTimeZone70.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone70, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology74);
        org.joda.time.DateTimeField dateTimeField76 = julianChronology74.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology74.millisOfDay();
        int int78 = dateTimeField77.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.millisOfDay();
        org.joda.time.LocalDateTime localDateTime84 = property82.addToCopy(4);
        org.joda.time.DateTimeField dateTimeField85 = property82.getField();
        org.joda.time.LocalDateTime localDateTime86 = property82.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withYear((-3840000));
        java.util.Locale locale90 = java.util.Locale.JAPANESE;
        java.util.Locale locale91 = java.util.Locale.ITALY;
        java.lang.String str92 = locale90.getDisplayVariant(locale91);
        java.lang.String str93 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime86, 20, locale90);
        boolean boolean94 = locale90.hasExtensions();
        java.lang.String str95 = dateTimeZone13.getName((long) 'a', locale90);
        java.util.Set<java.lang.Character> charSet96 = locale90.getExtensionKeys();
        java.lang.String str97 = locale90.toLanguageTag();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "35" + "'", str60, "35");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(julianChronology74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ja");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "20" + "'", str93, "20");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00" + "'", str95, "+00:00");
        org.junit.Assert.assertNotNull(charSet96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ja" + "'", str97, "ja");
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.dayOfYear();
        java.lang.String str15 = julianChronology10.toString();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.year();
        org.joda.time.DurationField durationField19 = julianChronology10.weekyears();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str15, "JulianChronology[+00:00:00.028,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(505, 51);
        int int4 = dateTimeZone2.getOffsetFromLocal(1676991743151L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1821060000 + "'", int4 == 1821060000);
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        java.lang.String[] strArray10 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray17 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray24 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[] strArray31 = new java.lang.String[] { "Etc/UTC", "minuteOfHour", "0", "millisOfDay", "IT", "1970-01-01T00:00:00.001Z" };
        java.lang.String[][] strArray32 = new java.lang.String[][] { strArray10, strArray17, strArray24, strArray31 };
        java.lang.String[][] strArray33 = strSet2.toArray(strArray32);
        int int34 = strSet2.size();
        org.joda.time.tz.Provider provider35 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone37 = provider35.getZone("eng");
        java.util.Set<java.lang.String> strSet38 = provider35.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone40 = provider35.getZone("DurationField[seconds]");
        java.util.Set<java.lang.String> strSet41 = provider35.getAvailableIDs();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream45 = strSet44.parallelStream();
        java.lang.Object[] objArray46 = strSet44.toArray();
        boolean boolean47 = strSet41.removeAll((java.util.Collection<java.lang.String>) strSet44);
        boolean boolean48 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet41);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(provider35);
        org.junit.Assert.assertNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        long long33 = julianChronology11.set((org.joda.time.ReadablePartial) localDateTime22, 0L);
        org.joda.time.DurationField durationField34 = julianChronology11.years();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DurationField durationField36 = julianChronology11.hours();
        org.joda.time.DurationField durationField37 = julianChronology11.millis();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = mutableDateTime45.getChronology();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.secondOfDay();
        boolean boolean50 = property42.equals((java.lang.Object) property49);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((long) 52);
        int int53 = localDateTime52.size();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.weekOfWeekyear();
        int[] intArray56 = julianChronology11.get((org.joda.time.ReadablePartial) localDateTime52, 1676991283786L);
        org.joda.time.DurationField durationField57 = julianChronology11.days();
        long long59 = durationField57.getValueAsLong(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1123200056L + "'", long33 == 1123200056L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[2023, 2, 8, 53683814]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.minuteOfHour();
        org.joda.time.DurationField durationField17 = julianChronology10.weekyears();
        org.joda.time.DurationField durationField18 = julianChronology10.millis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.era();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = julianChronology26.getZone();
        org.joda.time.Chronology chronology41 = julianChronology10.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology10.hourOfHalfday();
        java.lang.String str43 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField45 = julianChronology10.months();
        org.joda.time.DurationField durationField46 = julianChronology10.millis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JulianChronology[+00:00:00.028,mdfw=1]" + "'", str43, "JulianChronology[+00:00:00.028,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 23);
        long long6 = dateTimeZone2.previousTransition(1676991362942L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1676991362942L + "'", long6 == 1676991362942L);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus(52023L);
        org.joda.time.Instant instant4 = instant2.minus((long) 53750);
        org.joda.time.DateTime dateTime5 = instant2.toDateTime();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone10);
        long long13 = chronology6.set((org.joda.time.ReadablePartial) localDateTime11, (long) '4');
        org.joda.time.DurationField durationField14 = chronology6.hours();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 53, chronology6);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22, (int) (short) 1);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime30.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 10);
        org.joda.time.Chronology chronology37 = julianChronology26.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = julianChronology26.getZone();
        org.joda.time.Chronology chronology41 = chronology6.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(julianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.secondOfDay();
        boolean boolean13 = property5.equals((java.lang.Object) property12);
        org.joda.time.LocalDateTime localDateTime15 = property5.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(893);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusDays(53660571);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfSecond();
        long long21 = property20.remainder();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.getMutableDateTime();
        boolean boolean26 = localDateTime22.equals((java.lang.Object) mutableDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.minusDays(82800052);
        java.lang.String str29 = localDateTime22.toString();
        int int30 = dateTimeField1.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "148887-08-27T00:00:02.102" + "'", str29, "148887-08-27T00:00:02.102");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        int int34 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        int int45 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L);
        int int54 = localDateTime53.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime53.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusMonths((int) (byte) 1);
        boolean boolean68 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.millisOfDay();
        java.lang.String str71 = property70.getName();
        org.joda.time.LocalDateTime localDateTime72 = property70.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime73 = property70.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime75 = property70.addWrapFieldToCopy(274);
        org.joda.time.LocalDateTime localDateTime76 = property70.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "millisOfDay" + "'", str71, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfSecond(568);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology10.centuryOfEra();
        org.joda.time.DurationField durationField24 = julianChronology10.weeks();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now((org.joda.time.Chronology) julianChronology10);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfMonth((int) (short) 1);
        java.util.Date date16 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromDateFields(date16);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 10);
        int int2 = dateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.addToCopy(1969);
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy((-2772));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime22.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(23);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        long long30 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property31 = dateTime26.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 902 + "'", int3 == 902);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology11.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology19 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = gJChronology0.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology0.yearOfEra();
        org.joda.time.DurationField durationField23 = gJChronology0.minutes();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.plusSeconds(2022);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.plusHours(14);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        java.util.Locale locale3 = new java.util.Locale("2022-02-21T14:56:07.204Z", "China", "+71:00");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = julianChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.hourOfDay();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = dateTimeField19.getAsShortText((long) (byte) 10, locale21);
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.lang.String str24 = locale3.getDisplayScript(locale21);
        java.lang.String str25 = locale3.getDisplayLanguage();
        java.util.Locale locale26 = locale3.stripExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-21t14:56:07.204z_CHINA_+71:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21t14:56:07.204z" + "'", str25, "2022-02-21t14:56:07.204z");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "2022-02-21t14:56:07.204z_CHINA_+71:00");
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = julianChronology10.days();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = julianChronology10.getDateTimeMillis(53641419L, 50183280, 901, 53873, (-19042));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50183280 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.Instant instant21 = mutableDateTime2.toInstant();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime23.copy();
        mutableDateTime24.setTime(1676991697295L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(893);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMillis((int) 'u');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(100L);
        int int39 = localDateTime38.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withPeriodAdded(readablePeriod42, (int) (short) 100);
        long long46 = chronology34.set((org.joda.time.ReadablePartial) localDateTime38, (long) (short) 0);
        org.joda.time.DateTime dateTime47 = dateTime27.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.minus(readablePeriod58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays((int) ' ');
        org.joda.time.DateTime dateTime65 = dateTime61.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime68 = dateTime61.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long69 = dateTime61.getMillis();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        mutableDateTime72.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology75 = mutableDateTime72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = mutableDateTime72.getZone();
        java.lang.String str78 = dateTimeZone76.getNameKey(100L);
        long long80 = dateTimeZone76.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) long69, dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime49.toMutableDateTime(dateTimeZone76);
        boolean boolean84 = dateTimeZone76.isStandardOffset(7L);
        java.lang.String str86 = dateTimeZone76.getNameKey((long) (-3840000));
        org.joda.time.DateTime dateTime87 = localDateTime19.toDateTime(dateTimeZone76);
        long long89 = dateTimeZone76.convertUTCToLocal((long) 142);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645455759655L + "'", long69 == 1645455759655L);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 170L + "'", long89 == 170L);
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        java.lang.String str8 = mutableDateTime7.toString();
        mutableDateTime7.setDate((long) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime13.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 10);
        long long29 = dateTimeZone17.getMillisKeepLocal(dateTimeZone25, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField31 = mutableDateTime30.getRoundingField();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime30.year();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZone(dateTimeZone36);
        org.joda.time.Chronology chronology38 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime35.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology43);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology43.minuteOfDay();
        org.joda.time.DurationField durationField48 = julianChronology43.days();
        org.joda.time.DurationField durationField49 = julianChronology43.seconds();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology43.minuteOfHour();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = mutableDateTime54.getChronology();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.dayOfYear();
        mutableDateTime54.setDate((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime54.secondOfDay();
        java.util.Locale locale67 = new java.util.Locale("", "hi!", "hi!");
        int int68 = property63.getMaximumTextLength(locale67);
        int int69 = dateTimeField51.getMaximumShortTextLength(locale67);
        boolean boolean70 = mutableDateTime30.equals((java.lang.Object) locale67);
        boolean boolean71 = locale67.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter2.withLocale(locale67);
        boolean boolean73 = dateTimeFormatter2.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimePrinter3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str8, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(julianChronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals(locale67.toString(), "_HI!_hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        long long12 = chronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.Chronology chronology13 = chronology5.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) '4');
        int[] intArray28 = chronology13.get((org.joda.time.ReadablePartial) localDateTime24, 0L);
        org.joda.time.DateTimeField dateTimeField29 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField30 = chronology13.millis();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DurationField durationField16 = julianChronology10.months();
        org.joda.time.DurationField durationField17 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.dayOfYear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime14.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(100L);
        org.joda.time.Chronology chronology21 = julianChronology10.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField23 = julianChronology10.months();
        org.joda.time.DurationField durationField24 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology10.era();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        int int20 = mutableDateTime17.getMinuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        int int31 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readablePeriod32);
        org.joda.time.DateTime dateTime35 = dateTime30.plusYears(1);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime39 = dateTime38.toLocalDateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.withEarlierOffsetAtOverlap();
        int int41 = property14.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = property14.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = property14.setCopy("minuteOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minuteOfDay\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1676991759758L + "'", long36 == 1676991759758L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.DateTime dateTime14 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.minusMinutes(10800);
        org.joda.time.DateTime dateTime19 = dateTime14.minusMonths(465830);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        java.lang.String str4 = mutableDateTime3.toString();
        mutableDateTime3.setDate((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime9.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime17.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        long long25 = dateTimeZone13.getMillisKeepLocal(dateTimeZone21, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone21);
        mutableDateTime26.addMinutes((int) (short) 1);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.addWrapField(50276985);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.millisOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str4, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology10.getZone();
        org.joda.time.DurationField durationField15 = julianChronology10.years();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.minusMinutes(5);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) -1);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455759837L + "'", long13 == 1645455759837L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField2 = gJChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plus((long) 'x');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(100L);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime0.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(51);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) dateTime31);
        mutableDateTime16.setZoneRetainFields(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDateTime(24962074, 54057020, 587, 53693360, 54119215, (-3840000), 61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53693360 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfCeiling();
        java.lang.String str13 = mutableDateTime12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime23.withCenturyOfEra(53);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        mutableDateTime44.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.Chronology chronology49 = chronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) '4', chronology47);
        mutableDateTime51.setHourOfDay(0);
        boolean boolean54 = dateTime40.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        boolean boolean55 = dateTime29.isBefore((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addDays(3043);
        boolean boolean58 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime12.minuteOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.028" + "'", str13, "1970-01-01T00:00:00.000+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        java.lang.String[] strArray2 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11, (int) (short) 1);
        org.joda.time.DurationField durationField16 = julianChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.weekOfWeekyear();
        boolean boolean20 = strSet3.contains((java.lang.Object) julianChronology15);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology15.millisOfDay();
        java.lang.String str24 = dateTimeField22.getAsText(1645455517952L);
        long long26 = dateTimeField22.roundCeiling((long) 245);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(julianChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "53917980" + "'", str24, "53917980");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 245L + "'", long26 == 245L);
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-01-20T15:01:11.319+00:00:00.028", (double) 1676991423637L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.676991423637E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusHours(2922789);
        int int10 = localDateTime1.getEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.withCenturyOfEra(245);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plus(readablePeriod24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        int int33 = mutableDateTime30.getMinuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readablePeriod42);
        int int44 = mutableDateTime30.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = localDateTime27.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) '4');
        org.joda.time.DurationField durationField59 = chronology51.seconds();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime43.toMutableDateTime(chronology51);
        int int61 = dateTime43.getWeekOfWeekyear();
        java.util.Date date62 = dateTime43.toDate();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.fromDateFields(date62);
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, (int) (short) 100, locale65);
        java.lang.String str67 = locale65.getDisplayLanguage();
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale68.getDisplayScript();
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        java.util.Locale locale72 = locale68.stripExtensions();
        java.util.Locale locale73 = locale68.stripExtensions();
        java.util.Locale locale74 = locale68.stripExtensions();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Mon Feb 21 15:02:39 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100" + "'", str66, "100");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(24, 922, 53790665, (int) (byte) 0, 245);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 245 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.hourOfDay();
        int int15 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime9.plusMonths(2022);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis(59);
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime17.plus((long) 22);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readablePeriod23);
        boolean boolean26 = dateTime22.isBefore((long) 30);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = julianChronology10.add(readablePeriod16, (long) 23, 99);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withSecondOfMinute(54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek((-2023));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2023 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 23L + "'", long19 == 23L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = julianChronology10.seconds();
        int int14 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = julianChronology10.add(readablePeriod16, (long) 23, 99);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology10.year();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.centuryOfEra();
        boolean boolean28 = localDateTime22.equals((java.lang.Object) property27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.minus(readableDuration29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime33.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plus(readableDuration43);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(100L);
        int int47 = localDateTime46.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = property53.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime46.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime46.minusMonths((int) (byte) 1);
        boolean boolean61 = localDateTime42.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime42.withMinuteOfHour(51);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusDays(53662389);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withPeriodAdded(readablePeriod66, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.withYear(366);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str72 = dateTimeFieldType71.getName();
        boolean boolean73 = localDateTime70.isSupported(dateTimeFieldType71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = localDateTime22.withField(dateTimeFieldType71, 190800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 190800000 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 23L + "'", long19 == 23L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(julianChronology41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "minuteOfDay" + "'", str72, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(23);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTimeISO();
        mutableDateTime18.addWeeks(53851882);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology11 = dateTimeFormatter8.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter8.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter8.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 53676280);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField13 = gJChronology11.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.year();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfDay();
        org.joda.time.DurationField durationField16 = gJChronology11.days();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField18 = gJChronology11.minutes();
        org.joda.time.DurationField durationField19 = gJChronology11.centuries();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfEra();
        java.lang.String str6 = property5.getName();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy(54066989);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yearOfEra" + "'", str6, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int3 = localDateTime1.get(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        java.lang.String str6 = property4.getAsString();
        java.util.Locale locale10 = new java.util.Locale("Italian", "6");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setRegion("IT");
        java.util.Locale locale15 = new java.util.Locale("fr");
        java.util.Locale.Builder builder16 = builder11.setLocale(locale15);
        java.util.Locale locale17 = builder11.build();
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.lang.String str22 = locale17.getDisplayName(locale18);
        java.lang.String str23 = locale17.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale17.getDisplayScript(locale24);
        java.lang.String str26 = locale10.getDisplayVariant(locale17);
        org.joda.time.LocalDateTime localDateTime27 = property4.setCopy("82800052", locale10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusDays(53837230);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 902 + "'", int3 == 902);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertEquals(locale10.toString(), "italian_6");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese" + "'", str21, "Japanese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str22, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "French" + "'", str23, "French");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DurationField durationField12 = julianChronology10.seconds();
        org.joda.time.DurationField durationField13 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = julianChronology10.hours();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-27383935L));
        int int2 = dateTime1.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(893);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        java.lang.String str18 = localDateTime15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = localDateTime15.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "89370-01-01T00:00:02.102" + "'", str18, "89370-01-01T00:00:02.102");
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime dateTime3 = dateTime1.withYear((-292269054));
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(50276985);
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Instant instant12 = gJChronology11.getGregorianCutover();
        int int13 = gJChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(100L);
        int int33 = localDateTime32.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withPeriodAdded(readablePeriod36, (int) (short) 100);
        long long40 = chronology28.set((org.joda.time.ReadablePartial) localDateTime32, (long) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime21.withFields((org.joda.time.ReadablePartial) localDateTime32);
        long long43 = gJChronology11.set((org.joda.time.ReadablePartial) localDateTime32, 1645455422419L);
        org.joda.time.DurationField durationField44 = gJChronology11.days();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeFormatter6.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter6.getZone();
        java.lang.StringBuffer stringBuffer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer10, (long) 75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str9 = dateTimeZone7.getShortName((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 3, dateTimeZone7);
        boolean boolean11 = dateTimeZone7.isFixed();
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        long long14 = dateTimeZone7.nextTransition((long) 54126040);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(86, 82560001, 50461112, (-27424225), 10560, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27424225 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(julianChronology12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 54126040L + "'", long14 == 54126040L);
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear(10);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime6.getZone();
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = julianChronology14.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) -1);
        org.joda.time.Chronology chronology22 = gJChronology3.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = localDateTime2.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale29.getExtension('a');
        int int32 = property28.getMaximumShortTextLength(locale29);
        java.lang.String str33 = locale29.getISO3Country();
        java.lang.String str34 = dateTimeZone19.getName((-432000000000L), locale29);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology40 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime37.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone41, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField46 = julianChronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology45.clockhourOfHalfday();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        mutableDateTime51.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = mutableDateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime51.getZone();
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField60 = julianChronology59.millisOfDay();
        boolean boolean61 = julianChronology45.equals((java.lang.Object) julianChronology59);
        org.joda.time.DurationField durationField62 = julianChronology59.centuries();
        boolean boolean63 = dateTimeZone19.equals((java.lang.Object) durationField62);
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime64.setSecondOfDay((-877838));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -877838 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.028" + "'", str34, "+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(julianChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(julianChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime23.setMonthOfYear((int) (byte) 1);
        mutableDateTime23.addMinutes((int) (short) 0);
        mutableDateTime23.setWeekyear(19);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfCeilingCopy();
        int int43 = localDateTime42.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str45 = dateTimeFieldType44.toString();
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.property(dateTimeFieldType44);
        int int47 = mutableDateTime23.get(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType44.getDurationType();
        org.joda.time.DateTime dateTime50 = dateTime20.withFieldAdded(durationFieldType48, 53727406);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths((-3600000));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime52.withSecondOfMinute(53845);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53845 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minuteOfHour" + "'", str45, "minuteOfHour");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getExtension('a');
        java.lang.String str4 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja-JP" + "'", str4, "ja-JP");
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setDate((long) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime8.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 10);
        long long24 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, (long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 4);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone27, (long) 'a');
        long long34 = dateTimeZone27.convertLocalToUTC(1645455232454L, true, (long) 12);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((int) 'u');
        org.joda.time.DateTime dateTime39 = dateTime35.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime35.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property41 = dateTime35.dayOfYear();
        org.joda.time.DateTime.Property property42 = dateTime35.millisOfSecond();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3840125L + "'", long30 == 3840125L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645459072454L + "'", long34 == 1645459072454L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder0.clearExtensions();
        java.util.Locale.Builder builder22 = builder0.clearExtensions();
        java.util.Locale.Builder builder23 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime29 = property27.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        boolean boolean34 = property27.equals((java.lang.Object) property33);
        org.joda.time.LocalDateTime localDateTime35 = property27.withMinimumValue();
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.lang.String str38 = locale36.getLanguage();
        int int39 = property27.getMaximumShortTextLength(locale36);
        java.util.Locale.Builder builder40 = builder0.setLocale(locale36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder43 = builder40.setUnicodeLocaleKeyword("-0001-12-31T23:00:00.056", "-0001-03-26T00:00:00.056Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: -0001-12-31T23:00:00.056 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ja" + "'", str38, "ja");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        mutableDateTime25.setZone(dateTimeZone26);
        int int28 = mutableDateTime25.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        int int39 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime38.plusYears(1);
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) 6, (int) (byte) 0);
        org.joda.time.DateTime dateTime47 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int49 = localDateTime21.getMillisOfDay();
        org.joda.time.Chronology chronology50 = localDateTime21.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        int int53 = localDateTime21.indexOf(dateTimeFieldType51);
        java.util.Locale locale58 = new java.util.Locale("\u5354\u5b9a\u4e16\u754c\u6642", "millisOfDay", "-0001-01-01T00:00:00.056");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime66 = property63.set((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.monthOfYear();
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = property67.getAsText(locale68);
        java.lang.String str70 = locale58.getDisplayScript(locale68);
        java.lang.String str71 = localDateTime21.toString("\u5354\u5b9a\u4e16\u754c\u6642", locale58);
        java.lang.String str72 = locale58.getDisplayLanguage();
        java.util.Locale locale76 = new java.util.Locale("Property[monthOfYear]", "JulianChronology[-01:04,mdfw=1]", "1640354272");
        java.lang.String str77 = locale58.getDisplayVariant(locale76);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 128 + "'", int49 == 128);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals(locale58.toString(), "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_-0001-01-01T00:00:00.056");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "janvier" + "'", str69, "janvier");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str71, "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str72, "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertEquals(locale76.toString(), "property[monthofyear]_JULIANCHRONOLOGY[-01:04,MDFW=1]_1640354272");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-0001-01-01T00:00:00.056" + "'", str77, "-0001-01-01T00:00:00.056");
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime2.setYear(180);
        boolean boolean19 = mutableDateTime2.isBeforeNow();
        mutableDateTime2.setDate(43200000L);
        mutableDateTime2.addMillis(23);
        mutableDateTime2.setMillis(1645268033775L);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime2.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime16 = property14.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = property14.getDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime21.getZone();
        java.lang.String str27 = dateTimeZone25.getNameKey(100L);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 54, dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField30 = julianChronology29.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = julianChronology29.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime17, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusHours(54070816);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(julianChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L);
        int int19 = localDateTime18.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withPeriodAdded(readablePeriod22, (int) (short) 100);
        long long26 = chronology14.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withDurationAdded(readableDuration28, (int) (short) -1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(100L);
        int int37 = localDateTime36.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime43 = localDateTime39.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(100L);
        int int46 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.year();
        boolean boolean52 = localDateTime39.isEqual((org.joda.time.ReadablePartial) localDateTime50);
        int int53 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime39.plusHours(0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology10.add(readablePeriod14, (long) (short) 1, 8);
        org.joda.time.DurationField durationField18 = julianChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology10.millisOfSecond();
        org.joda.time.DurationField durationField20 = julianChronology10.hours();
        org.joda.time.Chronology chronology21 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology10.year();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getOffset(3233600L);
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean5 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("giappone");
        timeZone7.setID("4472085-12-01T00:00:00.000Z");
        boolean boolean10 = timeZone7.observesDaylightTime();
        timeZone7.setID("2022-02-21T14:55:47.465Z");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        int int15 = timeZone13.getOffset((long) 59);
        int int17 = timeZone13.getOffset(56000L);
        boolean boolean18 = timeZone13.observesDaylightTime();
        boolean boolean19 = timeZone7.hasSameRules(timeZone13);
        boolean boolean20 = timeZone0.hasSameRules(timeZone7);
        boolean boolean21 = timeZone7.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone22.observesDaylightTime();
        java.lang.String str24 = timeZone22.getID();
        int int26 = timeZone22.getOffset((long) (short) 1);
        boolean boolean27 = timeZone7.hasSameRules(timeZone22);
        java.lang.String str28 = timeZone7.getID();
        java.lang.String str29 = timeZone7.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT" + "'", str24, "GMT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-21T14:55:47.465Z" + "'", str28, "2022-02-21T14:55:47.465Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GMT+00:00" + "'", str29, "GMT+00:00");
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.dayOfYear();
        int int16 = julianChronology10.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField19 = julianChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime23.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMillis((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime28.minuteOfHour();
        long long34 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime28.minusMinutes(5);
        org.joda.time.DateTime dateTime38 = dateTime28.plusHours(53644655);
        org.joda.time.DateTime dateTime40 = dateTime28.minusHours((int) (short) 0);
        org.joda.time.DateTime.Property property41 = dateTime40.weekOfWeekyear();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks(1);
        org.joda.time.LocalDateTime localDateTime44 = dateTime43.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 4);
        java.lang.String str51 = property48.getName();
        org.joda.time.LocalDateTime localDateTime52 = property48.withMinimumValue();
        int[] intArray53 = localDateTime52.getValues();
        julianChronology10.validate((org.joda.time.ReadablePartial) localDateTime44, intArray53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime44.plusSeconds(53758745);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfSecond(1640354272);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1640354272 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645455760475L + "'", long34 == 1645455760475L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfDay" + "'", str51, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime26 = dateTime24.minusYears(893);
        org.joda.time.DateTime.Property property27 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime28 = property27.roundCeilingCopy();
        int int29 = property27.getLeapAmount();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str11, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((int) (byte) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(100L);
        int int28 = localDateTime27.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusWeeks((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withPeriodAdded(readablePeriod31, (int) (short) 100);
        long long35 = chronology23.set((org.joda.time.ReadablePartial) localDateTime27, (long) (short) 0);
        org.joda.time.DateTime dateTime36 = dateTime16.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime38.withWeekyear(0);
        org.joda.time.DateTime dateTime44 = dateTime38.withWeekOfWeekyear((int) '#');
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(10);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime44);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.lang.String str52 = locale48.getDisplayVariant(locale50);
        java.util.Calendar calendar53 = mutableDateTime8.toCalendar(locale50);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime8.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundHalfCeiling();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str3, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=3176323200100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.028,offset=28,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2070,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=4,DAY_OF_MONTH=27,DAY_OF_YEAR=239,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=128,ZONE_OFFSET=28,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.DurationField durationField11 = julianChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = julianChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.era();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.era();
        org.joda.time.DurationField durationField16 = julianChronology10.weekyears();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime19.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (short) 1);
        long long29 = dateTimeZone23.convertUTCToLocal((long) 2022);
        long long31 = dateTimeZone23.previousTransition(1645455231587L);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusHours((int) (byte) 10);
        boolean boolean41 = dateTimeZone23.isLocalDateTimeGap(localDateTime40);
        java.lang.String str43 = dateTimeZone23.getShortName(1645455276530L);
        java.lang.String str44 = dateTimeZone23.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.Chronology chronology46 = julianChronology10.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfWeek();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(julianChronology27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2050L + "'", long29 == 2050L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455231587L + "'", long31 == 1645455231587L);
        org.junit.Assert.assertNotNull(julianChronology33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.028" + "'", str43, "+00:00:00.028");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.028" + "'", str44, "+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.hourOfHalfday();
        int int18 = dateTimeField16.getMinimumValue(1645455499714L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) (byte) 10);
        org.joda.time.Instant instant4 = instant2.plus(1676991283786L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long9 = durationField6.subtract(1456066667485L, (int) (byte) 0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1456066667485L + "'", long9 == 1456066667485L);
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        boolean boolean11 = property3.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(893);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        java.lang.String str18 = property16.getAsText();
        org.joda.time.LocalDateTime localDateTime19 = property16.getLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "89370" + "'", str18, "89370");
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4', chronology6);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 4);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        int int27 = mutableDateTime24.getMinuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        int int38 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) dateTime37);
        mutableDateTime10.setMillisOfSecond(386);
        int int43 = mutableDateTime10.getDayOfMonth();
        mutableDateTime10.addMinutes((-53));
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        mutableDateTime48.setZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTime.Property property54 = dateTime53.weekOfWeekyear();
        boolean boolean55 = mutableDateTime10.equals((java.lang.Object) property54);
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime10.getZone();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder0.setLanguage("English");
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder24 = builder22.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder22.removeUnicodeLocaleAttribute("0035-01-01T00:00:22.029+00:00:00.028");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0035-01-01T00:00:22.029+00:00:00.028 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime27.withDurationAdded((long) (byte) 0, (int) (short) 10);
        long long35 = dateTime27.getMillis();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        mutableDateTime38.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime38.getZone();
        java.lang.String str44 = dateTimeZone42.getNameKey(100L);
        long long46 = dateTimeZone42.nextTransition((long) (short) 0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) long35, dateTimeZone42);
        org.joda.time.DateTime dateTime48 = localDateTime15.toDateTime(dateTimeZone42);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime50 = property49.roundCeilingCopy();
        org.joda.time.DateTime dateTime51 = property49.withMinimumValue();
        org.joda.time.DateTime dateTime52 = property49.roundFloorCopy();
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfMonth();
        org.joda.time.DateTime dateTime54 = property53.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645455760627L + "'", long35 == 1645455760627L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.plusYears(1);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = property25.addToCopy(259200001L);
        org.joda.time.DateTime dateTime28 = property25.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1676991760656L + "'", long21 == 1676991760656L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder0.clearExtensions();
        java.util.Locale.Builder builder22 = builder0.clearExtensions();
        java.util.Locale.Builder builder23 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime29 = property27.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        boolean boolean34 = property27.equals((java.lang.Object) property33);
        org.joda.time.LocalDateTime localDateTime35 = property27.withMinimumValue();
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.lang.String str38 = locale36.getLanguage();
        int int39 = property27.getMaximumShortTextLength(locale36);
        java.util.Locale.Builder builder40 = builder0.setLocale(locale36);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime43.getZone();
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        java.lang.String str51 = dateTimeZone47.getName((long) 3);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean57 = dateTimeZone55.isStandardOffset(1676991224530L);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = dateTimeZone55.getShortName((long) 10, locale59);
        java.lang.String str61 = dateTimeZone47.getName(1676991241391L, locale59);
        java.lang.String str62 = locale59.getDisplayName();
        java.util.Locale.Builder builder63 = builder40.setLocale(locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder65 = builder63.removeUnicodeLocaleAttribute("-0001-12-31T23:00:00.056");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: -0001-12-31T23:00:00.056 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ja" + "'", str38, "ja");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.028" + "'", str51, "+00:00:00.028");
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:00" + "'", str60, "-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.028" + "'", str61, "+00:00:00.028");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        java.lang.String[] strArray15 = new java.lang.String[] { "56", "Coordinated Universal Time", "2022-02-21T14:53:56.659Z", "eng", "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)", "days", "yearOfCentury", "weekOfWeekyear", "", "italiano", "Italy", "-0001-01-01T00:00:00.056", "-01:00", "English (Canada)", "italiano" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.setRegion("IT");
        java.util.Locale locale22 = new java.util.Locale("fr");
        java.util.Locale.Builder builder23 = builder18.setLocale(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        strSet24.clear();
        boolean boolean26 = strSet16.addAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Spliterator<java.lang.String> strSpliterator27 = strSet16.spliterator();
        int int28 = strSet16.size();
        java.lang.String[] strArray31 = new java.lang.String[] { "yearOfCentury", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40, (int) (short) 1);
        org.joda.time.DurationField durationField45 = julianChronology44.weeks();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology44.weekOfWeekyear();
        org.joda.time.Chronology chronology47 = julianChronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology44.weekOfWeekyear();
        boolean boolean49 = strSet32.contains((java.lang.Object) julianChronology44);
        boolean boolean51 = strSet32.add("eng");
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getDisplayScript();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        boolean boolean55 = strSet32.containsAll((java.util.Collection<java.lang.String>) strSet54);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet58.spliterator();
        boolean boolean60 = strSet32.retainAll((java.util.Collection<java.lang.String>) strSet58);
        boolean boolean61 = strSet58.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream62 = strSet58.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator63 = strSet58.spliterator();
        boolean boolean64 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet58);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strSet16.spliterator();
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14 + "'", int28 == 14);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(julianChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strSpliterator65);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.addWrapField(19);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        int int21 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.yearOfCentury();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.hourOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime26.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology34);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology34.centuryOfEra();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology34);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str41 = dateTimeFieldType40.toString();
        int int42 = dateTime39.get(dateTimeFieldType40);
        java.lang.String str43 = dateTimeFieldType40.getName();
        int int44 = mutableDateTime18.get(dateTimeFieldType40);
        mutableDateTime15.set(dateTimeFieldType40, 50);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime14.property(dateTimeFieldType40);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime14.millisOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(julianChronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "yearOfCentury" + "'", str41, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearOfCentury" + "'", str43, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 70 + "'", int44 == 70);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.millisOfDay();
        org.joda.time.DurationField durationField15 = julianChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeField16.getAsShortText((long) (byte) 10, locale18);
        java.util.Locale.Builder builder20 = builder0.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder0.clearExtensions();
        java.util.Locale.Builder builder22 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder22.setUnicodeLocaleKeyword("56", "\u5354\u5b9a\u4e16\u754c\u6642_MILLISOFDAY_GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: ?????_MILLISOFDAY_GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology9);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setDate((long) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(70);
        org.joda.time.DateTime dateTime27 = dateTime25.withYear((int) 'u');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundHalfFloor();
        mutableDateTime32.setSecondOfDay(8);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology36);
        java.lang.String str38 = mutableDateTime37.toString();
        mutableDateTime37.setDate((long) (short) 100);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime43.getZone();
        mutableDateTime37.setZoneRetainFields(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        mutableDateTime32.setZone(dateTimeZone47);
        mutableDateTime32.addWeeks((int) ' ');
        int int53 = dateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime32);
        int int54 = mutableDateTime32.getDayOfWeek();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str11, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.029+00:00:00.028" + "'", str38, "1970-01-01T00:00:00.029+00:00:00.028");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology10.secondOfMinute();
        org.joda.time.DurationField durationField15 = julianChronology10.months();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology10.millisOfDay();
        org.joda.time.DurationField durationField19 = julianChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology10.yearOfCentury();
        org.joda.time.DurationField durationField21 = julianChronology10.weeks();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(julianChronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime3.getZone();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 10);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology11.centuryOfEra();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(1676991285535L, (org.joda.time.Chronology) julianChronology11);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfCentury(399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 399 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(julianChronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property20);
    }
}

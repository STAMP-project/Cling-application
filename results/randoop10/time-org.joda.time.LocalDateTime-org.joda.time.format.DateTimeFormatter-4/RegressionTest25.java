import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest25 {

    public static boolean debug = false;

    @Test
    public void test12501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12501");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight10 = property7.addToCopy((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = property7.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight12 = property7.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = property7.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight14 = property7.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test12502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12502");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime20 = property19.roundFloorCopy();
        org.joda.time.LocalTime localTime22 = property19.setCopy(4);
        org.joda.time.LocalTime localTime23 = property19.withMaximumValue();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology30);
        mutablePeriod31.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod31.add(0L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        mutablePeriod31.add(0L, chronology45);
        org.joda.time.Period period48 = new org.joda.time.Period((long) 0, (long) 6, chronology45);
        int int49 = period48.getSeconds();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours(10L);
        long long52 = duration51.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withMillis((long) 24);
        long long56 = dateMidnight55.getMillis();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateMidnight55);
        boolean boolean58 = period48.equals((java.lang.Object) dateMidnight55);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        int int65 = dateMidnight64.getYearOfEra();
        org.joda.time.Chronology chronology66 = dateMidnight64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology66.getZone();
        int int71 = dateTimeZone69.getOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight55.withZoneRetainFields(dateTimeZone69);
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeZone69.getShortName((long) 840, locale74);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (byte) 10, 10L, dateTimeZone69);
        org.joda.time.DateTime dateTime77 = localTime23.toDateTimeToday(dateTimeZone69);
        org.joda.time.LocalTime.Property property78 = localTime23.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 36000L + "'", long52 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test12503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12503");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        java.lang.String str8 = dateTimeZone6.getID();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod13.add(0L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        mutablePeriod13.add(0L, chronology27);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (-1), chronology27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays((int) (short) -1);
        int int38 = dateMidnight37.getYearOfEra();
        org.joda.time.Chronology chronology39 = dateMidnight37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight30.toMutableDateTime(chronology39);
        mutableDateTime42.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.millisOfDay();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.era();
        boolean boolean47 = dateTimeZone6.equals((java.lang.Object) mutableDateTime42);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(dateTimeZone6);
        java.util.TimeZone timeZone49 = dateTimeZone6.toTimeZone();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 10, dateTimeZone6);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 24, (long) 653, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((-1L), dateTimeZone6);
        boolean boolean54 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(1645514762843L, dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime55.withWeekOfWeekyear(49860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49860 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-00:00:00.001" + "'", str8, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test12504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12504");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int46 = mutablePeriod42.getMonths();
        mutablePeriod42.addMinutes((int) (short) 0);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod42, 12);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.yearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime57 = property55.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology61);
        mutablePeriod62.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod62.add(0L);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(chronology71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusDays((int) (short) -1);
        int int75 = dateMidnight74.getYearOfEra();
        org.joda.time.Chronology chronology76 = dateMidnight74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology76);
        mutablePeriod62.add(0L, chronology76);
        boolean boolean79 = dateTimeFieldType58.isSupported(chronology76);
        org.joda.time.DurationField durationField80 = chronology76.hours();
        org.joda.time.DurationFieldType durationFieldType81 = durationField80.getType();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime57.withFieldAdded(durationFieldType81, (int) (short) -1);
        int int84 = mutablePeriod42.indexOf(durationFieldType81);
        int int85 = mutablePeriod42.getYears();
        int int86 = mutablePeriod42.getDays();
        int int87 = mutablePeriod42.getDays();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test12505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12505");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.LocalDateTime localDateTime8 = property4.setCopy("26584792");
        java.lang.String str9 = property4.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[yearOfEra]" + "'", str9, "Property[yearOfEra]");
    }

    @Test
    public void test12506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12506");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        java.lang.String str7 = localDateTime3.toString("1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.getID();
        org.joda.time.DateTime dateTime12 = localDateTime3.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis((int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime12.withSecondOfMinute((int) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfWeek();
        java.util.Locale locale18 = java.util.Locale.UK;
        int int19 = property17.getMaximumShortTextLength(locale18);
        org.joda.time.DateTime dateTime21 = property17.addToCopy(0L);
        org.joda.time.DateTime dateTime22 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = property17.getDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        java.lang.String str31 = chronology30.toString();
        java.lang.String str32 = chronology30.toString();
        long long36 = chronology30.add((-62198838000000L), 1641427200078L, 0);
        org.joda.time.DateTime dateTime37 = dateTime23.withChronology(chronology30);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-00:00:00.001" + "'", str11, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-62198838000000L) + "'", long36 == (-62198838000000L));
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test12507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12507");
        org.joda.time.Period period1 = org.joda.time.Period.millis(0);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusYears(54);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.setYear(2022);
        mutableDateTime38.setYear((-1));
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime38.dayOfYear();
        org.joda.time.Duration duration44 = period4.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime38.secondOfDay();
        mutableDateTime38.addSeconds(8);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology53);
        mutablePeriod54.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod54.add(0L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        int int67 = dateMidnight66.getYearOfEra();
        org.joda.time.Chronology chronology68 = dateMidnight66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology68);
        mutablePeriod54.add(0L, chronology68);
        org.joda.time.Period period71 = new org.joda.time.Period((long) 0, (long) 6, chronology68);
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.fromMillisOfDay((long) 100, chronology68);
        org.joda.time.DateTimeField dateTimeField73 = chronology68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField74 = chronology68.millisOfDay();
        mutableDateTime38.setChronology(chronology68);
        int int76 = mutableDateTime38.getRoundingMode();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test12508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12508");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645574400000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withWeekyear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minusSeconds(62);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (short) 10);
        int int13 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withWeekyear(29);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime18 = property16.addWrapFieldToCopy((-164));
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test12509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12509");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        boolean boolean68 = mutableDateTime36.isEqual((long) (byte) 100);
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime36.add(readableDuration69);
        mutableDateTime36.addMillis((-1063546559));
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645488000000L + "'", long48 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53 + "'", int52 == 53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test12510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12510");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        int int15 = dateTime14.getMonthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod20.add(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        mutablePeriod20.add(0L, chronology34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (-1), chronology34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 10, chronology46);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight37.toMutableDateTime(chronology46);
        mutableDateTime49.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime49.toMutableDateTime(dateTimeZone53);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = yearMonthDay55.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime49, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType63 = periodType62.withWeeksRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 1970, (long) 3, periodType62);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration59, periodType62);
        org.joda.time.DateTime dateTime66 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime68 = dateTime14.plus((long) 50400000);
        org.joda.time.DateTime dateTime70 = dateTime14.plusHours(17);
        org.joda.time.DateTime.Property property71 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime72 = property71.roundCeilingCopy();
        int int73 = dateTime72.getYearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1969 + "'", int73 == 1969);
    }

    @Test
    public void test12511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12511");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(10);
        java.lang.String str23 = localDateTime19.toString("1970-01-01");
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay(445);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.millis();
        boolean boolean31 = periodType28.isSupported(durationFieldType30);
        org.joda.time.PeriodType periodType32 = periodType28.withMillisRemoved();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.DateMidnight dateMidnight41 = property39.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.minutes();
        org.joda.time.DurationField durationField50 = durationFieldType42.getField(chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight41.toMutableDateTime(chronology48);
        org.joda.time.Period period53 = org.joda.time.Period.days(4);
        org.joda.time.Period period55 = period53.plusMinutes(32770);
        org.joda.time.Period period57 = period55.multipliedBy(35);
        org.joda.time.Duration duration58 = period57.toStandardDuration();
        org.joda.time.Period period59 = new org.joda.time.Period();
        org.joda.time.Period period60 = period59.toPeriod();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration66 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, 12);
        org.joda.time.Period period67 = new org.joda.time.Period();
        boolean boolean68 = duration62.equals((java.lang.Object) period67);
        org.joda.time.Days days69 = period67.toStandardDays();
        org.joda.time.Period period70 = period60.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.PeriodType periodType71 = period67.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType73 = periodType71.getFieldType((int) (short) 1);
        int int74 = period57.get(durationFieldType73);
        mutableDateTime51.add(durationFieldType73, 26596049);
        int int77 = periodType28.indexOf(durationFieldType73);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime25.withFieldAdded(durationFieldType73, 26820635);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = localTime13.compareTo((org.joda.time.ReadablePartial) localDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test12512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12512");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime3 = property2.roundCeilingCopy();
        boolean boolean5 = dateTime3.isAfter(117L);
        org.joda.time.DateTime dateTime7 = dateTime3.minusMonths((-1));
        boolean boolean9 = dateTime7.isAfter((long) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime7.plusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusMonths(2922789);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus(26673869L);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withDurationAdded(840L, 784);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test12513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12513");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = duration1.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours(10L);
        long long17 = duration16.getStandardSeconds();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration21 = duration16.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration21, 37602389);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 36000L + "'", long17 == 36000L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test12514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12514");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        int int15 = dateTime14.getMonthOfYear();
        org.joda.time.DateTime dateTime17 = dateTime14.minusHours(17);
        org.joda.time.DateTime dateTime19 = dateTime17.minusYears(801);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(2032);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test12515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12515");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        long long8 = property7.remainder();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        int int11 = dateMidnight10.getSecondOfMinute();
        int int12 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(10);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours(10L);
        long long21 = duration20.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology27);
        mutablePeriod28.setPeriod((long) (short) 10, (long) (short) -1);
        int int32 = mutablePeriod28.getSeconds();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight10.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.util.GregorianCalendar gregorianCalendar34 = dateMidnight10.toGregorianCalendar();
        gregorianCalendar34.set(2215, 26675856, (-1063546559));
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4406400000L + "'", long8 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 36000L + "'", long21 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
    }

    @Test
    public void test12516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12516");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        org.joda.time.Period period24 = period22.minusDays(331);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test12517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12517");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.set(2022, 1, (int) (byte) -1, 11, (int) (byte) 0, (int) 'a');
        calendar1.set(1, 9, 1);
        calendar1.setFirstDayOfWeek((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        java.lang.String str19 = timeOfDay17.toString("\u897f\u5143");
        org.joda.time.LocalTime localTime20 = timeOfDay17.toLocalTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-62112142702394,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=9,WEEK_OF_YEAR=39,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=274,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=1,SECOND=37,MILLISECOND=606,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u897f\u5143" + "'", str19, "\u897f\u5143");
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test12518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12518");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        java.lang.String str9 = chronology8.toString();
        java.lang.String str10 = chronology8.toString();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1182, (long) 457, chronology8);
        org.joda.time.Period period12 = new org.joda.time.Period((-1139692788L), chronology8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays(47);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        int int22 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((long) 10, chronology25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = timeOfDay26.getFields();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.withSecondOfMinute(53);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay26.withHourOfDay(1);
        int int32 = timeOfDay31.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.plusMillis(54);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.plusHours(292278969);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay38 = property37.withMinimumValue();
        int[] intArray39 = timeOfDay38.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology8.validate((org.joda.time.ReadablePartial) localDateTime20, intArray39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 0, 0, 0]");
    }

    @Test
    public void test12519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12519");
        org.joda.time.Period period1 = org.joda.time.Period.millis(0);
        org.joda.time.Period period3 = period1.minusDays(1987);
        org.joda.time.Period period5 = period3.withMillis(122);
        org.joda.time.Period period7 = period5.minusWeeks(26595766);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test12520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12520");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 0, (long) 6, chronology20);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((long) 100, chronology20);
        int[] intArray25 = localTime24.getValues();
        org.joda.time.LocalTime localTime27 = localTime24.minusSeconds(840);
        java.lang.String str28 = localTime27.toString();
        org.joda.time.LocalTime localTime30 = localTime27.withMillisOfDay(56);
        org.joda.time.DateTime dateTime31 = localTime27.toDateTimeToday();
        boolean boolean33 = dateTime31.isAfter(43199996L);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "23:46:00.100" + "'", str28, "23:46:00.100");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test12521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12521");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date9);
        int int11 = date9.getSeconds();
        int int12 = date9.getHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000000L + "'", long6 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test12522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12522");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.clear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology9);
        mutablePeriod10.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod10.add(0L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        mutablePeriod10.add(0L, chronology24);
        boolean boolean27 = dateTimeFieldType6.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.millisOfSecond();
        boolean boolean29 = calendar1.before((java.lang.Object) chronology24);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology32);
        mutablePeriod33.setPeriod((long) (short) 10, (long) (short) -1);
        int int38 = mutablePeriod33.getValue(0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        org.joda.time.Duration duration43 = mutablePeriod33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.halfdayOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight40, chronology51);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = property57.add(26699790);
        boolean boolean60 = calendar1.before((java.lang.Object) mutableDateTime59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime59.monthOfYear();
        mutableDateTime59.addHours(861);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=?,SECOND=56,MILLISECOND=765,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test12523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12523");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        mutableDateTime34.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.millisOfDay();
        org.joda.time.Chronology chronology38 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 99, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(chronology38);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        calendar45.setFirstDayOfWeek(24);
        calendar45.set(2022, 1, (int) (byte) -1, 11, (int) (byte) 0, (int) 'a');
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.fromCalendarFields(calendar45);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 'u');
        mutablePeriod57.setDays(7);
        mutablePeriod57.addSeconds(0);
        org.joda.time.LocalDate localDate63 = localDate55.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod57, 0);
        int int64 = localDate63.getEra();
        org.joda.time.LocalDate.Property property65 = localDate63.weekyear();
        org.joda.time.Period period66 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay43, (org.joda.time.ReadablePartial) localDate63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        long long71 = dateMidnight68.getMillis();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight68.withMillis((long) 7);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.minusDays((int) (short) -1);
        long long80 = dateMidnight77.getMillis();
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.days();
        org.joda.time.Period period82 = duration75.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight77, periodType81);
        org.joda.time.MutableDateTime mutableDateTime83 = dateMidnight77.toMutableDateTimeISO();
        int int84 = dateMidnight73.compareTo((org.joda.time.ReadableInstant) mutableDateTime83);
        mutableDateTime83.setMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale89 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str90 = locale89.getLanguage();
        java.lang.String str91 = dateTimeZone87.getShortName((long) 'a', locale89);
        mutableDateTime83.setZone(dateTimeZone87);
        org.joda.time.DateTime dateTime93 = localDate63.toDateTimeAtMidnight(dateTimeZone87);
        org.joda.time.YearMonthDay yearMonthDay94 = new org.joda.time.YearMonthDay(dateTimeZone87);
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay94.minusYears(0);
        org.joda.time.YearMonthDay yearMonthDay98 = yearMonthDay96.minusYears(26);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1643540497790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=1,SECOND=37,MILLISECOND=790,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645488000000L + "'", long71 == 1645488000000L);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1645488000000L + "'", long80 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "zh" + "'", str90, "zh");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(yearMonthDay96);
        org.junit.Assert.assertNotNull(yearMonthDay98);
    }

    @Test
    public void test12524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12524");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime38.toMutableDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology46);
        mutablePeriod47.setPeriod((long) (short) 10, (long) (short) -1);
        int int51 = mutablePeriod47.getMonths();
        mutablePeriod47.addMinutes((int) (short) 0);
        mutableDateTime38.add((org.joda.time.ReadablePeriod) mutablePeriod47, 12);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = property60.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime62 = property60.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology66);
        mutablePeriod67.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod67.add(0L);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.minusDays((int) (short) -1);
        int int80 = dateMidnight79.getYearOfEra();
        org.joda.time.Chronology chronology81 = dateMidnight79.getChronology();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology81);
        mutablePeriod67.add(0L, chronology81);
        boolean boolean84 = dateTimeFieldType63.isSupported(chronology81);
        org.joda.time.DurationField durationField85 = chronology81.hours();
        org.joda.time.DurationFieldType durationFieldType86 = durationField85.getType();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime62.withFieldAdded(durationFieldType86, (int) (short) -1);
        int int89 = mutablePeriod47.indexOf(durationFieldType86);
        org.joda.time.Chronology chronology90 = null;
        boolean boolean91 = durationFieldType86.isSupported(chronology90);
        boolean boolean92 = localDateTime1.isSupported(durationFieldType86);
        int int93 = localDateTime1.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime95 = localDateTime1.minusWeeks(133);
        int int96 = localDateTime95.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 30 + "'", int93 == 30);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2019 + "'", int96 == 2019);
    }

    @Test
    public void test12525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12525");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        int int5 = dateMidnight3.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        int int7 = yearMonthDay6.getYear();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusYears((-1));
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtCurrentTime();
        int[] intArray11 = yearMonthDay9.getValues();
        org.joda.time.LocalDate localDate12 = yearMonthDay9.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2023, 2, 23]");
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test12526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12526");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(0, 50400000, 9, 0);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(26616836, 14, 78, 5);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        java.lang.String str15 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod20.add(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        mutablePeriod20.add(0L, chronology34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (-1), chronology34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 10, chronology46);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight37.toMutableDateTime(chronology46);
        mutableDateTime49.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.millisOfDay();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime49.era();
        boolean boolean54 = dateTimeZone13.equals((java.lang.Object) mutableDateTime49);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(dateTimeZone13);
        java.util.TimeZone timeZone56 = dateTimeZone13.toTimeZone();
        java.util.Calendar.Builder builder57 = builder11.setTimeZone(timeZone56);
        java.util.Calendar.Builder builder58 = builder0.setTimeZone(timeZone56);
        timeZone56.setRawOffset(0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId61 = timeZone56.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: -00:00:00.001");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-00:00:00.001" + "'", str15, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test12527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12527");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusHours(11);
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.millisOfSecond();
        java.util.Locale locale23 = new java.util.Locale("1969-12-31T00:00:00.006Z");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = property20.setCopy("Japanisch (Japan)", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Japanisch (Japan)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals(locale23.toString(), "1969-12-31t00:00:00.006z");
    }

    @Test
    public void test12528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12528");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval8 = new org.joda.time.Interval(493920L, (-169199900L), chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test12529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12529");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        java.lang.String str16 = property15.toString();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime18 = property15.withMinimumValue();
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[centuryOfEra]" + "'", str16, "Property[centuryOfEra]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test12530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12530");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        long long8 = dateMidnight5.getMillis();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withMillis((long) 7);
        int int11 = dateMidnight10.getCenturyOfEra();
        int int12 = dateMidnight10.getDayOfWeek();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        long long19 = dateMidnight16.getMillis();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.days();
        org.joda.time.Period period21 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight16.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight16.withMonthOfYear(2);
        boolean boolean25 = dateMidnight16.isEqualNow();
        org.joda.time.DateMidnight.Property property26 = dateMidnight16.dayOfYear();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight16);
        int int28 = mutablePeriod3.getMinutes();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645488000000L + "'", long8 == 1645488000000L);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645488000000L + "'", long19 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test12531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12531");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate7 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate8 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test12532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12532");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, chronology18);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusSeconds(61560010);
        int int24 = timeOfDay23.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test12533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12533");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        int int5 = calendar1.getActualMinimum(10);
        java.util.Date date6 = calendar1.getTime();
        java.lang.String str7 = date6.toLocaleString();
        java.util.Date date9 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date9);
        int int11 = date9.getDay();
        java.util.Date date13 = new java.util.Date((long) 1);
        date13.setHours(15);
        boolean boolean16 = date9.after(date13);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        long long23 = dateMidnight20.getMillis();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.Period period25 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        java.util.Date date26 = dateMidnight20.toDate();
        int int27 = date26.getYear();
        boolean boolean28 = date9.after(date26);
        int int29 = date6.compareTo(date9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645515057001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=30,SECOND=57,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:30:57 GMT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Feb 22, 2022 7:30:57 AM" + "'", str7, "Feb 22, 2022 7:30:57 AM");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 15:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645488000000L + "'", long23 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 122 + "'", int27 == 122);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test12534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYearOfEra(2215);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test12535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12535");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.getID();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology7);
        mutablePeriod8.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod8.add(0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        mutablePeriod8.add(0L, chronology22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (-1), chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 10, chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight25.toMutableDateTime(chronology34);
        mutableDateTime37.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.millisOfDay();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.era();
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) mutableDateTime37);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone1);
        java.util.TimeZone timeZone44 = dateTimeZone1.toTimeZone();
        java.lang.String str45 = timeZone44.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId46 = timeZone44.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: -00:00:00.001");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-00:00:00.001" + "'", str3, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-00:00:00.001" + "'", str45, "-00:00:00.001");
    }

    @Test
    public void test12536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12536");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test12537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12537");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int12 = dateMidnight3.getCenturyOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight14.getYearOfEra();
        int int18 = dateMidnight14.getMillisOfSecond();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateMidnight14, periodType19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight3.yearOfCentury();
        int int22 = dateMidnight3.getSecondOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours(10L);
        long long29 = duration28.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = mutablePeriod30.toDurationFrom(readableInstant31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str35 = localDate34.toString();
        org.joda.time.LocalDate.Property property36 = localDate34.weekyear();
        org.joda.time.LocalDate localDate38 = property36.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property39 = localDate38.year();
        org.joda.time.LocalDate localDate40 = property39.withMaximumValue();
        boolean boolean41 = duration32.equals((java.lang.Object) localDate40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight3.withDurationAdded((org.joda.time.ReadableDuration) duration32, (-292275054));
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight3.plusDays(945);
        org.joda.time.Interval interval46 = dateMidnight45.toInterval();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645574400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 36000L + "'", long29 == 36000L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test12538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12538");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4406400000L);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay(26584792);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMonths(19);
        int int7 = localDateTime1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test12539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12539");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod3.add(0L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        mutablePeriod3.add(0L, chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.centuryOfEra();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.days();
        org.joda.time.Period period23 = new org.joda.time.Period(1645574400000L, periodType22);
        org.joda.time.Period period24 = period23.normalizedStandard();
        int int25 = period24.getSeconds();
        org.joda.time.Period period27 = period24.withMinutes((int) (byte) -1);
        org.joda.time.Period period29 = period27.withSeconds(3);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        org.joda.time.Period period32 = new org.joda.time.Period(1645574400000L, periodType31);
        org.joda.time.Period period33 = period32.normalizedStandard();
        int int34 = period33.getSeconds();
        org.joda.time.Period period36 = period33.withMinutes((int) (byte) -1);
        org.joda.time.Period period38 = period36.withSeconds(3);
        org.joda.time.Period period39 = period29.minus((org.joda.time.ReadablePeriod) period36);
        long long42 = chronology17.add((org.joda.time.ReadablePeriod) period39, 1339200035L, 873);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = chronology17.getDateTimeMillis((long) 752, 61560009, 37, 36, 86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61560009 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1341819035L + "'", long42 == 1341819035L);
    }

    @Test
    public void test12540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12540");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        long long8 = property7.remainder();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        int int11 = dateMidnight10.getSecondOfMinute();
        int int12 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.LocalDate localDate13 = dateMidnight10.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4406400000L + "'", long8 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test12541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12541");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = timeOfDay2.getFieldTypes();
        int int4 = timeOfDay2.getSecondOfMinute();
        int int5 = timeOfDay2.getMinuteOfHour();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = new org.joda.time.Period(1645574400000L, periodType7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.Period period13 = period8.normalizedStandard(periodType12);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay2.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMillis((int) (byte) 10);
        int int17 = timeOfDay14.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay14.plusMillis(26616576);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.minusHours(64);
        org.joda.time.LocalTime localTime23 = timeOfDay19.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test12542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12542");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((long) 10, chronology2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = timeOfDay3.getFields();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay3, (org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology14);
        mutablePeriod15.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod15.add(0L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        mutablePeriod15.add(0L, chronology29);
        mutablePeriod15.setHours(10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration39 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, 12);
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        int int48 = dateMidnight47.getYearOfEra();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology49);
        mutablePeriod15.add((long) (-1), chronology49);
        boolean boolean52 = dateTimeFieldType10.isSupported(chronology49);
        java.lang.String str53 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period55 = new org.joda.time.Period((java.lang.Object) 32054400052L, chronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test12543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12543");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTime dateTime17 = property15.getDateTime();
        org.joda.time.DateTime dateTime18 = property15.getDateTime();
        java.lang.String str19 = property15.getAsString();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "19" + "'", str19, "19");
    }

    @Test
    public void test12544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12544");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDate((int) (byte) -1, (int) (byte) 10, 7);
        boolean boolean15 = localDateTime1.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.minusHours((-292275054));
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusMinutes(70);
        int int20 = localDateTime19.getYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
    }

    @Test
    public void test12545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12545");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.withEra((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(12);
        org.joda.time.DateTime dateTime20 = dateTime18.withCenturyOfEra(20);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.halfdayOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) '#');
        int int36 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate38 = localDate35.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField40 = localDate35.getField((int) (byte) 0);
        int int41 = localDate35.getYearOfCentury();
        org.joda.time.LocalDate.Property property42 = localDate35.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean44 = localDate35.isSupported(dateTimeFieldType43);
        boolean boolean45 = dateTime22.isSupported(dateTimeFieldType43);
        org.joda.time.DateTime.Property property46 = dateTime22.secondOfMinute();
        org.joda.time.DateTime dateTime47 = property46.roundFloorCopy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        long long54 = dateMidnight51.getMillis();
        org.joda.time.DateMidnight.Property property55 = dateMidnight51.weekyear();
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight57 = property55.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight58 = property55.withMaximumValue();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale locale60 = builder59.build();
        int int61 = property55.getMaximumTextLength(locale60);
        org.joda.time.DateMidnight dateMidnight62 = property55.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField63 = property55.getField();
        org.joda.time.DateMidnight dateMidnight65 = property55.addToCopy(32769);
        org.joda.time.DateMidnight dateMidnight67 = property55.setCopy(61560010);
        org.joda.time.DateMidnight dateMidnight68 = property55.roundHalfEvenCopy();
        long long69 = property46.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight68);
        java.util.Locale locale71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = property46.setCopy("yearOfEra", locale71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearOfEra\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 70 + "'", int41 == 70);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645574400000L + "'", long54 == 1645574400000L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-129068233199L) + "'", long69 == (-129068233199L));
    }

    @Test
    public void test12546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12546");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone2);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone2.getShortName(838616815541220000L, locale47);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-00:00:00.001" + "'", str48, "-00:00:00.001");
    }

    @Test
    public void test12547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12547");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        int int5 = calendar1.getActualMinimum(10);
        java.util.Date date6 = calendar1.getTime();
        java.lang.String str7 = calendar1.getCalendarType();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale10.toLanguageTag();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getExtension('u');
        java.lang.String str15 = localDateTime8.toString("23", locale10);
        org.joda.time.Period period17 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology22);
        mutablePeriod23.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod23.add(0L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        mutablePeriod23.add(0L, chronology37);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(946684800000L, chronology37);
        org.joda.time.Period period41 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Duration duration42 = period41.toStandardDuration();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645515057245,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=30,SECOND=57,MILLISECOND=245,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:30:57 GMT 2022");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh-CN" + "'", str11, "zh-CN");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "23" + "'", str15, "23");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration42);
    }

    @Test
    public void test12548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12548");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        int[] intArray7 = localDateTime5.getValues();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', periodType9, chronology10);
        org.joda.time.Period period13 = period11.withDays((int) ' ');
        org.joda.time.Period period15 = period13.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekyear(20);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfYear();
        int int21 = property20.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property20.addWrapFieldToCopy(32);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 2, 15, 27057261]");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test12549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12549");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.util.TimeZone timeZone45 = dateTimeZone2.toTimeZone();
        java.util.Calendar.Builder builder46 = builder0.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder50 = builder46.setDate(2, (int) (short) 10, 10);
        java.util.Calendar calendar51 = builder46.build();
        java.util.Calendar.Builder builder55 = builder46.setTimeOfDay((int) (short) 10, (int) (short) -1, 0);
        java.util.Calendar.Builder builder59 = builder46.setWeekDate(43, (-11), 1222);
        java.util.Calendar.Builder builder63 = builder59.setWeekDate(371, 5, 1997);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-62077190399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=314,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test12550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12550");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology9.getZone();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(2012L, dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(473299200001L, dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test12551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12551");
        java.util.Date date3 = new java.util.Date(15, (int) (byte) 1, (int) (short) 1);
        long long4 = date3.getTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        long long11 = dateMidnight8.getMillis();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.Period period13 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight8, periodType12);
        java.util.Date date14 = dateMidnight8.toDate();
        boolean boolean15 = date3.after(date14);
        date3.setHours(2019);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Apr 26 03:00:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1733011200000L) + "'", long4 == (-1733011200000L));
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645488000000L + "'", long11 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test12552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12552");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime.Property property16 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(86399);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime17.withDate(0, 13, 27018588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test12553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12553");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(840);
        org.joda.time.LocalTime localTime22 = localTime18.minusMillis(26584792);
        org.joda.time.LocalTime.Property property23 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime24 = property23.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime26 = localTime24.plusSeconds(547);
        org.joda.time.LocalTime localTime28 = localTime26.minusMinutes(28);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localTime26.getValue(80);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 80");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test12554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12554");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Hours hours16 = period14.toStandardHours();
        org.joda.time.MutablePeriod mutablePeriod17 = period14.toMutablePeriod();
        mutablePeriod17.setMonths(194);
        mutablePeriod17.addHours(50);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
    }

    @Test
    public void test12555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12555");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        int int5 = calendar1.getActualMinimum(10);
        java.util.Date date6 = calendar1.getTime();
        java.lang.String str7 = calendar1.getCalendarType();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod16.add(0L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        mutablePeriod16.add(0L, chronology30);
        org.joda.time.Period period33 = new org.joda.time.Period((long) 0, (long) 6, chronology30);
        int int34 = period33.getSeconds();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours(10L);
        long long37 = duration36.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withMillis((long) 24);
        long long41 = dateMidnight40.getMillis();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateMidnight40);
        boolean boolean43 = period33.equals((java.lang.Object) dateMidnight40);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology51.getZone();
        int int56 = dateTimeZone54.getOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight40.withZoneRetainFields(dateTimeZone54);
        boolean boolean58 = dateTimeZone54.isFixed();
        long long61 = dateTimeZone54.adjustOffset((long) 26616576, false);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 840, dateTimeZone54);
        long long66 = dateTimeZone54.convertLocalToUTC((-43200004L), true, 31536000000L);
        org.joda.time.DateTime dateTime67 = localDateTime8.toDateTime(dateTimeZone54);
        int int69 = dateTimeZone54.getOffset((-2998852L));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645515057336,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=30,SECOND=57,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:30:57 GMT 2022");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 36000L + "'", long37 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 26616576L + "'", long61 == 26616576L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-43200004L) + "'", long66 == (-43200004L));
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test12556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12556");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645574400000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withWeekyear((int) (byte) 100);
        int int9 = localDateTime8.getEra();
        int int10 = localDateTime8.getDayOfYear();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54 + "'", int10 == 54);
    }

    @Test
    public void test12557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12557");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        calendar11.setMinimalDaysInFirstWeek(0);
        boolean boolean14 = calendar11.isWeekDateSupported();
        int int15 = calendar11.getWeeksInWeekYear();
        java.util.Date date16 = calendar11.getTime();
        java.lang.String str17 = calendar11.getCalendarType();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645574400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 23 00:00:00 GMT 2022");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
    }

    @Test
    public void test12558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays(47);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 10, chronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.minusHours(7);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond(78);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.weekyear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.withYear(292278993);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.dayOfWeek();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((long) 10, chronology39);
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = timeOfDay40.getFields();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay((long) 10, chronology43);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = timeOfDay44.getFields();
        org.joda.time.Period period46 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay40, (org.joda.time.ReadablePartial) timeOfDay44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay((long) 10, chronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = timeOfDay49.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay49.plusSeconds((int) '4');
        int int53 = timeOfDay40.compareTo((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay40.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime56 = timeOfDay40.toLocalTime();
        org.joda.time.LocalTime.Property property57 = localTime56.hourOfDay();
        org.joda.time.LocalTime localTime59 = property57.addCopy(946684800000L);
        java.lang.String str60 = property57.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property57.getFieldType();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight36.withField(dateTimeFieldType61, 18);
        int int64 = dateTime27.get(dateTimeFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime7.withField(dateTimeFieldType61, 956);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 956 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test12559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12559");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 2022, chronology8, locale12, (java.lang.Integer) 9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.Integer int17 = dateTimeParserBucket15.getOffsetInteger();
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 26616576);
        java.lang.Object obj20 = dateTimeParserBucket15.saveState();
        java.util.Locale locale21 = dateTimeParserBucket15.getLocale();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket15.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test12560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12560");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        int int7 = localDateTime5.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (byte) 0, 32769, (int) (byte) 10, (int) (short) 1);
        mutablePeriod12.addMillis(365);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test12561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12561");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((long) 10, chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        int int11 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay9);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay9.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMaximumValue();
        java.lang.String str15 = property12.getName();
        org.joda.time.TimeOfDay timeOfDay16 = property12.withMinimumValue();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 10, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours(7);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        java.lang.String str34 = property33.getName();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = property33.getAsText(locale35);
        java.lang.String str38 = locale35.getDisplayVariant();
        java.lang.String str39 = locale35.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = timeOfDay16.toString("2023-02-01T00:00:00.000Z", locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hourOfDay" + "'", str15, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "centuryOfEra" + "'", str34, "centuryOfEra");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "19" + "'", str37, "19");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr-FR" + "'", str39, "fr-FR");
    }

    @Test
    public void test12562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12562");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime10.withChronology(chronology18);
        int int22 = dateTime21.getWeekOfWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology30.getZone();
        int int35 = dateTimeZone33.getStandardOffset(22L);
        org.joda.time.DateTime dateTime36 = dateTime21.withZone(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test12563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12563");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate.Property property6 = localDate4.weekyear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.Chronology chronology10 = localDate8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology10);
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfHour();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test12564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12564");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', periodType1, chronology2);
        org.joda.time.Period period5 = period3.minusDays((int) (short) 100);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) ' ');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight20.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plusYears((-1));
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withFieldAdded(durationFieldType28, (int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime18.withFieldAdded(durationFieldType28, 122);
        boolean boolean33 = period5.isSupported(durationFieldType28);
        org.joda.time.Period period35 = period5.plusMillis(23);
        org.joda.time.Period period37 = period5.minusHours(0);
        org.joda.time.Period period39 = period5.multipliedBy(652);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test12565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12565");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.DurationField durationField25 = chronology19.millis();
        org.joda.time.DurationField durationField26 = chronology19.years();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        long long34 = dateMidnight31.getMillis();
        org.joda.time.DateMidnight.Property property35 = dateMidnight31.weekyear();
        org.joda.time.DateMidnight dateMidnight36 = property35.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight37 = property35.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.withMonthOfYear(6);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.plusMonths(56);
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology42.getZone();
        org.joda.time.Interval interval45 = localDate27.toInterval(dateTimeZone44);
        long long48 = dateTimeZone44.convertLocalToUTC(1645660800001L, false);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645574400000L + "'", long34 == 1645574400000L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645660800001L + "'", long48 == 1645660800001L);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test12566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12566");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.getDateMidnight();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology13);
        mutablePeriod14.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod14.add(0L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        mutablePeriod14.add(0L, chronology28);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 52, (long) 10, chronology28);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology28.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight8, chronology28);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfCentury();
        int[] intArray42 = localDateTime40.getValues();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#', periodType44, chronology45);
        org.joda.time.Period period48 = period46.withDays((int) ' ');
        org.joda.time.Period period50 = period48.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.minus((org.joda.time.ReadablePeriod) period50);
        int int52 = period50.getSeconds();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadablePeriod) period50);
        org.joda.time.Interval interval55 = interval53.withStartMillis((long) 2092);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2022, 2, 15, 27057502]");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(interval55);
    }

    @Test
    public void test12567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12567");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime33.add(durationFieldType37, (int) ' ');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime33.minuteOfHour();
        mutableDateTime33.setTime((long) 6);
        java.lang.String str43 = mutableDateTime33.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        org.joda.time.DateTime dateTime56 = dateTime54.minusHours(7);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        org.joda.time.DateTime.Property property58 = dateTime56.dayOfWeek();
        int int59 = dateTime56.getDayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime56.plusYears(15);
        int int62 = dateTime56.getYear();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        int int71 = dateMidnight70.getYearOfEra();
        org.joda.time.Chronology chronology72 = dateMidnight70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 10, chronology72);
        org.joda.time.DateTime dateTime76 = dateTime74.minusHours(7);
        org.joda.time.DateTime dateTime78 = dateTime76.plusYears((int) (byte) 0);
        int int79 = dateTime78.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        boolean boolean82 = dateTimeZone80.isStandardOffset((long) '#');
        java.lang.String str83 = dateTimeZone80.getID();
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime85 = dateTime78.withZoneRetainFields(dateTimeZone80);
        org.joda.time.Interval interval86 = interval63.withEnd((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime88 = dateTime78.withSecondOfMinute(7);
        org.joda.time.DateTime.Property property89 = dateTime78.hourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1969-12-31T00:00:00.006Z" + "'", str43, "1969-12-31T00:00:00.006Z");
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 31 + "'", int59 == 31);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1969 + "'", int62 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test12568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        java.lang.String str7 = localDateTime3.toString("1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.getID();
        org.joda.time.DateTime dateTime12 = localDateTime3.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis((int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime12.withSecondOfMinute((int) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfWeek();
        java.util.Locale locale18 = java.util.Locale.UK;
        int int19 = property17.getMaximumShortTextLength(locale18);
        org.joda.time.DateTime dateTime21 = property17.addToCopy(0L);
        org.joda.time.DateTime dateTime22 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = property17.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = property17.addToCopy(10207296086400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 10207296086400000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-00:00:00.001" + "'", str11, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test12569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(4406400000L);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfDay(26584792);
        int int19 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int20 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int21 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime3.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime3.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645574400000L + "'", long12 == 1645574400000L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test12570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12570");
        java.util.Date date6 = new java.util.Date(23232787, 389, 82800457, 253, 151, 19);
        int int7 = date6.getMinutes();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun May 23 15:31:19 GMT 23461419");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
    }

    @Test
    public void test12571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12571");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        mutableDateTime33.setMinuteOfHour(4);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis(0);
        int[] intArray55 = new int[] {};
        int int56 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDateTime54, intArray55);
        int int58 = dateTimeField50.getMinimumValue((long) 1);
        mutableDateTime33.setRounding(dateTimeField50);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime33.yearOfCentury();
        mutableDateTime33.addWeekyears((int) (short) -1);
        mutableDateTime33.addYears(361);
        org.joda.time.Chronology chronology65 = mutableDateTime33.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.weeks();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test12572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12572");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        int int13 = dateTimeZone11.getOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(80913000000L, dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test12573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12573");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("\u97e9\u56fd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"??\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12574");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        long long8 = property7.remainder();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        int int11 = dateMidnight10.getSecondOfMinute();
        int int12 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight dateMidnight13 = property7.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(1020);
        int int19 = dateTime18.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4406400000L + "'", long8 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test12575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12575");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDate localDate5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property3.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(318);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970" + "'", str4, "1970");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test12576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12576");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 11);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.withYear(4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay1.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.minusMonths(1900);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.year();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test12577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12577");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.clear(12);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        calendar1.setTimeZone(timeZone6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        boolean boolean17 = calendar1.before((java.lang.Object) dateMidnight16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withCenturyOfEra(2000);
        org.joda.time.DateTime dateTime20 = dateMidnight16.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=?,SECOND=57,MILLISECOND=663,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645574400000L + "'", long14 == 1645574400000L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test12578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12578");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.util.TimeZone timeZone45 = dateTimeZone2.toTimeZone();
        java.util.Calendar.Builder builder46 = builder0.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder48 = builder0.setLenient(false);
        java.util.Calendar.Builder builder52 = builder0.setDate(0, 14, 0);
        java.util.Calendar.Builder builder56 = builder0.setWeekDate((int) 'x', 1970, 426);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getVariant();
        java.util.Locale.setDefault(locale57);
        java.util.Calendar.Builder builder60 = builder0.setLocale(locale57);
        java.util.Calendar.Builder builder64 = builder0.setWeekDate(102140, 102140, 636);
        java.util.Calendar.Builder builder66 = builder64.setLenient(false);
        java.util.Calendar.Builder builder70 = builder66.setDate(53429537, 807, (-52));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar71 = builder70.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test12579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12579");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.YearMonthDay yearMonthDay67 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay68 = property2.getYearMonthDay();
        java.lang.String str69 = property2.getAsText();
        java.lang.String str70 = property2.getAsText();
        java.lang.String str71 = property2.getAsText();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645488000000L + "'", long48 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53 + "'", int52 == 53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "22" + "'", str69, "22");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "22" + "'", str70, "22");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "22" + "'", str71, "22");
    }

    @Test
    public void test12580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12580");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField17 = localDate12.getField((int) (byte) 0);
        int int18 = localDate12.getYearOfCentury();
        org.joda.time.LocalDate.Property property19 = localDate12.yearOfEra();
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.LocalDate localDate22 = localDate20.plusYears(9);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate25 = localDate22.plusDays(6);
        org.joda.time.DateMidnight dateMidnight26 = localDate22.toDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test12581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12581");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks(53);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 10, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean32 = dateTime30.isSupported(dateTimeFieldType31);
        int int33 = localDateTime19.get(dateTimeFieldType31);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration39 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, 12);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration45 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, 12);
        boolean boolean46 = duration39.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        long long53 = dateMidnight50.getMillis();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond(10);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours(10L);
        long long62 = duration61.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (short) 10);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, (org.joda.time.ReadableDuration) duration61, periodType65);
        int int67 = duration43.compareTo((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology68);
        int int70 = dateMidnight69.getMillisOfSecond();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) '#', periodType72, chronology73);
        org.joda.time.Period period76 = period74.withDays((int) ' ');
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight69, (org.joda.time.ReadablePeriod) period76);
        java.lang.String str78 = period76.toString();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(chronology79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight80.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight82.withZoneRetainFields(dateTimeZone83);
        org.joda.time.DateMidnight.Property property85 = dateMidnight84.weekyear();
        org.joda.time.DateTimeField dateTimeField86 = property85.getField();
        org.joda.time.DateMidnight dateMidnight87 = property85.roundCeilingCopy();
        org.joda.time.Duration duration88 = period76.toDurationTo((org.joda.time.ReadableInstant) dateMidnight87);
        org.joda.time.Duration duration90 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration88, (int) '#');
        org.joda.time.LocalDateTime localDateTime92 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration88, 486);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime19.withDayOfYear(151);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = localDateTime94.getValue(37602389);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 37602389");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645574400000L + "'", long53 == 1645574400000L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 36000L + "'", long62 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "P32DT0.035S" + "'", str78, "P32DT0.035S");
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test12582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12582");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 2022, chronology9, locale13, (java.lang.Integer) 9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(838800010L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks(24);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test12583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusDays((int) (short) -1);
        int int5 = dateMidnight4.getYearOfEra();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology6.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.halfdayOfDay();
        org.joda.time.Period period12 = new org.joda.time.Period(0L, chronology9);
        org.joda.time.DurationField durationField13 = chronology9.weeks();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test12584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12584");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(0, 50400000, 9, 0);
        java.util.Calendar.Builder builder7 = builder5.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.getID();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod16.add(0L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        mutablePeriod16.add(0L, chronology30);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (-1), chronology30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 10, chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight33.toMutableDateTime(chronology42);
        mutableDateTime45.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.millisOfDay();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.era();
        boolean boolean50 = dateTimeZone9.equals((java.lang.Object) mutableDateTime45);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(dateTimeZone9);
        java.util.TimeZone timeZone52 = dateTimeZone9.toTimeZone();
        int int53 = timeZone52.getRawOffset();
        java.util.Calendar.Builder builder54 = builder7.setTimeZone(timeZone52);
        java.util.Calendar.Builder builder56 = builder7.setLenient(false);
        java.util.Calendar.Builder builder60 = builder7.setTimeOfDay((int) (byte) 1, 26574655, 292278969);
        java.util.Calendar.Builder builder64 = builder7.setWeekDate(53, 48, (int) (byte) 0);
        java.util.Calendar.Builder builder68 = builder64.setWeekDate(27047, 434, 121);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-00:00:00.001" + "'", str11, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test12585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12585");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        mutableDateTime38.setDayOfYear((int) (short) 10);
        mutableDateTime38.setMinuteOfHour(20);
        mutableDateTime38.addHours(1958);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test12586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12586");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withDate((int) (byte) -1, (int) (byte) 10, 7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property11.setCopy(359);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test12587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12587");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.year();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str29 = localDate28.toString();
        org.joda.time.LocalDate.Property property30 = localDate28.weekyear();
        java.lang.String str31 = property30.getAsString();
        org.joda.time.LocalDate localDate32 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) '#');
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime37 = localDate32.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str43 = nameProvider38.getName(locale40, "2022-02-22T00:00:00.000Z/2022-02-22T00:00:00.000Z", "centuryOfEra");
        java.lang.String str44 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDate32, locale40);
        long long46 = dateTimeField26.roundHalfFloor((long) 1970000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969" + "'", str44, "1969");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test12588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12588");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.year();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str29 = localDate28.toString();
        org.joda.time.LocalDate.Property property30 = localDate28.weekyear();
        java.lang.String str31 = property30.getAsString();
        org.joda.time.LocalDate localDate32 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) '#');
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime37 = localDate32.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str43 = nameProvider38.getName(locale40, "2022-02-22T00:00:00.000Z/2022-02-22T00:00:00.000Z", "centuryOfEra");
        java.lang.String str44 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDate32, locale40);
        int int45 = localDate32.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology50);
        mutablePeriod51.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod51.add(0L);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusDays((int) (short) -1);
        int int64 = dateMidnight63.getYearOfEra();
        org.joda.time.Chronology chronology65 = dateMidnight63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology65);
        mutablePeriod51.add(0L, chronology65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 52, (long) 10, chronology65);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DateTimeZone dateTimeZone70 = chronology65.getZone();
        org.joda.time.DateTime dateTime71 = localDate32.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.plusMonths(80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969" + "'", str44, "1969");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test12589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12589");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property14.addWrapFieldToCopy(11);
        org.joda.time.DateTime dateTime18 = property14.addWrapFieldToCopy(25);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology26.getZone();
        int int31 = dateTimeZone29.getStandardOffset(22L);
        boolean boolean32 = dateTimeZone29.isFixed();
        org.joda.time.DateTime dateTime33 = dateTime18.toDateTime(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test12590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12590");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear((int) (byte) 10);
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonthDay9.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        int int15 = dateTimeZone13.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay9.toDateMidnight(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter7.withZone(dateTimeZone13);
        org.joda.time.Chronology chronology18 = dateTimeFormatter17.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withPivotYear(2004);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test12591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12591");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        int int7 = dateMidnight5.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology17);
        org.joda.time.DurationField durationField21 = durationFieldType8.getField(chronology17);
        java.lang.String str22 = durationFieldType8.getName();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight5.withFieldAdded(durationFieldType8, (int) 'u');
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((java.lang.Object) chronology28);
        org.joda.time.DateTime dateTime31 = localTime30.toDateTimeToday();
        org.joda.time.LocalTime localTime33 = localTime30.withHourOfDay(19);
        org.joda.time.Period period35 = org.joda.time.Period.hours(24);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.days();
        org.joda.time.Period period38 = new org.joda.time.Period(1645574400000L, periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        boolean boolean40 = periodType37.isSupported(durationFieldType39);
        org.joda.time.PeriodType periodType41 = periodType37.withMillisRemoved();
        org.joda.time.Period period42 = period35.normalizedStandard(periodType41);
        org.joda.time.LocalTime localTime43 = localTime30.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.LocalTime localTime45 = localTime30.minusHours(100);
        org.joda.time.Chronology chronology46 = localTime30.getChronology();
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight24.toMutableDateTime(chronology46);
        mutableDateTime47.addWeeks(26669490);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test12592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12592");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(0);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        java.lang.String str17 = period16.toString();
        org.joda.time.LocalTime localTime18 = localTime15.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = period16.getFieldTypes();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
    }

    @Test
    public void test12593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12593");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        java.util.Locale locale15 = new java.util.Locale("fr-FR");
        java.lang.String str16 = dateTimeField12.getAsText(473440680000L, locale15);
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Set<java.lang.String> strSet19 = locale15.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor20 = strSet19.iterator();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale15.toString(), "fr-fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "85" + "'", str16, "85");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strItor20);
    }

    @Test
    public void test12594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12594");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(0);
        int int9 = localDate8.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
    }

    @Test
    public void test12595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12595");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusDays((int) (short) -1);
        int int5 = dateMidnight4.getYearOfEra();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.DurationField durationField8 = durationFieldType0.getField(chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        long long15 = dateMidnight12.getMillis();
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = property16.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight18 = property16.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withMonthOfYear(6);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.plusMonths(56);
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DurationField durationField24 = durationFieldType0.getField(chronology23);
        long long27 = durationField24.getMillis(801, 0L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645574400000L + "'", long15 == 1645574400000L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 48060000L + "'", long27 == 48060000L);
    }

    @Test
    public void test12596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12596");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration11 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, 12);
        boolean boolean12 = duration1.isEqual((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology23);
        mutablePeriod24.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod24.add(0L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        mutablePeriod24.add(0L, chronology38);
        boolean boolean41 = dateTimeFieldType20.isSupported(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.hours();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology38);
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(chronology38);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight16.withChronology(chronology38);
        org.joda.time.Interval interval46 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        long long47 = duration9.getStandardDays();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.clockhourOfDay();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.minusSeconds(4);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime dateTime63 = dateTime60.withMillisOfSecond((int) (byte) 100);
        int int64 = dateTime60.getSecondOfMinute();
        org.joda.time.DateTime.Property property65 = dateTime60.dayOfMonth();
        org.joda.time.DateTime dateTime67 = dateTime60.withWeekyear(53);
        org.joda.time.DateTime dateTime68 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime68, periodType69);
        org.joda.time.Duration duration71 = duration9.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35L + "'", long47 == 35L);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration71);
    }

    @Test
    public void test12597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12597");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.util.TimeZone timeZone45 = dateTimeZone2.toTimeZone();
        java.util.Calendar.Builder builder46 = builder0.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder50 = builder46.setDate(2, (int) (short) 10, 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        int int57 = dateMidnight56.getYearOfEra();
        org.joda.time.Chronology chronology58 = dateMidnight56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay((long) 10, chronology63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = timeOfDay64.getFieldTypes();
        int[] intArray72 = new int[] { 2022, 'a', (short) 1, 11, 10, (short) 10 };
        int int73 = dateTimeField61.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay64, intArray72);
        int[] intArray74 = timeOfDay64.getValues();
        java.util.Calendar.Builder builder75 = builder46.setFields(intArray74);
        java.util.Calendar.Builder builder79 = builder46.setDate(78, 56, 345);
        java.util.Calendar.Builder builder83 = builder46.setWeekDate(331, 26674320, 56);
        java.util.Calendar.Builder builder87 = builder46.setTimeOfDay(70, 805, (int) (short) 10);
        java.util.TimeZone timeZone89 = java.util.TimeZone.getTimeZone("4 Jun 1911 23:32:40 GMT");
        java.time.ZoneId zoneId90 = timeZone89.toZoneId();
        java.util.Calendar.Builder builder91 = builder87.setTimeZone(timeZone89);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone89);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[2022, 97, 1, 11, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(timeZone89);
        org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(zoneId90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=1645515058043,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=30,SECOND=58,MILLISECOND=43,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test12598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12598");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        long long8 = property7.remainder();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        int int11 = dateMidnight10.getSecondOfMinute();
        int int12 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight dateMidnight13 = property7.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight13.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight13, readableInstant15);
        org.joda.time.Duration duration17 = interval16.toDuration();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        int int26 = mutablePeriod21.getValue(0);
        mutablePeriod21.addMinutes(0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration34 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, 12);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours(10L);
        boolean boolean37 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration36);
        mutablePeriod21.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration40 = duration32.plus((-1L));
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) '#');
        long long43 = duration42.getMillis();
        boolean boolean44 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval45 = interval16.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.Instant instant50 = instant47.minus(31556952000L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        long long57 = dateMidnight54.getMillis();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.Period period59 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight54, periodType58);
        java.util.Date date60 = dateMidnight54.toDate();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours(10L);
        long long63 = duration62.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.withMillis((long) 24);
        long long67 = dateMidnight66.getMillis();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight54.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Instant instant70 = instant50.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.MutableDateTime mutableDateTime71 = instant50.toMutableDateTime();
        org.joda.time.Interval interval72 = interval16.withStart((org.joda.time.ReadableInstant) instant50);
        boolean boolean74 = interval16.contains(504L);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4406400000L + "'", long8 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3024000000L + "'", long43 == 3024000000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645488000000L + "'", long57 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 36000L + "'", long63 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test12599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12599");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        int int10 = dateMidnight3.getSecondOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 10, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        int int15 = timeOfDay13.getSecondOfMinute();
        int int16 = timeOfDay13.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay13.minusMinutes(32770);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight3.withFields((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.minus((-2180220600881L));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000000L + "'", long6 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test12600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12600");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(0, 50400000, 9, 0);
        java.util.Calendar calendar6 = builder0.build();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromCalendarFields(calendar6);
        calendar6.set(40, 502, 2092, 320, 26741442, 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=40,MONTH=502,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=2092,DAY_OF_YEAR=302,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=320,MINUTE=26741442,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test12601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12601");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withDate((int) (byte) -1, (int) (byte) 10, 7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withMillisOfSecond(164);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        int int23 = mutablePeriod22.getDays();
        mutablePeriod22.setValue(0, 10);
        mutablePeriod22.setMonths(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology33);
        mutablePeriod34.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod34.add(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        mutablePeriod34.add(0L, chronology48);
        boolean boolean51 = dateTimeFieldType30.isSupported(chronology48);
        org.joda.time.DurationField durationField52 = chronology48.hours();
        mutablePeriod22.add(32L, chronology48);
        mutablePeriod22.setPeriod((long) 78, 0L);
        org.joda.time.MutablePeriod mutablePeriod57 = mutablePeriod22.copy();
        int int58 = mutablePeriod57.getMinutes();
        mutablePeriod57.setPeriod(1337731200000L);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime13.minus((org.joda.time.ReadablePeriod) mutablePeriod57);
        mutablePeriod57.addMillis(26935546);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test12602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12602");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.addMillis(26574655);
        mutableDateTime33.setMillis(117L);
        mutableDateTime33.setMillisOfDay((int) (byte) 100);
        mutableDateTime33.setSecondOfDay((int) (byte) 0);
        mutableDateTime33.setMillisOfDay(26680607);
        mutableDateTime33.setHourOfDay(0);
        mutableDateTime33.setSecondOfDay(0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test12603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12603");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate12.minusWeeks(9);
        org.joda.time.LocalDate localDate18 = localDate16.plusWeeks(32);
        java.util.Date date19 = localDate16.toDate();
        java.lang.String str20 = date19.toLocaleString();
        date19.setMonth(2004);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 30 00:00:00 GMT 2136");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e0a\u5348 12:00:00" + "'", str20, "\u4e0a\u5348 12:00:00");
    }

    @Test
    public void test12604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12604");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) '#');
        int int16 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) '4');
        int int19 = localDate15.getDayOfYear();
        boolean boolean21 = localDate15.equals((java.lang.Object) "Property[hourOfDay]");
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        org.joda.time.Interval interval26 = interval23.gap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.DateTime dateTime39 = dateTime37.minusHours(7);
        org.joda.time.DateTime dateTime41 = dateTime39.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime41.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar43 = dateTime41.toGregorianCalendar();
        boolean boolean44 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology47);
        mutablePeriod48.setPeriod((long) (short) 10, (long) (short) -1);
        int int53 = mutablePeriod48.getValue(0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        org.joda.time.Duration duration58 = mutablePeriod48.toDurationTo((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.days();
        org.joda.time.Period period62 = new org.joda.time.Period(1645574400000L, periodType61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableDuration63, readableInstant64);
        org.joda.time.PeriodType periodType66 = period65.getPeriodType();
        org.joda.time.Period period67 = period62.normalizedStandard(periodType66);
        org.joda.time.Period period68 = duration58.toPeriodTo(readableInstant59, periodType66);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) '#');
        long long71 = duration70.getMillis();
        org.joda.time.Duration duration72 = duration58.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime73 = dateTime41.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTime.Property property74 = dateTime41.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str76 = dateTimeFieldType75.getName();
        boolean boolean77 = dateTime41.isSupported(dateTimeFieldType75);
        org.joda.time.DateTime.Property property78 = dateTime41.yearOfCentury();
        org.joda.time.DateTime dateTime79 = property78.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime79.getZone();
        org.joda.time.DateTime dateTime81 = localDate15.toDateTimeAtMidnight(dateTimeZone80);
        java.lang.String str83 = dateTimeZone80.getName((long) 807);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(33343, 845, 546, dateTimeZone80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 845 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNull(interval26);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3024000000L + "'", long71 == 3024000000L);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "weekyearOfCentury" + "'", str76, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
    }

    @Test
    public void test12605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12605");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.minutes();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay12.dayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology18);
        mutablePeriod19.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod19.add(0L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        mutablePeriod19.add(0L, chronology33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (-1), chronology33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 10, chronology45);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight36.toMutableDateTime(chronology45);
        mutableDateTime48.setYear(2022);
        mutableDateTime48.setYear((-1));
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.dayOfYear();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        long long60 = dateMidnight57.getMillis();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.days();
        org.joda.time.Period period62 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight57.toMutableDateTimeISO();
        int int64 = mutableDateTime63.getDayOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        int int71 = dateMidnight70.getYearOfEra();
        org.joda.time.Chronology chronology72 = dateMidnight70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology72);
        mutableDateTime63.setChronology(chronology72);
        mutableDateTime48.setTime((org.joda.time.ReadableInstant) mutableDateTime63);
        mutableDateTime48.addYears((int) (byte) -1);
        int int78 = property14.compareTo((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.YearMonthDay yearMonthDay79 = property14.withMinimumValue();
        org.joda.time.YearMonthDay.Property property80 = yearMonthDay79.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = yearMonthDay81.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = yearMonthDay81.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
        int int87 = dateTimeZone85.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight88 = yearMonthDay81.toDateMidnight(dateTimeZone85);
        int[] intArray89 = yearMonthDay81.getValues();
        chronology7.validate((org.joda.time.ReadablePartial) yearMonthDay79, intArray89);
        org.joda.time.YearMonthDay.Property property91 = yearMonthDay79.dayOfMonth();
        org.joda.time.Interval interval92 = yearMonthDay79.toInterval();
        org.joda.time.DateTime dateTime93 = yearMonthDay79.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay79.withDayOfMonth(50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645488000000L + "'", long60 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test12606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12606");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        int int10 = dateMidnight3.getSecondOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 10, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        int int15 = timeOfDay13.getSecondOfMinute();
        int int16 = timeOfDay13.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay13.minusMinutes(32770);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight3.withFields((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay13.plusSeconds(76534);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000000L + "'", long6 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test12607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12607");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property4 = localDate1.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter7.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter7.getZone();
        java.util.Locale locale10 = dateTimeFormatter7.getLocale();
        org.joda.time.Chronology chronology11 = dateTimeFormatter7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter7.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDate1.toString(dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimeParser13);
    }

    @Test
    public void test12608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12608");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setWeekOfWeekyear((int) (byte) 1);
        mutableDateTime33.setMillisOfDay(31);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.millisOfSecond();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology42);
        mutablePeriod43.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod43.add(0L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutablePeriod43.add(0L, chronology57);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (-1), chronology57);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 10, chronology69);
        org.joda.time.MutableDateTime mutableDateTime72 = dateMidnight60.toMutableDateTime(chronology69);
        mutableDateTime72.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime72.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime72.add(durationFieldType76, (int) ' ');
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime72.minuteOfHour();
        mutableDateTime72.setTime((long) 6);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime72.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str86 = dateTimeZone84.getShortName((long) 53);
        java.lang.String str88 = dateTimeZone84.getName((long) 9);
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.now(dateTimeZone84);
        mutableDateTime72.setZone(dateTimeZone84);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime72);
        mutableDateTime72.setMillis((long) 457087);
        mutableDateTime72.addDays(42);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-00:00:00.001" + "'", str86, "-00:00:00.001");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-00:00:00.001" + "'", str88, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test12609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12609");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int46 = mutablePeriod42.getMonths();
        mutablePeriod42.addMinutes((int) (short) 0);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod42, 12);
        org.joda.time.Period period51 = mutablePeriod42.toPeriod();
        mutablePeriod42.addMinutes(15);
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod42.copy();
        mutablePeriod54.setDays(26849583);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(mutablePeriod54);
    }

    @Test
    public void test12610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12610");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DurationField durationField14 = property12.getDurationField();
        org.joda.time.LocalTime localTime16 = property12.addNoWrapToCopy(53);
        org.joda.time.DateTime dateTime17 = localTime16.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localTime16.getValue(26820635);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26820635");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test12611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12611");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        org.joda.time.DateTime dateTime17 = dateTime12.plusYears((int) '#');
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (short) -1);
        long long24 = dateMidnight21.getMillis();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.Period period26 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight21, periodType25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight21.toMutableDateTimeISO();
        int int28 = mutableDateTime27.getDayOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutableDateTime27.setChronology(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.weekyears();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime17.toMutableDateTime(chronology36);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTime();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        int int52 = mutablePeriod51.getDays();
        mutablePeriod51.setValue(0, 10);
        mutablePeriod51.setMonths(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology62);
        mutablePeriod63.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod63.add(0L);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusDays((int) (short) -1);
        int int76 = dateMidnight75.getYearOfEra();
        org.joda.time.Chronology chronology77 = dateMidnight75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology77);
        mutablePeriod63.add(0L, chronology77);
        boolean boolean80 = dateTimeFieldType59.isSupported(chronology77);
        org.joda.time.DurationField durationField81 = chronology77.hours();
        mutablePeriod51.add(32L, chronology77);
        org.joda.time.DateTimeField dateTimeField83 = chronology77.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField84 = chronology77.weekyear();
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime((long) 13, chronology77);
        mutableDateTime40.setChronology(chronology77);
        long long87 = mutableDateTime40.getMillis();
        org.joda.time.ReadableInstant readableInstant88 = null;
        mutableDateTime40.setMillis(readableInstant88);
        mutableDateTime40.addWeekyears(1943);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645488000000L + "'", long24 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1104512400010L + "'", long87 == 1104512400010L);
    }

    @Test
    public void test12612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12612");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology13.withZone(dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period(242751L, (long) 345, chronology13);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(33343, 62, 759, 39540195, 2119, 386, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39540195 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test12613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12613");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        mutableDateTime39.addWeekyears(22);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        long long52 = dateMidnight49.getMillis();
        org.joda.time.DateMidnight.Property property53 = dateMidnight49.weekyear();
        org.joda.time.DateMidnight dateMidnight54 = property53.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight55 = property53.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight56 = property53.withMaximumValue();
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale locale58 = builder57.build();
        int int59 = property53.getMaximumTextLength(locale58);
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getDisplayVariant();
        java.lang.String str62 = locale58.getDisplayVariant(locale60);
        int int63 = dateTimeField45.getMaximumTextLength(locale58);
        java.lang.String str64 = property42.getAsText(locale58);
        org.joda.time.MutableDateTime mutableDateTime65 = property42.getMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645574400000L + "'", long52 == 1645574400000L);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Wednesday" + "'", str64, "Wednesday");
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test12614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12614");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYear(13);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight18 = localDate15.toDateMidnight(dateTimeZone17);
        long long21 = dateTimeZone17.convertLocalToUTC(150847524429000L, false);
        long long23 = dateTimeZone17.nextTransition((-259200000L));
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 150847524429000L + "'", long21 == 150847524429000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-259200000L) + "'", long23 == (-259200000L));
    }

    @Test
    public void test12615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12615");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(946684800000L);
        org.joda.time.LocalTime localTime22 = property19.roundFloorCopy();
        java.lang.String str23 = property19.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
    }

    @Test
    public void test12616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12616");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period1 = period0.toPeriod();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration7 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, 12);
        org.joda.time.Period period8 = new org.joda.time.Period();
        boolean boolean9 = duration3.equals((java.lang.Object) period8);
        org.joda.time.Days days10 = period8.toStandardDays();
        org.joda.time.Period period11 = period1.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((long) 10, chronology18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((long) 10, chronology22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = timeOfDay23.getFields();
        org.joda.time.Period period25 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay19, (org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean27 = timeOfDay23.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        boolean boolean38 = dateTimeFieldType26.isSupported(chronology35);
        boolean boolean39 = localTime16.isSupported(dateTimeFieldType26);
        org.joda.time.LocalTime localTime41 = localTime16.plusHours(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology45);
        mutablePeriod46.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod46.add(0L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutablePeriod46.add(0L, chronology60);
        boolean boolean63 = dateTimeFieldType42.isSupported(chronology60);
        org.joda.time.DurationField durationField64 = chronology60.hours();
        org.joda.time.DurationFieldType durationFieldType65 = durationField64.getType();
        org.joda.time.LocalTime localTime67 = localTime41.withFieldAdded(durationFieldType65, 0);
        boolean boolean68 = period11.isSupported(durationFieldType65);
        org.joda.time.Duration duration69 = period11.toStandardDuration();
        org.joda.time.Period period71 = period11.withHours(102140);
        org.joda.time.Period period72 = period11.negated();
        org.joda.time.Period period74 = period72.minusYears(759);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test12617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12617");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField(chronology31);
        org.joda.time.DurationField durationField36 = chronology31.minutes();
        org.joda.time.DurationField durationField37 = chronology31.hours();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(dateTimeZone39);
        java.lang.String str41 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology42 = chronology31.withZone(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(chronology42);
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths(71);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-00:00:00.001" + "'", str41, "-00:00:00.001");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test12618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12618");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.Instant instant4 = instant1.minus(31556952000L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        long long11 = dateMidnight8.getMillis();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.Period period13 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight8, periodType12);
        java.util.Date date14 = dateMidnight8.toDate();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours(10L);
        long long17 = duration16.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withMillis((long) 24);
        long long21 = dateMidnight20.getMillis();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight8.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant24 = instant4.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant26 = instant24.minus(31536001146950L);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.weekyear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645488000000L + "'", long11 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 36000L + "'", long17 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test12619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12619");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("Mar 8, 0055 9:20:37 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Mar 8, 0055 9:20:37 AM\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12620");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusSeconds(2);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        long long16 = dateMidnight13.getMillis();
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = property17.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight19 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property17.getFieldType();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime9.withField(dateTimeFieldType20, 32769);
        org.joda.time.LocalDateTime.Property property23 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = property23.setCopy(50);
        org.joda.time.LocalDateTime localDateTime27 = property23.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology36.withZone(dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period(242751L, (long) 345, chronology36);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period43 = period40.withFieldAdded(durationFieldType41, 1182);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime27.withFieldAdded(durationFieldType41, (int) (byte) 100);
        int int46 = period1.indexOf(durationFieldType41);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645574400000L + "'", long16 == 1645574400000L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
    }

    @Test
    public void test12621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12621");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        long long8 = property7.remainder();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        int int11 = dateMidnight10.getSecondOfMinute();
        int int12 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight dateMidnight13 = property7.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(1020);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfSecond(26616836);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26616836 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4406400000L + "'", long8 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test12622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12622");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 10, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(chronology23);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) 'a', chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) 56, chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.clockhourOfHalfday();
        int int30 = dateTimeField29.getMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test12623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        int int11 = mutablePeriod10.getDays();
        mutablePeriod10.setValue(0, 10);
        mutablePeriod10.setMonths(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        boolean boolean39 = dateTimeFieldType18.isSupported(chronology36);
        org.joda.time.DurationField durationField40 = chronology36.hours();
        mutablePeriod10.add(32L, chronology36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusMonths(547);
        int int45 = yearMonthDay44.size();
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay44.year();
        org.joda.time.YearMonthDay yearMonthDay48 = property46.addWrapFieldToCopy(117);
        org.joda.time.DurationField durationField49 = property46.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test12624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12624");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime5 = yearMonthDay0.toDateTimeAtCurrentTime();
        java.util.Date date7 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromDateFields(date7);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        int int10 = property9.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = property9.addWrapFieldToCopy(1020);
        org.joda.time.YearMonthDay yearMonthDay13 = property9.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = property9.getYearMonthDay();
        boolean boolean15 = yearMonthDay0.isAfter((org.joda.time.ReadablePartial) yearMonthDay14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay0.withYear(59);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test12625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12625");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) '#');
        java.lang.String str3 = dateTimeZone0.getID();
        boolean boolean5 = dateTimeZone0.isStandardOffset((long) 1970);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test12626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12626");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate5 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay0.year();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale8.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = property6.setCopy("T00:06:14.010", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T00:06:14.010\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test12627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12627");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, 5);
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test12628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12628");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        long long11 = dateMidnight8.getMillis();
        java.util.Locale locale15 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar16 = dateMidnight8.toCalendar(locale15);
        int int17 = dateMidnight8.getCenturyOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight19.getYearOfEra();
        int int23 = dateMidnight19.getMillisOfSecond();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) dateMidnight19, periodType24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight8.yearOfCentury();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DurationField durationField34 = chronology32.hours();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight8.toMutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(86399, 782, 544, 1970000, 253, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645574400000L + "'", long11 == 1645574400000L);
        org.junit.Assert.assertEquals(locale15.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645574400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test12629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12629");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod1, 52);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay0.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
    }

    @Test
    public void test12630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12630");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        int int15 = property14.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property14.addWrapFieldToCopy(8);
        org.joda.time.DateTime dateTime19 = property14.addToCopy((long) 19);
        org.joda.time.DateTime dateTime21 = property14.addToCopy(17);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test12631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12631");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (short) 100, chronology11);
        org.joda.time.DurationField durationField15 = durationFieldType2.getField(chronology11);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26595766, chronology11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((long) 10, chronology18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((long) 10, chronology22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = timeOfDay23.getFields();
        org.joda.time.Period period25 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay19, (org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((long) 10, chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.plusSeconds((int) '4');
        int int32 = timeOfDay19.compareTo((org.joda.time.ReadablePartial) timeOfDay28);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay19.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property35 = timeOfDay19.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay37 = property35.addWrapFieldToCopy((int) '4');
        int int38 = property35.get();
        org.joda.time.TimeOfDay timeOfDay39 = property35.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = property35.addWrapFieldToCopy(572);
        long long43 = chronology11.set((org.joda.time.ReadablePartial) timeOfDay41, (long) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(1645570800001L, chronology11);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32010L + "'", long43 == 32010L);
    }

    @Test
    public void test12632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12632");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = timeOfDay2.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.plusHours(10);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.plusMillis(2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test12633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12633");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 10, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(chronology23);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 24, (long) '#', chronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        org.joda.time.Period period32 = new org.joda.time.Period(1645574400000L, periodType31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withPeriodAdded((org.joda.time.ReadablePeriod) period32, (int) (byte) 0);
        int[] intArray36 = chronology23.get((org.joda.time.ReadablePartial) localDateTime34, (long) 3);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear(1);
        java.util.Date date40 = dateTime39.toDate();
        date40.setYear(32772);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromDateFields(date40);
        java.time.Instant instant44 = date40.toInstant();
        java.util.Date date45 = java.util.Date.from(instant44);
        java.util.Date date46 = java.util.Date.from(instant44);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 3]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 07:30:58 GMT 34672");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Mon Jan 01 07:30:58 GMT 34672");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Mon Jan 01 07:30:58 GMT 34672");
    }

    @Test
    public void test12634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12634");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DateTime dateTime5 = interval1.getStart();
        boolean boolean6 = interval1.containsNow();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Interval interval8 = interval1.withPeriodBeforeEnd(readablePeriod7);
        boolean boolean10 = interval8.isAfter((long) 'x');
        org.joda.time.DateTime dateTime11 = interval8.getEnd();
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(5064);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology17);
        mutablePeriod18.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod18.add(0L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        mutablePeriod18.add(0L, chronology32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (-1), chronology32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 10, chronology44);
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight35.toMutableDateTime(chronology44);
        mutableDateTime47.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime47.toMutableDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology55);
        mutablePeriod56.setPeriod((long) (short) 10, (long) (short) -1);
        int int60 = mutablePeriod56.getMonths();
        mutablePeriod56.addMinutes((int) (short) 0);
        mutableDateTime47.add((org.joda.time.ReadablePeriod) mutablePeriod56, 12);
        int int65 = mutableDateTime47.getYearOfEra();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(chronology69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusDays((int) (short) -1);
        int int73 = dateMidnight72.getYearOfEra();
        org.joda.time.Chronology chronology74 = dateMidnight72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (short) 10, chronology74);
        org.joda.time.DateTime dateTime78 = dateTime76.minusHours(7);
        org.joda.time.DateTime dateTime80 = dateTime78.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property81 = dateTime80.weekyear();
        mutableDateTime47.setMillis((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime47.copy();
        mutableDateTime47.setDayOfYear(10);
        org.joda.time.DateTimeZone dateTimeZone86 = mutableDateTime47.getZone();
        long long89 = dateTimeZone86.convertLocalToUTC(1645488001874L, true);
        org.joda.time.DateTime dateTime90 = dateTime13.toDateTime(dateTimeZone86);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1969 + "'", int65 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1645488001874L + "'", long89 == 1645488001874L);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test12635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12635");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        java.lang.String str7 = localDateTime3.toString("1970-01-01");
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withMinuteOfHour((int) (byte) 10);
        int int10 = localDateTime3.size();
        int int11 = localDateTime3.getMillisOfSecond();
        int int12 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 752 + "'", int11 == 752);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test12636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12636");
        org.joda.time.Period period1 = org.joda.time.Period.days(4);
        org.joda.time.Period period3 = period1.plusMinutes(32770);
        org.joda.time.Period period5 = period3.multipliedBy(35);
        org.joda.time.Period period7 = period3.minusWeeks(62);
        org.joda.time.Minutes minutes8 = period3.toStandardMinutes();
        org.joda.time.Period period10 = period3.plusYears(26595766);
        org.joda.time.Duration duration11 = period3.toStandardDuration();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test12637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12637");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight1.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withWeekyear(26595766);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.minusDays(23);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plusDays(845);
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test12638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12638");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DurationField durationField67 = property2.getRangeDurationField();
        int int68 = property2.get();
        int int69 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645488000000L + "'", long48 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53 + "'", int52 == 53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 28 + "'", int69 == 28);
    }

    @Test
    public void test12639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12639");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        int int6 = dateMidnight3.getSecondOfMinute();
        java.util.Locale locale11 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.lang.String str12 = dateMidnight3.toString("07:22:45.446", locale11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight3.era();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight3.minusMonths(840);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.Period period27 = new org.joda.time.Period(57600000L, 873936000000L, chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.minuteOfHour();
        java.util.Locale locale34 = new java.util.Locale("\u65e5\u672c", "weekyear", "1970-01-01");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 51, chronology24, locale34, (java.lang.Integer) 44, 50);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight15.withChronology(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight40 = dateMidnight15.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals(locale11.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "07:22:45.446" + "'", str12, "07:22:45.446");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "\u65e5\u672c_WEEKYEAR_1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test12640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12640");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.add((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime41 = property38.roundCeiling();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration44);
        mutableDateTime41.addWeeks(52);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        long long54 = dateMidnight51.getMillis();
        org.joda.time.DateMidnight.Property property55 = dateMidnight51.weekyear();
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight57 = property55.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plusWeeks(158);
        int int60 = mutableDateTime41.compareTo((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime41.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645574400000L + "'", long54 == 1645574400000L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test12641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12641");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        mutableDateTime33.setRounding(dateTimeField46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime33.dayOfMonth();
        mutableDateTime33.addMinutes(19);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology54);
        mutablePeriod55.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod55.add(0L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology69);
        mutablePeriod55.add(0L, chronology69);
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (-1), chronology69);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.minusDays((int) (short) -1);
        int int80 = dateMidnight79.getYearOfEra();
        org.joda.time.Chronology chronology81 = dateMidnight79.getChronology();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) (short) 10, chronology81);
        org.joda.time.MutableDateTime mutableDateTime84 = dateMidnight72.toMutableDateTime(chronology81);
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime33.millisOfSecond();
        mutableDateTime33.setMinuteOfDay(0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test12642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12642");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int46 = mutablePeriod42.getMonths();
        mutablePeriod42.addMinutes((int) (short) 0);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod42, 12);
        int int51 = mutableDateTime33.getYearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 10, chronology60);
        org.joda.time.DateTime dateTime64 = dateTime62.minusHours(7);
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property67 = dateTime66.weekyear();
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime33.copy();
        mutableDateTime33.setDayOfYear(10);
        int int72 = mutableDateTime33.getYearOfCentury();
        int int73 = mutableDateTime33.getRoundingMode();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1969 + "'", int51 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 69 + "'", int72 == 69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test12643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12643");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        java.util.Date date16 = localDate15.toDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(554);
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours(11);
        org.joda.time.DateTime dateTime27 = dateTime21.withYearOfEra(371);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Sat Jan 01 00:00:00 GMT 52");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test12644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12644");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 10, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((-18), 868, 945, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 868 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test12645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12645");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.addMillis(26574655);
        mutableDateTime33.setMillis(117L);
        mutableDateTime33.setMillisOfDay((int) (byte) 100);
        mutableDateTime33.addSeconds(2011);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str48 = localDate47.toString();
        int int49 = localDate47.getYearOfEra();
        org.joda.time.Chronology chronology50 = localDate47.getChronology();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(36000L, chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (-4), chronology50);
        org.joda.time.Chronology chronology56 = yearMonthDay55.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period57 = new org.joda.time.Period((java.lang.Object) 2011, chronology56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test12646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12646");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight10 = property7.addToCopy((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = property7.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight12 = property7.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = property7.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight14 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight16 = property7.addWrapFieldToCopy(26673869);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight16);
        mutableDateTime17.addMinutes(0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400000L + "'", long6 == 1645574400000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test12647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12647");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1645514L);
        int int2 = localTime1.size();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
    }

    @Test
    public void test12648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12648");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology21);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.Period period28 = new org.joda.time.Period(1645574400000L, periodType27);
        org.joda.time.Period period29 = period28.normalizedStandard();
        int int30 = period29.getSeconds();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight10.minus((org.joda.time.ReadablePeriod) period29);
        int int32 = dateMidnight31.getSecondOfDay();
        int int33 = dateMidnight31.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test12649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12649");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        java.time.Instant instant17 = gregorianCalendar16.toInstant();
        java.util.Date date18 = java.util.Date.from(instant17);
        date18.setYear(849);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Dec 31 17:00:00 GMT 2749");
    }

    @Test
    public void test12650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12650");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        int int17 = localDate15.getDayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 10, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours(7);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        int int34 = dateTime30.getMillisOfSecond();
        org.joda.time.DateTime dateTime36 = dateTime30.plus((long) 6);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime47.withChronology(chronology55);
        org.joda.time.DateTime dateTime59 = dateTime36.toDateTime(chronology55);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((java.lang.Object) localDate15, chronology55);
        int int61 = localDate15.getDayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test12651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12651");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.millisOfDay();
        long long19 = property18.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test12652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12652");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-0001-01-02T09:00:00.000+47:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-0001-01-02T09:00:00.000+47:00\" is malformed at \"-01-02T09:00:00.000+47:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12653");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int7 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology11);
        mutablePeriod12.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod12.add(0L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        mutablePeriod12.add(0L, chronology26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (-1), chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight29.toMutableDateTime(chronology38);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration44);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period47 = duration44.toPeriod();
        org.joda.time.Period period49 = period47.withDays(59);
        org.joda.time.Period period50 = period47.normalizedStandard();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = period47.getValue(26741442);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26741442");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test12654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12654");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property14.setCopy("1");
        org.joda.time.DateTime dateTime17 = property14.getDateTime();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test12655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12655");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration11 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, 12);
        boolean boolean12 = duration5.isEqual((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.minusHours(7);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property28 = dateTime25.centuryOfEra();
        int int29 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime dateTime31 = dateTime25.plus((long) 6);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays((int) (short) -1);
        int int38 = dateMidnight37.getYearOfEra();
        org.joda.time.Chronology chronology39 = dateMidnight37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.clockhourOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.millisOfDay();
        org.joda.time.DateTime dateTime53 = dateTime42.withChronology(chronology50);
        org.joda.time.DateTime dateTime54 = dateTime31.toDateTime(chronology50);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone56);
        java.lang.String str58 = dateTimeZone56.getID();
        org.joda.time.Chronology chronology59 = chronology50.withZone(dateTimeZone56);
        org.joda.time.Period period60 = duration9.toPeriod(chronology50);
        org.joda.time.DateTimeField dateTimeField61 = chronology50.hourOfHalfday();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-00:00:00.001" + "'", str58, "-00:00:00.001");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test12656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12656");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        boolean boolean6 = interval1.isBefore(100L);
        long long7 = interval1.toDurationMillis();
        org.joda.time.Interval interval8 = interval1.toInterval();
        org.joda.time.Interval interval10 = interval1.withStartMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod16.add(0L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        mutablePeriod16.add(0L, chronology30);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (-1), chronology30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 10, chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight33.toMutableDateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType11.getField(chronology42);
        boolean boolean47 = interval10.equals((java.lang.Object) dateTimeField46);
        org.joda.time.DurationField durationField48 = dateTimeField46.getRangeDurationField();
        long long51 = dateTimeField46.add(191831011L, 82800010);
        long long53 = dateTimeField46.roundHalfEven(25200000L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 2612915941324631011L + "'", long51 == 2612915941324631011L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test12657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12657");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        int int10 = dateMidnight3.getHourOfDay();
        boolean boolean12 = dateMidnight3.isAfter((long) 1970000);
        org.joda.time.DateTime dateTime13 = dateMidnight3.toDateTime();
        org.joda.time.LocalDate localDate14 = dateTime13.toLocalDate();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000000L + "'", long6 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test12658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12658");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        int int15 = dateTime14.getMonthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod20.add(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        mutablePeriod20.add(0L, chronology34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (-1), chronology34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 10, chronology46);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight37.toMutableDateTime(chronology46);
        mutableDateTime49.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime49.toMutableDateTime(dateTimeZone53);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = yearMonthDay55.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime49, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType63 = periodType62.withWeeksRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 1970, (long) 3, periodType62);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration59, periodType62);
        org.joda.time.DateTime dateTime66 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime68 = dateTime14.minusMinutes((int) 'a');
        int int69 = dateTime68.getSecondOfMinute();
        org.joda.time.DateTime dateTime70 = dateTime68.withLaterOffsetAtOverlap();
        int int71 = dateTime70.getMinuteOfHour();
        boolean boolean73 = dateTime70.isBefore((long) 2024);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 23 + "'", int71 == 23);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test12659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12659");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        boolean boolean22 = dateTimeFieldType1.isSupported(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.hours();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology19);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withMillis(4406400000L);
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        long long32 = durationField29.add((long) 50, (long) 15);
        long long34 = durationField29.getMillis(554);
        long long35 = durationField29.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 39312000050L + "'", long32 == 39312000050L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1456879284000L + "'", long34 == 1456879284000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2629746000L + "'", long35 == 2629746000L);
    }

    @Test
    public void test12660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12660");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusDays(2012);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test12661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12661");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(356, 1020, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 356 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12662");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate12.minusWeeks(9);
        org.joda.time.LocalDate localDate18 = localDate16.plusWeeks(32);
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDate18.compareTo(readablePartial19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test12663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12663");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int46 = mutablePeriod42.getMonths();
        mutablePeriod42.addMinutes((int) (short) 0);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod42, 12);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withMillis(86399999L);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.Instant instant60 = instant57.minus(31556952000L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        long long67 = dateMidnight64.getMillis();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.days();
        org.joda.time.Period period69 = duration62.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight64, periodType68);
        java.util.Date date70 = dateMidnight64.toDate();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours(10L);
        long long73 = duration72.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.withMillis((long) 24);
        long long77 = dateMidnight76.getMillis();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration72, (org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight64.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Instant instant80 = instant60.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Chronology chronology81 = instant80.getChronology();
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(chronology81);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight55.withChronology(chronology81);
        mutableDateTime33.setChronology(chronology81);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645488000000L + "'", long67 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(date70);
// flaky:         org.junit.Assert.assertEquals(date70.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 36000L + "'", long73 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateMidnight83);
    }

    @Test
    public void test12664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12664");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        int int17 = mutablePeriod13.getSeconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 10, chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight39.toMutableDateTime(chronology48);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration54);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) '#');
        long long59 = duration58.getMillis();
        boolean boolean60 = duration54.isEqual((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType62 = periodType61.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration54, periodType62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, readableInstant64);
        mutablePeriod65.setSeconds(122);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (-1));
        org.joda.time.DateTime dateTime70 = instant69.toDateTimeISO();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusDays((int) (short) -1);
        int int78 = dateMidnight77.getYearOfEra();
        org.joda.time.Chronology chronology79 = dateMidnight77.getChronology();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) 10, chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusHours(7);
        org.joda.time.DateTime dateTime85 = dateTime83.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property87 = dateTime83.property(dateTimeFieldType86);
        org.joda.time.DateTime.Property property88 = dateTime83.weekOfWeekyear();
        org.joda.time.Duration duration89 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant69, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Duration duration91 = org.joda.time.Duration.standardDays((long) 62);
        org.joda.time.Instant instant93 = instant69.withDurationAdded((org.joda.time.ReadableDuration) duration91, 26800922);
        mutablePeriod65.add((org.joda.time.ReadableDuration) duration91);
        long long95 = duration91.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000000L + "'", long6 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 3024000000L + "'", long59 == 3024000000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1488L + "'", long95 == 1488L);
    }

    @Test
    public void test12665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12665");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        long long2 = duration1.getMillis();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        long long9 = dateMidnight6.getMillis();
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.weekyear();
        long long11 = property10.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        int int14 = dateMidnight13.getSecondOfMinute();
        int int15 = property10.compareTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateMidnight dateMidnight16 = property10.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight16.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(1020);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime19, periodType22);
        org.joda.time.DateTime dateTime25 = dateTime19.withMillisOfDay(8);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology29);
        mutablePeriod30.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod30.add(0L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        mutablePeriod30.add(0L, chronology44);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (-1), chronology44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 10, chronology56);
        org.joda.time.MutableDateTime mutableDateTime59 = dateMidnight47.toMutableDateTime(chronology56);
        mutableDateTime59.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.millisOfDay();
        mutableDateTime59.setWeekOfWeekyear(6);
        mutableDateTime59.setTime(473354280000L);
        mutableDateTime59.setSecondOfDay(17);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((-2));
        boolean boolean72 = dateTimeZone70.isStandardOffset((long) 4);
        mutableDateTime59.setZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime74 = dateTime25.withZoneRetainFields(dateTimeZone70);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3024000000L + "'", long2 == 3024000000L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645574400000L + "'", long9 == 1645574400000L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4406400000L + "'", long11 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test12666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12666");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        java.lang.String str7 = localDateTime3.toString("1970-01-01");
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withMinuteOfHour((int) (byte) 10);
        int int10 = localDateTime3.size();
        int int11 = localDateTime3.getMillisOfSecond();
        int int12 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withWeekOfWeekyear((int) (short) 10);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.setFirstDayOfWeek(24);
        calendar16.set(2022, 1, (int) (byte) -1, 11, (int) (byte) 0, (int) 'a');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromCalendarFields(calendar16);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 'u');
        mutablePeriod28.setDays(7);
        mutablePeriod28.addSeconds(0);
        org.joda.time.LocalDate localDate34 = localDate26.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod28, 0);
        org.joda.time.LocalDate.Property property35 = localDate26.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime3, (org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 377 + "'", int11 == 377);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1643540497377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=1,SECOND=37,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test12667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean5 = localDateTime3.isSupported(dateTimeFieldType4);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) 100);
        mutablePeriod7.setMillis(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withYear(5064);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra(457087);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test12668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12668");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        mutableDateTime33.setRounding(dateTimeField46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 10, chronology56);
        org.joda.time.DateTime dateTime60 = dateTime58.minusHours(7);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime60.toMutableDateTime();
        org.joda.time.DateTime dateTime65 = dateTime60.plusMinutes(6);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.withZoneRetainFields(dateTimeZone70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusDays((int) (short) -1);
        int int76 = dateMidnight75.getYearOfEra();
        org.joda.time.Chronology chronology77 = dateMidnight75.getChronology();
        long long78 = dateMidnight75.getMillis();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period(readableDuration79, readableInstant80);
        org.joda.time.PeriodType periodType82 = period81.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight71, (org.joda.time.ReadableInstant) dateMidnight75, periodType82);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime65, periodType82);
        org.joda.time.DateTime dateTime86 = dateTime65.plusSeconds(14);
        org.joda.time.DateTime.Property property87 = dateTime86.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645574400000L + "'", long78 == 1645574400000L);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
    }

    @Test
    public void test12669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12669");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setMonthOfYear(1182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1182 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test12670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12670");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        int int7 = dateMidnight5.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology17);
        org.joda.time.DurationField durationField21 = durationFieldType8.getField(chronology17);
        java.lang.String str22 = durationFieldType8.getName();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight5.withFieldAdded(durationFieldType8, (int) 'u');
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateMidnight.Property property27 = dateMidnight24.property(dateTimeFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = property27.addWrapFieldToCopy(1969);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test12671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12671");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod13.add(0L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        mutablePeriod13.add(0L, chronology27);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 0, (long) 6, chronology27);
        int int31 = period30.getSeconds();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours(10L);
        long long34 = duration33.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withMillis((long) 24);
        long long38 = dateMidnight37.getMillis();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateMidnight37);
        boolean boolean40 = period30.equals((java.lang.Object) dateMidnight37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology48.getZone();
        int int53 = dateTimeZone51.getOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight37.withZoneRetainFields(dateTimeZone51);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone51.getShortName((long) 840, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 10, 10L, dateTimeZone51);
        java.lang.String str60 = dateTimeZone51.getName((long) (short) 100);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(dateTimeZone51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(254, 8765, (int) (short) 100, 801, 310, 0, dateTimeZone51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 801 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 36000L + "'", long34 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
    }

    @Test
    public void test12672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12672");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (byte) 1);
        java.util.Date date5 = new java.util.Date((-1), (int) (short) 0, 0);
        int int6 = date5.getDate();
        int int7 = date5.getMonth();
        boolean boolean8 = timeOfDay1.equals((java.lang.Object) int7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours(10L);
        long long11 = duration10.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withMillis((long) 24);
        long long15 = dateMidnight14.getMillis();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Period period17 = duration10.toPeriod();
        org.joda.time.Period period19 = period17.withMillis(4);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay1.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod26.add(0L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        mutablePeriod26.add(0L, chronology40);
        boolean boolean43 = dateTimeFieldType22.isSupported(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.hours();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology40);
        org.joda.time.DurationField durationField46 = chronology40.centuries();
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay1.withChronologyRetainFields(chronology40);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 31 00:00:00 GMT 1898");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000L + "'", long11 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(timeOfDay47);
    }

    @Test
    public void test12673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12673");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        org.joda.time.LocalDate.Property property16 = localDate12.era();
        org.joda.time.DateMidnight dateMidnight17 = localDate12.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(16);
        org.joda.time.DateMidnight dateMidnight20 = localDate12.toDateMidnight(dateTimeZone19);
        long long22 = dateTimeZone19.convertUTCToLocal(3023999533L);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3081599533L + "'", long22 == 3081599533L);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test12674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12674");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTimeISO();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        long long10 = dateMidnight7.getMillis();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        org.joda.time.Period period12 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight7, periodType11);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime14 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str16 = interval15.toString();
        org.joda.time.Period period17 = interval15.toPeriod();
        org.joda.time.DateTime dateTime19 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 180);
        org.joda.time.Period period21 = period17.minusMonths((int) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645488000000L + "'", long10 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T00:00:00.000Z/2022-02-22T00:00:00.000Z" + "'", str16, "2022-02-22T00:00:00.000Z/2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test12675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12675");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay0.minusYears((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay0.toDateMidnight();
        org.joda.time.Interval interval7 = yearMonthDay0.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) yearMonthDay0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test12676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12676");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        mutableDateTime33.setWeekOfWeekyear(6);
        mutableDateTime33.addWeeks(24);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime33.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMillis(7);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        int int58 = localDateTime48.get(dateTimeFieldType57);
        int int59 = mutableDateTime42.get(dateTimeFieldType57);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime42.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime42.setDayOfMonth((-27133868));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27133868 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime60);
    }

    @Test
    public void test12677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12677");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4406400000L);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay(26584792);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMonths(19);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime1.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDayOfYear(81);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test12678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12678");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration6 = duration1.plus((org.joda.time.ReadableDuration) duration5);
        long long7 = duration6.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000L + "'", long2 == 36000L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 600L + "'", long7 == 600L);
    }

    @Test
    public void test12679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12679");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        int int15 = property14.getMinimumValue();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        int int22 = dateMidnight19.getSecondOfMinute();
        int int23 = property14.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = dateMidnight19.withMonthOfYear(60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 60 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test12680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12680");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusDays(26574907);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test12681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        java.lang.Object obj2 = null;
        boolean boolean3 = localDateTime1.equals(obj2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withCenturyOfEra(12);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property6.addWrapFieldToCopy(59);
        java.lang.String str9 = localDateTime8.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1222-02-22T07:30:59.638" + "'", str9, "1222-02-22T07:30:59.638");
    }

    @Test
    public void test12682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12682");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int46 = mutablePeriod42.getMonths();
        mutablePeriod42.addMinutes((int) (short) 0);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod42, 12);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        int int52 = dateMidnight51.getMinuteOfDay();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours(10L);
        long long55 = duration54.getStandardSeconds();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration59 = duration54.plus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight51.plus((org.joda.time.ReadableDuration) duration54);
        boolean boolean61 = mutableDateTime33.isAfter((org.joda.time.ReadableInstant) dateMidnight60);
        mutableDateTime33.addSeconds(7);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime33.era();
        org.joda.time.Period period66 = org.joda.time.Period.days(4);
        org.joda.time.Period period68 = period66.plusMinutes(32770);
        org.joda.time.Period period70 = period68.multipliedBy(35);
        org.joda.time.Duration duration71 = period70.toStandardDuration();
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration71);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 36000L + "'", long55 == 36000L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(duration71);
    }

    @Test
    public void test12683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12683");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay(50);
        org.joda.time.DateTime dateTime18 = localTime15.toDateTimeToday();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DurationField durationField26 = chronology24.halfdays();
        boolean boolean27 = dateTime18.equals((java.lang.Object) durationField26);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12684");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology7);
        mutablePeriod8.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod8.add(0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        mutablePeriod8.add(0L, chronology22);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 0, (long) 6, chronology22);
        int int26 = period25.getSeconds();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours(10L);
        long long29 = duration28.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.withMillis((long) 24);
        long long33 = dateMidnight32.getMillis();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateMidnight32);
        boolean boolean35 = period25.equals((java.lang.Object) dateMidnight32);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        int int48 = dateTimeZone46.getOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.withZoneRetainFields(dateTimeZone46);
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeZone46.getShortName((long) 840, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 10, 10L, dateTimeZone46);
        java.lang.String str55 = dateTimeZone46.getName((long) (short) 100);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) 1182, dateTimeZone46);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        int int65 = dateMidnight64.getYearOfEra();
        org.joda.time.Chronology chronology66 = dateMidnight64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 10, chronology66);
        org.joda.time.DateTime dateTime70 = dateTime68.minusHours(7);
        org.joda.time.DateTime dateTime72 = dateTime70.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property74 = dateTime70.property(dateTimeFieldType73);
        org.joda.time.DateTime dateTime76 = property74.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime76.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property78 = dateTime76.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(dateTimeZone80);
        java.lang.String str82 = dateTimeZone80.getID();
        org.joda.time.DateTime dateTime83 = dateTime76.withZoneRetainFields(dateTimeZone80);
        java.lang.String str85 = dateTimeZone80.getName((long) 10);
        org.joda.time.DateTime dateTime86 = localTime57.toDateTimeToday(dateTimeZone80);
        org.joda.time.TimeOfDay timeOfDay89 = new org.joda.time.TimeOfDay(0, 1);
        org.joda.time.TimeOfDay.Property property90 = timeOfDay89.secondOfMinute();
        java.lang.String str91 = property90.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property90.getFieldType();
        boolean boolean93 = dateTimeZone80.equals((java.lang.Object) property90);
        long long95 = dateTimeZone80.nextTransition(292278993L);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 36000L + "'", long29 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-00:00:00.001" + "'", str82, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-00:00:00.001" + "'", str85, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0" + "'", str91, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 292278993L + "'", long95 == 292278993L);
    }

    @Test
    public void test12685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12685");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight21.withDayOfYear(54);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight21.withCenturyOfEra((int) '#');
        int int38 = dateMidnight21.getWeekyear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 10, chronology47);
        org.joda.time.DateTime dateTime51 = dateTime49.minusHours(7);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property55 = dateTime51.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime57 = property55.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime57.plusWeeks(32769);
        org.joda.time.DateTime dateTime61 = dateTime57.minusYears(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean63 = dateTime57.isSupported(dateTimeFieldType62);
        java.lang.String str64 = dateTimeFieldType62.toString();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight21.withField(dateTimeFieldType62, (int) (byte) 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "halfdayOfDay" + "'", str64, "halfdayOfDay");
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test12686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12686");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.withWeekyear(24);
        org.joda.time.DateMidnight.Property property12 = dateMidnight3.dayOfMonth();
        java.lang.String str13 = property12.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000000L + "'", long6 == 1645488000000L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfMonth" + "'", str13, "dayOfMonth");
    }

    @Test
    public void test12687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12687");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks(53);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1958);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test12688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12688");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(33343, 2043, 26707428);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33343 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12689");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfMonth(14);
        int int10 = localDateTime9.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 197022 + "'", int10 == 197022);
    }

    @Test
    public void test12690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12690");
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        org.joda.time.Period period12 = new org.joda.time.Period(1645574400000L, periodType11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) 7, periodType11);
        java.lang.String str15 = periodType11.getName();
        org.joda.time.PeriodType periodType16 = periodType11.withDaysRemoved();
        java.lang.String str17 = periodType11.getName();
        org.joda.time.PeriodType periodType18 = periodType11.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period19 = new org.joda.time.Period(297, 164, 61, 69, 868, 960, (-18), 641, periodType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Days" + "'", str15, "Days");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Days" + "'", str17, "Days");
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test12691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12691");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = localTime13.withMillisOfSecond(11);
        org.joda.time.LocalTime localTime18 = localTime13.withMinuteOfHour(31);
        org.joda.time.LocalTime localTime20 = localTime18.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(546);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test12692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12692");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.weekyear();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        long long12 = durationField9.subtract(30240082468L, 955);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = durationField9.getMillis(4150911252232096L, (long) 2301061);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 4150911252232096 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 26802082468L + "'", long12 == 26802082468L);
    }

    @Test
    public void test12693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12693");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight9.withWeekyear(22);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight9.toDateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = dateMidnight9.toLocalDate();
        int int23 = dateMidnight9.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645574400000L + "'", long12 == 1645574400000L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test12694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12694");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears((int) '#');
        int int10 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusYears(664);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 197057 + "'", int10 == 197057);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test12695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12695");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        java.lang.String str7 = dateTimeField6.toString();
        long long9 = dateTimeField6.roundHalfCeiling((long) 292279003);
        org.joda.time.DurationField durationField10 = dateTimeField6.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DateTimeField[yearOfEra]" + "'", str7, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(durationField10);
    }

    @Test
    public void test12696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12696");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = gregorianCalendar16.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
    }

    @Test
    public void test12697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12697");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.withEra((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(12);
        org.joda.time.DateTime dateTime20 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime22 = dateTime16.plusSeconds(9);
        java.util.Date date23 = dateTime22.toDate();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date23);
        java.time.Instant instant25 = date23.toInstant();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 17 17:00:09 GMT 1969");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test12698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12698");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = dateTimeZone0.getShortName((long) 'a', locale2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str8 = localDate7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.halfdayOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) '#');
        int int22 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) '4');
        boolean boolean25 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone27);
        java.lang.String str29 = dateTimeZone27.getID();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology33);
        mutablePeriod34.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod34.add(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        mutablePeriod34.add(0L, chronology48);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (-1), chronology48);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 10, chronology60);
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight51.toMutableDateTime(chronology60);
        mutableDateTime63.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime63.millisOfDay();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime63.era();
        boolean boolean68 = dateTimeZone27.equals((java.lang.Object) mutableDateTime63);
        org.joda.time.DateTime dateTime69 = localDate7.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay5.toDateMidnight(dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        long long73 = dateTimeZone27.nextTransition(3023999533L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-00:00:00.001" + "'", str29, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3023999533L + "'", long73 == 3023999533L);
    }

    @Test
    public void test12699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12699");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime10);
        java.lang.String str12 = interval11.toString();
        org.joda.time.Interval interval14 = interval11.withStartMillis(187200000L);
        org.joda.time.Interval interval15 = interval11.toInterval();
        long long16 = interval11.toDurationMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001/2022-02-22T00:00:00.000-00:00:00.001" + "'", str12, "2022-02-22T00:00:00.000-00:00:00.001/2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test12700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12700");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay0.plusYears(639);
        int int6 = yearMonthDay0.size();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test12701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12701");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds(4);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfSecond();
        org.joda.time.LocalTime localTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalTime localTime30 = property28.withMinimumValue();
        org.joda.time.LocalTime localTime31 = property28.roundCeilingCopy();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale34 = locale32.stripExtensions();
        int int35 = property28.getMaximumShortTextLength(locale32);
        java.lang.String str36 = locale32.getDisplayScript();
        org.joda.time.LocalTime localTime37 = property12.setCopy("23", locale32);
        org.joda.time.LocalTime localTime39 = localTime37.minusMillis(22);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645515059899,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=30,SECOND=59,MILLISECOND=899,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
    }

    @Test
    public void test12702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12702");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property18.addToCopy((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay21 = property18.getTimeOfDay();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        boolean boolean23 = locale22.hasExtensions();
        int int24 = property18.getMaximumTextLength(locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((long) 10, chronology26);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay27.withSecondOfMinute(53);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay27.withHourOfDay(1);
        int int33 = timeOfDay32.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay32.plusMillis(54);
        boolean boolean36 = property18.equals((java.lang.Object) timeOfDay32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 10, chronology45);
        org.joda.time.DateTime dateTime49 = dateTime47.minusHours(7);
        int int50 = dateTime49.getCenturyOfEra();
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTimeISO();
        int int52 = dateTime51.getEra();
        org.joda.time.DateTime.Property property53 = dateTime51.dayOfWeek();
        org.joda.time.DateTime dateTime55 = property53.addToCopy(10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology58);
        mutablePeriod59.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod59.add(0L);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusDays((int) (short) -1);
        int int72 = dateMidnight71.getYearOfEra();
        org.joda.time.Chronology chronology73 = dateMidnight71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology73);
        mutablePeriod59.add(0L, chronology73);
        mutablePeriod59.addMinutes(31);
        mutablePeriod59.addHours(0);
        int int80 = mutablePeriod59.getDays();
        int int81 = mutablePeriod59.getMillis();
        org.joda.time.DateTime dateTime82 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.TimeOfDay timeOfDay84 = timeOfDay32.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod59, 62);
        mutablePeriod59.addHours(26662068);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 19 + "'", int50 == 19);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-11) + "'", int81 == (-11));
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeOfDay84);
    }

    @Test
    public void test12703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12703");
        java.util.Date date3 = new java.util.Date((-1), (int) (short) 0, 0);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int5 = date3.getTimezoneOffset();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        calendar7.setFirstDayOfWeek(24);
        calendar7.clear(12);
        java.util.Date date12 = calendar7.getTime();
        boolean boolean13 = date3.before(date12);
        java.util.Date date20 = new java.util.Date(11, 5, 5, (int) (byte) -1, 31, 100);
        java.lang.String str21 = date20.toGMTString();
        boolean boolean22 = date3.after(date20);
        java.lang.String str23 = date3.toLocaleString();
        int int24 = date3.getMonth();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 31 00:00:00 GMT 1898");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513259946,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=?,SECOND=59,MILLISECOND=946,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:00:59 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Sun Jun 04 23:32:40 GMT 1911");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "4 Jun 1911 23:32:40 GMT" + "'", str21, "4 Jun 1911 23:32:40 GMT");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e0a\u5348 12:00:00" + "'", str23, "\u4e0a\u5348 12:00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
    }

    @Test
    public void test12704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12704");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusDays((int) (short) -1);
        int int5 = dateMidnight4.getYearOfEra();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.DurationField durationField8 = durationFieldType0.getField(chronology6);
        long long11 = durationField8.getDifferenceAsLong(163L, (long) 873);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod16.add(0L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        mutablePeriod16.add(0L, chronology30);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (-1), chronology30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 10, chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight33.toMutableDateTime(chronology42);
        mutableDateTime45.setYear(2022);
        mutableDateTime45.setYear((-1));
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime45.dayOfYear();
        mutableDateTime45.setMinuteOfHour(4);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusMillis(0);
        int[] intArray67 = new int[] {};
        int int68 = dateTimeField62.getMaximumValue((org.joda.time.ReadablePartial) localDateTime66, intArray67);
        int int70 = dateTimeField62.getMinimumValue((long) 1);
        mutableDateTime45.setRounding(dateTimeField62);
        long long74 = dateTimeField62.addWrapField((-4L), 12);
        org.joda.time.DurationField durationField75 = dateTimeField62.getDurationField();
        int int76 = durationField8.compareTo(durationField75);
        long long78 = durationField75.getValueAsLong((long) 61200000);
        boolean boolean79 = durationField75.isPrecise();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 24 + "'", int68 == 24);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-43200004L) + "'", long74 == (-43200004L));
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 17L + "'", long78 == 17L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test12705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12705");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 10, chronology16);
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours(7);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime20.centuryOfEra();
        java.lang.String str24 = property23.getName();
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = property23.getAsText(locale25);
        org.joda.time.DateTime dateTime28 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        calendar31.setFirstDayOfWeek(24);
        int int35 = calendar31.getActualMinimum(10);
        java.util.Date date36 = calendar31.getTime();
        java.lang.String str37 = calendar31.getCalendarType();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.fromCalendarFields(calendar31);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = locale40.toLanguageTag();
        java.util.Set<java.lang.Character> charSet42 = locale40.getExtensionKeys();
        java.lang.String str44 = locale40.getExtension('u');
        java.lang.String str45 = localDateTime38.toString("23", locale40);
        java.lang.String str46 = locale40.getISO3Country();
        int int47 = property29.getMaximumTextLength(locale40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale40);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 10, chronology57);
        org.joda.time.DateTime dateTime61 = dateTime59.minusHours(7);
        org.joda.time.DateTime dateTime63 = dateTime61.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property64 = dateTime61.centuryOfEra();
        int int65 = dateTime61.getMillisOfSecond();
        org.joda.time.DateTime dateTime67 = dateTime61.plus((long) 6);
        org.joda.time.DateTime dateTime69 = dateTime61.withWeekOfWeekyear(31);
        org.joda.time.DateTime dateTime71 = dateTime61.plusHours(2922789);
        int int72 = dateTime71.getEra();
        boolean boolean73 = dateTime71.isEqualNow();
        org.joda.time.DateTime dateTime74 = dateTime71.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay75 = dateTime74.toTimeOfDay();
        org.joda.time.TimeOfDay.Property property76 = timeOfDay75.millisOfSecond();
        int int77 = timeOfDay75.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = dateTimeFormatter48.print((org.joda.time.ReadablePartial) timeOfDay75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "centuryOfEra" + "'", str24, "centuryOfEra");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "19" + "'", str27, "19");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645515059982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=30,SECOND=59,MILLISECOND=982,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 07:30:59 GMT 2022");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "gregory" + "'", str37, "gregory");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh-CN" + "'", str41, "zh-CN");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "23" + "'", str45, "23");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CHN" + "'", str46, "CHN");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test12706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12706");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight10 = property7.withMaximumValue();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = builder11.build();
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.DateMidnight dateMidnight14 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField15 = property7.getField();
        org.joda.time.DateMidnight dateMidnight17 = property7.addToCopy(6);
        org.joda.time.DateMidnight dateMidnight18 = property7.getDateMidnight();
        org.joda.time.DateTimeField dateTimeField19 = property7.getField();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test12707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12707");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.getID();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight3.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.millisOfDay();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) '#');
        long long19 = duration18.getMillis();
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration18, 13);
        mutableDateTime14.addMonths((-292278));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setTime(17, 1473879, 61200010, 197022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1473879 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-00:00:00.001" + "'", str13, "-00:00:00.001");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3024000000L + "'", long19 == 3024000000L);
    }

    @Test
    public void test12708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12708");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.set(2022, 1, (int) (byte) -1, 11, (int) (byte) 0, (int) 'a');
        calendar1.set(1, 9, 1);
        java.util.TimeZone timeZone15 = calendar1.getTimeZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 10, chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusHours(10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology31.getZone();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 11, 873903906000L, dateTimeZone34);
        org.joda.time.DateTime dateTime36 = timeOfDay18.toDateTimeToday(dateTimeZone34);
        boolean boolean37 = calendar1.before((java.lang.Object) timeOfDay18);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.add(26689285, 720);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=9,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=11,MINUTE=0,SECOND=97,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test12709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12709");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.Period period12 = new org.joda.time.Period(obj0, chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra(28);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusHours(9);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(361);
        java.util.Locale locale27 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.lang.String str28 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime23, locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = locale27.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for thu dec 01 00:00:00 utc 1898");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals(locale27.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "20" + "'", str28, "20");
    }

    @Test
    public void test12710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12710");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DurationField durationField11 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfHour();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', periodType14, chronology15);
        org.joda.time.Period period18 = period16.minusDays((int) (short) 100);
        org.joda.time.Weeks weeks19 = period16.toStandardWeeks();
        long long22 = chronology8.add((org.joda.time.ReadablePeriod) weeks19, (long) (-292278), (int) 'u');
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-292278L) + "'", long22 == (-292278L));
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test12711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12711");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        int int9 = dateMidnight8.getMillisOfSecond();
        org.joda.time.Instant instant10 = dateMidnight8.toInstant();
        boolean boolean12 = instant10.isBefore((long) (short) 10);
        long long13 = instant10.getMillis();
        org.joda.time.Instant instant15 = instant10.minus((long) (-292275054));
        org.joda.time.DateTime dateTime16 = instant15.toDateTimeISO();
        org.joda.time.Chronology chronology17 = instant15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(2922789, 958, (-292275054), (int) (byte) 100, 9, 26820635, 121, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645488000001L + "'", long13 == 1645488000001L);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test12712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12712");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int7 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology11);
        mutablePeriod12.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod12.add(0L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        mutablePeriod12.add(0L, chronology26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (-1), chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight29.toMutableDateTime(chronology38);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration44);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration44);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = mutablePeriod3.getValue(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test12713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12713");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100, chronology14);
        org.joda.time.DurationField durationField18 = durationFieldType5.getField(chronology14);
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26595766, chronology14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((long) 10, chronology21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((long) 10, chronology25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = timeOfDay26.getFields();
        org.joda.time.Period period28 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay22, (org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((long) 10, chronology30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = timeOfDay31.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.plusSeconds((int) '4');
        int int35 = timeOfDay22.compareTo((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay22.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property38 = timeOfDay22.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay40 = property38.addWrapFieldToCopy((int) '4');
        int int41 = property38.get();
        org.joda.time.TimeOfDay timeOfDay42 = property38.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay44 = property38.addWrapFieldToCopy(572);
        long long46 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay44, (long) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        int int53 = dateMidnight50.getSecondOfMinute();
        java.util.Locale locale58 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.lang.String str59 = dateMidnight50.toString("07:22:45.446", locale58);
        java.lang.String str60 = locale58.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 339, chronology14, locale58);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        long long68 = dateTimeZone66.nextTransition((long) 22);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(56, 3, 9, dateTimeZone66);
        dateTimeParserBucket61.setZone(dateTimeZone66);
        boolean boolean71 = dateTimeZone66.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(2032, 0, 31, dateTimeZone66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32010L + "'", long46 == 32010L);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals(locale58.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "07:22:45.446" + "'", str59, "07:22:45.446");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "07:22:45.446" + "'", str60, "07:22:45.446");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 22L + "'", long68 == 22L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test12714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12714");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        long long10 = dateMidnight7.getMillis();
        org.joda.time.DateMidnight.Property property11 = dateMidnight7.weekyear();
        org.joda.time.DateMidnight dateMidnight12 = property11.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight13 = property11.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight14 = property11.withMaximumValue();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = builder15.build();
        int int17 = property11.getMaximumTextLength(locale16);
        org.joda.time.DateMidnight dateMidnight18 = property11.getDateMidnight();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology22);
        mutablePeriod23.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod23.add(0L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        mutablePeriod23.add(0L, chronology37);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (-1), chronology37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        int int48 = dateMidnight47.getYearOfEra();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 10, chronology49);
        org.joda.time.MutableDateTime mutableDateTime52 = dateMidnight40.toMutableDateTime(chronology49);
        mutableDateTime52.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.millisOfDay();
        mutableDateTime52.setWeekOfWeekyear(6);
        mutableDateTime52.addWeeks(24);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime52.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundFloor();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight18, (org.joda.time.ReadableInstant) mutableDateTime61);
        mutableDateTime61.setYear(964);
        mutableDateTime61.setSecondOfDay(37);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645574400001L + "'", long10 == 1645574400001L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test12715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12715");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod13.add(0L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        mutablePeriod13.add(0L, chronology27);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 0, (long) 6, chronology27);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) 100, chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(180, 0, 911, 2011, 26849583, 23260999, 112, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2011 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test12716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12716");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay0.plusMonths(0);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = new org.joda.time.Period(1645574400000L, periodType8);
        org.joda.time.Period period10 = period9.normalizedStandard();
        int int11 = period10.getSeconds();
        org.joda.time.Period period13 = period10.withMinutes((int) (byte) -1);
        org.joda.time.Period period15 = period10.minusMonths(31);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.year();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = yearMonthDay16.getFieldTypes();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
    }

    @Test
    public void test12717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12717");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.weekyear();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval11 = yearMonthDay10.toInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay10.withChronologyRetainFields(chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay10.minusYears((int) (short) -1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology18);
        mutablePeriod19.setPeriod((long) (short) 10, (long) (short) -1);
        int int24 = mutablePeriod19.getValue(0);
        mutablePeriod19.addMinutes(0);
        mutablePeriod19.setMonths((int) (byte) 10);
        java.lang.Object obj29 = mutablePeriod19.clone();
        mutablePeriod19.addSeconds(14);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) mutablePeriod19);
        long long35 = chronology8.add((org.joda.time.ReadablePeriod) mutablePeriod19, (long) 595, 0);
        org.joda.time.DurationField durationField36 = chronology8.halfdays();
        long long38 = durationField36.getMillis((long) 784);
        long long40 = durationField36.getMillis(0L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P10MT13.989S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P10MT13.989S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P10MT13.989S");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 595L + "'", long35 == 595L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 33868800000L + "'", long38 == 33868800000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test12718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12718");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 'u');
        mutablePeriod1.setDays(7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight14.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusYears((-1));
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withFieldAdded(durationFieldType22, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration26, readableInstant27);
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology33);
        mutablePeriod34.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod34.add(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        mutablePeriod34.add(0L, chronology48);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (-1), chronology48);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 10, chronology60);
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight51.toMutableDateTime(chronology60);
        org.joda.time.DurationField durationField64 = chronology60.months();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(36000L, periodType29, chronology60);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(readableInstant12, (org.joda.time.ReadableInstant) dateMidnight24, periodType29);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((int) 'u', 3, 339, 1222, 282, 374, 18, 23, periodType29);
        org.joda.time.PeriodType periodType69 = periodType29.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod1, periodType69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod70.getFieldTypes();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.forFields(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test12719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12719");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        int int3 = periodType2.size();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology7);
        mutablePeriod8.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod8.add(0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        mutablePeriod8.add(0L, chronology22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (-1), chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 10, chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight25.toMutableDateTime(chronology34);
        org.joda.time.DurationField durationField38 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 56, (long) 7, periodType2, chronology34);
        org.joda.time.DurationFieldType[] durationFieldTypeArray41 = mutablePeriod40.getFieldTypes();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.forFields(durationFieldTypeArray41);
        int int43 = periodType42.size();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 7 + "'", int3 == 7);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationFieldTypeArray41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
    }

    @Test
    public void test12720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12720");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = property14.roundCeilingCopy();
        java.lang.String str18 = property14.getAsShortText();
        org.joda.time.LocalTime localTime20 = property14.addCopy(60000L);
        org.joda.time.LocalTime localTime21 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime22 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "259" + "'", str18, "259");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test12721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12721");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 32769, dateTimeZone2);
        org.joda.time.LocalDate localDate47 = localDate45.withWeekyear(86399999);
        int int48 = localDate47.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtMidnight(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate53 = localDate47.minusYears(26800922);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 863999 + "'", int48 == 863999);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test12722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12722");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        int int12 = mutablePeriod7.getValue(0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        org.joda.time.Duration duration17 = mutablePeriod7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        int int24 = dateTimeZone22.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(840, 3, 4, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay3.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.year();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withYearOfEra(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight31 = dateMidnight26.withDayOfWeek(26616577);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26616577 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test12723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12723");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property18.addToCopy((int) (byte) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateMidnight dateMidnight32 = dateTime31.toDateMidnight();
        int int33 = dateMidnight32.getWeekOfWeekyear();
        boolean boolean34 = timeOfDay20.equals((java.lang.Object) dateMidnight32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withZoneRetainFields(dateTimeZone35);
        int int37 = dateMidnight32.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.withYear(590);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test12724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12724");
        java.util.Date date5 = new java.util.Date((int) (short) 0, 11, (int) (short) 0, (int) (short) -1, (int) (byte) 10);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology10);
        mutablePeriod11.setPeriod((long) (short) 10, (long) (short) -1);
        int int16 = mutablePeriod11.getValue(0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        org.joda.time.Duration duration21 = mutablePeriod11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight18, chronology29);
        org.joda.time.LocalDate localDate35 = localDate33.plusMonths(31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(dateTimeZone38);
        java.lang.String str40 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology44);
        mutablePeriod45.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod45.add(0L);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        int int58 = dateMidnight57.getYearOfEra();
        org.joda.time.Chronology chronology59 = dateMidnight57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology59);
        mutablePeriod45.add(0L, chronology59);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (-1), chronology59);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 10, chronology71);
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight62.toMutableDateTime(chronology71);
        mutableDateTime74.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime74.millisOfDay();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime74.era();
        boolean boolean79 = dateTimeZone38.equals((java.lang.Object) mutableDateTime74);
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(dateTimeZone38);
        java.util.TimeZone timeZone81 = dateTimeZone38.toTimeZone();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) (short) 10, dateTimeZone38);
        org.joda.time.DateTime dateTime83 = localDate35.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 'a', dateTimeZone38);
        org.joda.time.DateTime dateTime85 = localDate6.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.DateTime dateTime87 = dateTime85.plusMillis(999);
        org.joda.time.DateTime dateTime89 = dateTime87.minusMonths(615620);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 29 23:10:00 GMT 1900");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-00:00:00.001" + "'", str40, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(timeZone81);
        org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test12725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12725");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime33.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime33.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundHalfCeiling();
        mutableDateTime64.addMinutes(122);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.yearOfCentury();
        org.joda.time.Interval interval68 = property67.toInterval();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = interval68.withEnd(readableInstant69);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test12726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12726");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        java.lang.String str15 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 53);
        java.lang.String str23 = dateTimeZone19.getName((long) 9);
        int int25 = dateTimeZone19.getOffsetFromLocal((long) 365);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withPivotYear(2000);
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withLocale(locale29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str15, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-00:00:00.001" + "'", str21, "-00:00:00.001");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-00:00:00.001" + "'", str23, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test12727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12727");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay(50);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        int int25 = mutablePeriod21.getSeconds();
        int int26 = mutablePeriod21.getMinutes();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology30);
        mutablePeriod31.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod31.add(0L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        mutablePeriod31.add(0L, chronology45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (-1), chronology45);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 10, chronology57);
        org.joda.time.MutableDateTime mutableDateTime60 = dateMidnight48.toMutableDateTime(chronology57);
        mutableDateTime60.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime60.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime60.add(durationFieldType64, (int) ' ');
        java.lang.String str67 = durationFieldType64.getName();
        int int68 = mutablePeriod21.get(durationFieldType64);
        org.joda.time.LocalTime localTime70 = localTime17.withFieldAdded(durationFieldType64, 297);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "seconds" + "'", str67, "seconds");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localTime70);
    }

    @Test
    public void test12728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12728");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusDays((int) (short) -1);
        int int5 = dateMidnight4.getYearOfEra();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        int int7 = dateMidnight4.getSecondOfMinute();
        java.util.Locale locale12 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.lang.String str13 = dateMidnight4.toString("07:22:45.446", locale12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight4.era();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate.Property property22 = localDate20.weekyear();
        org.joda.time.LocalDate localDate24 = property22.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property25 = localDate24.weekyear();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter18.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(4406400000L, chronology26);
        boolean boolean30 = dateMidnight4.equals((java.lang.Object) chronology26);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) 11);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusYears(17);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology37);
        mutablePeriod38.setPeriod((long) (short) 10, (long) (short) -1);
        int int42 = mutablePeriod38.getSeconds();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology46);
        mutablePeriod47.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod47.add(0L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        int int60 = dateMidnight59.getYearOfEra();
        org.joda.time.Chronology chronology61 = dateMidnight59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology61);
        mutablePeriod47.add(0L, chronology61);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (-1), chronology61);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusDays((int) (short) -1);
        int int72 = dateMidnight71.getYearOfEra();
        org.joda.time.Chronology chronology73 = dateMidnight71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (short) 10, chronology73);
        org.joda.time.MutableDateTime mutableDateTime76 = dateMidnight64.toMutableDateTime(chronology73);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime76.add((org.joda.time.ReadableDuration) duration79);
        mutablePeriod38.add((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Period period82 = duration79.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay32.plus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Period period85 = period82.withFields(readablePeriod84);
        org.joda.time.MutablePeriod mutablePeriod86 = period85.toMutablePeriod();
        long long89 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod86, (long) 259, 705);
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight(1645578058362L, chronology26);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(locale12.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "07:22:45.446" + "'", str13, "07:22:45.446");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(mutablePeriod86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1320724L + "'", long89 == 1320724L);
    }

    @Test
    public void test12729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12729");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology19);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration29 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, 12);
        org.joda.time.Duration duration30 = duration27.toDuration();
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration27, 6);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) 24);
        long long36 = dateMidnight35.getMillis();
        boolean boolean38 = dateMidnight35.isAfter(0L);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withMillis(4150911252232096L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay((long) 10, chronology42);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = timeOfDay43.getFields();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay((long) 10, chronology46);
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = timeOfDay47.getFields();
        org.joda.time.Period period49 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay43, (org.joda.time.ReadablePartial) timeOfDay47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((long) 10, chronology51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay52.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay52.plusSeconds((int) '4');
        int int56 = timeOfDay43.compareTo((org.joda.time.ReadablePartial) timeOfDay52);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay43.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime59 = timeOfDay43.toLocalTime();
        org.joda.time.LocalTime localTime61 = localTime59.withMillisOfDay(840);
        org.joda.time.DateTime dateTime62 = localTime59.toDateTimeToday();
        org.joda.time.DateTime dateTime64 = dateTime62.plusMonths(999);
        org.joda.time.DateTime dateTime66 = dateTime62.withEra(1);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTime();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusDays((int) (short) -1);
        int int74 = dateMidnight73.getYearOfEra();
        org.joda.time.Chronology chronology75 = dateMidnight73.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.hourOfDay();
        org.joda.time.DurationField durationField77 = chronology75.seconds();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 22, periodType69, chronology75);
        org.joda.time.Days days79 = period78.toStandardDays();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Duration duration81 = period78.toDurationTo(readableInstant80);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableDuration) duration81, periodType82);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateMidnight35, periodType82);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(days79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(periodType82);
    }

    @Test
    public void test12730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12730");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) '#');
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusMinutes((-292278));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMonths(122);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12731");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(7);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(3600035L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekOfWeekyear(26662068);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26662068 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test12732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12732");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        mutableDateTime33.setWeekOfWeekyear(6);
        mutableDateTime33.addWeeks(24);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime33.minuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 10, chronology50);
        org.joda.time.DateTime dateTime54 = dateTime52.minusHours(7);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property57 = dateTime56.weekyear();
        org.joda.time.DateTime dateTime59 = dateTime56.withMillisOfSecond(339);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.parse("-0001-12-31T09:00:00.000Z");
        int int63 = dateTime62.getCenturyOfEra();
        org.joda.time.Period period64 = duration60.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period66 = period64.plusMonths((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology70);
        mutablePeriod71.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod71.add(0L);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(chronology80);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight81.minusDays((int) (short) -1);
        int int84 = dateMidnight83.getYearOfEra();
        org.joda.time.Chronology chronology85 = dateMidnight83.getChronology();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology85);
        mutablePeriod71.add(0L, chronology85);
        boolean boolean88 = dateTimeFieldType67.isSupported(chronology85);
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        long long92 = dateTimeZone90.nextTransition((long) 22);
        org.joda.time.Chronology chronology93 = chronology85.withZone(dateTimeZone90);
        org.joda.time.DateTimeField dateTimeField94 = chronology93.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval95 = new org.joda.time.Interval((java.lang.Object) ' ', chronology93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2022 + "'", int84 == 2022);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 22L + "'", long92 == 22L);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test12733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12733");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.Period period3 = new org.joda.time.Period(1645574400000L, periodType2);
        org.joda.time.Period period4 = period3.normalizedStandard();
        int int5 = period4.getSeconds();
        org.joda.time.Period period7 = period4.withMinutes((int) (byte) -1);
        org.joda.time.Period period9 = period7.withSeconds(3);
        org.joda.time.DurationFieldType durationFieldType11 = period7.getFieldType(5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfDay();
        org.joda.time.DateTime dateTime33 = dateTime22.withChronology(chronology30);
        boolean boolean34 = durationFieldType11.isSupported(chronology30);
        org.joda.time.Period period35 = new org.joda.time.Period(obj0, chronology30);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology30);
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test12734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12734");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        int int13 = dateTimeZone11.getStandardOffset(22L);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13, dateTimeZone11);
        int int15 = localDate14.getYearOfEra();
        java.util.Date date16 = localDate14.toDate();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test12735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12735");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusHours(11);
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMillis(0);
        int[] intArray35 = new int[] {};
        int int36 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34, intArray35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = localDateTime34.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.millisOfDay();
        int int40 = localDateTime34.getHourOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        int int48 = dateMidnight47.getYearOfEra();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 10, chronology49);
        org.joda.time.DateTime dateTime53 = dateTime51.minusHours(7);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property57 = dateTime53.property(dateTimeFieldType56);
        java.lang.String str58 = dateTimeFieldType56.getName();
        boolean boolean59 = localDateTime34.isSupported(dateTimeFieldType56);
        boolean boolean60 = localDateTime13.isSupported(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime13.plusMillis(52);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime65 = property63.addToCopy(19);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks(26616836);
        int int68 = localDateTime67.getWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 24 + "'", int36 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hourOfHalfday" + "'", str58, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-508080) + "'", int68 == (-508080));
    }

    @Test
    public void test12736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12736");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter7.getZone();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter7.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDefaultYear(1182);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter16.withDefaultYear((-2));
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter30.getParser();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(dateTimeParser31);
    }

    @Test
    public void test12737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12737");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDate5.toString(dateTimeFormatter8);
        int int10 = property2.compareTo((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.Interval interval11 = localDate5.toInterval();
        org.joda.time.LocalDate.Property property12 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(37);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDate15.getValue(554);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 554");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test12738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12738");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.dayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology10);
        mutablePeriod11.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod11.add(0L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (short) -1);
        int int24 = dateMidnight23.getYearOfEra();
        org.joda.time.Chronology chronology25 = dateMidnight23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology25);
        mutablePeriod11.add(0L, chronology25);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (-1), chronology25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 10, chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight28.toMutableDateTime(chronology37);
        mutableDateTime40.setYear(2022);
        mutableDateTime40.setYear((-1));
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.dayOfYear();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        long long52 = dateMidnight49.getMillis();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.days();
        org.joda.time.Period period54 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight49, periodType53);
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight49.toMutableDateTimeISO();
        int int56 = mutableDateTime55.getDayOfYear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(chronology59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusDays((int) (short) -1);
        int int63 = dateMidnight62.getYearOfEra();
        org.joda.time.Chronology chronology64 = dateMidnight62.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology64);
        mutableDateTime55.setChronology(chronology64);
        mutableDateTime40.setTime((org.joda.time.ReadableInstant) mutableDateTime55);
        mutableDateTime40.addYears((int) (byte) -1);
        int int70 = property6.compareTo((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.YearMonthDay yearMonthDay72 = property6.addWrapFieldToCopy(12);
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        int int74 = property6.getMaximumShortTextLength(locale73);
        java.lang.String str75 = locale73.getISO3Country();
        boolean boolean76 = locale73.hasExtensions();
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale73);
        java.util.Locale.Builder builder78 = builder0.setLocale(locale73);
        java.util.Locale.Builder builder79 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder81 = builder0.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645488000001L + "'", long52 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 53 + "'", int56 == 53);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1645515060687,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=31,SECOND=0,MILLISECOND=687,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test12739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12739");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        long long7 = chronology3.add((long) 6, (long) 16, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekyear();
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(1645574400000L, chronology3);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMinutes(0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 22L + "'", long7 == 22L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test12740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12740");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((long) 10, chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        int int11 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay9);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay9.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        int int14 = property12.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        org.joda.time.DurationField durationField16 = dateTimeField15.getDurationField();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test12741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12741");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.monthOfYear();
        java.lang.String str7 = dateTimeField5.getAsShortText(1645514664059L);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e8c\u6708" + "'", str7, "\u4e8c\u6708");
    }

    @Test
    public void test12742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12742");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("3 Nov 1899 19:42:46 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"3 Nov 1899 19:42:46 GMT\" is malformed at \" Nov 1899 19:42:46 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12743");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.withSecondOfMinute(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay2.property(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = property7.setCopy("0");
        org.joda.time.TimeOfDay timeOfDay10 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test12744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfMonth(14);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (short) -1);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        long long20 = dateMidnight17.getMillis();
        org.joda.time.DateMidnight.Property property21 = dateMidnight17.weekyear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        long long34 = dateMidnight31.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateMidnight31, periodType38);
        org.joda.time.PeriodType periodType40 = periodType38.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateMidnight17, periodType40);
        long long42 = duration11.getStandardSeconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645574400001L + "'", long20 == 1645574400001L);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645574400001L + "'", long34 == 1645574400001L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-86400L) + "'", long42 == (-86400L));
    }

    @Test
    public void test12745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(840);
        org.joda.time.DateTime dateTime21 = localTime18.toDateTimeToday();
        int int22 = localTime18.getHourOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime33.minusHours(7);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.withEra((int) (short) 0);
        org.joda.time.DateTime.Property property40 = dateTime37.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime42 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundFloorCopy();
        org.joda.time.DateTime dateTime45 = property43.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test12746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12746");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField(chronology31);
        int int36 = dateTimeField35.getMaximumValue();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        int int38 = dateTimeField35.getMaximumTextLength(locale37);
        long long40 = dateTimeField35.roundHalfEven(1597010160000L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime53 = dateTime51.minusSeconds(4);
        org.joda.time.LocalTime localTime54 = dateTime53.toLocalTime();
        org.joda.time.LocalTime.Property property55 = localTime54.millisOfSecond();
        org.joda.time.LocalTime localTime56 = property55.roundCeilingCopy();
        org.joda.time.LocalTime.Property property57 = localTime56.millisOfDay();
        org.joda.time.LocalTime localTime59 = localTime56.minusMinutes(26880146);
        int int60 = dateTimeField35.getMinimumValue((org.joda.time.ReadablePartial) localTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1609459200001L + "'", long40 == 1609459200001L);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test12747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12747");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        long long10 = dateMidnight7.getMillis();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        org.joda.time.Period period12 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight7, periodType11);
        java.util.Date date13 = dateMidnight7.toDate();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours(10L);
        long long16 = duration15.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis((long) 24);
        long long20 = dateMidnight19.getMillis();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight7.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        long long29 = dateMidnight26.getMillis();
        org.joda.time.DateMidnight.Property property30 = dateMidnight26.weekyear();
        org.joda.time.DateMidnight dateMidnight31 = property30.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight32 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        int int34 = dateMidnight22.get(dateTimeFieldType33);
        int int35 = localDate1.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property37 = localDate1.centuryOfEra();
        int int38 = localDate1.size();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645488000001L + "'", long10 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 36000L + "'", long16 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645574400001L + "'", long29 == 1645574400001L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
    }

    @Test
    public void test12748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12748");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDate5.toString(dateTimeFormatter8);
        int int10 = property2.compareTo((org.joda.time.ReadablePartial) localDate5);
        int int11 = property2.getMaximumValue();
        java.lang.String str12 = property2.getAsText();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 28 + "'", int11 == 28);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "22" + "'", str12, "22");
    }

    @Test
    public void test12749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12749");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        mutableDateTime9.setMillis(457104L);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        boolean boolean13 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) mutableDateTime12);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setMinuteOfHour(664);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 664 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test12750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12750");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter7.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 164);
        org.joda.time.Period period13 = org.joda.time.Period.millis(0);
        org.joda.time.Minutes minutes14 = period13.toStandardMinutes();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.days();
        org.joda.time.Period period17 = new org.joda.time.Period(1645574400000L, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withSecondsRemoved();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.PeriodType periodType20 = period13.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate.Property property27 = localDate25.weekyear();
        org.joda.time.LocalDate localDate29 = property27.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType23.getField(chronology31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(36000L, chronology31);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) (-4), chronology31);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1988116272000L), periodType20, chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter7.withChronology(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = dateTimeFormatter36.parseLocalDateTime("Thu May 04 00:00:00 UTC 325426");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test12751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12751");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (short) 100, chronology26);
        org.joda.time.DurationField durationField30 = durationFieldType17.getField(chronology26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType17.getField(chronology36);
        org.joda.time.DateTime dateTime40 = dateTime14.withFieldAdded(durationFieldType17, (int) (short) 0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration46 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, 12);
        org.joda.time.DateTime dateTime47 = dateTime40.plus((org.joda.time.ReadableDuration) duration42);
        int int48 = dateTime40.getDayOfWeek();
        org.joda.time.DateTime.Property property49 = dateTime40.year();
        org.joda.time.DateTime dateTime51 = dateTime40.minusWeeks(374);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime51.withWeekOfWeekyear((-26574655));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -26574655 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test12752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12752");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.withSecondOfMinute(53);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMinutes((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours(7);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property25 = dateTime22.centuryOfEra();
        int int26 = dateTime22.getMillisOfSecond();
        org.joda.time.DateTime dateTime28 = dateTime22.plus((long) 6);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology36);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.millisOfDay();
        org.joda.time.DateTime dateTime50 = dateTime39.withChronology(chronology47);
        org.joda.time.DateTime dateTime51 = dateTime28.toDateTime(chronology47);
        org.joda.time.DurationField durationField52 = chronology47.years();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(0L, chronology47);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType8.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField55 = chronology47.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay7.withChronologyRetainFields(chronology47);
        org.joda.time.TimeOfDay.Property property57 = timeOfDay56.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay58 = property57.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(timeOfDay58);
    }

    @Test
    public void test12753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12753");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        int int4 = property3.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay6 = property3.addWrapFieldToCopy(1020);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.getYearMonthDay();
        boolean boolean9 = property3.equals((java.lang.Object) 863999);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        java.lang.String str21 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.hourOfHalfday();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        int int31 = mutablePeriod26.getValue(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        org.joda.time.Duration duration36 = mutablePeriod26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.halfdayOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight33, chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.year();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str52 = localDate51.toString();
        org.joda.time.LocalDate.Property property53 = localDate51.weekyear();
        java.lang.String str54 = property53.getAsString();
        org.joda.time.LocalDate localDate55 = property53.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        boolean boolean58 = dateTimeZone56.isStandardOffset((long) '#');
        java.lang.String str59 = dateTimeZone56.getID();
        org.joda.time.DateTime dateTime60 = localDate55.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider61);
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str66 = nameProvider61.getName(locale63, "2022-02-22T00:00:00.000Z/2022-02-22T00:00:00.000Z", "centuryOfEra");
        java.lang.String str67 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) localDate55, locale63);
        int int68 = dateTimeField22.getMaximumShortTextLength(locale63);
        java.lang.String str69 = locale63.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay70 = property3.setCopy("weeks", locale63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weeks\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str21, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01" + "'", str52, "1970-01-01");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970" + "'", str54, "1970");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1969" + "'", str67, "1969");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str69, "\u7fa9\u5927\u5229\u6587");
    }

    @Test
    public void test12754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12754");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        long long13 = dateMidnight10.getMillis();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableInstant) dateMidnight10, periodType17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.String str20 = dateTimeFieldType19.getName();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology29.getZone();
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 2022, chronology29, locale33, (java.lang.Integer) 9, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField37 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType19.getField(chronology29);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 26699790, periodType17, chronology29);
        org.joda.time.DurationField durationField40 = chronology29.seconds();
        long long41 = durationField40.getUnitMillis();
        boolean boolean42 = durationField40.isPrecise();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645574400001L + "'", long13 == 1645574400001L);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekOfWeekyear" + "'", str20, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1000L + "'", long41 == 1000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test12755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12755");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology2);
        org.joda.time.format.PeriodFormatter periodFormatter4 = null;
        java.lang.String str5 = mutablePeriod3.toString(periodFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.weekyear();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight16 = property13.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds(4);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTime dateTime34 = dateTime29.minusSeconds((int) (short) 0);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = dateTime34.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime34.withWeekOfWeekyear(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.010S" + "'", str5, "PT0.010S");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645574400001L + "'", long12 == 1645574400001L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test12756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12756");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.halfdayOfDay();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.weekyearOfCentury();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        java.lang.String str20 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology24);
        mutablePeriod25.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod25.add(0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays((int) (short) -1);
        int int38 = dateMidnight37.getYearOfEra();
        org.joda.time.Chronology chronology39 = dateMidnight37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology39);
        mutablePeriod25.add(0L, chronology39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (-1), chronology39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 10, chronology51);
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight42.toMutableDateTime(chronology51);
        mutableDateTime54.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.millisOfDay();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.era();
        boolean boolean59 = dateTimeZone18.equals((java.lang.Object) mutableDateTime54);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(dateTimeZone18);
        java.util.TimeZone timeZone61 = dateTimeZone18.toTimeZone();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone61, locale64);
        java.lang.String str66 = locale16.getDisplayVariant(locale64);
        java.lang.String str67 = locale64.getDisplayLanguage();
        int int68 = dateTimeField15.getMaximumShortTextLength(locale64);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-00:00:00.001" + "'", str20, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645515061007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=31,SECOND=1,MILLISECOND=6,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u97d3\u6587" + "'", str67, "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test12757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12757");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 10, chronology9);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(7);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime13, periodType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (short) 100, chronology28);
        org.joda.time.DurationField durationField32 = durationFieldType19.getField(chronology28);
        long long34 = durationField32.getMillis((long) 32770);
        org.joda.time.DurationFieldType durationFieldType35 = durationField32.getType();
        int int36 = mutablePeriod18.get(durationFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32770000L + "'", long34 == 32770000L);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test12758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12758");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.getID();
        long long6 = dateTimeZone1.adjustOffset(62135571960010L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 62135571960010L + "'", long6 == 62135571960010L);
    }

    @Test
    public void test12759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12759");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = interval11.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 10, chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight39.toMutableDateTime(chronology48);
        org.joda.time.DurationField durationField52 = chronology48.months();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(36000L, periodType17, chronology48);
        org.joda.time.PeriodType periodType55 = periodType17.withMinutesRemoved();
        org.joda.time.Period period56 = duration12.toPeriod(periodType17);
        org.joda.time.Weeks weeks57 = period56.toStandardWeeks();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(weeks57);
    }

    @Test
    public void test12760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12760");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        int int17 = mutablePeriod13.getSeconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 10, chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight39.toMutableDateTime(chronology48);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration54);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) '#');
        long long59 = duration58.getMillis();
        boolean boolean60 = duration54.isEqual((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType62 = periodType61.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration54, periodType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology68);
        mutablePeriod69.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod69.add(0L);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(chronology78);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.minusDays((int) (short) -1);
        int int82 = dateMidnight81.getYearOfEra();
        org.joda.time.Chronology chronology83 = dateMidnight81.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology83);
        mutablePeriod69.add(0L, chronology83);
        boolean boolean86 = dateTimeFieldType65.isSupported(chronology83);
        org.joda.time.DateTimeField dateTimeField87 = chronology83.millisOfSecond();
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime((long) (short) 1, chronology83);
        org.joda.time.Period period89 = duration54.toPeriod(chronology83);
        org.joda.time.DurationField durationField90 = chronology83.weeks();
        org.joda.time.DurationField durationField91 = chronology83.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = durationField91.getValueAsLong(32054400000L, 1645514829552L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 3024000000L + "'", long59 == 3024000000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test12761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12761");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.DurationField durationField20 = property18.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay21 = property18.withMaximumValue();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay21.minusSeconds(61);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test12762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12762");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear(6);
        java.lang.String str15 = dateTime12.toString();
        org.joda.time.DateTime dateTime17 = dateTime12.plusMonths((-1));
        org.joda.time.DateTime.Property property18 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime20 = property18.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(61200010);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology32.getZone();
        int int37 = dateTimeZone35.getOffset((long) 'u');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 4, (long) 572, dateTimeZone35);
        long long40 = dateTimeZone22.getMillisKeepLocal(dateTimeZone35, (long) 331);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((java.lang.Object) property18, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:30:57.121-00:00:00.001" + "'", str15, "2022-02-22T07:30:57.121-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 61200342L + "'", long40 == 61200342L);
    }

    @Test
    public void test12763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12763");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime33.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime33.centuryOfEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.clockhourOfDay();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology71);
        org.joda.time.DateTime dateTime76 = dateTime74.minusSeconds(4);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.TimeOfDay timeOfDay79 = new org.joda.time.TimeOfDay((long) 10, chronology78);
        org.joda.time.DateTimeField[] dateTimeFieldArray80 = timeOfDay79.getFields();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.TimeOfDay timeOfDay83 = new org.joda.time.TimeOfDay((long) 10, chronology82);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = timeOfDay83.getFields();
        org.joda.time.Period period85 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay79, (org.joda.time.ReadablePartial) timeOfDay83);
        org.joda.time.Period period87 = period85.minusMinutes(0);
        int int88 = period85.getMonths();
        org.joda.time.DateTime dateTime89 = dateTime74.plus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.Period period91 = org.joda.time.Period.years((int) 'a');
        org.joda.time.DateTime dateTime92 = dateTime89.plus((org.joda.time.ReadablePeriod) period91);
        boolean boolean93 = mutableDateTime33.equals((java.lang.Object) period91);
        mutableDateTime33.addWeeks(2022);
        mutableDateTime33.setMillis((long) 10);
        mutableDateTime33.addMonths(158);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldArray80);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12764");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.clockhourOfHalfday();
        long long27 = dateTimeField24.getDifferenceAsLong(840L, 2332800001L);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str31 = locale29.getDisplayCountry();
        boolean boolean32 = locale29.hasExtensions();
        java.lang.String str33 = dateTimeField24.getAsText(208755L, locale29);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-647L) + "'", long27 == (-647L));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh-CN" + "'", str30, "zh-CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u570b" + "'", str31, "\u4e2d\u570b");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "12" + "'", str33, "12");
    }

    @Test
    public void test12765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12765");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate12.minusWeeks(9);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.Period period23 = period20.plusMinutes((int) (short) 100);
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.Period period25 = period24.toPeriod();
        org.joda.time.Period period27 = period25.minusMinutes(17);
        org.joda.time.LocalDate localDate28 = localDate16.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        long long35 = dateMidnight32.getMillis();
        org.joda.time.DateMidnight.Property property36 = dateMidnight32.weekyear();
        long long37 = property36.remainder();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        int int40 = dateMidnight39.getSecondOfMinute();
        int int41 = property36.compareTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight42 = property36.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight42.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = yearMonthDay43.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate16.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime49 = dateTime46.minusSeconds(26574655);
        org.joda.time.DateTime dateTime51 = dateTime46.withSecondOfMinute(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime51.withDayOfWeek(572);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 572 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645574400001L + "'", long35 == 1645574400001L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4406400000L + "'", long37 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test12766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12766");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        int int5 = dateMidnight3.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        int int7 = yearMonthDay6.getYear();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusYears((-1));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours(7);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) (byte) 0);
        int int25 = dateTime24.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology29);
        mutablePeriod30.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod30.add(0L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        mutablePeriod30.add(0L, chronology44);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (-1), chronology44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 10, chronology56);
        org.joda.time.MutableDateTime mutableDateTime59 = dateMidnight47.toMutableDateTime(chronology56);
        mutableDateTime59.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime59.toMutableDateTime(dateTimeZone63);
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = yearMonthDay65.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = yearMonthDay65.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime59, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType73 = periodType72.withWeeksRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 1970, (long) 3, periodType72);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration69, periodType72);
        org.joda.time.Period period77 = period75.minusMillis(0);
        int int78 = period75.getYears();
        org.joda.time.Period period79 = period75.negated();
        org.joda.time.Period period81 = period79.plusSeconds(0);
        org.joda.time.Period period82 = period79.normalizedStandard();
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 241);
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration88 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration90 = duration86.withDurationAdded((org.joda.time.ReadableDuration) duration88, 12);
        org.joda.time.Period period91 = new org.joda.time.Period();
        boolean boolean92 = duration86.equals((java.lang.Object) period91);
        org.joda.time.Days days93 = period91.toStandardDays();
        org.joda.time.Period period95 = period91.withWeeks(546);
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay6.minus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.LocalDate localDate97 = yearMonthDay96.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(days93);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(yearMonthDay96);
        org.junit.Assert.assertNotNull(localDate97);
    }

    @Test
    public void test12767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12767");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDate5.toString(dateTimeFormatter8);
        int int10 = property2.compareTo((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration11, readableInstant12);
        org.joda.time.PeriodType periodType14 = period13.getPeriodType();
        org.joda.time.Period period16 = period13.plusMinutes((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        boolean boolean18 = period16.isSupported(durationFieldType17);
        org.joda.time.LocalDate localDate20 = localDate5.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) (byte) 1);
        int int21 = localDate5.getEra();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test12768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12768");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        int int25 = dateMidnight24.getCenturyOfEra();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours(10L);
        long long28 = duration27.getStandardSeconds();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration32 = duration27.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        long long39 = dateMidnight36.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond(10);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours(10L);
        long long48 = duration47.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (short) 10);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableDuration) duration47, periodType51);
        int int53 = duration27.compareTo((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight24, (org.joda.time.ReadableDuration) duration47, periodType54);
        org.joda.time.PeriodType periodType56 = periodType54.withDaysRemoved();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusDays((int) (short) -1);
        int int64 = dateMidnight63.getYearOfEra();
        org.joda.time.Chronology chronology65 = dateMidnight63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 10, chronology65);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField69 = chronology65.clockhourOfHalfday();
        org.joda.time.DurationField durationField70 = chronology65.millis();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) '#', periodType72, chronology73);
        org.joda.time.Period period76 = period74.minusDays((int) (short) 100);
        int[] intArray79 = chronology65.get((org.joda.time.ReadablePeriod) period76, (long) 1020, (long) 34);
        org.joda.time.Period period80 = new org.joda.time.Period(0L, 59752863L, periodType56, chronology65);
        org.joda.time.Period period81 = new org.joda.time.Period((long) (-86399), periodType56);
        org.joda.time.Period period83 = period81.plusYears(27147744);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 36000L + "'", long28 == 36000L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645574400001L + "'", long39 == 1645574400001L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 36000L + "'", long48 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 0, 0, 0, 0, -986]");
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test12769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12769");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 11);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusYears(17);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 10, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(7);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property20 = dateTime16.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        int int29 = dateMidnight27.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay30 = dateMidnight27.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay32 = property31.getYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property31.getFieldType();
        boolean boolean34 = dateTime23.isSupported(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay1.withField(dateTimeFieldType33, 54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test12770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12770");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getStandardSeconds();
        java.lang.String str3 = duration1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        long long10 = dateMidnight7.getMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration16 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, 12);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration22 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, 12);
        boolean boolean23 = duration12.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology27);
        mutablePeriod28.setPeriod((long) (short) 10, (long) (short) -1);
        int int32 = mutablePeriod28.getSeconds();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology36);
        mutablePeriod37.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod37.add(0L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        mutablePeriod37.add(0L, chronology51);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (-1), chronology51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        int int62 = dateMidnight61.getYearOfEra();
        org.joda.time.Chronology chronology63 = dateMidnight61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 10, chronology63);
        org.joda.time.MutableDateTime mutableDateTime66 = dateMidnight54.toMutableDateTime(chronology63);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration69);
        mutablePeriod28.add((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) '#');
        long long74 = duration73.getMillis();
        boolean boolean75 = duration69.isEqual((org.joda.time.ReadableDuration) duration73);
        boolean boolean76 = duration20.isEqual((org.joda.time.ReadableDuration) duration69);
        boolean boolean77 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Minutes minutes78 = duration20.toStandardMinutes();
        org.joda.time.Period period79 = duration20.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000L + "'", long2 == 36000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT36000S" + "'", str3, "PT36000S");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645574400001L + "'", long10 == 1645574400001L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3024000000L + "'", long74 == 3024000000L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertNotNull(period79);
    }

    @Test
    public void test12771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12771");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.yearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = property45.withMaximumValue();
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMinimumValue();
        boolean boolean49 = property38.equals((java.lang.Object) property47);
        org.joda.time.MutableDateTime mutableDateTime50 = property38.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime51 = property38.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test12772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12772");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        int int5 = calendar1.getActualMinimum(10);
        java.util.Date date6 = calendar1.getTime();
        java.lang.String str7 = calendar1.getCalendarType();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        int int9 = localDateTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645515061366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=31,SECOND=1,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:31:01 GMT 2022");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 366 + "'", int9 == 366);
    }

    @Test
    public void test12773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(840);
        org.joda.time.DateTime dateTime21 = localTime18.toDateTimeToday();
        int int22 = localTime18.getHourOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime33.minusHours(7);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.withEra((int) (short) 0);
        org.joda.time.DateTime.Property property40 = dateTime37.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime42 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime41.minusWeeks(2100);
        int int45 = dateTime44.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test12774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12774");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfDay();
        org.joda.time.DurationField durationField7 = chronology5.seconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours(10L);
        long long14 = duration13.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = mutablePeriod15.toDurationFrom(readableInstant16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime20 = yearMonthDay19.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        mutablePeriod15.add((long) 'a', chronology22);
        long long26 = chronology5.add((org.joda.time.ReadablePeriod) mutablePeriod15, (long) 988, 840);
        mutablePeriod15.addWeeks((int) (short) -1);
        mutablePeriod15.addHours(9);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone34);
        java.lang.String str36 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology40);
        mutablePeriod41.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod41.add(0L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        mutablePeriod41.add(0L, chronology55);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (-1), chronology55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusDays((int) (short) -1);
        int int66 = dateMidnight65.getYearOfEra();
        org.joda.time.Chronology chronology67 = dateMidnight65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 10, chronology67);
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight58.toMutableDateTime(chronology67);
        mutableDateTime70.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime70.millisOfDay();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime70.era();
        boolean boolean75 = dateTimeZone34.equals((java.lang.Object) mutableDateTime70);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(dateTimeZone34);
        java.util.TimeZone timeZone77 = dateTimeZone34.toTimeZone();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) (short) 10, dateTimeZone34);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) 547, dateTimeZone34);
        org.joda.time.Instant instant81 = dateTime80.toInstant();
        org.joda.time.DateTime dateTime83 = dateTime80.minusMonths(2);
        int int84 = dateTime80.getWeekOfWeekyear();
        org.joda.time.Duration duration85 = mutablePeriod15.toDurationTo((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 36000L + "'", long14 == 36000L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 30240082468L + "'", long26 == 30240082468L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-00:00:00.001" + "'", str36, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test12775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12775");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology21);
        org.joda.time.LocalDate localDate27 = localDate25.plusMonths(31);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(dateTimeZone29);
        java.lang.String str31 = dateTimeZone29.getID();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology35);
        mutablePeriod36.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod36.add(0L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        mutablePeriod36.add(0L, chronology50);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (-1), chronology50);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusDays((int) (short) -1);
        int int61 = dateMidnight60.getYearOfEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 10, chronology62);
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight53.toMutableDateTime(chronology62);
        mutableDateTime65.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime65.millisOfDay();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime65.era();
        boolean boolean70 = dateTimeZone29.equals((java.lang.Object) mutableDateTime65);
        org.joda.time.DateTime dateTime71 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekyear(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime73.withMillisOfSecond(26800258);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26800258 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-00:00:00.001" + "'", str31, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test12776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12776");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = property14.getLocalTime();
        org.joda.time.Period period19 = org.joda.time.Period.millis(35);
        org.joda.time.LocalTime localTime21 = localTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 151);
        java.lang.Class<?> wildcardClass22 = localTime17.getClass();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test12777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12777");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        mutableDateTime33.setWeekOfWeekyear(6);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        int int41 = dateMidnight40.getSecondOfMinute();
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateMidnight40);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setDayOfMonth(87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 87 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test12778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12778");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (short) 100, chronology26);
        org.joda.time.DurationField durationField30 = durationFieldType17.getField(chronology26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType17.getField(chronology36);
        org.joda.time.DateTime dateTime40 = dateTime14.withFieldAdded(durationFieldType17, (int) (short) 0);
        long long41 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime14.minus((long) 999);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime43.withEra(197022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197022 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-25199990L) + "'", long41 == (-25199990L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test12779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12779");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645574400000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.DateTime dateTime7 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withSecondOfMinute(57);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(5064);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test12780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12780");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.DurationField durationField20 = property18.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay21 = property18.withMaximumValue();
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay24 = property22.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.DateTime dateTime25 = timeOfDay24.toDateTimeToday();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology31);
        mutablePeriod32.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod32.add(0L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        mutablePeriod32.add(0L, chronology46);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 0, (long) 6, chronology46);
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromMillisOfDay((long) 100, chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.year();
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay24.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay52.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
    }

    @Test
    public void test12781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12781");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.millisOfDay();
        int int19 = localDateTime13.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) 100);
        mutablePeriod21.setMillis(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusMillis((int) (short) 100);
        int int27 = localDateTime13.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 571 + "'", int27 == 571);
    }

    @Test
    public void test12782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12782");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        int int10 = mutablePeriod5.getValue(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        org.joda.time.Duration duration15 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        org.joda.time.Period period19 = new org.joda.time.Period(1645574400000L, periodType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.PeriodType periodType23 = period22.getPeriodType();
        org.joda.time.Period period24 = period19.normalizedStandard(periodType23);
        org.joda.time.Period period25 = duration15.toPeriodTo(readableInstant16, periodType23);
        java.lang.String str26 = periodType23.toString();
        org.joda.time.PeriodType periodType27 = periodType23.withHoursRemoved();
        java.lang.String str28 = periodType27.getName();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 64, (long) 26707428, periodType27);
        org.joda.time.Seconds seconds30 = period29.toStandardSeconds();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[Standard]" + "'", str26, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "StandardNoHours" + "'", str28, "StandardNoHours");
        org.junit.Assert.assertNotNull(seconds30);
    }

    @Test
    public void test12783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12783");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        int int23 = period22.getSeconds();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours(10L);
        long long26 = duration25.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withMillis((long) 24);
        long long30 = dateMidnight29.getMillis();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateMidnight29);
        boolean boolean32 = period22.equals((java.lang.Object) dateMidnight29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        int int45 = dateTimeZone43.getOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.withZoneRetainFields(dateTimeZone43);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone43.getShortName((long) 840, locale48);
        boolean boolean50 = dateTimeZone43.isFixed();
        java.util.TimeZone timeZone51 = dateTimeZone43.toTimeZone();
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 36000L + "'", long26 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-00:00:00.001" + "'", str49, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test12784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(840);
        org.joda.time.DateTime dateTime21 = localTime18.toDateTimeToday();
        int int22 = localTime18.getHourOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime33.minusHours(7);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.withEra((int) (short) 0);
        org.joda.time.DateTime.Property property40 = dateTime37.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime42 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy(911);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks(283);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime47.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test12785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12785");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType1.getField(chronology20);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((long) 10, chronology26);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((long) 10, chronology30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = timeOfDay31.getFields();
        org.joda.time.Period period33 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay27, (org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((long) 10, chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = timeOfDay36.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay36.plusSeconds((int) '4');
        int int40 = timeOfDay27.compareTo((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay27.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property43 = timeOfDay27.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay45 = property43.addToCopy((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay46 = property43.getTimeOfDay();
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        boolean boolean48 = locale47.hasExtensions();
        int int49 = property43.getMaximumTextLength(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(3600000L, chronology20, locale47);
        dateTimeParserBucket50.setPivotYear((java.lang.Integer) 26);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket50.saveField(dateTimeFieldType53, 2005);
        dateTimeParserBucket50.setOffset((java.lang.Integer) 636);
        long long59 = dateTimeParserBucket50.computeMillis(true);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1104710399364L + "'", long59 == 1104710399364L);
    }

    @Test
    public void test12786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12786");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DateTime dateTime5 = interval1.getStart();
        long long6 = interval1.toDurationMillis();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.Interval interval11 = interval8.gap((org.joda.time.ReadableInterval) interval10);
        boolean boolean13 = interval8.isBefore(100L);
        org.joda.time.Interval interval14 = interval8.toInterval();
        org.joda.time.Duration duration15 = interval8.toDuration();
        org.joda.time.Interval interval17 = interval8.withStartMillis(1645514595578L);
        org.joda.time.Interval interval18 = interval1.overlap((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Interval interval20 = interval8.withStartMillis(1L);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = interval8.withPeriodAfterStart(readablePeriod21);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test12787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12787");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.util.TimeZone timeZone45 = dateTimeZone2.toTimeZone();
        java.util.Calendar.Builder builder46 = builder0.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder50 = builder46.setDate(1020, (int) (short) -1, 0);
        java.util.Calendar.Builder builder55 = builder50.setTimeOfDay(684, 2077, 445, 26675856);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test12788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12788");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        int int23 = period22.getSeconds();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours(10L);
        long long26 = duration25.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withMillis((long) 24);
        long long30 = dateMidnight29.getMillis();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateMidnight29);
        boolean boolean32 = period22.equals((java.lang.Object) dateMidnight29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        int int45 = dateTimeZone43.getOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = dateMidnight29.getZone();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight29.plusWeeks((int) 'x');
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) 590);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 36000L + "'", long26 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test12789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12789");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.add(10);
        org.joda.time.MutableDateTime mutableDateTime39 = property36.getMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test12790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12790");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withMillis((long) 24);
        long long6 = dateMidnight5.getMillis();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        java.util.Locale locale18 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar19 = dateMidnight11.toCalendar(locale18);
        int int20 = dateMidnight11.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withMillis((long) 28);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfEra();
        org.joda.time.Duration duration24 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight.Property property25 = dateMidnight22.era();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000L + "'", long2 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645574400001L + "'", long14 == 1645574400001L);
        org.junit.Assert.assertEquals(locale18.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645574400001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test12791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12791");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.getID();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight3.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.millisOfDay();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.dayOfWeek();
        mutableDateTime14.setWeekyear(2022);
        java.lang.String str20 = mutableDateTime14.toString();
        int int21 = mutableDateTime14.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.secondOfDay();
        java.lang.String str23 = mutableDateTime14.toString();
        mutableDateTime14.addMonths(27018588);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-00:00:00.001" + "'", str13, "-00:00:00.001");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str20, "2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str23, "2022-02-22T00:00:00.000-00:00:00.001");
    }

    @Test
    public void test12792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12792");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime20 = property19.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        int int23 = dateTimeZone21.getOffset((long) (short) 0);
        org.joda.time.DateTime dateTime24 = localTime20.toDateTimeToday(dateTimeZone21);
        boolean boolean26 = dateTimeZone21.isStandardOffset((long) 26665880);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test12793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12793");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(242759L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test12794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12794");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test12795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12795");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusHours(11);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusHours(22);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(151);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfFloorCopy();
        int int28 = localDateTime27.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withWeekOfWeekyear((-18));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -18 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test12796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12796");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight23.toMutableDateTime(chronology32);
        org.joda.time.Period period36 = new org.joda.time.Period((long) 23, chronology32);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) 632, chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime39 = localTime37.withSecondOfMinute(26616836);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26616836 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test12797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12797");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        int int9 = mutablePeriod4.getValue(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        org.joda.time.Duration duration14 = mutablePeriod4.toDurationTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.halfdayOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight11, chronology22);
        org.joda.time.Chronology chronology27 = chronology22.withUTC();
        org.joda.time.DurationField durationField28 = chronology27.millis();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) 19, chronology27);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay29.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay31 = property30.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.plusMonths(36);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test12798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12798");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod3.add(0L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        mutablePeriod3.add(0L, chronology17);
        mutablePeriod3.addMinutes(31);
        int int22 = mutablePeriod3.getWeeks();
        mutablePeriod3.addMonths(86400);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test12799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12799");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        int int10 = mutableDateTime9.getDayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutableDateTime9.setChronology(chronology18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology18);
        mutableDateTime22.addWeekyears(840);
        mutableDateTime22.addSeconds(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight33 = property32.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.withField(dateTimeFieldType34, 5);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime22.property(dateTimeFieldType34);
        mutableDateTime22.addYears(1970);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setTime(86399, 42, 1439, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test12800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12800");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        int int12 = mutablePeriod7.getValue(0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        org.joda.time.Duration duration17 = mutablePeriod7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int19 = yearMonthDay18.getMonthOfYear();
        java.lang.String str20 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.withYear(363);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = yearMonthDay18.getFieldType(76534);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 76534");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22" + "'", str20, "2022-02-22");
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test12801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12801");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.YearMonthDay yearMonthDay67 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay68 = property2.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay70 = property2.setCopy(5);
        org.joda.time.YearMonthDay yearMonthDay72 = property2.addWrapFieldToCopy(14);
        org.joda.time.DateTimeField dateTimeField73 = property2.getField();
        boolean boolean74 = dateTimeField73.isSupported();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645488000001L + "'", long48 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53 + "'", int52 == 53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test12802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12802");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.getID();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology7);
        mutablePeriod8.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod8.add(0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        mutablePeriod8.add(0L, chronology22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (-1), chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 10, chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight25.toMutableDateTime(chronology34);
        mutableDateTime37.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.millisOfDay();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.era();
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) mutableDateTime37);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Calendar calendar44 = mutableDateTime37.toCalendar(locale43);
        mutableDateTime37.add((long) 26662068);
        boolean boolean48 = mutableDateTime37.isBefore(191L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-00:00:00.001" + "'", str3, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-84429999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=32,SECOND=50,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test12803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12803");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645574400000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withWeekyear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minusSeconds(62);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        long long13 = property11.remainder();
        org.joda.time.LocalDateTime localDateTime14 = property11.roundFloorCopy();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4346999974L + "'", long13 == 4346999974L);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test12804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12804");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = timeOfDay11.getFields();
        org.joda.time.Period period13 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay7, (org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean15 = timeOfDay11.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        boolean boolean26 = dateTimeFieldType14.isSupported(chronology23);
        boolean boolean27 = localTime4.isSupported(dateTimeFieldType14);
        org.joda.time.LocalTime localTime29 = localTime4.plusHours(11);
        org.joda.time.LocalTime localTime31 = localTime29.withHourOfDay(10);
        org.joda.time.LocalTime localTime33 = localTime29.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology36);
        mutablePeriod37.setPeriod((long) (short) 10, (long) (short) -1);
        int int42 = mutablePeriod37.getValue(0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        org.joda.time.Duration duration47 = mutablePeriod37.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.LocalTime localTime49 = localTime29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod37, 50);
        java.lang.Object obj50 = null;
        boolean boolean51 = localTime29.equals(obj50);
        org.joda.time.LocalTime localTime53 = localTime29.plusSeconds(2012);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = localTime29.toString("1222-02-22T07:30:59.638");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test12805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12805");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.LocalDate localDate18 = localDate15.plusYears(7);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        int int21 = dateMidnight20.getMillisOfSecond();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#', periodType23, chronology24);
        org.joda.time.Period period27 = period25.withDays((int) ' ');
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadablePeriod) period27);
        java.lang.String str29 = period27.toString();
        org.joda.time.Period period30 = period27.toPeriod();
        org.joda.time.LocalDate localDate32 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 100);
        org.joda.time.Period period34 = period27.plusWeeks(26824798);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P32DT0.035S" + "'", str29, "P32DT0.035S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test12806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean10 = timeOfDay6.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours(7);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears((int) (byte) 10);
        org.joda.time.DateTime.Property property29 = dateTime26.weekyear();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime26.toGregorianCalendar();
        java.util.Date date31 = gregorianCalendar30.getTime();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("Property[dayOfWeek]");
        int int35 = timeZone33.getOffset((long) 61200010);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        gregorianCalendar30.setTimeZone(timeZone33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = timeZone33.getDisplayName(true, 26940260);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26940260");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 00:00:00 GMT 1969");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
    }

    @Test
    public void test12807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12807");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter3.getZone();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withDefaultYear((int) (byte) 10);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronology();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonthDay10.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        int int16 = dateTimeZone14.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay10.toDateMidnight(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter8.withZone(dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.parse("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test12808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12808");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 10, chronology13);
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours(7);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        int int21 = dateTime17.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = dateTime17.plus((long) 6);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.millisOfDay();
        org.joda.time.DateTime dateTime45 = dateTime34.withChronology(chronology42);
        org.joda.time.DateTime dateTime46 = dateTime23.toDateTime(chronology42);
        org.joda.time.DurationField durationField47 = chronology42.years();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter4.withChronology(chronology42);
        java.lang.String str49 = chronology42.toString();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField51 = chronology42.dayOfWeek();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str49, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test12809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12809");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 2022, chronology8, locale12, (java.lang.Integer) 9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.Integer int17 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfDay();
        dateTimeParserBucket15.saveField(dateTimeField24, 4);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval28 = yearMonthDay27.toInterval();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Interval interval31 = interval28.gap((org.joda.time.ReadableInterval) interval30);
        boolean boolean33 = interval28.isBefore(100L);
        java.lang.String str34 = interval28.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 10, chronology43);
        org.joda.time.DateTime dateTime47 = dateTime45.minusHours(7);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property50 = dateTime47.centuryOfEra();
        java.lang.String str51 = property50.getName();
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = property50.getAsText(locale52);
        org.joda.time.DateTime dateTime55 = property50.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime56 = property50.roundCeilingCopy();
        boolean boolean57 = interval28.isAfter((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = dateTimeParserBucket15.restoreState((java.lang.Object) interval28);
        long long59 = dateTimeParserBucket15.computeMillis();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001/2022-02-23T00:00:00.000-00:00:00.001" + "'", str34, "2022-02-22T00:00:00.000-00:00:00.001/2022-02-23T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "centuryOfEra" + "'", str51, "centuryOfEra");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "19" + "'", str54, "19");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 14402023L + "'", long59 == 14402023L);
    }

    @Test
    public void test12810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12810");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean17 = localDate12.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = localDate12.plusMonths((int) (short) 100);
        int int20 = localDate19.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
    }

    @Test
    public void test12811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12811");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        int int16 = localDate12.getYearOfEra();
        org.joda.time.LocalDate.Property property17 = localDate12.weekOfWeekyear();
        org.joda.time.LocalDate localDate18 = property17.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test12812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12812");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(59752863L);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.millisOfSecond();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.PRC;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.weekyear();
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale10);
        java.lang.String str13 = locale10.toLanguageTag();
        java.lang.String str14 = locale4.getDisplayVariant(locale10);
        java.lang.String str15 = locale4.getISO3Language();
        java.lang.String str16 = property2.getAsText(locale4);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-CN" + "'", str13, "zh-CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "863" + "'", str16, "863");
    }

    @Test
    public void test12813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12813");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = localTime15.minusHours(1970);
        org.joda.time.LocalTime localTime19 = localTime15.plusMillis(345);
        org.joda.time.LocalTime localTime21 = localTime15.plusMinutes(84);
        org.joda.time.LocalTime localTime23 = localTime15.withMillisOfDay(816);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DurationField durationField26 = durationFieldType24.getField(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = localTime23.withFieldAdded(durationFieldType24, 2012);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test12814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12814");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        long long8 = dateMidnight5.getMillis();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.days();
        org.joda.time.Period period10 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period10, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean14 = interval1.abuts((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology18);
        mutablePeriod19.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod19.add(0L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        mutablePeriod19.add(0L, chronology33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (-1), chronology33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 10, chronology45);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight36.toMutableDateTime(chronology45);
        mutableDateTime48.setYear(2022);
        mutableDateTime48.setYear((-1));
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.dayOfYear();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        long long60 = dateMidnight57.getMillis();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.days();
        org.joda.time.Period period62 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight57.toMutableDateTimeISO();
        int int64 = mutableDateTime63.getDayOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        int int71 = dateMidnight70.getYearOfEra();
        org.joda.time.Chronology chronology72 = dateMidnight70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology72);
        mutableDateTime63.setChronology(chronology72);
        mutableDateTime48.setTime((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.Interval interval76 = interval13.withStart((org.joda.time.ReadableInstant) mutableDateTime63);
        mutableDateTime63.setHourOfDay(14);
        mutableDateTime63.setHourOfDay(0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime63.setHourOfDay(873);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 873 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645488000001L + "'", long8 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645488000001L + "'", long60 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test12815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12815");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        long long13 = dateMidnight10.getMillis();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableInstant) dateMidnight10, periodType17);
        org.joda.time.PeriodType periodType19 = periodType17.withDaysRemoved();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology22);
        mutablePeriod23.setPeriod((long) (short) 10, (long) (short) -1);
        int int28 = mutablePeriod23.getValue(0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        org.joda.time.Duration duration33 = mutablePeriod23.toDurationTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology43);
        mutablePeriod44.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod44.add(0L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        int int57 = dateMidnight56.getYearOfEra();
        org.joda.time.Chronology chronology58 = dateMidnight56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology58);
        mutablePeriod44.add(0L, chronology58);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (-1), chronology58);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusDays((int) (short) -1);
        int int69 = dateMidnight68.getYearOfEra();
        org.joda.time.Chronology chronology70 = dateMidnight68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 10, chronology70);
        org.joda.time.MutableDateTime mutableDateTime73 = dateMidnight61.toMutableDateTime(chronology70);
        org.joda.time.DurationField durationField74 = chronology70.months();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(36000L, periodType39, chronology70);
        java.lang.String str77 = chronology70.toString();
        mutablePeriod23.setPeriod(187200000L, chronology70);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 32770, periodType19, chronology70);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(chronology70);
        int int81 = localDateTime80.getWeekyear();
        int int82 = localDateTime80.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645574400001L + "'", long13 == 1645574400001L);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str77, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
    }

    @Test
    public void test12816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12816");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime33.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime33.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundHalfCeiling();
        mutableDateTime64.addMinutes(122);
        mutableDateTime64.setMillisOfSecond(99);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test12817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12817");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfSecond(59);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test12818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12818");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.minutes();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay12.dayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology18);
        mutablePeriod19.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod19.add(0L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        mutablePeriod19.add(0L, chronology33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (-1), chronology33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 10, chronology45);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight36.toMutableDateTime(chronology45);
        mutableDateTime48.setYear(2022);
        mutableDateTime48.setYear((-1));
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.dayOfYear();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        long long60 = dateMidnight57.getMillis();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.days();
        org.joda.time.Period period62 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight57.toMutableDateTimeISO();
        int int64 = mutableDateTime63.getDayOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        int int71 = dateMidnight70.getYearOfEra();
        org.joda.time.Chronology chronology72 = dateMidnight70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology72);
        mutableDateTime63.setChronology(chronology72);
        mutableDateTime48.setTime((org.joda.time.ReadableInstant) mutableDateTime63);
        mutableDateTime48.addYears((int) (byte) -1);
        int int78 = property14.compareTo((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.YearMonthDay yearMonthDay79 = property14.withMinimumValue();
        org.joda.time.YearMonthDay.Property property80 = yearMonthDay79.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = yearMonthDay81.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = yearMonthDay81.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
        int int87 = dateTimeZone85.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight88 = yearMonthDay81.toDateMidnight(dateTimeZone85);
        int[] intArray89 = yearMonthDay81.getValues();
        chronology7.validate((org.joda.time.ReadablePartial) yearMonthDay79, intArray89);
        org.joda.time.YearMonthDay.Property property91 = yearMonthDay79.dayOfMonth();
        org.joda.time.Interval interval92 = yearMonthDay79.toInterval();
        org.joda.time.DateTime dateTime93 = yearMonthDay79.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime95 = dateTime93.minusSeconds(35);
        org.joda.time.DateTime dateTime96 = dateTime93.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645488000001L + "'", long60 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test12819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12819");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        java.lang.String str19 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology23);
        mutablePeriod24.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod24.add(0L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        mutablePeriod24.add(0L, chronology38);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (-1), chronology38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 10, chronology50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight41.toMutableDateTime(chronology50);
        mutableDateTime53.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.millisOfDay();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime53.era();
        boolean boolean58 = dateTimeZone17.equals((java.lang.Object) mutableDateTime53);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 0);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType64 = periodType63.withYearsRemoved();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration61, periodType64);
        int int66 = period65.getDays();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-00:00:00.001" + "'", str19, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test12820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12820");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        mutableDateTime34.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.millisOfDay();
        org.joda.time.Chronology chronology38 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 99, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.hourOfHalfday();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str46 = localDate45.toString();
        org.joda.time.LocalDate.Property property47 = localDate45.weekyear();
        java.util.Locale locale49 = java.util.Locale.PRC;
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Set<java.lang.Character> charSet51 = locale49.getExtensionKeys();
        java.lang.String str53 = locale49.getExtension('u');
        java.lang.String str54 = locale49.getVariant();
        java.lang.String str55 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDate45, 44, locale49);
        org.joda.time.LocalDate localDate57 = localDate45.withCenturyOfEra(1970);
        org.joda.time.LocalDate localDate59 = localDate57.minusYears(318);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-CN" + "'", str50, "zh-CN");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "44" + "'", str55, "44");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test12821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12821");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.getID();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight3.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime14.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 10, chronology50);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMonths(10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        int int62 = dateMidnight61.getYearOfEra();
        org.joda.time.Chronology chronology63 = dateMidnight61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 10, chronology63);
        org.joda.time.DateTime dateTime66 = dateTime54.toDateTime(chronology63);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 24, (long) '#', chronology63);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone68);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.days();
        org.joda.time.Period period72 = new org.joda.time.Period(1645574400000L, periodType71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.withPeriodAdded((org.joda.time.ReadablePeriod) period72, (int) (byte) 0);
        int[] intArray76 = chronology63.get((org.joda.time.ReadablePartial) localDateTime74, (long) 3);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology63);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight39.withChronology(chronology63);
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology63, locale79);
        java.util.Locale locale81 = dateTimeParserBucket80.getLocale();
        org.joda.time.Chronology chronology82 = dateTimeParserBucket80.getChronology();
        mutableDateTime14.setChronology(chronology82);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-00:00:00.001" + "'", str13, "-00:00:00.001");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 2]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test12822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12822");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(53);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((-292275054));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(4);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test12823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12823");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = yearMonthDay39.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime42);
        int int44 = mutableDateTime33.getYearOfEra();
        mutableDateTime33.addSeconds(26748753);
        java.lang.String str47 = mutableDateTime33.toString();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1969 + "'", int44 == 1969);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-11-05T14:45:23.000-00:00:00.001" + "'", str47, "1970-11-05T14:45:23.000-00:00:00.001");
    }

    @Test
    public void test12824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12824");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = dateTimeZone1.getName(100L, locale5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone1);
        long long10 = dateTimeZone1.adjustOffset((-38436508799999L), true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-00:00:00.001" + "'", str6, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-38436508799999L) + "'", long10 == (-38436508799999L));
    }

    @Test
    public void test12825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12825");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        mutablePeriod17.addSeconds(32770);
        mutablePeriod17.addDays(2215);
        mutablePeriod17.setMillis(26940260);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645574400001L + "'", long12 == 1645574400001L);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test12826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12826");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundCeiling();
        mutableDateTime39.setSecondOfMinute(22);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundHalfCeiling();
        mutableDateTime43.addMonths(8);
        mutableDateTime43.add(223603252571160000L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 10, chronology56);
        org.joda.time.DateTime dateTime60 = dateTime58.plusSeconds((int) ' ');
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        int int65 = dateMidnight62.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight62.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plusYears((-1));
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight67.withFieldAdded(durationFieldType70, (int) (byte) 1);
        org.joda.time.DateTime dateTime74 = dateTime60.withFieldAdded(durationFieldType70, 122);
        mutableDateTime43.add(durationFieldType70, 988);
        mutableDateTime43.setDayOfWeek(1);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test12827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12827");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        int int14 = dateMidnight10.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight10.plusWeeks(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight10.withEra(197057);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197057 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test12828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12828");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours(10L);
        long long11 = duration10.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (short) 10);
        boolean boolean14 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology17);
        mutablePeriod18.setPeriod((long) (short) 10, (long) (short) -1);
        int int23 = mutablePeriod18.getValue(0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        org.joda.time.Duration duration28 = mutablePeriod18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) 32769, 0);
        org.joda.time.Duration duration33 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration31, 35);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) 100);
        org.joda.time.Duration duration36 = duration35.toDuration();
        int int37 = duration33.compareTo((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = duration36.minus(863999L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.weekyear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withYear(292278993);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight45.minusDays(7);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight45.minusYears(22);
        org.joda.time.Period period53 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000L + "'", long11 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test12829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12829");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        boolean boolean6 = interval1.isBefore(100L);
        java.lang.String str7 = interval1.toString();
        boolean boolean8 = interval1.isBeforeNow();
        long long9 = interval1.getEndMillis();
        org.joda.time.Duration duration10 = interval1.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.centuryOfEra();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((java.lang.Object) interval1, chronology19);
        org.joda.time.Period period25 = org.joda.time.Period.minutes(191);
        org.joda.time.Interval interval26 = interval23.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.Period period28 = interval26.toPeriod(periodType27);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001/2022-02-23T00:00:00.000-00:00:00.001" + "'", str7, "2022-02-22T00:00:00.000-00:00:00.001/2022-02-23T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645574400001L + "'", long9 == 1645574400001L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test12830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12830");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setWeekOfWeekyear((int) (byte) 1);
        mutableDateTime33.setMillisOfDay(31);
        int int38 = mutableDateTime33.getWeekOfWeekyear();
        java.lang.Object obj39 = mutableDateTime33.clone();
        mutableDateTime33.addMinutes(22);
        mutableDateTime33.addYears(880);
        mutableDateTime33.addDays(861);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T00:00:00.031-00:00:00.001");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T00:00:00.031-00:00:00.001");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T00:00:00.031-00:00:00.001");
    }

    @Test
    public void test12831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12831");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DurationField durationField11 = chronology8.weekyears();
        long long12 = durationField11.getUnitMillis();
        long long14 = durationField11.getMillis((long) 15);
        long long16 = durationField11.getMillis(48);
        long long18 = durationField11.getMillis((long) 527);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 31556952000L + "'", long12 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 473354280000L + "'", long14 == 473354280000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1514733696000L + "'", long16 == 1514733696000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 16630513704000L + "'", long18 == 16630513704000L);
    }

    @Test
    public void test12832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12832");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateMidnight11, periodType18);
        org.joda.time.PeriodType periodType20 = periodType18.withDaysRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology23);
        mutablePeriod24.setPeriod((long) (short) 10, (long) (short) -1);
        int int29 = mutablePeriod24.getValue(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        org.joda.time.Duration duration34 = mutablePeriod24.toDurationTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration37, readableInstant38);
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology44);
        mutablePeriod45.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod45.add(0L);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        int int58 = dateMidnight57.getYearOfEra();
        org.joda.time.Chronology chronology59 = dateMidnight57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology59);
        mutablePeriod45.add(0L, chronology59);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (-1), chronology59);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 10, chronology71);
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight62.toMutableDateTime(chronology71);
        org.joda.time.DurationField durationField75 = chronology71.months();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(36000L, periodType40, chronology71);
        java.lang.String str78 = chronology71.toString();
        mutablePeriod24.setPeriod(187200000L, chronology71);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 32770, periodType20, chronology71);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(chronology71);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) 20, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType84 = localDateTime82.getFieldType(285);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 285");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645574400001L + "'", long14 == 1645574400001L);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str78, "ISOChronology[-00:00:00.001]");
    }

    @Test
    public void test12833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12833");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        mutableDateTime33.setWeekOfWeekyear(6);
        mutableDateTime33.addWeeks(24);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime33.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMillis(7);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        int int58 = localDateTime48.get(dateTimeFieldType57);
        int int59 = mutableDateTime42.get(dateTimeFieldType57);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime42.copy();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.minuteOfHour();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str64 = property61.getAsShortText(locale63);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "32" + "'", str64, "32");
    }

    @Test
    public void test12834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12834");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-3));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12835");
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology11);
        mutablePeriod12.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod12.add(0L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        mutablePeriod12.add(0L, chronology26);
        boolean boolean29 = dateTimeFieldType8.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfSecond();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (short) 1, chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(23172110, 128, 5064, 81, 41, (-1223), 10765, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test12836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12836");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundCeiling();
        mutableDateTime39.setSecondOfMinute(22);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.minuteOfDay();
        mutableDateTime39.setMillisOfSecond(363);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test12837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12837");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(840);
        org.joda.time.DateTime dateTime21 = localTime18.toDateTimeToday();
        int int22 = localTime18.getHourOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime33.minusHours(7);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.withEra((int) (short) 0);
        org.joda.time.DateTime.Property property40 = dateTime37.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime42 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime.Property property43 = localTime18.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test12838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12838");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        int int24 = dateMidnight23.getCenturyOfEra();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours(10L);
        long long27 = duration26.getStandardSeconds();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration31 = duration26.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        long long38 = dateMidnight35.getMillis();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfSecond(10);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours(10L);
        long long47 = duration46.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (short) 10);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, (org.joda.time.ReadableDuration) duration46, periodType50);
        int int52 = duration26.compareTo((org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableDuration) duration46, periodType53);
        org.joda.time.PeriodType periodType55 = periodType53.withDaysRemoved();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(chronology59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusDays((int) (short) -1);
        int int63 = dateMidnight62.getYearOfEra();
        org.joda.time.Chronology chronology64 = dateMidnight62.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) 10, chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.clockhourOfHalfday();
        org.joda.time.DurationField durationField69 = chronology64.millis();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) '#', periodType71, chronology72);
        org.joda.time.Period period75 = period73.minusDays((int) (short) 100);
        int[] intArray78 = chronology64.get((org.joda.time.ReadablePeriod) period75, (long) 1020, (long) 34);
        org.joda.time.Period period79 = new org.joda.time.Period(0L, 59752863L, periodType55, chronology64);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 12, (long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period83 = period79.plus((org.joda.time.ReadablePeriod) mutablePeriod82);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36000L + "'", long27 == 36000L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645574400001L + "'", long38 == 1645574400001L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 36000L + "'", long47 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 0, -986]");
    }

    @Test
    public void test12839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        int[] intArray7 = localDateTime5.getValues();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', periodType9, chronology10);
        org.joda.time.Period period13 = period11.withDays((int) ' ');
        org.joda.time.Period period15 = period13.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = period15.minusDays((int) (byte) 10);
        org.joda.time.Period period19 = new org.joda.time.Period();
        org.joda.time.Period period20 = period19.toPeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration26 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, 12);
        org.joda.time.Period period27 = new org.joda.time.Period();
        boolean boolean28 = duration22.equals((java.lang.Object) period27);
        org.joda.time.Days days29 = period27.toStandardDays();
        org.joda.time.Period period30 = period20.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.PeriodType periodType31 = period27.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType33 = periodType31.getFieldType((int) (short) 1);
        boolean boolean34 = period15.isSupported(durationFieldType33);
        int int35 = period15.getHours();
        org.joda.time.Period period37 = period15.plusYears(958);
        org.joda.time.Period period39 = period15.plusMillis(2119);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 2, 15, 27062688]");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test12840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12840");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Japan");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 32770, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        boolean boolean14 = languageRange1.equals((java.lang.Object) chronology10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12841");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 10, chronology9);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(7);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime13.centuryOfEra();
        int int17 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime13.plus((long) 6);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfDay();
        org.joda.time.DateTime dateTime41 = dateTime30.withChronology(chronology38);
        org.joda.time.DateTime dateTime42 = dateTime19.toDateTime(chronology38);
        org.joda.time.DurationField durationField43 = chronology38.years();
        org.joda.time.DurationField durationField44 = chronology38.years();
        org.joda.time.DateTimeField dateTimeField45 = chronology38.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) 33343, chronology38);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test12842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12842");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        int int10 = mutablePeriod5.getValue(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        org.joda.time.Duration duration15 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        org.joda.time.Period period19 = new org.joda.time.Period(1645574400000L, periodType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.PeriodType periodType23 = period22.getPeriodType();
        org.joda.time.Period period24 = period19.normalizedStandard(periodType23);
        org.joda.time.Period period25 = duration15.toPeriodTo(readableInstant16, periodType23);
        java.lang.String str26 = periodType23.toString();
        org.joda.time.PeriodType periodType27 = periodType23.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, periodType23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-22T07:30:45.181Z", periodType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:30:45.181Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[Standard]" + "'", str26, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test12843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12843");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 10, chronology9);
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 60, chronology9);
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(265);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test12844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12844");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        mutableDateTime34.setYear(2022);
        mutableDateTime34.setYear((-1));
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.dayOfYear();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        long long46 = dateMidnight43.getMillis();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.days();
        org.joda.time.Period period48 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight43, periodType47);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight43.toMutableDateTimeISO();
        int int50 = mutableDateTime49.getDayOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        int int57 = dateMidnight56.getYearOfEra();
        org.joda.time.Chronology chronology58 = dateMidnight56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology58);
        mutableDateTime49.setChronology(chronology58);
        mutableDateTime34.setTime((org.joda.time.ReadableInstant) mutableDateTime49);
        mutableDateTime34.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime34.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime65 = property64.roundHalfCeiling();
        mutableDateTime65.addMinutes(122);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime65.yearOfCentury();
        org.joda.time.Interval interval69 = property68.toInterval();
        org.joda.time.MutableDateTime mutableDateTime71 = property68.add(365);
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = yearMonthDay72.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        int int78 = dateTimeZone76.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight79 = yearMonthDay72.toDateMidnight(dateTimeZone76);
        mutableDateTime71.setZone(dateTimeZone76);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) 26669490, dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(dateTimeZone76);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.secondOfDay();
        mutableDateTime82.addDays(61200000);
        mutableDateTime82.addWeeks(46);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645488000001L + "'", long46 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test12845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12845");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.year();
        long long16 = dateTimeField13.addWrapField(30L, 374);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 11802240000030L + "'", long16 == 11802240000030L);
    }

    @Test
    public void test12846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12846");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateMidnight dateMidnight11 = dateTime10.toDateMidnight();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration17 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, 12);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.PeriodType periodType23 = period22.getPeriodType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology27);
        mutablePeriod28.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod28.add(0L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        mutablePeriod28.add(0L, chronology42);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (-1), chronology42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        int int53 = dateMidnight52.getYearOfEra();
        org.joda.time.Chronology chronology54 = dateMidnight52.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 10, chronology54);
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight45.toMutableDateTime(chronology54);
        org.joda.time.DurationField durationField58 = chronology54.months();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(36000L, periodType23, chronology54);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight11.minus((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight11.yearOfEra();
        org.joda.time.Duration duration64 = org.joda.time.Duration.millis((long) 554);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.YearMonthDay yearMonthDay66 = dateMidnight65.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
    }

    @Test
    public void test12847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12847");
        org.joda.time.Period period9 = org.joda.time.Period.millis(0);
        org.joda.time.Minutes minutes10 = period9.toStandardMinutes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.Period period13 = new org.joda.time.Period(1645574400000L, periodType12);
        org.joda.time.PeriodType periodType14 = periodType12.withSecondsRemoved();
        org.joda.time.Period period15 = period9.normalizedStandard(periodType14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod20.add(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        mutablePeriod20.add(0L, chronology34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (-1), chronology34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 10, chronology46);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight37.toMutableDateTime(chronology46);
        mutableDateTime49.setYear(2022);
        mutableDateTime49.setYear((-1));
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime49.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        boolean boolean58 = periodType14.equals((java.lang.Object) dateTimeField57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period59 = new org.joda.time.Period(26984349, 1146950, 0, 873, 36, 822, 1971, 705, periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test12848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12848");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime33.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime33.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundHalfCeiling();
        mutableDateTime64.addMinutes(122);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.yearOfCentury();
        int int68 = property67.getLeapAmount();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test12849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12849");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.setFirstDayOfWeek(24);
        int int6 = calendar2.getActualMinimum(10);
        calendar2.clear();
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromCalendarFields(calendar2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.Period period14 = period11.plusMinutes((int) (short) 100);
        org.joda.time.Hours hours15 = period14.toStandardHours();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate localDate17 = localDate0.withFields((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 10, chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight39.toMutableDateTime(chronology48);
        mutableDateTime51.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime51.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime51.add(durationFieldType55, (int) ' ');
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime51.minuteOfHour();
        mutableDateTime51.setTime((long) 6);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime51.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str65 = dateTimeZone63.getShortName((long) 53);
        java.lang.String str67 = dateTimeZone63.getName((long) 9);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone63);
        mutableDateTime51.setZone(dateTimeZone63);
        org.joda.time.DateTime dateTime70 = localDate17.toDateTimeAtMidnight(dateTimeZone63);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone63);
        int int73 = dateTimeZone63.getOffset(32010L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-00:00:00.001" + "'", str65, "-00:00:00.001");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-00:00:00.001" + "'", str67, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test12850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12850");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight23.toMutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType1.getField(chronology32);
        org.joda.time.DurationField durationField37 = chronology32.minutes();
        org.joda.time.DurationField durationField38 = chronology32.hours();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(dateTimeZone40);
        java.lang.String str42 = dateTimeZone40.getID();
        org.joda.time.Chronology chronology43 = chronology32.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(2940000L, chronology32);
        org.joda.time.DateTimeField dateTimeField45 = chronology32.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-00:00:00.001" + "'", str42, "-00:00:00.001");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test12851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12851");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = property9.setCopy(34);
        int int12 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
    }

    @Test
    public void test12852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12852");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withWeeksRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withMinutesRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds(4);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.withMaximumValue();
        org.joda.time.LocalTime localTime19 = property17.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime20 = property17.roundHalfCeilingCopy();
        boolean boolean21 = periodType2.equals((java.lang.Object) localTime20);
        org.joda.time.PeriodType periodType22 = periodType2.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test12853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12853");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.clear(12);
        java.util.Date date6 = calendar1.getTime();
        java.util.TimeZone timeZone7 = calendar1.getTimeZone();
        calendar1.setTimeInMillis((long) 386);
        calendar1.set(47904, 13, 180, 79, 5);
        java.time.Instant instant16 = calendar1.toInstant();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1449586998300386,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=47905,MONTH=7,WEEK_OF_YEAR=31,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=214,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=5,SECOND=0,MILLISECOND=386,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:00:02 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test12854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12854");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear((int) (byte) 10);
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonthDay9.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        int int15 = dateTimeZone13.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay9.toDateMidnight(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter7.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear(100);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter19.getZone();
        boolean boolean21 = dateTimeFormatter19.isPrinter();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test12855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12855");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.getLocalTime();
        org.joda.time.LocalTime.Property property16 = localTime15.minuteOfHour();
        org.joda.time.LocalTime localTime18 = property16.addNoWrapToCopy(19);
        org.joda.time.LocalTime.Property property19 = localTime18.minuteOfHour();
        org.joda.time.LocalTime localTime21 = localTime18.withMillisOfSecond(599);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test12856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12856");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        java.lang.String str16 = property15.getName();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = property15.getAsText(locale17);
        org.joda.time.DateTime dateTime20 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = dateTime21.plus((-1L));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusHours(9);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime34 = dateTime21.withFields((org.joda.time.ReadablePartial) localDateTime33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        calendar36.setFirstDayOfWeek(24);
        int int40 = calendar36.getActualMinimum(10);
        java.util.Date date41 = calendar36.getTime();
        java.lang.String str42 = calendar36.getCalendarType();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromCalendarFields(calendar36);
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.lang.String str46 = locale45.toLanguageTag();
        java.util.Set<java.lang.Character> charSet47 = locale45.getExtensionKeys();
        java.lang.String str49 = locale45.getExtension('u');
        java.lang.String str50 = localDateTime43.toString("23", locale45);
        org.joda.time.LocalDateTime.Property property51 = localDateTime43.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int54 = localDateTime52.indexOf(dateTimeFieldType53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime33.property(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime57 = property55.addToCopy((long) 2100);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "centuryOfEra" + "'", str16, "centuryOfEra");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "19" + "'", str19, "19");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645515062967,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=31,SECOND=2,MILLISECOND=967,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 07:31:02 GMT 2022");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "gregory" + "'", str42, "gregory");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-CN" + "'", str46, "zh-CN");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "23" + "'", str50, "23");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test12857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12857");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.set(2022, 1, (int) (byte) -1, 11, (int) (byte) 0, (int) 'a');
        calendar1.set(1, 9, 1);
        java.util.Date date15 = calendar1.getTime();
        int int17 = calendar1.getActualMinimum(12);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar1.get(151);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 151");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-62112142702004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=9,WEEK_OF_YEAR=39,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=274,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=1,SECOND=37,MILLISECOND=996,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sat Oct 01 11:01:37 GMT 1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test12858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12858");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property18.addToCopy((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay21 = property18.getTimeOfDay();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        boolean boolean23 = locale22.hasExtensions();
        int int24 = property18.getMaximumTextLength(locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((long) 10, chronology26);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay27.withSecondOfMinute(53);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay27.withHourOfDay(1);
        int int33 = timeOfDay32.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay32.plusMillis(54);
        boolean boolean36 = property18.equals((java.lang.Object) timeOfDay32);
        org.joda.time.TimeOfDay timeOfDay38 = property18.addToCopy(26665880);
        org.joda.time.TimeOfDay timeOfDay40 = property18.addToCopy(180);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test12859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12859");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDate localDate5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property3.roundHalfFloorCopy();
        int int7 = localDate6.getWeekyear();
        org.joda.time.Period period9 = org.joda.time.Period.months(12);
        org.joda.time.LocalDate localDate10 = localDate6.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalDate localDate12 = localDate10.plusWeeks(0);
        org.joda.time.LocalDate.Property property13 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate15 = localDate10.withDayOfYear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 'u');
        mutablePeriod17.setDays(7);
        mutablePeriod17.addSeconds(0);
        org.joda.time.LocalDate localDate22 = localDate15.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateMidnight dateMidnight23 = localDate22.toDateMidnight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970" + "'", str4, "1970");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test12860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12860");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = property2.getAsShortText(locale3);
        org.joda.time.YearMonthDay yearMonthDay5 = property2.withMinimumValue();
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "22" + "'", str4, "22");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(interval6);
    }

    @Test
    public void test12861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12861");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(15, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusSeconds((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusHours(26616836);
        int int7 = timeOfDay4.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay4.plusSeconds(3);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime21.withChronology(chronology29);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology29);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.days();
        org.joda.time.Period period36 = new org.joda.time.Period(1645574400000L, periodType35);
        org.joda.time.Period period37 = period36.normalizedStandard();
        int int38 = period37.getSeconds();
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePeriod) period37, (long) 15);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology29);
        long long45 = chronology29.add((long) 363, (-1642454701L), 1439);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay4.withChronologyRetainFields(chronology29);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.plusHours(54);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 15]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-2363492314376L) + "'", long45 == (-2363492314376L));
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
    }

    @Test
    public void test12862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12862");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfMonth(14);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds(26933325);
        int int12 = localDateTime9.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
    }

    @Test
    public void test12863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12863");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test12864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12864");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        java.lang.String str2 = property1.getAsString();
        java.lang.String str3 = property1.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay4 = property1.getTimeOfDay();
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0" + "'", str3, "0");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test12865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12865");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight10 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight11 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight13 = property7.setCopy("879");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test12866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12866");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight9.withWeekyear(22);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight9.withYear(52);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusWeeks(845);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        long long30 = dateMidnight27.getMillis();
        java.util.Locale locale34 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar35 = dateMidnight27.toCalendar(locale34);
        int int36 = dateMidnight27.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight38.getYearOfEra();
        int int42 = dateMidnight38.getMillisOfSecond();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateMidnight38, periodType43);
        boolean boolean45 = dateMidnight23.isEqual((org.joda.time.ReadableInstant) dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645574400001L + "'", long12 == 1645574400001L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645574400001L + "'", long30 == 1645574400001L);
        org.junit.Assert.assertEquals(locale34.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645574400001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test12867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12867");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMonths(31);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusDays(7);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(6000L);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(26638467);
        int int13 = localDateTime10.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test12868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12868");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        int int5 = dateMidnight3.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        int int7 = yearMonthDay6.getYear();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusYears((-1));
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusYears(7085705);
        org.joda.time.LocalDate localDate12 = yearMonthDay9.toLocalDate();
        org.joda.time.LocalDate localDate13 = yearMonthDay9.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusSeconds(2);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        long long28 = dateMidnight25.getMillis();
        org.joda.time.DateMidnight.Property property29 = dateMidnight25.weekyear();
        org.joda.time.DateMidnight dateMidnight30 = property29.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight31 = property29.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.withField(dateTimeFieldType32, 32769);
        org.joda.time.LocalDateTime.Property property35 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = property35.setCopy(50);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDate13.compareTo((org.joda.time.ReadablePartial) localDateTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645574400001L + "'", long28 == 1645574400001L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test12869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12869");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        int int5 = dateMidnight3.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        int int11 = dateTimeField8.getDifference((long) 416, (long) 363);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test12870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12870");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate.Property property6 = localDate4.weekyear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.Chronology chronology10 = localDate8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        long long15 = dateTimeField12.set((long) 861, 669);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 669L + "'", long15 == 669L);
    }

    @Test
    public void test12871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12871");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.getDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.centuryOfEra();
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = locale13.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = property11.setCopy("2022-02-22T07:27:43.470Z", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:27:43.470Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test12872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12872");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        java.time.Instant instant17 = gregorianCalendar16.toInstant();
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar16);
        gregorianCalendar16.set(50, 60, 32);
        int int23 = gregorianCalendar16.getWeekYear();
        gregorianCalendar16.setFirstDayOfWeek(180);
        int int27 = gregorianCalendar16.getActualMaximum(0);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = gregorianCalendar16.getGreatestMinimum((-11));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 55 + "'", int23 == 55);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test12873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12873");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight1.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withYear(17);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test12874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12874");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer4, 2937600005L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test12875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12875");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight10 = property7.roundFloorCopy();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight10.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusYears((int) (byte) 10);
        int int14 = dateMidnight13.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withYearOfCentury(502);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 502 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test12876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12876");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property18.addToCopy((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay21 = property18.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = property18.setCopy(24);
        int int24 = property18.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay26 = property18.addToCopy(56);
        org.joda.time.TimeOfDay timeOfDay27 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property18.getField();
        int int29 = property18.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test12877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12877");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property18.addToCopy((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay21 = property18.getTimeOfDay();
        int int22 = timeOfDay21.getMinuteOfHour();
        org.joda.time.DateTime dateTime23 = timeOfDay21.toDateTimeToday();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay21.hourOfDay();
        java.lang.String str25 = property24.getAsShortText();
        java.lang.String str26 = property24.getAsText();
        org.joda.time.TimeOfDay timeOfDay27 = property24.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test12878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12878");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.lang.String str5 = nameProvider0.getName(locale2, "2022-02-22T00:00:00.000Z/2022-02-22T00:00:00.000Z", "centuryOfEra");
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        int int13 = localDateTime12.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withDate((int) (byte) -1, (int) (byte) 10, 7);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withMillisOfSecond(164);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        long long27 = dateMidnight24.getMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration33 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, 12);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration39 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, 12);
        boolean boolean40 = duration29.isEqual((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight24.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration43 = duration37.minus((long) 56);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration37, 5064);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withWeekOfWeekyear(18);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 99);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        long long59 = dateMidnight56.getMillis();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.days();
        org.joda.time.Period period61 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight56, periodType60);
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight56.toMutableDateTimeISO();
        mutableDateTime62.setMillis(457104L);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime62.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime66 = property65.roundFloor();
        mutableDateTime66.addWeeks(13);
        org.joda.time.Interval interval69 = duration51.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime66);
        boolean boolean70 = strSet6.contains((java.lang.Object) duration51);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645574400001L + "'", long27 == 1645574400001L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645488000001L + "'", long59 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test12879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12879");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight10 = property7.addToCopy((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = property7.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight12 = property7.getDateMidnight();
        int int13 = dateMidnight12.getEra();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test12880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12880");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        mutableDateTime34.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.millisOfDay();
        org.joda.time.Chronology chronology38 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 99, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(chronology38);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        calendar45.setFirstDayOfWeek(24);
        calendar45.set(2022, 1, (int) (byte) -1, 11, (int) (byte) 0, (int) 'a');
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.fromCalendarFields(calendar45);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 'u');
        mutablePeriod57.setDays(7);
        mutablePeriod57.addSeconds(0);
        org.joda.time.LocalDate localDate63 = localDate55.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod57, 0);
        int int64 = localDate63.getEra();
        org.joda.time.LocalDate.Property property65 = localDate63.weekyear();
        org.joda.time.Period period66 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay43, (org.joda.time.ReadablePartial) localDate63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        long long71 = dateMidnight68.getMillis();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight68.withMillis((long) 7);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.minusDays((int) (short) -1);
        long long80 = dateMidnight77.getMillis();
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.days();
        org.joda.time.Period period82 = duration75.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight77, periodType81);
        org.joda.time.MutableDateTime mutableDateTime83 = dateMidnight77.toMutableDateTimeISO();
        int int84 = dateMidnight73.compareTo((org.joda.time.ReadableInstant) mutableDateTime83);
        mutableDateTime83.setMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale89 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str90 = locale89.getLanguage();
        java.lang.String str91 = dateTimeZone87.getShortName((long) 'a', locale89);
        mutableDateTime83.setZone(dateTimeZone87);
        org.joda.time.DateTime dateTime93 = localDate63.toDateTimeAtMidnight(dateTimeZone87);
        org.joda.time.YearMonthDay yearMonthDay94 = new org.joda.time.YearMonthDay(dateTimeZone87);
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay94.minusYears(0);
        org.joda.time.YearMonthDay.Property property97 = yearMonthDay94.year();
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1643539633387,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e0a\u5348\",offset=863999,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=1,SECOND=37,MILLISECOND=386,ZONE_OFFSET=863999,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645488000001L + "'", long71 == 1645488000001L);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1645488000001L + "'", long80 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "zh" + "'", str90, "zh");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-00:00:00.001" + "'", str91, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(yearMonthDay96);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test12881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12881");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getDurationType();
        org.joda.time.DateTime.Property property6 = dateTime1.property(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test12882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12882");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        org.joda.time.DurationField durationField34 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology30.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(chronology30);
        org.joda.time.DurationField durationField40 = chronology30.days();
        java.lang.String str41 = durationField40.toString();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DurationField[days]" + "'", str41, "DurationField[days]");
    }

    @Test
    public void test12883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12883");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        org.joda.time.Period period24 = period22.minusSeconds(1146950);
        org.joda.time.Period period26 = period24.plusMillis(61200009);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology31);
        mutablePeriod32.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod32.add(0L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        mutablePeriod32.add(0L, chronology46);
        boolean boolean49 = dateTimeFieldType28.isSupported(chronology46);
        org.joda.time.DurationField durationField50 = chronology46.hours();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology46);
        org.joda.time.DateMidnight dateMidnight52 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withMillis(4406400000L);
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.months();
        long long59 = durationField56.add((long) 50, (long) 15);
        long long61 = durationField56.getMillis(554);
        org.joda.time.DurationFieldType durationFieldType62 = durationField56.getType();
        int int63 = period26.get(durationFieldType62);
        org.joda.time.Period period65 = period26.plusDays(554);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 39312000050L + "'", long59 == 39312000050L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1456879284000L + "'", long61 == 1456879284000L);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test12884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12884");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime33.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime33.centuryOfEra();
        mutableDateTime33.addWeeks(444);
        mutableDateTime33.setMillisOfDay(38);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test12885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12885");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime33.add(durationFieldType37, (int) ' ');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime33.minuteOfHour();
        mutableDateTime33.addMinutes((int) '4');
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration48 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, 12);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration48, (-1));
        mutableDateTime33.addWeeks(1146950);
        mutableDateTime33.addWeeks(9);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusDays((int) (short) -1);
        int int61 = dateMidnight60.getYearOfEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology62.getZone();
        int int67 = dateTimeZone65.getStandardOffset(22L);
        java.lang.String str69 = dateTimeZone65.getName((long) 3);
        mutableDateTime33.setZone(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-00:00:00.001" + "'", str69, "-00:00:00.001");
    }

    @Test
    public void test12886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12886");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        int int3 = dateMidnight2.getMillisOfSecond();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#', periodType5, chronology6);
        org.joda.time.Period period9 = period7.withDays((int) ' ');
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadablePeriod) period9);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Interval interval15 = interval12.gap((org.joda.time.ReadableInterval) interval14);
        boolean boolean17 = interval12.isBefore(100L);
        org.joda.time.Interval interval18 = interval12.toInterval();
        org.joda.time.Interval interval19 = interval10.gap((org.joda.time.ReadableInterval) interval12);
        boolean boolean20 = interval10.isBeforeNow();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        java.lang.String str27 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.Period period29 = new org.joda.time.Period((java.lang.Object) interval10, chronology26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) 59, chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.dayOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology34);
        mutablePeriod35.setPeriod((long) (short) 10, (long) (short) -1);
        int int40 = mutablePeriod35.getValue(0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        org.joda.time.Duration duration45 = mutablePeriod35.toDurationTo((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.halfdayOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight42, chronology53);
        org.joda.time.LocalDate localDate59 = localDate57.withDayOfMonth(8);
        int int60 = localDate57.getMonthOfYear();
        org.joda.time.LocalDate localDate62 = localDate57.minusYears(840);
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtCurrentTime();
        int[] intArray65 = chronology26.get((org.joda.time.ReadablePartial) localDate57, (long) 2005);
        org.joda.time.DurationField durationField66 = chronology26.seconds();
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology26);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str27, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test12887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12887");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((long) 10, chronology2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = timeOfDay3.getFields();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay3, (org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        boolean boolean22 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale locale25 = builder24.build();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.util.Locale.Builder builder27 = builder24.setLocale(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((-1733011199999L), chronology19, locale26);
        java.lang.Integer int29 = dateTimeParserBucket28.getPivotYear();
        dateTimeParserBucket28.setPivotYear((java.lang.Integer) 684);
        java.lang.Object obj32 = dateTimeParserBucket28.saveState();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket28.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
    }

    @Test
    public void test12888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12888");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setFirstDayOfWeek(24);
        calendar13.clear(12);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        calendar13.setTimeZone(timeZone18);
        calendar11.setTimeZone(timeZone18);
        java.util.Date date21 = calendar11.getTime();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = calendar11.isSet(26616836);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645574400001,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e0a\u5348\",offset=863999,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e0a\u5348\",offset=863999,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=?,SECOND=27,MILLISECOND=591,ZONE_OFFSET=863999,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:14");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 23 00:14:24 GMT+00:14 2022");
    }

    @Test
    public void test12889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12889");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        int int36 = mutableDateTime33.getYearOfEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology40);
        mutablePeriod41.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod41.add(0L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        mutablePeriod41.add(0L, chronology55);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (-1), chronology55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusDays((int) (short) -1);
        int int66 = dateMidnight65.getYearOfEra();
        org.joda.time.Chronology chronology67 = dateMidnight65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 10, chronology67);
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight58.toMutableDateTime(chronology67);
        mutableDateTime70.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime70.millisOfDay();
        org.joda.time.Chronology chronology74 = mutableDateTime70.getChronology();
        mutableDateTime33.setChronology(chronology74);
        mutableDateTime33.setTime((long) 32772);
        mutableDateTime33.addYears(2023);
        mutableDateTime33.setSecondOfDay(8765);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime33.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime84 = property82.add((int) '4');
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(mutableDateTime84);
    }

    @Test
    public void test12890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12890");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((long) 10, chronology2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = timeOfDay3.getFields();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay3, (org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 10, chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusSeconds((int) '4');
        int int16 = timeOfDay3.compareTo((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay3.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay21 = property19.addToCopy((int) (byte) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateMidnight dateMidnight33 = dateTime32.toDateMidnight();
        int int34 = dateMidnight33.getWeekOfWeekyear();
        boolean boolean35 = timeOfDay21.equals((java.lang.Object) dateMidnight33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology44.getZone();
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 2022, chronology44, locale48, (java.lang.Integer) 9, (int) (short) 0);
        org.joda.time.DateTime dateTime52 = dateMidnight33.toDateTime(chronology44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) "monthOfYear", chronology44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"monthOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test12891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12891");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = yearMonthDay0.getFieldTypes();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes(16);
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.withMonthOfYear((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.plusMonths(0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test12892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12892");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"????????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12893");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDate5.toString(dateTimeFormatter8);
        int int10 = property2.compareTo((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.Interval interval11 = localDate5.toInterval();
        org.joda.time.LocalDate localDate13 = localDate5.withWeekOfWeekyear((int) '#');
        org.joda.time.Period period15 = org.joda.time.Period.days(4);
        org.joda.time.Period period17 = period15.plusMinutes(32770);
        org.joda.time.LocalDate localDate19 = localDate5.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 5);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMillis(0);
        int[] intArray34 = new int[] {};
        int int35 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime33, intArray34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = localDateTime33.get(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.minusHours(11);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime33.minusHours(22);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(17);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.withFieldAdded(durationFieldType44, 70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = localDate5.withFieldAdded(durationFieldType44, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 24 + "'", int35 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test12894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12894");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(3692163384000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(7);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) (byte) 0);
        int int17 = dateTime16.getMonthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 10, chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight39.toMutableDateTime(chronology48);
        mutableDateTime51.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime51.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime51.toMutableDateTime(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonthDay57.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType65 = periodType64.withWeeksRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 1970, (long) 3, periodType64);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration61, periodType64);
        org.joda.time.DateTime dateTime68 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.plusWeeks(4);
        org.joda.time.DateTime dateTime71 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime74 = dateTime68.withDurationAdded(readableDuration72, (int) '4');
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTime();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Period period78 = period76.minusDays(84);
        org.joda.time.Period period80 = period76.minusSeconds(117);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test12895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12895");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        org.joda.time.DateTime dateTime17 = dateTime12.plusYears((int) '#');
        org.joda.time.DateTime dateTime20 = dateTime12.withDurationAdded((long) 371, 33);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology23);
        mutablePeriod24.setPeriod((long) (short) 10, (long) (short) -1);
        int int29 = mutablePeriod24.getValue(0);
        mutablePeriod24.addMinutes(0);
        mutablePeriod24.setMonths((int) (byte) 10);
        java.lang.Object obj34 = mutablePeriod24.clone();
        mutablePeriod24.addSeconds(14);
        int int37 = mutablePeriod24.getMonths();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours(10L);
        long long40 = duration39.getStandardSeconds();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration44 = duration39.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology47);
        mutablePeriod48.setPeriod((long) (short) 10, (long) (short) -1);
        int int53 = mutablePeriod48.getValue(0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        org.joda.time.Duration duration58 = mutablePeriod48.toDurationTo((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Duration duration59 = duration43.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        int int67 = dateMidnight66.getYearOfEra();
        org.joda.time.Chronology chronology68 = dateMidnight66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 10, chronology68);
        org.joda.time.DateTime dateTime72 = dateTime70.minusHours(7);
        org.joda.time.DateTime dateTime74 = dateTime72.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime76 = dateTime74.withEra((int) (short) 0);
        org.joda.time.Chronology chronology77 = dateTime74.getChronology();
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration59, chronology77);
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.now(chronology77);
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(chronology77);
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.now(chronology77);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime20.toMutableDateTime(chronology77);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT1.884S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT1.884S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT1.884S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 36000L + "'", long40 == 36000L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
    }

    @Test
    public void test12896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12896");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.minus((long) 50);
        long long4 = instant1.getMillis();
        org.joda.time.Instant instant6 = instant1.plus((long) 636);
        java.util.Date date7 = instant1.toDate();
        java.time.Instant instant8 = date7.toInstant();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:14:23 GMT+00:14 1970");
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test12897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12897");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate12.minusWeeks(9);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate.Property property21 = localDate19.weekyear();
        java.lang.String str22 = property21.getAsString();
        org.joda.time.LocalDate localDate23 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate24 = property21.roundHalfFloorCopy();
        int int25 = localDate24.getWeekyear();
        org.joda.time.LocalDate localDate26 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        java.lang.String str28 = localDate24.toString("00:10:00.100");
        org.joda.time.LocalDate localDate30 = localDate24.minusYears(444);
        org.joda.time.DateMidnight dateMidnight31 = localDate30.toDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "00:10:00.100" + "'", str28, "00:10:00.100");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test12898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12898");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        int int10 = date9.getYear();
        int int11 = date9.getDay();
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromDateFields(date9);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 122 + "'", int10 == 122);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test12899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12899");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours(10L);
        long long12 = duration11.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis((long) 24);
        long long16 = dateMidnight15.getMillis();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = property19.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays(958);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36000L + "'", long12 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test12900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12900");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean17 = localDate12.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = localDate12.plusMonths((int) (short) 100);
        org.joda.time.LocalDate localDate21 = localDate19.withCenturyOfEra(99);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks(2922789);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology26);
        mutablePeriod27.setPeriod((long) (short) 10, (long) (short) -1);
        int int32 = mutablePeriod27.getValue(0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        org.joda.time.Duration duration37 = mutablePeriod27.toDurationTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.halfdayOfDay();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight34, chronology45);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfMonth(8);
        int int52 = localDate49.getMonthOfYear();
        org.joda.time.LocalDate localDate54 = localDate49.plusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate55 = localDate21.withFields((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.LocalDate localDate57 = localDate49.minusMonths(426);
        org.joda.time.LocalDate.Property property58 = localDate49.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((java.lang.Object) property58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test12901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12901");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime33.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime33.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundHalfCeiling();
        org.joda.time.Period period73 = new org.joda.time.Period((int) (short) 100, (int) (short) 10, (int) (byte) 1, (int) (short) 1, (int) (byte) 1, (int) (byte) 100, (int) (short) 0, (int) (byte) 0);
        int int74 = period73.getDays();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.TimeOfDay timeOfDay77 = new org.joda.time.TimeOfDay((long) 10, chronology76);
        org.joda.time.DateTimeField[] dateTimeFieldArray78 = timeOfDay77.getFields();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.TimeOfDay timeOfDay81 = new org.joda.time.TimeOfDay((long) 10, chronology80);
        org.joda.time.DateTimeField[] dateTimeFieldArray82 = timeOfDay81.getFields();
        org.joda.time.Period period83 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay77, (org.joda.time.ReadablePartial) timeOfDay81);
        org.joda.time.Period period85 = period83.minusMinutes(0);
        org.joda.time.Period period87 = period83.minusMonths(0);
        org.joda.time.Seconds seconds88 = period87.toStandardSeconds();
        org.joda.time.Period period89 = period73.plus((org.joda.time.ReadablePeriod) period87);
        mutableDateTime64.add((org.joda.time.ReadablePeriod) period87);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray78);
        org.junit.Assert.assertNotNull(dateTimeFieldArray82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(seconds88);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test12902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12902");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 'u');
        mutablePeriod3.setDays(7);
        mutablePeriod3.setPeriod(26674320, 26616836, 5064, 26662068, 50, 8, 53, 572);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay1.minus((org.joda.time.ReadablePeriod) mutablePeriod3);
        mutablePeriod3.addWeeks(26669490);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 'u');
        mutablePeriod19.setDays(7);
        mutablePeriod19.addSeconds(0);
        mutablePeriod19.addMillis((int) 'u');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.millisOfDay();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(19046L, chronology34);
        org.joda.time.DurationField durationField38 = chronology34.minutes();
        mutablePeriod19.setPeriod((long) 805, 2764348044115000L, chronology34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        int int41 = mutablePeriod3.getMonths();
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
    }

    @Test
    public void test12903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12903");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology5);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology13);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod14.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod20.add(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        mutablePeriod20.add(0L, chronology34);
        boolean boolean37 = dateTimeFieldType16.isSupported(chronology34);
        org.joda.time.DurationField durationField38 = chronology34.hours();
        long long41 = durationField38.getValueAsLong((long) ' ', (long) 4);
        long long44 = durationField38.getValueAsLong(873903906000L, 873903906000L);
        int int46 = durationField38.getValue(1645514632096L);
        org.joda.time.DurationFieldType durationFieldType47 = durationField38.getType();
        mutablePeriod14.set(durationFieldType47, (-11));
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight10.withFieldAdded(durationFieldType47, 639);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str6, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 242751L + "'", long44 == 242751L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 457087 + "'", int46 == 457087);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test12904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        java.lang.String str7 = localDateTime3.toString("1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.getID();
        org.joda.time.DateTime dateTime12 = localDateTime3.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis((int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime12.withSecondOfMinute((int) (byte) 10);
        int int17 = dateTime16.getSecondOfMinute();
        org.joda.time.DateTime dateTime19 = dateTime16.minusYears(131485);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-00:00:00.001" + "'", str11, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12905");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property18.addToCopy((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay21 = property18.getTimeOfDay();
        int int22 = timeOfDay21.getMinuteOfHour();
        org.joda.time.DateTime dateTime23 = timeOfDay21.toDateTimeToday();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay21.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = property24.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test12906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12906");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        org.joda.time.Period period5 = period2.plusMinutes((int) (short) 100);
        org.joda.time.Period period6 = period2.toPeriod();
        org.joda.time.Period period7 = period6.toPeriod();
        org.joda.time.Period period9 = period7.minusMinutes(17);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.getID();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology17);
        mutablePeriod18.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod18.add(0L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        mutablePeriod18.add(0L, chronology32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (-1), chronology32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 10, chronology44);
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight35.toMutableDateTime(chronology44);
        mutableDateTime47.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.millisOfDay();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.era();
        boolean boolean52 = dateTimeZone11.equals((java.lang.Object) mutableDateTime47);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.Duration duration55 = period9.toDurationFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration61 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, 12);
        boolean boolean62 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 10, chronology71);
        org.joda.time.DateTime dateTime75 = dateTime73.minusHours(7);
        org.joda.time.DateTime dateTime77 = dateTime75.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property78 = dateTime75.centuryOfEra();
        java.lang.String str79 = property78.getName();
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = locale80.getDisplayScript();
        java.lang.String str82 = property78.getAsText(locale80);
        org.joda.time.DateTime dateTime83 = property78.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime84 = property78.roundCeilingCopy();
        org.joda.time.DateTime dateTime86 = dateTime84.plus((-1L));
        org.joda.time.DateTime dateTime88 = dateTime86.withSecondOfMinute(0);
        org.joda.time.PeriodType periodType91 = org.joda.time.PeriodType.days();
        org.joda.time.Period period92 = new org.joda.time.Period(1645574400000L, periodType91);
        org.joda.time.PeriodType periodType93 = periodType91.withWeeksRemoved();
        org.joda.time.Period period94 = new org.joda.time.Period(1584000000L, periodType93);
        org.joda.time.Period period95 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime88, periodType93);
        org.joda.time.Duration duration97 = org.joda.time.Duration.standardMinutes(14565060151L);
        long long98 = duration97.getStandardDays();
        boolean boolean99 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration97);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-00:00:00.001" + "'", str13, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "centuryOfEra" + "'", str79, "centuryOfEra");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "19" + "'", str82, "19");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 10114625L + "'", long98 == 10114625L);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12907");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(840);
        org.joda.time.LocalTime localTime22 = localTime18.minusMillis(26584792);
        org.joda.time.LocalTime.Property property23 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property23.addNoWrapToCopy(86399);
        int int26 = localTime25.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 408 + "'", int26 == 408);
    }

    @Test
    public void test12908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12908");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        boolean boolean21 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.hours();
        boolean boolean23 = durationField22.isSupported();
        long long26 = durationField22.add((long) 31, 82800010);
        long long29 = durationField22.subtract((-1704067200000L), (long) 2011);
        long long30 = durationField22.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 298080036000031L + "'", long26 == 298080036000031L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1711306800000L) + "'", long29 == (-1711306800000L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600000L + "'", long30 == 3600000L);
    }

    @Test
    public void test12909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12909");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        long long10 = dateMidnight7.getMillis();
        org.joda.time.DateMidnight.Property property11 = dateMidnight7.weekyear();
        org.joda.time.DateMidnight dateMidnight12 = property11.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight13 = property11.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight14 = property11.withMaximumValue();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = builder15.build();
        int int17 = property11.getMaximumTextLength(locale16);
        org.joda.time.DateMidnight dateMidnight18 = property11.getDateMidnight();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology22);
        mutablePeriod23.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod23.add(0L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        mutablePeriod23.add(0L, chronology37);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (-1), chronology37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        int int48 = dateMidnight47.getYearOfEra();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 10, chronology49);
        org.joda.time.MutableDateTime mutableDateTime52 = dateMidnight40.toMutableDateTime(chronology49);
        mutableDateTime52.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.millisOfDay();
        mutableDateTime52.setWeekOfWeekyear(6);
        mutableDateTime52.addWeeks(24);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime52.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundFloor();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight18, (org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight18.plusWeeks(54);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight66 = property65.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645574400001L + "'", long10 == 1645574400001L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test12910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12910");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology10);
        mutablePeriod11.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod11.add(0L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (short) -1);
        int int24 = dateMidnight23.getYearOfEra();
        org.joda.time.Chronology chronology25 = dateMidnight23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology25);
        mutablePeriod11.add(0L, chronology25);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (-1), chronology25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 10, chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight28.toMutableDateTime(chronology37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        long long47 = dateMidnight44.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMillisOfSecond(10);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours(10L);
        long long56 = duration55.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (short) 10);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableDuration) duration55, periodType59);
        org.joda.time.Period period61 = period60.toPeriod();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = period60.normalizedStandard(periodType62);
        int int64 = period63.getSeconds();
        int[] intArray66 = chronology37.get((org.joda.time.ReadablePeriod) period63, 946684800000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((int) (byte) 0, 14, 23260999, 444, 26616576, 725, 374, chronology37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 444 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645574400001L + "'", long47 == 1645574400001L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 36000L + "'", long56 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 1565, 2, 0, 0, 0, 0]");
    }

    @Test
    public void test12911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12911");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay(50);
        org.joda.time.DateTime dateTime18 = localTime15.toDateTimeToday();
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test12912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12912");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = yearMonthDay0.getFieldTypes();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes(16);
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        int int6 = yearMonthDay5.getMonthOfYear();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str9 = localDate8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) '#');
        int int23 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate22.withYearOfEra((int) '4');
        boolean boolean26 = localDate8.isBefore((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = localDate8.isSupported(dateTimeFieldType27);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay5.withField(dateTimeFieldType27, 15);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay5.withYear(941);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusDays(26920);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
    }

    @Test
    public void test12913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12913");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str4 = localDate3.toString();
        int int5 = localDate3.getYearOfEra();
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(36000L, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (-4), chronology6);
        int int12 = yearMonthDay11.getMonthOfYear();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
    }

    @Test
    public void test12914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12914");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology19);
        int int24 = mutableDateTime23.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setMinuteOfDay(41065200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41065200 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
    }

    @Test
    public void test12915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12915");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setExtension('a', "1970");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        long long11 = dateMidnight8.getMillis();
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.weekyear();
        org.joda.time.DateMidnight dateMidnight13 = property12.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight14 = property12.roundHalfFloorCopy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology17);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((long) 10, chronology21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((long) 10, chronology25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = timeOfDay26.getFields();
        org.joda.time.Period period28 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay22, (org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean30 = timeOfDay26.isSupported(dateTimeFieldType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        boolean boolean41 = dateTimeFieldType29.isSupported(chronology38);
        boolean boolean42 = localTime19.isSupported(dateTimeFieldType29);
        org.joda.time.LocalTime localTime44 = localTime19.plusHours(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology48);
        mutablePeriod49.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod49.add(0L);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        int int62 = dateMidnight61.getYearOfEra();
        org.joda.time.Chronology chronology63 = dateMidnight61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology63);
        mutablePeriod49.add(0L, chronology63);
        boolean boolean66 = dateTimeFieldType45.isSupported(chronology63);
        org.joda.time.DurationField durationField67 = chronology63.hours();
        org.joda.time.DurationFieldType durationFieldType68 = durationField67.getType();
        org.joda.time.LocalTime localTime70 = localTime44.withFieldAdded(durationFieldType68, 0);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        int int72 = localTime70.getMillisOfSecond();
        java.util.Locale locale74 = java.util.Locale.CHINA;
        java.lang.String str75 = locale74.toLanguageTag();
        java.lang.String str76 = localTime70.toString("19", locale74);
        int int77 = property12.getMaximumShortTextLength(locale74);
        java.lang.String str78 = locale74.getDisplayName();
        java.util.Locale.Builder builder79 = builder0.setLocale(locale74);
        java.util.Locale locale80 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str81 = locale80.toLanguageTag();
        java.util.Locale.Builder builder82 = builder79.setLocale(locale80);
        java.util.Locale.Builder builder84 = builder82.setRegion("483");
        java.util.Locale.Builder builder86 = builder82.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder88 = builder86.setLanguage("1969-12-31T00:00:00.006-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1969-12-31T00:00:00.006-00:00:00.001 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645574400001L + "'", long11 == 1645574400001L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(chronology71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 256 + "'", int72 == 256);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "zh-CN" + "'", str75, "zh-CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "19" + "'", str76, "19");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str78, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "zh-CN" + "'", str81, "zh-CN");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test12916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12916");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = timeOfDay11.getFields();
        org.joda.time.Period period13 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay7, (org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean15 = timeOfDay11.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        boolean boolean26 = dateTimeFieldType14.isSupported(chronology23);
        boolean boolean27 = localTime4.isSupported(dateTimeFieldType14);
        org.joda.time.LocalTime localTime29 = localTime4.plusHours(11);
        org.joda.time.LocalTime localTime31 = localTime29.withHourOfDay(10);
        org.joda.time.LocalTime localTime33 = localTime31.minusMillis((int) (short) 10);
        org.joda.time.LocalTime localTime35 = localTime31.minusSeconds(830);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test12917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12917");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        long long38 = chronology31.add((long) 22, 0L, 0);
        org.joda.time.DateTimeField dateTimeField39 = chronology31.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 'a', chronology31);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str43 = localDate42.toString();
        int int44 = localDate42.getYearOfEra();
        org.joda.time.LocalDate.Property property45 = localDate42.era();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        mutableDateTime40.setRounding(dateTimeField46);
        int int48 = mutableDateTime40.getMillisOfDay();
        int int49 = mutableDateTime40.getRoundingMode();
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 22L + "'", long38 == 22L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 86399999 + "'", int48 == 86399999);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test12918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12918");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate.Property property6 = localDate4.weekyear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.Chronology chronology10 = localDate8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology10);
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial15 = null;
        int int16 = dateTimeField14.getMinimumValue(readablePartial15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField14.getType();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        int int26 = mutablePeriod21.getValue(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        org.joda.time.Duration duration31 = mutablePeriod21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod42.add(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        mutablePeriod42.add(0L, chronology56);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (-1), chronology56);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        int int67 = dateMidnight66.getYearOfEra();
        org.joda.time.Chronology chronology68 = dateMidnight66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 10, chronology68);
        org.joda.time.MutableDateTime mutableDateTime71 = dateMidnight59.toMutableDateTime(chronology68);
        org.joda.time.DurationField durationField72 = chronology68.months();
        org.joda.time.DateTimeField dateTimeField73 = chronology68.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(36000L, periodType37, chronology68);
        java.lang.String str75 = chronology68.toString();
        mutablePeriod21.setPeriod(187200000L, chronology68);
        org.joda.time.DateTimeField dateTimeField77 = chronology68.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        int int83 = dateTimeZone81.getOffset((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(840, 3, 4, dateTimeZone81);
        java.lang.String str86 = dateTimeZone81.getName((long) 180);
        org.joda.time.Chronology chronology87 = chronology68.withZone(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType17.getField(chronology87);
        org.joda.time.DurationField durationField89 = chronology87.eras();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str75, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
    }

    @Test
    public void test12919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12919");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear(26669490);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withDefaultYear(26574907);
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter5.getParser();
        boolean boolean11 = dateTimeFormatter5.isParser();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeParser10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12920");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) (byte) 1, 15);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime21 = property19.addToCopy(1L);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        int int24 = property22.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
    }

    @Test
    public void test12921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12921");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        int int10 = date9.getYear();
        int int11 = date9.getDay();
        int int12 = date9.getTimezoneOffset();
        int int13 = date9.getMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 122 + "'", int10 == 122);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test12922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12922");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 10, chronology13);
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours(7);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime19.toGregorianCalendar();
        boolean boolean22 = interval1.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval26 = yearMonthDay25.toInterval();
        org.joda.time.Interval interval27 = interval24.gap((org.joda.time.ReadableInterval) interval26);
        boolean boolean29 = interval24.isBefore(100L);
        org.joda.time.Interval interval31 = interval24.withStartMillis(0L);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval33 = yearMonthDay32.toInterval();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval35 = yearMonthDay34.toInterval();
        org.joda.time.Interval interval36 = interval33.gap((org.joda.time.ReadableInterval) interval35);
        boolean boolean38 = interval33.isBefore(100L);
        java.lang.String str39 = interval33.toString();
        boolean boolean40 = interval31.abuts((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Interval interval41 = interval1.gap((org.joda.time.ReadableInterval) interval31);
        long long42 = interval1.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.minusDays(32770);
        boolean boolean47 = interval1.equals((java.lang.Object) yearMonthDay46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((java.lang.Object) interval1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        int int53 = dateMidnight52.getYearOfEra();
        org.joda.time.Chronology chronology54 = dateMidnight52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology54.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekOfWeekyear();
        org.joda.time.Period period59 = duration48.toPeriod(chronology57);
        org.joda.time.Period period60 = period59.negated();
        org.joda.time.Period period62 = period59.withMillis(2022);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001/2022-02-23T00:00:00.000-00:00:00.001" + "'", str39, "2022-02-22T00:00:00.000-00:00:00.001/2022-02-23T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 86400000L + "'", long42 == 86400000L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
    }

    @Test
    public void test12923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12923");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 10, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(chronology23);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 24, (long) '#', chronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        org.joda.time.Period period32 = new org.joda.time.Period(1645574400000L, periodType31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withPeriodAdded((org.joda.time.ReadablePeriod) period32, (int) (byte) 0);
        int[] intArray36 = chronology23.get((org.joda.time.ReadablePartial) localDateTime34, (long) 3);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusMonths(1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusYears(1970);
        int int41 = localDateTime34.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 2]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test12924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12924");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.getID();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight3.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.millisOfDay();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.dayOfWeek();
        mutableDateTime14.setWeekyear(2022);
        java.lang.String str20 = mutableDateTime14.toString();
        int int21 = mutableDateTime14.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setMonthOfYear(1648252800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1648252800 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-00:00:00.001" + "'", str13, "-00:00:00.001");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str20, "2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test12925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12925");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        long long38 = chronology31.add((long) 22, 0L, 0);
        org.joda.time.DateTimeField dateTimeField39 = chronology31.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 'a', chronology31);
        mutableDateTime40.add((long) 50);
        mutableDateTime40.addSeconds((int) 'a');
        mutableDateTime40.addDays((-1063546559));
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 22L + "'", long38 == 22L);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test12926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12926");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        int int5 = dateMidnight3.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        int int7 = yearMonthDay6.getYear();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay8.getFieldTypes();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay8.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property13.addToCopy((long) 30297);
        int int16 = dateMidnight15.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test12927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12927");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.addToCopy((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay6 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusMonths(20);
        int int9 = yearMonthDay8.size();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test12928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12928");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        mutableDateTime33.setMinuteOfHour(4);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis(0);
        int[] intArray55 = new int[] {};
        int int56 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDateTime54, intArray55);
        int int58 = dateTimeField50.getMinimumValue((long) 1);
        mutableDateTime33.setRounding(dateTimeField50);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime33.yearOfCentury();
        int int61 = mutableDateTime33.getDayOfYear();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.clockhourOfDay();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTime dateTime74 = dateTime72.minusSeconds(4);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime72);
        boolean boolean76 = mutableDateTime33.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((int) (byte) 0, 32769, (int) (byte) 10, (int) (short) 1);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.String str84 = dateTimeFieldType83.getName();
        int int85 = mutableDateTime33.get(dateTimeFieldType83);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime33.era();
        org.joda.time.MutableDateTime mutableDateTime87 = property86.roundHalfEven();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 365 + "'", int61 == 365);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "weekOfWeekyear" + "'", str84, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
    }

    @Test
    public void test12929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12929");
        java.io.IOException iOException1 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException();
        java.io.IOException iOException4 = new java.io.IOException("PT0.010S", (java.lang.Throwable) iOException3);
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException7 = new java.io.IOException("", (java.lang.Throwable) iOException6);
    }

    @Test
    public void test12930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12930");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = duration1.plus((org.joda.time.ReadableDuration) duration11);
        long long15 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86400000L) + "'", long15 == (-86400000L));
    }

    @Test
    public void test12931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12931");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        java.lang.String str16 = property15.getName();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = property15.getAsText(locale17);
        org.joda.time.DateTime dateTime20 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = property15.roundHalfFloorCopy();
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        int int23 = gregorianCalendar22.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "centuryOfEra" + "'", str16, "centuryOfEra");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "19" + "'", str19, "19");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test12932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12932");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 24);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMinutes(1020);
        int int4 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusDays(27034785);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test12933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12933");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(191831011L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test12934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12934");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        int int10 = mutablePeriod9.getDays();
        mutablePeriod9.setValue(0, 10);
        mutablePeriod9.setMonths(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod21.add(0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        mutablePeriod21.add(0L, chronology35);
        boolean boolean38 = dateTimeFieldType17.isSupported(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.hours();
        mutablePeriod9.add(32L, chronology35);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.weekyear();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 13, chronology35);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis(86399999L);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.Instant instant53 = instant50.minus(31556952000L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        long long60 = dateMidnight57.getMillis();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.days();
        org.joda.time.Period period62 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        java.util.Date date63 = dateMidnight57.toDate();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours(10L);
        long long66 = duration65.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withMillis((long) 24);
        long long70 = dateMidnight69.getMillis();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight57.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant73 = instant53.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight48.withChronology(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime43, (org.joda.time.ReadableInstant) dateMidnight48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645488000001L + "'", long60 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 36000L + "'", long66 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateMidnight76);
    }

    @Test
    public void test12935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12935");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.minus((long) 50);
        org.joda.time.Instant instant5 = instant1.minus(36000L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 4);
        org.joda.time.Instant instant9 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) ' ');
        org.joda.time.Instant instant11 = instant5.minus((-1704067200L));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test12936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12936");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        mutableDateTime33.setWeekOfWeekyear(6);
        mutableDateTime33.addWeeks(24);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime33.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.addWrapField(19);
        org.joda.time.DateTimeField dateTimeField44 = property41.getField();
        org.joda.time.MutableDateTime mutableDateTime45 = property41.roundHalfCeiling();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        long long52 = dateMidnight49.getMillis();
        org.joda.time.DateMidnight.Property property53 = dateMidnight49.weekyear();
        org.joda.time.DateMidnight dateMidnight54 = property53.getDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.yearOfEra();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime61 = property59.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology65);
        mutablePeriod66.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod66.add(0L);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusDays((int) (short) -1);
        int int79 = dateMidnight78.getYearOfEra();
        org.joda.time.Chronology chronology80 = dateMidnight78.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology80);
        mutablePeriod66.add(0L, chronology80);
        boolean boolean83 = dateTimeFieldType62.isSupported(chronology80);
        org.joda.time.DurationField durationField84 = chronology80.hours();
        org.joda.time.DurationFieldType durationFieldType85 = durationField84.getType();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime61.withFieldAdded(durationFieldType85, (int) (short) -1);
        java.lang.String str88 = durationFieldType85.toString();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight54.withFieldAdded(durationFieldType85, 59);
        mutableDateTime45.add(durationFieldType85, 47);
        mutableDateTime45.setYear(50400000);
        org.joda.time.MutableDateTime.Property property95 = mutableDateTime45.minuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645574400001L + "'", long52 == 1645574400001L);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hours" + "'", str88, "hours");
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test12937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12937");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime38.toMutableDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology46);
        mutablePeriod47.setPeriod((long) (short) 10, (long) (short) -1);
        int int51 = mutablePeriod47.getMonths();
        mutablePeriod47.addMinutes((int) (short) 0);
        mutableDateTime38.add((org.joda.time.ReadablePeriod) mutablePeriod47, 12);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = property60.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime62 = property60.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology66);
        mutablePeriod67.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod67.add(0L);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.minusDays((int) (short) -1);
        int int80 = dateMidnight79.getYearOfEra();
        org.joda.time.Chronology chronology81 = dateMidnight79.getChronology();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology81);
        mutablePeriod67.add(0L, chronology81);
        boolean boolean84 = dateTimeFieldType63.isSupported(chronology81);
        org.joda.time.DurationField durationField85 = chronology81.hours();
        org.joda.time.DurationFieldType durationFieldType86 = durationField85.getType();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime62.withFieldAdded(durationFieldType86, (int) (short) -1);
        int int89 = mutablePeriod47.indexOf(durationFieldType86);
        org.joda.time.Chronology chronology90 = null;
        boolean boolean91 = durationFieldType86.isSupported(chronology90);
        boolean boolean92 = localDateTime1.isSupported(durationFieldType86);
        org.joda.time.LocalDateTime.Property property93 = localDateTime1.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test12938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12938");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.millisOfDay();
        int int19 = localDateTime13.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) 100);
        mutablePeriod21.setMillis(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime13.year();
        org.joda.time.LocalDateTime localDateTime27 = property25.addWrapFieldToCopy(1969);
        org.joda.time.DateTimeField dateTimeField28 = property25.getField();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test12939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12939");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 1970, (long) 3, periodType4);
        org.joda.time.PeriodType periodType7 = periodType4.withMillisRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, 838800010L, periodType8);
        int int10 = mutablePeriod9.getYears();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test12940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12940");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) '#');
        int int16 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) '4');
        boolean boolean19 = localDate1.isBefore((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = localDate1.isSupported(dateTimeFieldType20);
        int int22 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate24 = property23.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(572, 20);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTimeZone27.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) property23, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+572:20" + "'", str29, "+572:20");
    }

    @Test
    public void test12941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12941");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.util.TimeZone timeZone45 = dateTimeZone2.toTimeZone();
        java.util.Calendar.Builder builder46 = builder0.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder48 = builder0.setLenient(false);
        java.util.Calendar.Builder builder52 = builder0.setDate(0, 14, 0);
        java.util.Calendar.Builder builder56 = builder0.setWeekDate((int) 'x', 1970, 426);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getVariant();
        java.util.Locale.setDefault(locale57);
        java.util.Calendar.Builder builder60 = builder0.setLocale(locale57);
        java.util.Calendar.Builder builder64 = builder0.setWeekDate(102140, 102140, 636);
        java.util.Calendar.Builder builder66 = builder64.setLenient(false);
        java.util.Calendar.Builder builder68 = builder64.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar69 = builder64.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 636");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test12942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12942");
        java.util.Date date6 = new java.util.Date(11, 5, 5, (int) (byte) -1, 31, 100);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        int int8 = localDate7.getCenturyOfEra();
        org.joda.time.LocalDate localDate10 = localDate7.minusDays(2022);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = localDate10.isSupported(durationFieldType13);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jun 04 23:32:40 GMT+00:00 1911");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12943");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        org.joda.time.Period period5 = period2.plusMinutes((int) (short) 100);
        org.joda.time.Period period6 = period2.toPeriod();
        org.joda.time.Period period7 = period6.toPeriod();
        org.joda.time.Period period9 = period7.minusMinutes(17);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.getID();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology17);
        mutablePeriod18.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod18.add(0L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        mutablePeriod18.add(0L, chronology32);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (-1), chronology32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 10, chronology44);
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight35.toMutableDateTime(chronology44);
        mutableDateTime47.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.millisOfDay();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.era();
        boolean boolean52 = dateTimeZone11.equals((java.lang.Object) mutableDateTime47);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.Duration duration55 = period9.toDurationFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration61 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, 12);
        boolean boolean62 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 10, chronology71);
        org.joda.time.DateTime dateTime75 = dateTime73.minusHours(7);
        org.joda.time.DateTime dateTime77 = dateTime75.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime79 = dateTime77.withEra((int) (short) 0);
        org.joda.time.DateTime dateTime81 = dateTime79.withMillisOfSecond(12);
        org.joda.time.DateTime dateTime82 = dateTime81.toDateTimeISO();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime82);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = period83.getValue(434);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 434");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-00:00:00.001" + "'", str13, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test12944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12944");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        mutableDateTime34.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.millisOfDay();
        org.joda.time.Chronology chronology38 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 99, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.hourOfHalfday();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str46 = localDate45.toString();
        org.joda.time.LocalDate.Property property47 = localDate45.weekyear();
        java.util.Locale locale49 = java.util.Locale.PRC;
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Set<java.lang.Character> charSet51 = locale49.getExtensionKeys();
        java.lang.String str53 = locale49.getExtension('u');
        java.lang.String str54 = locale49.getVariant();
        java.lang.String str55 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDate45, 44, locale49);
        org.joda.time.LocalDate localDate57 = localDate45.withCenturyOfEra(1970);
        org.joda.time.LocalDate.Property property58 = localDate57.weekyear();
        org.joda.time.LocalDate localDate59 = property58.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate61 = property58.setCopy(73);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-CN" + "'", str50, "zh-CN");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "44" + "'", str55, "44");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test12945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12945");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        int int9 = mutablePeriod8.getDays();
        mutablePeriod8.setValue(0, 10);
        mutablePeriod8.setMonths(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod20.add(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        mutablePeriod20.add(0L, chronology34);
        boolean boolean37 = dateTimeFieldType16.isSupported(chronology34);
        org.joda.time.DurationField durationField38 = chronology34.hours();
        mutablePeriod8.add(32L, chronology34);
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology51.getZone();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 100, dateTimeZone54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 40, (long) 429, dateTimeZone54);
        org.joda.time.Chronology chronology57 = chronology34.withZone(dateTimeZone54);
        boolean boolean58 = dateTimeZone54.isFixed();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime59.addDays(10765);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test12946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12946");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.Period period3 = new org.joda.time.Period(1645574400000L, periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(163L, periodType4);
        int int6 = mutablePeriod5.size();
        int int7 = mutablePeriod5.getHours();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod13.add(0L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        mutablePeriod13.add(0L, chronology27);
        boolean boolean30 = dateTimeFieldType9.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.millisOfSecond();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (short) 1, chronology27);
        int[] intArray33 = localTime32.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        boolean boolean36 = localTime32.isSupported(durationFieldType35);
        int int37 = mutablePeriod5.get(durationFieldType35);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test12947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12947");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) '#');
        int int16 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) '4');
        boolean boolean19 = localDate1.isBefore((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = localDate1.isSupported(dateTimeFieldType20);
        int int22 = localDate1.getYearOfCentury();
        int int23 = localDate1.getWeekyear();
        int[] intArray24 = localDate1.getValues();
        org.joda.time.Chronology chronology25 = localDate1.getChronology();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test12948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12948");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.Period period3 = new org.joda.time.Period(1645574400000L, periodType2);
        org.joda.time.Period period4 = period3.normalizedStandard();
        int int5 = period4.getSeconds();
        org.joda.time.Period period7 = period4.withMinutes((int) (byte) -1);
        org.joda.time.Period period9 = period7.withSeconds(3);
        org.joda.time.DurationFieldType durationFieldType11 = period7.getFieldType(5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfDay();
        org.joda.time.DateTime dateTime33 = dateTime22.withChronology(chronology30);
        boolean boolean34 = durationFieldType11.isSupported(chronology30);
        org.joda.time.Period period35 = new org.joda.time.Period(obj0, chronology30);
        int int36 = period35.getMonths();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test12949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12949");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime33.add(durationFieldType37, (int) ' ');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime33.minuteOfHour();
        mutableDateTime33.addMinutes((int) '4');
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime33.getZone();
        mutableDateTime33.setSecondOfDay(0);
        int int46 = mutableDateTime33.getYear();
        mutableDateTime33.setHourOfDay(0);
        mutableDateTime33.addWeeks(547);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1969 + "'", int46 == 1969);
    }

    @Test
    public void test12950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12950");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType0.getField(chronology31);
        int int37 = dateTimeField35.getLeapAmount((long) 1);
        boolean boolean39 = dateTimeField35.isLeap(292278969L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        long long46 = dateMidnight43.getMillis();
        org.joda.time.DateMidnight.Property property47 = dateMidnight43.weekyear();
        org.joda.time.DateMidnight dateMidnight48 = property47.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight49 = property47.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight50 = property47.roundFloorCopy();
        org.joda.time.YearMonthDay yearMonthDay51 = dateMidnight50.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = yearMonthDay51.isSupported(dateTimeFieldType52);
        java.util.Date date56 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay57 = org.joda.time.YearMonthDay.fromDateFields(date56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay57.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay59 = property58.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.now(dateTimeZone61);
        org.joda.time.LocalDate localDate64 = localDate62.minusDays(26574907);
        org.joda.time.LocalDate localDate66 = localDate62.plusWeeks(2);
        int int67 = property58.compareTo((org.joda.time.ReadablePartial) localDate66);
        java.lang.String str68 = property58.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay69 = property58.getYearMonthDay();
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.lang.String str72 = locale71.getDisplayVariant();
        java.lang.String str73 = locale71.getISO3Country();
        org.joda.time.YearMonthDay yearMonthDay74 = property58.setCopy("22", locale71);
        java.lang.String str75 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay51, 26689285, locale71);
        long long77 = dateTimeField35.roundHalfFloor(3024000L);
        long long79 = dateTimeField35.roundHalfFloor((long) (-27133868));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645574400001L + "'", long46 == 1645574400001L);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "26689285" + "'", str75, "26689285");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
    }

    @Test
    public void test12951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12951");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(19);
        boolean boolean9 = dateTimeFormatter8.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withZoneUTC();
        java.lang.StringBuffer stringBuffer12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(stringBuffer12, readableInstant13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test12952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12952");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod1, 52);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds(4);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.LocalTime localTime19 = property18.withMinimumValue();
        boolean boolean20 = mutablePeriod1.equals((java.lang.Object) property18);
        org.joda.time.LocalTime localTime21 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime22 = property18.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime24 = property18.addWrapFieldToCopy(2024);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test12953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12953");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) calendar1);
        java.util.TimeZone timeZone5 = calendar1.getTimeZone();
        java.util.TimeZone timeZone6 = calendar1.getTimeZone();
        int int8 = timeZone6.getOffset(850797885220510000L);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        calendar10.setFirstDayOfWeek(24);
        calendar10.set(2022, 1, (int) (byte) -1, 11, (int) (byte) 0, (int) 'a');
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromCalendarFields(calendar10);
        java.util.TimeZone timeZone21 = calendar10.getTimeZone();
        boolean boolean22 = timeZone21.observesDaylightTime();
        boolean boolean23 = timeZone6.hasSameRules(timeZone21);
        int int24 = timeZone21.getDSTSavings();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645515065036,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=31,SECOND=5,MILLISECOND=35,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1643540497036,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=1,SECOND=37,MILLISECOND=35,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test12954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12954");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = localTime15.minusHours(1970);
        org.joda.time.LocalTime localTime19 = localTime15.plusMillis(345);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 10, chronology28);
        org.joda.time.DateTime dateTime32 = dateTime30.minusHours(7);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.LocalTime localTime35 = localTime33.minusMillis(0);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime33);
        org.joda.time.MutablePeriod mutablePeriod37 = period36.toMutablePeriod();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        long long42 = dateMidnight39.getMillis();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.withMillis((long) 7);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        long long51 = dateMidnight48.getMillis();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.days();
        org.joda.time.Period period53 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight48, periodType52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight48.toMutableDateTimeISO();
        int int55 = dateMidnight44.compareTo((org.joda.time.ReadableInstant) mutableDateTime54);
        mutableDateTime54.setMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        mutableDateTime54.setZone(dateTimeZone58);
        mutableDateTime54.addWeeks(10);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime54.minuteOfHour();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime54.millisOfSecond();
        org.joda.time.Duration duration64 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime54);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645488000001L + "'", long42 == 1645488000001L);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645488000001L + "'", long51 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(duration64);
    }

    @Test
    public void test12955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12955");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((long) 10, chronology14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = timeOfDay15.getFields();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((long) 10, chronology18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.Period period21 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) timeOfDay19);
        org.joda.time.Period period23 = period21.minusMinutes(0);
        int int24 = period21.getMonths();
        org.joda.time.DateTime dateTime25 = dateTime10.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime.Property property26 = dateTime25.secondOfMinute();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(instant27);
    }

    @Test
    public void test12956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12956");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int12 = dateMidnight3.getCenturyOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight14.getYearOfEra();
        int int18 = dateMidnight14.getMillisOfSecond();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateMidnight14, periodType19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight3.yearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight3.toMutableDateTime(chronology27);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfMonth();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645574400001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str28, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test12957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12957");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getDisplayVariant();
        java.lang.String str22 = property18.getAsShortText(locale20);
        java.lang.String str23 = property18.getName();
        org.joda.time.DurationField durationField24 = property18.getDurationField();
        long long26 = durationField24.getMillis((long) 403);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "secondOfMinute" + "'", str23, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 403000L + "'", long26 == 403000L);
    }

    @Test
    public void test12958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMonths(31);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusHours(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 10, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime22.minusHours(7);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        int int28 = dateTime24.getMillisOfSecond();
        org.joda.time.DateTime dateTime30 = dateTime24.plus((long) 6);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        int int48 = dateMidnight47.getYearOfEra();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.millisOfDay();
        org.joda.time.DateTime dateTime52 = dateTime41.withChronology(chronology49);
        org.joda.time.DateTime dateTime53 = dateTime30.toDateTime(chronology49);
        org.joda.time.DurationField durationField54 = chronology49.years();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(0L, chronology49);
        org.joda.time.DurationField durationField56 = chronology49.years();
        org.joda.time.DateTimeField dateTimeField57 = chronology49.dayOfYear();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 34, chronology49);
        org.joda.time.Period period60 = period58.minusDays(2922789);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime9.plus((org.joda.time.ReadablePeriod) period60);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test12959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12959");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.weekyear();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology15.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology15);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test12960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12960");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime5 = dateTime1.plusDays(53);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(7);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property22 = dateTime18.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = dateTime1.getChronology();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test12961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12961");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(28);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(282);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withWeekyear(11);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours(10L);
        long long12 = duration11.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis((long) 24);
        long long16 = dateMidnight15.getMillis();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond(10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration29 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, 12);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration35 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, 12);
        boolean boolean36 = duration29.isEqual((org.joda.time.ReadableDuration) duration33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime23.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        long long44 = dateMidnight41.getMillis();
        org.joda.time.DateMidnight.Property property45 = dateMidnight41.weekyear();
        long long46 = property45.remainder();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        int int49 = dateMidnight48.getSecondOfMinute();
        int int50 = property45.compareTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateMidnight dateMidnight51 = property45.roundHalfEvenCopy();
        boolean boolean52 = duration29.equals((java.lang.Object) dateMidnight51);
        java.lang.String str53 = duration29.toString();
        boolean boolean54 = duration11.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration56 = duration29.withMillis(60000L);
        long long57 = duration56.getMillis();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration56, 457);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36000L + "'", long12 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645574400001L + "'", long44 == 1645574400001L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4406400000L + "'", long46 == 4406400000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT39312000S" + "'", str53, "PT39312000S");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test12962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12962");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((long) 10, chronology3);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((long) 10, chronology7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.Period period10 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay4, (org.joda.time.ReadablePartial) timeOfDay8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean12 = timeOfDay8.isSupported(dateTimeFieldType11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.minusHours(7);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime28 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean29 = calendar1.before((java.lang.Object) timeOfDay8);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay8.plusMinutes(595);
        org.joda.time.Period period33 = org.joda.time.Period.seconds(331);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay8.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 30297);
        int int36 = timeOfDay8.size();
        org.joda.time.TimeOfDay.Property property37 = timeOfDay8.secondOfMinute();
        int int38 = property37.get();
        org.joda.time.TimeOfDay timeOfDay40 = property37.addWrapFieldToCopy((int) ' ');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645515065295,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=31,SECOND=5,MILLISECOND=294,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test12963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12963");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateMidnight dateMidnight11 = dateTime10.toDateMidnight();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration17 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, 12);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        int int27 = mutablePeriod22.getValue(0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        org.joda.time.Duration duration32 = mutablePeriod22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.days();
        org.joda.time.Period period36 = new org.joda.time.Period(1645574400000L, periodType35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration37, readableInstant38);
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        org.joda.time.Period period41 = period36.normalizedStandard(periodType40);
        org.joda.time.Period period42 = duration32.toPeriodTo(readableInstant33, periodType40);
        org.joda.time.Duration duration45 = duration32.withDurationAdded((long) 54, 5);
        org.joda.time.Period period46 = duration32.toPeriod();
        boolean boolean47 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration48 = duration32.toDuration();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test12964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12964");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        int int3 = localDate1.getYearOfEra();
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.centuries();
        long long8 = durationField5.getMillis(345, 36000L);
        int int11 = durationField5.getDifference((long) 911, 1L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1088714908800000L + "'", long8 == 1088714908800000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test12965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12965");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        mutableDateTime33.setMinuteOfHour(4);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis(0);
        int[] intArray55 = new int[] {};
        int int56 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDateTime54, intArray55);
        int int58 = dateTimeField50.getMinimumValue((long) 1);
        mutableDateTime33.setRounding(dateTimeField50);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime33.yearOfCentury();
        int int61 = mutableDateTime33.getDayOfYear();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.clockhourOfDay();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTime dateTime74 = dateTime72.minusSeconds(4);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology76 = mutableDateTime33.getChronology();
        mutableDateTime33.setMillisOfDay(282);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime33.dayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 365 + "'", int61 == 365);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test12966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12966");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(3692163384000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(7);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) (byte) 0);
        int int17 = dateTime16.getMonthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 10, chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight39.toMutableDateTime(chronology48);
        mutableDateTime51.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime51.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime51.toMutableDateTime(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonthDay57.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType65 = periodType64.withWeeksRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 1970, (long) 3, periodType64);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration61, periodType64);
        org.joda.time.DateTime dateTime68 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.plusWeeks(4);
        org.joda.time.DateTime dateTime71 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime74 = dateTime68.withDurationAdded(readableDuration72, (int) '4');
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTime();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight();
        int int78 = dateMidnight77.getMinuteOfDay();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(chronology79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight80.minusDays((int) (short) -1);
        int int83 = dateMidnight82.getYearOfEra();
        org.joda.time.Chronology chronology84 = dateMidnight82.getChronology();
        org.joda.time.DurationField durationField85 = chronology84.minutes();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight77, chronology84);
        org.joda.time.DateTime dateTime88 = dateTime75.toDateTime(chronology84);
        org.joda.time.DateTime dateTime89 = dateTime75.withLaterOffsetAtOverlap();
        org.joda.time.PeriodType periodType92 = org.joda.time.PeriodType.days();
        org.joda.time.Period period93 = new org.joda.time.Period(1645574400000L, periodType92);
        org.joda.time.Period period94 = new org.joda.time.Period((long) 23, periodType92);
        int int95 = period94.getMillis();
        org.joda.time.Days days96 = period94.toStandardDays();
        org.joda.time.DateTime dateTime97 = dateTime89.plus((org.joda.time.ReadablePeriod) days96);
        int int98 = dateTime97.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2022 + "'", int83 == 2022);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(days96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 19 + "'", int98 == 19);
    }

    @Test
    public void test12967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12967");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone4.isStandardOffset((long) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        long long11 = dateMidnight8.getMillis();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) 7);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        long long20 = dateMidnight17.getMillis();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.days();
        org.joda.time.Period period22 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight17, periodType21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight17.toMutableDateTimeISO();
        int int24 = dateMidnight13.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime23.setMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = dateTimeZone27.getShortName((long) 'a', locale29);
        mutableDateTime23.setZone(dateTimeZone27);
        long long34 = dateTimeZone27.convertUTCToLocal(100L);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone27);
        long long37 = dateTimeZone4.getMillisKeepLocal(dateTimeZone27, 9223371989913600000L);
        java.lang.String str38 = dateTimeZone27.getID();
        long long40 = dateTimeZone27.nextTransition(292260000L);
        org.joda.time.DateTime dateTime41 = yearMonthDay3.toDateTimeAtCurrentTime(dateTimeZone27);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645488000001L + "'", long11 == 1645488000001L);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645488000001L + "'", long20 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh" + "'", str30, "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-00:00:00.001" + "'", str31, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 99L + "'", long34 == 99L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 9223371989913600001L + "'", long37 == 9223371989913600001L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-00:00:00.001" + "'", str38, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 292260000L + "'", long40 == 292260000L);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test12968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12968");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime48.setSecondOfMinute(21);
        mutableDateTime48.setMillis(396000403250000L);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test12969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12969");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology21);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfMonth(8);
        int int28 = localDate25.getMonthOfYear();
        org.joda.time.LocalDate localDate30 = localDate25.minusYears(840);
        org.joda.time.LocalDate.Property property31 = localDate30.weekyear();
        org.joda.time.Interval interval32 = localDate30.toInterval();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.Period period35 = interval32.toPeriod(periodType33);
        int int36 = period35.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod37 = period35.toMutablePeriod();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod37);
    }

    @Test
    public void test12970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12970");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getShortName((long) 53);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now(dateTimeZone1);
        int int6 = dateTimeZone1.getStandardOffset(946684800001L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-00:00:00.001" + "'", str3, "-00:00:00.001");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test12971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12971");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 0, (long) 6, chronology19);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.centuryOfEra();
        java.util.Date date29 = new java.util.Date((-1), (int) (short) 0, 0);
        int int30 = date29.getDate();
        int int31 = date29.getSeconds();
        date29.setSeconds(7);
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromDateFields(date29);
        java.lang.String str35 = timeOfDay34.toString();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) timeOfDay34, 61200009, locale37);
        int int39 = timeOfDay34.size();
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 00:00:07 GMT+00:00 1898");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "T00:00:07.001" + "'", str35, "T00:00:07.001");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "61200009" + "'", str38, "61200009");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test12972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12972");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.addMillis(26574655);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (byte) 100);
        mutablePeriod39.setMillis(10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration47 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, 12);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration47);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod39, 16);
        mutableDateTime33.setMillisOfDay((int) 'a');
        mutableDateTime33.addMonths(32772);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime33.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str60 = localDate59.toString();
        org.joda.time.LocalDate.Property property61 = localDate59.weekyear();
        org.joda.time.LocalDate localDate63 = property61.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate.Property property64 = localDate63.weekyear();
        org.joda.time.Chronology chronology65 = localDate63.getChronology();
        org.joda.time.DurationField durationField66 = durationFieldType57.getField(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        int int71 = dateMidnight70.getYearOfEra();
        org.joda.time.Chronology chronology72 = dateMidnight70.getChronology();
        long long73 = dateMidnight70.getMillis();
        org.joda.time.DateMidnight.Property property74 = dateMidnight70.weekyear();
        org.joda.time.DateMidnight dateMidnight75 = property74.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight77 = property74.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = property78.getField();
        java.util.Locale locale82 = new java.util.Locale("fr-FR");
        java.lang.String str83 = dateTimeField79.getAsText(473440680000L, locale82);
        java.util.Locale locale84 = null;
        java.lang.String str85 = locale82.getDisplayVariant(locale84);
        java.lang.String str86 = locale82.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 434, chronology65, locale82, (java.lang.Integer) 26874725);
        java.util.Calendar calendar89 = mutableDateTime33.toCalendar(locale82);
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.YearMonthDay yearMonthDay91 = new org.joda.time.YearMonthDay(dateTimeZone90);
        org.joda.time.YearMonthDay yearMonthDay93 = yearMonthDay91.minusDays(32770);
        boolean boolean94 = calendar89.equals((java.lang.Object) 32770);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01" + "'", str60, "1970-01-01");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645574400001L + "'", long73 == 1645574400001L);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals(locale82.toString(), "fr-fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "85" + "'", str83, "85");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=88483449600098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4773,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=340,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=97,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(yearMonthDay93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test12973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12973");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology21);
        int int26 = localDate25.getDayOfWeek();
        org.joda.time.LocalDate localDate28 = localDate25.minusYears(1222);
        org.joda.time.Interval interval29 = localDate25.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology32);
        mutablePeriod33.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod33.add(0L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        mutablePeriod33.add(0L, chronology47);
        int int50 = mutablePeriod33.getHours();
        org.joda.time.LocalDate localDate52 = localDate25.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, 17);
        int int53 = localDate25.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
    }

    @Test
    public void test12974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12974");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Period period6 = new org.joda.time.Period();
        boolean boolean7 = duration1.equals((java.lang.Object) period6);
        org.joda.time.Days days8 = period6.toStandardDays();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (short) 100, chronology22);
        org.joda.time.DurationField durationField26 = durationFieldType13.getField(chronology22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfDay();
        org.joda.time.DurationField durationField34 = durationFieldType13.getField(chronology32);
        mutablePeriod12.add(durationFieldType13, 12);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology39);
        mutablePeriod40.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod40.add(0L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        int int53 = dateMidnight52.getYearOfEra();
        org.joda.time.Chronology chronology54 = dateMidnight52.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology54);
        mutablePeriod40.add(0L, chronology54);
        mutablePeriod40.setHours(10);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration64 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, 12);
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(chronology69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusDays((int) (short) -1);
        int int73 = dateMidnight72.getYearOfEra();
        org.joda.time.Chronology chronology74 = dateMidnight72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology74);
        mutablePeriod40.add((long) (-1), chronology74);
        boolean boolean77 = durationFieldType13.isSupported(chronology74);
        int int78 = days8.get(durationFieldType13);
        org.joda.time.PeriodType periodType79 = days8.getPeriodType();
        org.joda.time.PeriodType periodType80 = periodType79.withWeeksRemoved();
        org.joda.time.PeriodType periodType81 = periodType80.withMillisRemoved();
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight(chronology86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight87.minusDays((int) (short) -1);
        int int90 = dateMidnight89.getYearOfEra();
        org.joda.time.Chronology chronology91 = dateMidnight89.getChronology();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology91);
        org.joda.time.DateTimeField dateTimeField93 = chronology91.clockhourOfDay();
        org.joda.time.LocalTime localTime94 = new org.joda.time.LocalTime((long) (short) 100, chronology91);
        org.joda.time.DurationField durationField95 = durationFieldType82.getField(chronology91);
        int int96 = periodType81.indexOf(durationFieldType82);
        java.lang.String str97 = durationFieldType82.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "seconds" + "'", str97, "seconds");
    }

    @Test
    public void test12975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12975");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.util.TimeZone timeZone45 = dateTimeZone2.toTimeZone();
        java.util.Calendar.Builder builder46 = builder0.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder50 = builder46.setDate(2, (int) (short) 10, 10);
        java.util.Calendar calendar51 = builder50.build();
        calendar51.roll(0, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=314,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
    }

    @Test
    public void test12976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12976");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (byte) 1);
        java.util.Date date5 = new java.util.Date((-1), (int) (short) 0, 0);
        int int6 = date5.getDate();
        int int7 = date5.getMonth();
        boolean boolean8 = timeOfDay1.equals((java.lang.Object) int7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology16.withZone(dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period(242751L, (long) 345, chronology16);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period23 = period20.withFieldAdded(durationFieldType21, 1182);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period23);
        int int25 = timeOfDay24.size();
        java.lang.String str26 = timeOfDay24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((long) 10, chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        int int31 = timeOfDay29.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property32 = timeOfDay29.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay33 = property32.withMaximumValue();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        int int35 = property32.getMaximumTextLength(locale34);
        org.joda.time.TimeOfDay timeOfDay36 = property32.getTimeOfDay();
        boolean boolean37 = timeOfDay24.isAfter((org.joda.time.ReadablePartial) timeOfDay36);
        int int38 = timeOfDay24.getHourOfDay();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 31 00:00:00 GMT+00:00 1898");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "T05:55:57.594" + "'", str26, "T05:55:57.594");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
    }

    @Test
    public void test12977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12977");
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (short) 100, chronology12);
        org.joda.time.DurationField durationField16 = durationFieldType3.getField(chronology12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfDay();
        org.joda.time.DurationField durationField24 = durationFieldType3.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(434, (-27133868), 140, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 434 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test12978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12978");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        int int18 = dateMidnight5.getMillisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight5.minusMonths((int) 'u');
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusWeeks(23);
        int int23 = dateMidnight22.getCenturyOfEra();
        int int24 = dateMidnight22.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645574400001L + "'", long12 == 1645574400001L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
    }

    @Test
    public void test12979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12979");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        long long37 = chronology30.add((long) 22, 0L, 0);
        org.joda.time.DurationField durationField38 = chronology30.days();
        org.joda.time.DurationField durationField39 = chronology30.years();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 22L + "'", long37 == 22L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test12980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12980");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.addMillis(26574655);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (byte) 100);
        mutablePeriod39.setMillis(10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration47 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, 12);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration47);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod39, 16);
        mutablePeriod39.clear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology56);
        mutablePeriod57.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod57.add(0L);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology71);
        mutablePeriod57.add(0L, chronology71);
        org.joda.time.Period period74 = new org.joda.time.Period((long) 0, (long) 6, chronology71);
        int int75 = period74.getSeconds();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours(10L);
        long long78 = duration77.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.withMillis((long) 24);
        long long82 = dateMidnight81.getMillis();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration77, (org.joda.time.ReadableInstant) dateMidnight81);
        boolean boolean84 = period74.equals((java.lang.Object) dateMidnight81);
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.centuries();
        int int86 = period74.indexOf(durationFieldType85);
        java.lang.String str87 = durationFieldType85.getName();
        mutablePeriod39.add(durationFieldType85, (int) (short) 0);
        mutablePeriod39.setMonths(61200010);
        mutablePeriod39.setWeeks((int) (byte) 1);
        int int94 = mutablePeriod39.size();
        org.joda.time.MutablePeriod mutablePeriod95 = mutablePeriod39.copy();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 36000L + "'", long78 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "centuries" + "'", str87, "centuries");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 8 + "'", int94 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod95);
    }

    @Test
    public void test12981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12981");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate12.minusWeeks(9);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.LocalDate localDate19 = localDate16.minusMonths(538);
        org.joda.time.DateMidnight dateMidnight20 = localDate19.toDateMidnight();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology31.getZone();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 100, dateTimeZone34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 40, (long) 429, dateTimeZone34);
        java.lang.String str38 = dateTimeZone34.getNameKey((long) 2004);
        long long41 = dateTimeZone34.adjustOffset((long) 26673869, false);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight20.withZoneRetainFields(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 26673869L + "'", long41 == 26673869L);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test12982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12982");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.getID();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod16.add(0L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        mutablePeriod16.add(0L, chronology30);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (-1), chronology30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 10, chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight33.toMutableDateTime(chronology42);
        mutableDateTime45.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.millisOfDay();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.era();
        boolean boolean50 = dateTimeZone9.equals((java.lang.Object) mutableDateTime45);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 1, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = localTime51.toDateTimeToday(dateTimeZone52);
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale55.getDisplayVariant();
        java.lang.String str58 = locale55.getDisplayVariant();
        java.lang.String str59 = dateTimeZone52.getName(60000L, locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter2.withZone(dateTimeZone52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter60.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser62 = dateTimeFormatter60.getParser();
        java.lang.StringBuffer stringBuffer63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime65 = yearMonthDay64.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfCentury();
        org.joda.time.DateTime dateTime67 = property66.getDateTime();
        org.joda.time.DateTime dateTime68 = property66.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours(292278969);
        org.joda.time.DateTime dateTime72 = dateTime68.minusWeeks(55);
        org.joda.time.DateTime dateTime74 = dateTime68.minusMonths(164);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter60.printTo(stringBuffer63, (org.joda.time.ReadableInstant) dateTime74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-00:00:00.001" + "'", str11, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-00:00:00.001" + "'", str59, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(dateTimeParser62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test12983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12983");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.add((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime41 = property38.roundCeiling();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        int int52 = dateMidnight49.getSecondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight49);
        boolean boolean54 = mutableDateTime41.isEqual((org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime41.addHours(21);
        mutableDateTime41.setYear(72000000);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test12984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12984");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(3692163384000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(7);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) (byte) 0);
        int int17 = dateTime16.getMonthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology21);
        mutablePeriod22.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod22.add(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        mutablePeriod22.add(0L, chronology36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (-1), chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 10, chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight39.toMutableDateTime(chronology48);
        mutableDateTime51.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime51.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime51.toMutableDateTime(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonthDay57.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType65 = periodType64.withWeeksRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 1970, (long) 3, periodType64);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration61, periodType64);
        org.joda.time.DateTime dateTime68 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.plusWeeks(4);
        org.joda.time.DateTime dateTime71 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime74 = dateTime68.withDurationAdded(readableDuration72, (int) '4');
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTime();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Period period78 = period76.plusYears(32770);
        int int79 = period78.getDays();
        org.joda.time.Period period81 = period78.withMonths(39);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test12985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12985");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime.Property property16 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(86399);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12986");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.add((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime41 = property38.roundCeiling();
        int int42 = mutableDateTime41.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology48);
        mutablePeriod49.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod49.add(0L);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        int int62 = dateMidnight61.getYearOfEra();
        org.joda.time.Chronology chronology63 = dateMidnight61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology63);
        mutablePeriod49.add(0L, chronology63);
        boolean boolean66 = dateTimeFieldType45.isSupported(chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.millisOfSecond();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) (short) 1, chronology63);
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category69, locale70);
        java.util.Locale locale72 = java.util.Locale.getDefault(category69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(33L, chronology63, locale72, (java.lang.Integer) 70);
        mutableDateTime41.setChronology(chronology63);
        int int76 = mutableDateTime41.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test12987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12987");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.era();
        boolean boolean43 = dateTimeZone2.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone2);
        java.util.TimeZone timeZone45 = dateTimeZone2.toTimeZone();
        java.util.Calendar.Builder builder46 = builder0.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder50 = builder46.setDate(1020, (int) (short) -1, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology55);
        mutablePeriod56.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod56.add(0L);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusDays((int) (short) -1);
        int int69 = dateMidnight68.getYearOfEra();
        org.joda.time.Chronology chronology70 = dateMidnight68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology70);
        mutablePeriod56.add(0L, chronology70);
        boolean boolean73 = dateTimeFieldType52.isSupported(chronology70);
        org.joda.time.DateTimeField dateTimeField74 = chronology70.millisOfSecond();
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long) (short) 1, chronology70);
        int[] intArray76 = localTime75.getValues();
        java.util.Calendar.Builder builder77 = builder50.setFields(intArray76);
        java.util.Calendar.Builder builder81 = builder50.setWeekDate(140, 655, 26824798);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar82 = builder81.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 26824798");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test12988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12988");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localTime2.toDateTimeToday();
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645515066009,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=31,SECOND=6,MILLISECOND=8,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test12989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12989");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(840);
        org.joda.time.LocalTime localTime22 = localTime18.minusMillis(26584792);
        org.joda.time.LocalTime.Property property23 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime24 = property23.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime26 = property23.addNoWrapToCopy(64);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test12990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12990");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(26574907);
        org.joda.time.LocalDate localDate11 = localDate7.plusWeeks(2);
        int int12 = property3.compareTo((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.Period period21 = new org.joda.time.Period(57, 595, 32770, 374, 50400000, 26680607, 26638467, (int) '#');
        org.joda.time.LocalDate localDate22 = localDate11.plus((org.joda.time.ReadablePeriod) period21);
        int int23 = localDate22.getDayOfMonth();
        org.joda.time.LocalDate.Property property24 = localDate22.weekyear();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test12991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12991");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "07:22:45.446", "07:22:45.446");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        calendar11.set(6, 2005, (-2), 53, 4, (int) (byte) -1);
        java.time.Instant instant19 = calendar11.toInstant();
        int int20 = calendar11.getFirstDayOfWeek();
        calendar11.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar11.roll((-1099), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645574400001L + "'", long6 == 1645574400001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_07:22:45.446_07:22:45.446");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test12992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12992");
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight12.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusYears((-1));
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withFieldAdded(durationFieldType20, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType27 = period26.getPeriodType();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology31);
        mutablePeriod32.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod32.add(0L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        mutablePeriod32.add(0L, chronology46);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (-1), chronology46);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        int int57 = dateMidnight56.getYearOfEra();
        org.joda.time.Chronology chronology58 = dateMidnight56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 10, chronology58);
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight49.toMutableDateTime(chronology58);
        org.joda.time.DurationField durationField62 = chronology58.months();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(36000L, periodType27, chronology58);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableInstant10, (org.joda.time.ReadableInstant) dateMidnight22, periodType27);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((int) 'u', 3, 339, 1222, 282, 374, 18, 23, periodType27);
        org.joda.time.PeriodType periodType67 = periodType27.withSecondsRemoved();
        org.joda.time.PeriodType periodType68 = periodType67.withMonthsRemoved();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 27034785, (long) 26940260, periodType68);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
    }

    @Test
    public void test12993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12993");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period1 = period0.toPeriod();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration7 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, 12);
        org.joda.time.Period period8 = new org.joda.time.Period();
        boolean boolean9 = duration3.equals((java.lang.Object) period8);
        org.joda.time.Days days10 = period8.toStandardDays();
        org.joda.time.Period period11 = period1.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((long) 10, chronology18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((long) 10, chronology22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = timeOfDay23.getFields();
        org.joda.time.Period period25 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay19, (org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean27 = timeOfDay23.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        boolean boolean38 = dateTimeFieldType26.isSupported(chronology35);
        boolean boolean39 = localTime16.isSupported(dateTimeFieldType26);
        org.joda.time.LocalTime localTime41 = localTime16.plusHours(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology45);
        mutablePeriod46.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod46.add(0L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutablePeriod46.add(0L, chronology60);
        boolean boolean63 = dateTimeFieldType42.isSupported(chronology60);
        org.joda.time.DurationField durationField64 = chronology60.hours();
        org.joda.time.DurationFieldType durationFieldType65 = durationField64.getType();
        org.joda.time.LocalTime localTime67 = localTime41.withFieldAdded(durationFieldType65, 0);
        boolean boolean68 = period11.isSupported(durationFieldType65);
        java.lang.String str69 = durationFieldType65.toString();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusDays((int) (short) -1);
        int int76 = dateMidnight75.getYearOfEra();
        org.joda.time.Chronology chronology77 = dateMidnight75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology77);
        boolean boolean79 = durationFieldType65.isSupported(chronology77);
        org.joda.time.DurationField durationField80 = chronology77.weeks();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Chronology chronology82 = chronology77.withZone(dateTimeZone81);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hours" + "'", str69, "hours");
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test12994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12994");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYear(13);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight18 = localDate15.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight18.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test12995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12995");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 2022, chronology8, locale12, (java.lang.Integer) 9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.Integer int17 = dateTimeParserBucket15.getOffsetInteger();
        long long18 = dateTimeParserBucket15.computeMillis();
        java.util.Locale locale19 = dateTimeParserBucket15.getLocale();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology23);
        mutablePeriod24.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod24.add(0L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        mutablePeriod24.add(0L, chronology38);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (-1), chronology38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 10, chronology50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight41.toMutableDateTime(chronology50);
        mutableDateTime53.setYear(2022);
        int int56 = mutableDateTime53.getYearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusDays((int) (short) -1);
        int int61 = dateMidnight60.getYearOfEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        long long63 = dateMidnight60.getMillis();
        org.joda.time.DateMidnight.Property property64 = dateMidnight60.weekyear();
        org.joda.time.DateMidnight dateMidnight65 = property64.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight66 = property64.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property64.getFieldType();
        mutableDateTime53.set(dateTimeFieldType67, 2022);
        dateTimeParserBucket15.saveField(dateTimeFieldType67, 26680607);
        java.lang.String str72 = dateTimeFieldType67.toString();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2023L + "'", long18 == 2023L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645574400001L + "'", long63 == 1645574400001L);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyear" + "'", str72, "weekyear");
    }

    @Test
    public void test12996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12996");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        int[] intArray7 = localDateTime5.getValues();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', periodType9, chronology10);
        org.joda.time.Period period13 = period11.withDays((int) ' ');
        org.joda.time.Period period15 = period13.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekyear(20);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfYear();
        org.joda.time.Chronology chronology21 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 2, 15, 27066203]");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test12997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12997");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645514982533L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test12998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12998");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology21);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfMonth(8);
        int int28 = localDate25.getMonthOfYear();
        org.joda.time.LocalDate localDate30 = localDate25.minusYears(840);
        org.joda.time.LocalDate.Property property31 = localDate30.weekyear();
        org.joda.time.Interval interval32 = localDate30.toInterval();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.Period period35 = interval32.toPeriod(periodType33);
        org.joda.time.PeriodType periodType36 = periodType33.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        mutablePeriod37.add((long) 42);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test12999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12999");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        boolean boolean6 = dateTimeFormatter5.isOffsetParsed();
        boolean boolean7 = dateTimeFormatter5.isPrinter();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test13000");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.YearMonthDay yearMonthDay67 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay68 = property2.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay70 = property2.setCopy(5);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay70.plusYears((int) '4');
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = yearMonthDay72.getFields();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay72.minusYears(158400000);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645488000001L + "'", long48 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53 + "'", int52 == 53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
        org.junit.Assert.assertNotNull(yearMonthDay75);
    }
}

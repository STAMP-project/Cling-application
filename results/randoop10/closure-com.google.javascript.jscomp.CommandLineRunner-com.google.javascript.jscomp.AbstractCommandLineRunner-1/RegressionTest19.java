import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        char[] charArray22 = new char[] { '4', '4' };
        printStream19.print(charArray22);
        printStream19.print((int) ' ');
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream19.write(byteArray32, (int) (byte) 0, (int) (byte) 1);
        char[] charArray42 = new char[] { ' ', '#', '4', 'a', '#', 'a' };
        printStream19.print(charArray42);
        printStream1.println(charArray42);
        printStream1.println((long) '#');
        printStream1.close();
        java.util.Locale locale48 = null;
        java.lang.Throwable throwable51 = null;
        java.io.IOException iOException52 = new java.io.IOException("", throwable51);
        java.lang.Throwable throwable54 = null;
        java.io.IOException iOException55 = new java.io.IOException("", throwable54);
        iOException52.addSuppressed((java.lang.Throwable) iOException55);
        java.lang.Throwable[] throwableArray57 = iOException52.getSuppressed();
        java.lang.Throwable[] throwableArray58 = iOException52.getSuppressed();
        java.lang.Throwable[] throwableArray59 = iOException52.getSuppressed();
        java.io.PrintStream printStream60 = printStream1.format(locale48, "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", (java.lang.Object[]) throwableArray59);
        printStream1.write((int) (short) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        boolean boolean66 = compilerOptions63.extractPrototypeMemberDeclarations;
        compilerOptions63.setCollapseProperties(false);
        compilerOptions63.setClosurePass(true);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions63.setInputPropertyMapSerialized(byteArray76);
        compilerOptions63.setFlowSensitiveInlineVariables(true);
        boolean boolean80 = compilerOptions63.exportTestFunctions;
        compilerOptions63.closurePass = false;
        compilerOptions63.renamePrefix = "Unversioned directory";
        compilerOptions63.crossModuleCodeMotion = false;
        compilerOptions63.setSkipAllPasses(true);
        byte[] byteArray89 = compilerOptions63.inputPropertyMapSerialized;
        printStream1.write(byteArray89);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4, a, #, a]");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setOptimizeReturns(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = compilerOptions0.propertyRenaming;
        compilerOptions0.setCrossModuleCodeMotion(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach15 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions11.setInlineVariables(reach15);
        compilerOptions11.lineBreak = false;
        compilerOptions11.setLineLengthThreshold(0);
        compilerOptions11.setAliasableGlobals("// Input %num%");
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions11.checkProvides;
        compilerOptions0.brokenClosureRequiresLevel = checkLevel23;
        compilerOptions0.setRemoveClosureAsserts(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy8.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + reach15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach15.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler7 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach12 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions8.setInlineVariables(reach12);
        boolean boolean14 = compilerOptions8.removeUnusedVars;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention18 = null;
        compilerOptions15.setCodingConvention(codingConvention18);
        boolean boolean20 = compilerOptions15.generateExports;
        compilerOptions15.gatherCssNames = false;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy23 = compilerOptions15.variableRenaming;
        compilerOptions8.variableRenaming = variableRenamingPolicy23;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle27 = null;
        compilerOptions25.messageBundle = messageBundle27;
        compilerOptions25.setUnaliasableGlobals("Unversioned directory");
        compilerOptions25.checkTypes = true;
        boolean boolean33 = compilerOptions25.generateExports;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        compilerOptions34.setRemoveUnusedVars(true);
        compilerOptions34.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy44 = compilerOptions34.propertyRenaming;
        compilerOptions25.setPropertyRenaming(propertyRenamingPolicy44);
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy23, propertyRenamingPolicy44);
        compilerOptions0.setSkipAllPasses(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + reach12 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach12.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy23 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy23.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy44 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy44.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.write((int) (byte) 100);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printStream16.println("java.io.IOException: java.io.IOException: ");
        printStream16.println('a');
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.closurePass;
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.recordFunctionInformation = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap11 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap11;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        boolean boolean19 = compilerOptions15.jqueryPass;
        boolean boolean20 = compilerOptions15.deadAssignmentElimination;
        compilerOptions15.labelRenaming = true;
        compilerOptions15.setMarkNoSideEffectCalls(false);
        compilerOptions15.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions15.foldConstants = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention32 = null;
        compilerOptions29.setCodingConvention(codingConvention32);
        compilerOptions29.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions29.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray37 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList38 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList38, locationMappingArray37);
        compilerOptions29.sourceMapLocationMappings = locationMappingList38;
        byte[] byteArray42 = new byte[] { (byte) -1 };
        compilerOptions29.setInputPropertyMapSerialized(byteArray42);
        compilerOptions15.inputPropertyMapSerialized = byteArray42;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        boolean boolean48 = compilerOptions45.extractPrototypeMemberDeclarations;
        boolean boolean49 = compilerOptions45.jqueryPass;
        compilerOptions45.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = null;
        compilerOptions52.setCodingConvention(codingConvention55);
        compilerOptions52.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel59 = compilerOptions52.checkProvides;
        compilerOptions45.brokenClosureRequiresLevel = checkLevel59;
        compilerOptions15.setCheckGlobalNamesLevel(checkLevel59);
        compilerOptions0.setCheckProvides(checkLevel59);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + checkLevel59 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel59.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        java.io.PrintStream printStream15 = new java.io.PrintStream("Unversioned directory");
        char[] charArray18 = new char[] { '4', '4' };
        printStream15.print(charArray18);
        printStream15.print((int) ' ');
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream15.write(byteArray28, (int) (byte) 0, (int) (byte) 1);
        printStream1.write(byteArray28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = null;
        compilerOptions33.setCodingConvention(codingConvention36);
        compilerOptions33.setGeneratePseudoNames(true);
        compilerOptions33.inlineLocalFunctions = false;
        compilerOptions33.setIdeMode(true);
        compilerOptions33.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel52 = compilerOptions46.checkGlobalThisLevel;
        compilerOptions33.checkMissingReturn = checkLevel52;
        printStream1.println((java.lang.Object) compilerOptions33);
        compilerOptions33.setCheckSymbols(true);
        boolean boolean57 = compilerOptions33.labelRenaming;
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + checkLevel52 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel52.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        compilerOptions0.setRemoveAbstractMethods(false);
        compilerOptions0.setClosurePass(false);
        compilerOptions0.setLineLengthThreshold(97);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        compilerOptions0.setTransformAMDToCJSModules(false);
        boolean boolean12 = compilerOptions0.checkTypes;
        boolean boolean13 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setExportTestFunctions(false);
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.computeFunctionSideEffects = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        compilerOptions0.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions0.setOutputCharset("java.io.IOException: Unversioned directory");
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap16 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap16;
        compilerOptions0.crossModuleMethodMotion = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach24 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions20.setInlineVariables(reach24);
        compilerOptions20.setPrintInputDelimiter(true);
        boolean boolean28 = compilerOptions20.closurePass;
        compilerOptions20.setOutputCharset("java.io.IOException");
        compilerOptions20.setCheckControlStructures(true);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy33 = compilerOptions20.anonymousFunctionNaming;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy33;
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + reach24 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach24.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy33 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy33.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setLabelRenaming(true);
        compilerOptions12.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions12.checkGlobalThisLevel;
        compilerOptions0.setCheckUnreachableCode(checkLevel17);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap19 = compilerOptions0.getTweakReplacements();
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap8;
        compilerOptions0.setInlineConstantVars(false);
        boolean boolean12 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        boolean boolean13 = compilerOptions0.checkSymbols;
        compilerOptions0.setOptimizeParameters(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.inlineVariables = false;
        boolean boolean11 = compilerOptions0.inlineFunctions;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("// Input %num%");
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        compilerOptions0.computeFunctionSideEffects = false;
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = null;
        compilerOptions0.setDefineReplacements(strMap18);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setLabelRenaming(true);
        compilerOptions31.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean36 = compilerOptions31.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format37 = compilerOptions31.sourceMapFormat;
        compilerOptions31.setCollapseAnonymousFunctions(true);
        printStream1.print((java.lang.Object) compilerOptions31);
        compilerOptions31.removeUnusedPrototypeProperties = true;
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(format37);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap8;
        compilerOptions0.setInlineConstantVars(false);
        boolean boolean12 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        boolean boolean13 = compilerOptions0.checkSymbols;
        boolean boolean14 = compilerOptions0.deadAssignmentElimination;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions17.checkProvides;
        compilerOptions11.setReportUnknownTypes(checkLevel24);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel24);
        compilerOptions0.checkMissingGetCssNameBlacklist = "";
        java.util.Set<java.lang.String> strSet29 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean32 = compilerOptions0.computeFunctionSideEffects;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setLabelRenaming(true);
        compilerOptions33.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean38 = compilerOptions33.labelRenaming;
        compilerOptions33.ambiguateProperties = false;
        boolean boolean41 = compilerOptions33.shouldColorizeErrorOutput();
        compilerOptions33.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention47 = null;
        compilerOptions44.setCodingConvention(codingConvention47);
        boolean boolean49 = compilerOptions44.computeFunctionSideEffects;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode50 = compilerOptions44.getLanguageIn();
        compilerOptions33.setLanguageOut(languageMode50);
        compilerOptions0.setLanguageIn(languageMode50);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.setLabelRenaming(true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + languageMode50 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode50.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        java.lang.String str6 = compiler0.getSourceLine("Unversioned directory", (int) (byte) -1);
        compiler0.disableThreads();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker8 = null;
        compiler0.tracker = performanceTracker8;
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler();
        double double11 = compiler10.getProgress();
        compiler10.reportCodeChange();
        java.lang.String str13 = compiler10.getAstDotGraph();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState14 = compiler10.getState();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState15 = compiler10.getState();
        compiler0.setState(intermediateState15);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(intermediateState14);
        org.junit.Assert.assertNotNull(intermediateState15);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode13 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach18 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions14.setInlineVariables(reach18);
        compilerOptions14.setPrintInputDelimiter(true);
        boolean boolean22 = compilerOptions14.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle23 = null;
        compilerOptions14.messageBundle = messageBundle23;
        compilerOptions14.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        compilerOptions27.stripTypePrefixes = strSet34;
        compilerOptions14.setAliasableStrings(strSet34);
        compilerOptions0.stripNameSuffixes = strSet34;
        compilerOptions0.generateExports = false;
        compilerOptions0.setFoldConstants(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + tracerMode13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode13.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + reach18 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach18.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.prettyPrint = false;
        compilerOptions0.markAsCompiled = false;
        compilerOptions0.closurePass = false;
        compilerOptions0.flowSensitiveInlineVariables = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream1.println(charArray13);
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup21;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup23 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder24 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator26 = null;
        com.google.javascript.jscomp.SourceFile sourceFile27 = builder24.buildFromGenerator("hi!", generator26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { diagnosticGroup21, diagnosticGroup23, sourceFile27 };
        java.io.PrintStream printStream29 = printStream19.printf("2019/07/12 07:12", objArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("Unversioned directory");
        char[] charArray35 = new char[] { '4', '4' };
        printStream32.print(charArray35);
        printStream32.print((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        printStream32.write((int) '#');
        java.util.Locale locale43 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream47 = printStream32.format(locale43, "Unversioned directory", objArray46);
        java.io.PrintStream printStream48 = printStream29.format("hi!", objArray46);
        java.io.PrintStream printStream49 = printStream1.printf(locale16, "java.io.IOException: ", objArray46);
        printStream49.print("java.io.IOException");
        printStream49.println((long) (short) 0);
        printStream49.write(100);
        printStream49.println((double) (byte) 0);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup21);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup23);
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertNotNull(objArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream49);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.instrumentationTemplate = "java.io.IOException";
        boolean boolean22 = compilerOptions12.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.aggressiveVarCheck = checkLevel23;
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.generatePseudoNames = true;
        compilerOptions0.setRemoveUnusedPrototypeProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.convertToDottedProperties = true;
        boolean boolean37 = compilerOptions31.inlineConstantVars;
        boolean boolean38 = compilerOptions31.extractPrototypeMemberDeclarations;
        boolean boolean39 = compilerOptions31.reserveRawExports;
        compilerOptions31.computeFunctionSideEffects = false;
        compilerOptions31.setOptimizeCalls(true);
        com.google.javascript.jscomp.MessageBundle messageBundle44 = compilerOptions31.messageBundle;
        boolean boolean45 = compilerOptions31.checkSymbols;
        com.google.javascript.jscomp.ErrorFormat errorFormat46 = compilerOptions31.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat46);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(messageBundle44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(errorFormat46);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setNameReferenceReportPath("Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        boolean boolean11 = compilerOptions8.exportTestFunctions;
        compilerOptions8.lineBreak = false;
        compilerOptions8.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap16 = null;
        compilerOptions8.customPasses = customPassExecutionTimeMultimap16;
        compilerOptions8.setClosurePass(false);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        compilerOptions8.setDefineReplacements(strMap20);
        boolean boolean22 = compilerOptions8.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setPropertyAffinity(true);
        boolean boolean30 = compilerOptions23.closurePass;
        compilerOptions23.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        byte[] byteArray35 = compilerOptions33.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach36 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions33.setInlineFunctions(reach36);
        compilerOptions23.setRemoveUnusedVariables(reach36);
        compilerOptions8.setInlineVariables(reach36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGenerateExports(true);
        compilerOptions40.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean49 = compilerOptions40.foldConstants;
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions40.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.enableExternExports(true);
        java.util.Set<java.lang.String> strSet54 = compilerOptions51.stripTypes;
        compilerOptions51.setRemoveUnusedVars(true);
        compilerOptions51.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet61 = compilerOptions60.stripNamePrefixes;
        byte[] byteArray62 = compilerOptions60.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach63 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions60.setInlineFunctions(reach63);
        compilerOptions51.setRemoveUnusedVariable(reach63);
        compilerOptions40.setRemoveUnusedVariables(reach63);
        compilerOptions8.setInlineVariables(reach63);
        compilerOptions0.setRemoveUnusedVariable(reach63);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler69 = compilerOptions0.getAliasTransformationHandler();
        boolean boolean70 = compilerOptions0.collapseProperties;
        java.lang.String str71 = compilerOptions0.syntheticBlockEndMarker;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertTrue("'" + reach36 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach36.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertTrue("'" + reach63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach63.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNotNull(aliasTransformationHandler69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap53 = compilerOptions0.getTweakReplacements();
        compilerOptions0.removeDeadCode = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        byte[] byteArray13 = new byte[] { (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setCommonJSModulePathPrefix("hi!");
        boolean boolean17 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode18 = compilerOptions0.getLanguageOut();
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(languageMode18);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setLabelRenaming(true);
        compilerOptions7.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean12 = compilerOptions7.labelRenaming;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions7.cssRenamingMap = cssRenamingMap13;
        java.util.Set<java.lang.String> strSet15 = compilerOptions7.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream16 = strSet15.stream();
        compilerOptions0.setStripTypes(strSet15);
        boolean boolean18 = compilerOptions0.markNoSideEffectCalls;
        java.util.Set<java.lang.String> strSet19 = compilerOptions0.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention23 = null;
        compilerOptions20.setCodingConvention(codingConvention23);
        boolean boolean25 = compilerOptions20.generateExports;
        compilerOptions20.gatherCssNames = false;
        boolean boolean28 = compilerOptions20.optimizeReturns;
        compilerOptions20.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet31 = compilerOptions20.aliasableStrings;
        compilerOptions20.generateExports = false;
        boolean boolean34 = compilerOptions20.assumeStrictThis();
        boolean boolean35 = compilerOptions20.markNoSideEffectCalls;
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = null;
        compilerOptions20.setTweakReplacements(strMap36);
        compilerOptions20.setInlineLocalFunctions(false);
        compilerOptions20.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CheckLevel checkLevel42 = null;
        compilerOptions20.setCheckGlobalThisLevel(checkLevel42);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions20.brokenClosureRequiresLevel;
        compilerOptions0.brokenClosureRequiresLevel = checkLevel44;
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        com.google.javascript.jscomp.Compiler compiler17 = new com.google.javascript.jscomp.Compiler(printStream16);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState18 = compiler17.getState();
        com.google.javascript.jscomp.Compiler compiler19 = new com.google.javascript.jscomp.Compiler();
        double double20 = compiler19.getProgress();
        compiler19.reportCodeChange();
        java.lang.String str22 = compiler19.getAstDotGraph();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState23 = compiler19.getState();
        compiler19.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState25 = compiler19.getState();
        compiler17.setState(intermediateState25);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(intermediateState18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(intermediateState23);
        org.junit.Assert.assertNotNull(intermediateState25);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions8.checkGlobalThisLevel;
        compilerOptions8.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing16 = compilerOptions8.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing16);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy18 = compilerOptions0.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        compilerOptions19.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean28 = compilerOptions19.foldConstants;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions19.brokenClosureRequiresLevel;
        compilerOptions0.setCheckUnreachableCode(checkLevel29);
        compilerOptions0.removeUnusedVars = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach37 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions33.setInlineVariables(reach37);
        compilerOptions33.setPrintInputDelimiter(true);
        boolean boolean41 = compilerOptions33.closurePass;
        compilerOptions33.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions33.brokenClosureRequiresLevel;
        boolean boolean45 = compilerOptions33.checkSymbols;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach50 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions46.setInlineVariables(reach50);
        boolean boolean52 = compilerOptions46.jqueryPass;
        boolean boolean53 = compilerOptions46.closurePass;
        com.google.javascript.jscomp.CheckLevel checkLevel54 = compilerOptions46.checkGlobalThisLevel;
        compilerOptions33.setCheckUnreachableCode(checkLevel54);
        compilerOptions0.checkUnreachableCode = checkLevel54;
        compilerOptions0.setOptimizeArgumentsArray(false);
        compilerOptions0.setExportTestFunctions(true);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing16.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy18 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy18.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + reach37 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach37.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + reach50 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach50.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + checkLevel54 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel54.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        printStream1.println((float) (byte) -1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet39 = compilerOptions33.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel40 = null;
        compilerOptions33.setCheckGlobalThisLevel(checkLevel40);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode42 = compilerOptions33.getTracerMode();
        printStream1.print((java.lang.Object) tracerMode42);
        printStream1.write((int) ' ');
        printStream1.println((-1.0d));
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + tracerMode42 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode42.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setInlineFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing23 = compilerOptions0.getTweakProcessing();
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler24 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.checkSuspiciousCode = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing23 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing23.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(aliasTransformationHandler24);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setIdeMode(true);
        boolean boolean10 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setShadowVariables(false);
        boolean boolean13 = compilerOptions0.checkSuspiciousCode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions14.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions14.reportMissingOverride;
        compilerOptions14.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap21 = null;
        compilerOptions14.cssRenamingMap = cssRenamingMap21;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet31 = compilerOptions30.stripNamePrefixes;
        compilerOptions23.setIdGenerators(strSet31);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = null;
        compilerOptions33.setCodingConvention(codingConvention36);
        compilerOptions33.setGeneratePseudoNames(true);
        compilerOptions33.inlineLocalFunctions = false;
        compilerOptions33.setIdeMode(true);
        compilerOptions33.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel52 = compilerOptions46.checkGlobalThisLevel;
        compilerOptions33.checkMissingReturn = checkLevel52;
        compilerOptions23.aggressiveVarCheck = checkLevel52;
        compilerOptions14.setCheckMissingGetCssNameLevel(checkLevel52);
        compilerOptions0.setReportMissingOverride(checkLevel52);
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        com.google.javascript.jscomp.MessageBundle messageBundle59 = compilerOptions0.messageBundle;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + checkLevel52 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel52.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(messageBundle59);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream8.print((double) '4');
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        byte[] byteArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream8.write(byteArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        com.google.javascript.rhino.Node node3 = compiler1.getRoot();
        compiler1.disableThreads();
        com.google.javascript.jscomp.JSModule jSModule5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray6 = compiler1.toSourceArray(jSModule5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions0.setTracer(tracerMode3);
        java.lang.String str5 = compilerOptions0.checkMissingGetCssNameBlacklist;
        java.lang.String str6 = compilerOptions0.renamePrefix;
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        compilerOptions9.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean18 = compilerOptions9.deadAssignmentElimination;
        boolean boolean19 = compilerOptions9.removeUnusedLocalVars;
        compilerOptions9.setCollapsePropertiesOnExternTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.setCollapseProperties(false);
        compilerOptions22.setClosurePass(true);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions22.setInputPropertyMapSerialized(byteArray35);
        compilerOptions22.setFlowSensitiveInlineVariables(true);
        boolean boolean39 = compilerOptions22.computeFunctionSideEffects;
        compilerOptions22.setAcceptConstKeyword(true);
        compilerOptions22.setAliasKeywords(false);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions22.checkProvides;
        compilerOptions9.setCheckMissingReturn(checkLevel44);
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel44;
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.MessageBundle messageBundle10 = null;
        compilerOptions0.messageBundle = messageBundle10;
        boolean boolean12 = compilerOptions0.optimizeCalls;
        boolean boolean13 = compilerOptions0.smartNameRemoval;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode14 = compilerOptions0.getLanguageOut();
        compilerOptions0.setNameReferenceGraphPath("Unversioned directory");
        boolean boolean17 = compilerOptions0.checkSymbols;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList18 = compilerOptions0.sourceMapLocationMappings;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(languageMode14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locationMappingList18);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        java.lang.Object obj11 = compilerOptions0.clone();
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        boolean boolean17 = compilerOptions12.computeFunctionSideEffects;
        boolean boolean18 = compilerOptions12.printInputDelimiter;
        compilerOptions12.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions12.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions12.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions12.setInputPropertyMapSerialized(byteArray27);
        compilerOptions0.setInputPropertyMapSerialized(byteArray27);
        compilerOptions0.setTweakToDoubleLiteral("java.io.IOException: java.io.IOException", (double) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder0.buildFromCode("// Input %num%", "hi!");
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder0.buildFromCode("java.io.IOException: ", "java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Builder builder17 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator19 = null;
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder17.buildFromGenerator("hi!", generator19);
        com.google.javascript.jscomp.SourceFile.Generator generator22 = null;
        com.google.javascript.jscomp.SourceFile sourceFile23 = builder17.buildFromGenerator("hi!", generator22);
        java.nio.charset.Charset charset24 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder25 = builder17.withCharset(charset24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.SourceFile sourceFile28 = builder25.buildFromGenerator("-1", generator27);
        com.google.javascript.jscomp.SourceFile sourceFile34 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException", "", "Unversioned directory");
        java.io.Reader reader35 = sourceFile34.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile36 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: ", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile37 = builder25.buildFromReader("-1", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile38 = builder0.buildFromReader("java.io.IOException: java.io.IOException: java.io.IOException: ", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile40 = builder0.buildFromFile("-1");
        com.google.javascript.jscomp.SourceFile.Generator generator42 = null;
        com.google.javascript.jscomp.SourceFile sourceFile43 = builder0.buildFromGenerator("java.io.IOException: ", generator42);
        com.google.javascript.jscomp.SourceFile.Builder builder45 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator47 = null;
        com.google.javascript.jscomp.SourceFile sourceFile48 = builder45.buildFromGenerator("hi!", generator47);
        java.nio.charset.Charset charset49 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder50 = builder45.withCharset(charset49);
        java.nio.charset.Charset charset51 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder52 = builder45.withCharset(charset51);
        com.google.javascript.jscomp.SourceFile.Builder builder54 = builder45.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Generator generator56 = null;
        com.google.javascript.jscomp.SourceFile sourceFile57 = builder54.buildFromGenerator("java.io.IOException: ", generator56);
        com.google.javascript.jscomp.SourceFile.Builder builder59 = builder54.withOriginalPath("hi!");
        java.nio.charset.Charset charset60 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder61 = builder54.withCharset(charset60);
        java.nio.charset.Charset charset62 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder63 = builder54.withCharset(charset62);
        java.nio.charset.Charset charset64 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder65 = builder63.withCharset(charset64);
        com.google.javascript.jscomp.SourceFile sourceFile69 = com.google.javascript.jscomp.SourceFile.fromFile("java.io.IOException: Unversioned directory");
        sourceFile69.clearCachedSource();
        java.io.Reader reader71 = null; // flaky: sourceFile69.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile72 = null; // flaky: com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: ", reader71);
        com.google.javascript.jscomp.SourceFile sourceFile73 = null; // flaky: builder63.buildFromReader("\ufffd\nddd", reader71);
        com.google.javascript.jscomp.SourceFile sourceFile74 = null; // flaky: builder0.buildFromReader("4432#0.010\001\001\000\001\000\ufffd", reader71);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(sourceFile28);
        org.junit.Assert.assertNotNull(sourceFile34);
        org.junit.Assert.assertNotNull(reader35);
        org.junit.Assert.assertNotNull(sourceFile36);
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertNotNull(sourceFile40);
        org.junit.Assert.assertNotNull(sourceFile43);
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(sourceFile57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(sourceFile69);
// flaky:         org.junit.Assert.assertNotNull(reader71);
// flaky:         org.junit.Assert.assertNotNull(sourceFile72);
// flaky:         org.junit.Assert.assertNotNull(sourceFile73);
// flaky:         org.junit.Assert.assertNotNull(sourceFile74);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setShadowVariables(false);
        compilerOptions0.setCheckSuspiciousCode(false);
        java.lang.String str21 = compilerOptions0.sourceMapOutputPath;
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention25 = null;
        compilerOptions22.setCodingConvention(codingConvention25);
        compilerOptions22.setGeneratePseudoNames(true);
        compilerOptions22.inlineLocalFunctions = false;
        compilerOptions22.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions39.checkProvides;
        compilerOptions33.setReportUnknownTypes(checkLevel46);
        compilerOptions22.setCheckGlobalNamesLevel(checkLevel46);
        compilerOptions22.skipAllCompilerPasses();
        compilerOptions22.checkMissingGetCssNameBlacklist = "hi!";
        boolean boolean52 = compilerOptions22.devirtualizePrototypeMethods;
        compilerOptions22.crossModuleMethodMotion = false;
        compilerOptions22.moveFunctionDeclarations = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        boolean boolean60 = compilerOptions57.extractPrototypeMemberDeclarations;
        compilerOptions57.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention66 = null;
        compilerOptions63.setCodingConvention(codingConvention66);
        compilerOptions63.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel70 = compilerOptions63.checkProvides;
        compilerOptions57.setReportUnknownTypes(checkLevel70);
        compilerOptions22.checkRequires = checkLevel70;
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel70);
        boolean boolean74 = compilerOptions0.isRemoveUnusedClassProperties();
        compilerOptions0.removeUnusedLocalVars = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + checkLevel70 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel70.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: ";
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.setCollapseProperties(false);
        compilerOptions16.setClosurePass(true);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions16.setInputPropertyMapSerialized(byteArray29);
        compilerOptions16.setAliasAllStrings(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.enableExternExports(true);
        java.util.Set<java.lang.String> strSet36 = compilerOptions33.stripTypes;
        compilerOptions16.stripTypePrefixes = strSet36;
        compilerOptions0.setAliasableStrings(strSet36);
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.WarningsGuard warningsGuard41 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.addWarningsGuard(warningsGuard41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap12 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap12);
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.lineBreak = false;
        compilerOptions0.prettyPrint = true;
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions0.checkProvides;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        printStream1.print(10L);
        printStream1.write(1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        compilerOptions18.setCollapseProperties(false);
        compilerOptions18.setClosurePass(true);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions18.setInputPropertyMapSerialized(byteArray31);
        printStream1.write(byteArray31);
        printStream1.println(0.0d);
        printStream1.print((double) 1);
        printStream1.println(false);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: ", 100);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.convertToDottedProperties = true;
        boolean boolean16 = compilerOptions10.inlineConstantVars;
        boolean boolean17 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions10.gatherCssNames;
        compilerOptions10.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions10.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        boolean boolean28 = compilerOptions24.jqueryPass;
        boolean boolean29 = compilerOptions24.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setLabelRenaming(true);
        compilerOptions30.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean35 = compilerOptions30.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format36 = compilerOptions30.sourceMapFormat;
        compilerOptions24.setSourceMapFormat(format36);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing38 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions24.setTweakProcessing(tweakProcessing38);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions40.checkProvides;
        java.util.Set<java.lang.String> strSet48 = compilerOptions40.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream49 = strSet48.stream();
        compilerOptions24.stripTypes = strSet48;
        compilerOptions10.setStripNameSuffixes(strSet48);
        compilerOptions10.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap54 = compilerOptions10.customPasses;
        java.util.Set<java.lang.String> strSet55 = compilerOptions10.stripNameSuffixes;
        compilerOptions0.setIdGenerators(strSet55);
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(format36);
        org.junit.Assert.assertTrue("'" + tweakProcessing38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing38.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap54);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList15);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        boolean boolean20 = compilerOptions0.optimizeCalls;
        compilerOptions0.renamePrefix = "";
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions0.checkUnreachableCode;
        compilerOptions0.setDefineToStringLiteral("java.io.IOException", "2019/07/12 07:12");
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard27 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard27);
        compilerOptions0.setOptimizeReturns(false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        boolean boolean13 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing14 = null;
        compilerOptions0.setTweakProcessing(tweakProcessing14);
        compilerOptions0.devirtualizePrototypeMethods = false;
        compilerOptions0.setInferTypes(false);
        compilerOptions0.removeUnusedVars = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        printStream1.print(10L);
        printStream1.println((long) (short) 0);
        printStream1.print((long) (byte) 1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.util.Set<java.lang.String> strSet44 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.checkSymbols = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap47 = compilerOptions0.getDefineReplacements();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setPreferLineBreakAtEndOfFile(true);
        compilerOptions0.coalesceVariableNames = false;
        compilerOptions0.setSyntheticBlockStartMarker("Unversioned directory");
        java.lang.String str17 = compilerOptions0.syntheticBlockEndMarker;
        compilerOptions0.setRenamePrefixNamespace("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.renamePrefix = "-1";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        compilerOptions0.setExternExportsPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet10 = compilerOptions9.stripNamePrefixes;
        byte[] byteArray11 = compilerOptions9.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach12 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions9.setInlineFunctions(reach12);
        compilerOptions9.setCollapsePropertiesOnExternTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions16.setInlineVariables(reach20);
        compilerOptions16.setPrintInputDelimiter(true);
        boolean boolean24 = compilerOptions16.closurePass;
        compilerOptions16.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CheckLevel checkLevel27 = compilerOptions16.brokenClosureRequiresLevel;
        compilerOptions9.setCheckGlobalThisLevel(checkLevel27);
        compilerOptions9.setOptimizeArgumentsArray(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.enableExternExports(true);
        java.util.Set<java.lang.String> strSet34 = compilerOptions31.stripTypes;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode35 = compilerOptions31.getTracerMode();
        compilerOptions9.setTracerMode(tracerMode35);
        compilerOptions0.setTracerMode(tracerMode35);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + reach12 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach12.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + checkLevel27 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel27.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + tracerMode35 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode35.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet16 = compilerOptions10.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel17);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = compilerOptions10.getTracerMode();
        compilerOptions0.setTracer(tracerMode19);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap21 = compilerOptions0.getTweakReplacements();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + tracerMode19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode19.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        boolean boolean9 = compilerOptions0.optimizeCalls;
        compilerOptions0.setInlineGetters(false);
        compilerOptions0.setAliasAllStrings(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.syntheticBlockStartMarker = "hi!";
        compilerOptions0.setOutputCharset("4432#Unversionedhi!rector true\n0\n");
        com.google.javascript.jscomp.CodingConvention codingConvention5 = compilerOptions0.getCodingConvention();
        org.junit.Assert.assertNull(codingConvention5);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        compilerOptions0.recordFunctionInformation = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap16 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap16;
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        char[] charArray22 = new char[] { '4', '4' };
        printStream19.print(charArray22);
        printStream19.print((int) ' ');
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream19, false);
        printStream19.write((int) '#');
        printStream19.print((float) (short) 0);
        java.io.PrintStream printStream33 = new java.io.PrintStream("Unversioned directory");
        char[] charArray36 = new char[] { '4', '4' };
        printStream33.print(charArray36);
        printStream33.print((int) ' ');
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream33.write(byteArray46, (int) (byte) 0, (int) (byte) 1);
        printStream19.write(byteArray46);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention54 = null;
        compilerOptions51.setCodingConvention(codingConvention54);
        compilerOptions51.setGeneratePseudoNames(true);
        compilerOptions51.inlineLocalFunctions = false;
        compilerOptions51.setIdeMode(true);
        compilerOptions51.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setRewriteNewDateGoogNow(true);
        boolean boolean67 = compilerOptions64.extractPrototypeMemberDeclarations;
        compilerOptions64.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel70 = compilerOptions64.checkGlobalThisLevel;
        compilerOptions51.checkMissingReturn = checkLevel70;
        printStream19.println((java.lang.Object) compilerOptions51);
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions73.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention76 = null;
        compilerOptions73.setCodingConvention(codingConvention76);
        boolean boolean78 = compilerOptions73.generateExports;
        compilerOptions73.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing81 = compilerOptions73.getTweakProcessing();
        compilerOptions51.setTweakProcessing(tweakProcessing81);
        compilerOptions0.setTweakProcessing(tweakProcessing81);
        compilerOptions0.setInlineVariables(false);
        compilerOptions0.foldConstants = false;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + checkLevel70 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel70.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing81 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing81.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.ErrorFormat errorFormat8 = compilerOptions0.errorFormat;
        byte[] byteArray9 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setDefineToDoubleLiteral("java.io.IOException: ", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet14 = compilerOptions13.stripNamePrefixes;
        byte[] byteArray15 = compilerOptions13.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup16 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup16;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention21 = null;
        compilerOptions18.setCodingConvention(codingConvention21);
        compilerOptions18.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions18.checkProvides;
        compilerOptions13.setWarningLevel(diagnosticGroup16, checkLevel25);
        java.util.Set<java.lang.String> strSet27 = compilerOptions13.stripNamePrefixes;
        compilerOptions13.setComputeFunctionSideEffects(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.setCollapseProperties(false);
        compilerOptions30.setClosurePass(true);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions30.setInputPropertyMapSerialized(byteArray43);
        compilerOptions30.setFlowSensitiveInlineVariables(true);
        boolean boolean47 = compilerOptions30.exportTestFunctions;
        compilerOptions30.closurePass = false;
        compilerOptions30.renamePrefix = "Unversioned directory";
        compilerOptions30.setMoveFunctionDeclarations(false);
        compilerOptions30.setProcessObjectPropertyString(false);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions13.setCheckGlobalThisLevel(checkLevel56);
        compilerOptions0.reportMissingOverride = checkLevel56;
        compilerOptions0.setNameReferenceGraphPath("hi!");
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(byteArray15);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup16);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkRequires;
        java.lang.String str6 = compilerOptions0.inputDelimiter;
        boolean boolean7 = compilerOptions0.inlineGetters;
        boolean boolean8 = compilerOptions0.foldConstants;
        boolean boolean9 = compilerOptions0.optimizeCalls;
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "// Input %num%" + "'", str6, "// Input %num%");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean13 = compilerOptions8.labelRenaming;
        compilerOptions8.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        byte[] byteArray18 = compilerOptions16.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup19 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup19;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        compilerOptions16.setWarningLevel(diagnosticGroup19, checkLevel28);
        compilerOptions8.checkUnreachableCode = checkLevel28;
        compilerOptions0.setAggressiveVarCheck(checkLevel28);
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean34 = compilerOptions0.getInferTypes();
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        boolean boolean37 = compilerOptions0.aliasKeywords;
        compilerOptions0.removeUnusedPrototypeProperties = true;
        boolean boolean40 = compilerOptions0.generateExports;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(byteArray18);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup19);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.disambiguateProperties = true;
        boolean boolean23 = compilerOptions0.inlineConstantVars;
        compilerOptions0.setCheckSymbols(true);
        compilerOptions0.setDisambiguateProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet29 = compilerOptions28.stripNamePrefixes;
        byte[] byteArray30 = compilerOptions28.inputVariableMapSerialized;
        boolean boolean31 = compilerOptions28.disambiguateProperties;
        compilerOptions28.setReplaceStringsPlaceholderToken("java.io.IOException: ");
        compilerOptions28.setDefineToNumberLiteral("Unversioned directory", (int) (byte) 10);
        compilerOptions28.optimizeParameters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        compilerOptions39.setCollapseProperties(false);
        compilerOptions39.setClosurePass(true);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions39.setInputPropertyMapSerialized(byteArray52);
        compilerOptions39.setFlowSensitiveInlineVariables(true);
        boolean boolean56 = compilerOptions39.exportTestFunctions;
        compilerOptions39.closurePass = false;
        compilerOptions39.renamePrefix = "Unversioned directory";
        compilerOptions39.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet63 = compilerOptions39.stripTypePrefixes;
        compilerOptions28.setExtraAnnotationNames(strSet63);
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention68 = null;
        compilerOptions65.setCodingConvention(codingConvention68);
        boolean boolean70 = compilerOptions65.computeFunctionSideEffects;
        boolean boolean71 = compilerOptions65.printInputDelimiter;
        compilerOptions65.setGeneratePseudoNames(true);
        boolean boolean74 = compilerOptions65.disambiguateProperties;
        java.util.Set<java.lang.String> strSet75 = compilerOptions65.aliasableStrings;
        compilerOptions65.coalesceVariableNames = true;
        com.google.javascript.jscomp.ErrorFormat errorFormat78 = compilerOptions65.errorFormat;
        compilerOptions28.errorFormat = errorFormat78;
        compilerOptions0.setErrorFormat(errorFormat78);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(errorFormat78);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping7 = null;
        boolean boolean8 = locationMappingList1.add(locationMapping7);
        java.lang.Object[] objArray9 = locationMappingList1.toArray();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping10 = null;
        boolean boolean11 = locationMappingList1.add(locationMapping10);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping12 = null;
        boolean boolean13 = locationMappingList1.add(locationMapping12);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping15 = null;
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping16 = locationMappingList1.set((int) (byte) 1, locationMapping15);
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList1.replaceAll(locationMappingUnaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[null]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(locationMapping16);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream16.write((int) (short) 1);
        printStream16.write((int) '#');
        java.io.PrintStream printStream28 = new java.io.PrintStream("Unversioned directory");
        char[] charArray31 = new char[] { '4', '4' };
        printStream28.print(charArray31);
        printStream28.print((int) ' ');
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream28, false);
        printStream28.write((int) '#');
        printStream28.print((float) (short) 0);
        java.io.PrintStream printStream42 = new java.io.PrintStream("Unversioned directory");
        char[] charArray45 = new char[] { '4', '4' };
        printStream42.print(charArray45);
        printStream42.print((int) ' ');
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream42.write(byteArray55, (int) (byte) 0, (int) (byte) 1);
        printStream28.write(byteArray55);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention63 = null;
        compilerOptions60.setCodingConvention(codingConvention63);
        compilerOptions60.setGeneratePseudoNames(true);
        compilerOptions60.inlineLocalFunctions = false;
        compilerOptions60.setIdeMode(true);
        compilerOptions60.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions73.setRewriteNewDateGoogNow(true);
        boolean boolean76 = compilerOptions73.extractPrototypeMemberDeclarations;
        compilerOptions73.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel79 = compilerOptions73.checkGlobalThisLevel;
        compilerOptions60.checkMissingReturn = checkLevel79;
        printStream28.println((java.lang.Object) compilerOptions60);
        java.io.PrintStream printStream83 = new java.io.PrintStream("Unversioned directory");
        char[] charArray86 = new char[] { '4', '4' };
        printStream83.print(charArray86);
        printStream83.print((int) ' ');
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream83);
        java.io.PrintStream printStream92 = new java.io.PrintStream("Unversioned directory");
        char[] charArray95 = new char[] { '4', '4' };
        printStream92.print(charArray95);
        printStream83.println(charArray95);
        printStream28.println(charArray95);
        printStream16.println(charArray95);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + checkLevel79 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel79.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[4, 4]");
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        boolean boolean13 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        java.lang.String str14 = compilerOptions0.syntheticBlockEndMarker;
        boolean boolean15 = compilerOptions0.checkSuspiciousCode;
        compilerOptions0.lineBreak = true;
        compilerOptions0.deadAssignmentElimination = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.labelRenaming;
        compilerOptions20.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet29 = compilerOptions28.stripNamePrefixes;
        byte[] byteArray30 = compilerOptions28.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup31 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup31;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = null;
        compilerOptions33.setCodingConvention(codingConvention36);
        compilerOptions33.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions33.checkProvides;
        compilerOptions28.setWarningLevel(diagnosticGroup31, checkLevel40);
        compilerOptions20.checkUnreachableCode = checkLevel40;
        compilerOptions20.setCrossModuleCodeMotion(true);
        compilerOptions20.setOutputCharset("java.io.IOException: Unversioned directory");
        compilerOptions20.setPrettyPrint(false);
        compilerOptions20.setRuntimeTypeCheck(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        compilerOptions51.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel57 = compilerOptions51.checkGlobalThisLevel;
        compilerOptions51.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions51.checkMissingGetCssNameLevel;
        compilerOptions51.setDevirtualizePrototypeMethods(true);
        compilerOptions51.setTweakToStringLiteral("// Input %num%", "");
        java.util.Set<java.lang.String> strSet66 = compilerOptions51.stripNameSuffixes;
        compilerOptions20.aliasableStrings = strSet66;
        compilerOptions0.setStripNamePrefixes(strSet66);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray30);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup31);
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + checkLevel57 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel57.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet66);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setInlineProperties(true);
        compilerOptions0.inputDelimiter = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setDefineToBooleanLiteral("2019/07/12 07:12", false);
        compilerOptions0.setNameReferenceReportPath("hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode10 = compilerOptions0.getLanguageIn();
        boolean boolean11 = compilerOptions0.isRemoveUnusedClassProperties();
        compilerOptions0.setShadowVariables(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + languageMode10 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode10.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions0.checkProvides;
        java.lang.String str43 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setDefineToDoubleLiteral("java.io.IOException: java.io.IOException: java.io.IOException: ", (double) 2);
        boolean boolean47 = compilerOptions0.gatherCssNames;
        boolean boolean48 = compilerOptions0.convertToDottedProperties;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        byte[] byteArray13 = new byte[] { (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setCommonJSModulePathPrefix("hi!");
        compilerOptions0.skipAllCompilerPasses();
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing18 = compilerOptions0.getTweakProcessing();
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + tweakProcessing18 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing18.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode4 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageIn(languageMode4);
        compilerOptions0.setInlineVariables(false);
        compilerOptions0.setRemoveTryCatchFinally(false);
        compilerOptions0.setAliasExternals(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + languageMode4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode4.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "// Input %num%", "java.io.IOException", "", "// Input %num%", "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "Unversioned directory", "java.io.IOException: java.io.IOException: 2019/07/12 07:12" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator14 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        compilerOptions15.optimizeParameters = true;
        compilerOptions15.setAliasAllStrings(true);
        int int22 = locationMappingList1.lastIndexOf((java.lang.Object) true);
        locationMappingList1.clear();
        java.lang.Object[] objArray24 = locationMappingList1.toArray();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.util.Set<java.lang.String> strSet44 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.enableExternExports(false);
        com.google.javascript.jscomp.SourceMap.Format format47 = compilerOptions0.sourceMapFormat;
        compilerOptions0.removeUnusedLocalVars = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(format47);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream1.println((float) (byte) 1);
        java.io.PrintStream printStream20 = printStream1.append((java.lang.CharSequence) "java.io.IOException");
        printStream20.flush();
        printStream20.print("hi!");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.setLocale("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        java.lang.String str14 = compilerOptions11.sourceMapOutputPath;
        compilerOptions11.aliasKeywords = true;
        java.util.Set<java.lang.String> strSet17 = compilerOptions11.stripNameSuffixes;
        compilerOptions0.stripNameSuffixes = strSet17;
        compilerOptions0.aliasKeywords = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        compilerOptions21.removeUnusedVars = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap27 = compilerOptions21.getDefineReplacements();
        boolean boolean28 = compilerOptions21.convertToDottedProperties;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention32 = null;
        compilerOptions29.setCodingConvention(codingConvention32);
        boolean boolean34 = compilerOptions29.computeFunctionSideEffects;
        boolean boolean35 = compilerOptions29.printInputDelimiter;
        compilerOptions29.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        compilerOptions38.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet46 = compilerOptions45.stripNamePrefixes;
        compilerOptions38.setIdGenerators(strSet46);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention51 = null;
        compilerOptions48.setCodingConvention(codingConvention51);
        compilerOptions48.setGeneratePseudoNames(true);
        compilerOptions48.inlineLocalFunctions = false;
        compilerOptions48.setIdeMode(true);
        compilerOptions48.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setRewriteNewDateGoogNow(true);
        boolean boolean64 = compilerOptions61.extractPrototypeMemberDeclarations;
        compilerOptions61.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel67 = compilerOptions61.checkGlobalThisLevel;
        compilerOptions48.checkMissingReturn = checkLevel67;
        compilerOptions38.aggressiveVarCheck = checkLevel67;
        compilerOptions29.reportMissingOverride = checkLevel67;
        compilerOptions21.setBrokenClosureRequiresLevel(checkLevel67);
        compilerOptions0.checkGlobalNamesLevel = checkLevel67;
        java.lang.Class<?> wildcardClass73 = checkLevel67.getClass();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + checkLevel67 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel67.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.removeUnusedClassProperties = true;
        compilerOptions0.setLocale("hi!");
        boolean boolean12 = compilerOptions0.collapseProperties;
        compilerOptions0.inlineGetters = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        compilerOptions0.setUnaliasableGlobals("");
        compilerOptions0.closurePass = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setLabelRenaming(true);
        compilerOptions18.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions18.checkGlobalThisLevel;
        compilerOptions18.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler26 = compilerOptions18.getAliasTransformationHandler();
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler26);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(aliasTransformationHandler26);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        compilerOptions8.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions8.brokenClosureRequiresLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup6, checkLevel14);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.checkGlobalThisLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet23 = compilerOptions17.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap24 = compilerOptions17.cssRenamingMap;
        compilerOptions17.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach27 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions17.setInlineFunctions(reach27);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet35 = compilerOptions29.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap36 = compilerOptions29.cssRenamingMap;
        compilerOptions29.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach39 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions29.setInlineFunctions(reach39);
        compilerOptions17.setRemoveUnusedVariable(reach39);
        compilerOptions0.setInlineFunctions(reach39);
        boolean boolean43 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean44 = compilerOptions0.aliasExternals;
        boolean boolean45 = compilerOptions0.checkTypes;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(cssRenamingMap24);
        org.junit.Assert.assertTrue("'" + reach27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach27.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(cssRenamingMap36);
        org.junit.Assert.assertTrue("'" + reach39 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach39.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        java.lang.String str6 = compiler0.getSourceLine("Unversioned directory", (int) (byte) -1);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker7 = null;
        compiler0.tracker = performanceTracker7;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention codingConvention9 = compiler0.getCodingConvention();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        compilerOptions0.setMoveFunctionDeclarations(true);
        compilerOptions0.setLocale("java.io.IOException: ");
        compilerOptions0.inlineVariables = true;
        com.google.javascript.jscomp.ErrorFormat errorFormat11 = compilerOptions0.errorFormat;
        org.junit.Assert.assertNotNull(errorFormat11);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.inlineVariables = false;
        boolean boolean11 = compilerOptions0.inlineFunctions;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("// Input %num%");
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler14 = compilerOptions0.getAliasTransformationHandler();
        boolean boolean15 = compilerOptions0.closurePass;
        compilerOptions0.setIdeMode(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setReportPath("2019/07/12 07:12");
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        compilerOptions0.setCollapseVariableDeclarations(true);
        java.lang.String str11 = compilerOptions0.checkMissingGetCssNameBlacklist;
        boolean boolean12 = compilerOptions0.collapseProperties;
        boolean boolean13 = compilerOptions0.inlineGetters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.convertToDottedProperties = true;
        boolean boolean20 = compilerOptions14.exportTestFunctions;
        compilerOptions14.smartNameRemoval = true;
        compilerOptions14.setSkipAllPasses(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        boolean boolean30 = compilerOptions25.generateExports;
        compilerOptions25.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy36 = compilerOptions33.variableRenaming;
        compilerOptions25.setVariableRenaming(variableRenamingPolicy36);
        compilerOptions25.setSmartNameRemoval(false);
        compilerOptions25.lineBreak = false;
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions25.reportMissingOverride;
        compilerOptions14.setBrokenClosureRequiresLevel(checkLevel42);
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel42;
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy36 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy36.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        com.google.javascript.rhino.Node node8 = compiler0.getRoot();
        java.lang.String str9 = compiler0.getAstDotGraph();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setAliasAllStrings(false);
        compilerOptions0.setSkipAllPasses(true);
        compilerOptions0.setLineLengthThreshold((int) '#');
        com.google.javascript.jscomp.CodingConvention codingConvention13 = compilerOptions0.getCodingConvention();
        compilerOptions0.aliasStringsBlacklist = "java.io.IOException: ";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNull(codingConvention13);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CodingConvention codingConvention10 = compilerOptions0.getCodingConvention();
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean13 = compilerOptions0.flowSensitiveInlineVariables;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(codingConvention10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.closurePass = true;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy12 = compilerOptions0.anonymousFunctionNaming;
        com.google.javascript.jscomp.MessageBundle messageBundle13 = null;
        compilerOptions0.messageBundle = messageBundle13;
        compilerOptions0.setReserveRawExports(false);
        compilerOptions0.inlineVariables = false;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy12 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy12.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler9 = compilerOptions0.getAliasTransformationHandler();
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        com.google.javascript.jscomp.CodingConvention codingConvention11 = compilerOptions0.getCodingConvention();
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet18 = compilerOptions12.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap19 = compilerOptions12.cssRenamingMap;
        compilerOptions12.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach22 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions12.setInlineFunctions(reach22);
        compilerOptions12.setFoldConstants(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach30 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions26.setInlineVariables(reach30);
        compilerOptions26.exportTestFunctions = true;
        compilerOptions26.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.MessageBundle messageBundle36 = null;
        compilerOptions26.messageBundle = messageBundle36;
        boolean boolean38 = compilerOptions26.optimizeCalls;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode39 = compilerOptions26.getTracerMode();
        compilerOptions12.setTracer(tracerMode39);
        compilerOptions0.setTracer(tracerMode39);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(codingConvention11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(cssRenamingMap19);
        org.junit.Assert.assertTrue("'" + reach22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach22.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + reach30 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach30.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + tracerMode39 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode39.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        java.lang.String str53 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        compilerOptions54.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions54.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet61 = compilerOptions54.stripTypes;
        compilerOptions0.setIdGenerators(strSet61);
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList63 = compilerOptions0.sourceMapLocationMappings;
        compilerOptions0.setOptimizeArgumentsArray(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions66.setRewriteNewDateGoogNow(true);
        boolean boolean69 = compilerOptions66.extractPrototypeMemberDeclarations;
        compilerOptions66.convertToDottedProperties = true;
        boolean boolean72 = compilerOptions66.inlineConstantVars;
        boolean boolean73 = compilerOptions66.extractPrototypeMemberDeclarations;
        boolean boolean74 = compilerOptions66.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard75 = null;
        compilerOptions66.setWarningsGuard(composeWarningsGuard75);
        compilerOptions66.setPreferLineBreakAtEndOfFile(true);
        compilerOptions66.coalesceVariableNames = false;
        compilerOptions66.setProcessObjectPropertyString(true);
        com.google.javascript.jscomp.CheckLevel checkLevel83 = compilerOptions66.checkMissingGetCssNameLevel;
        compilerOptions0.checkUnreachableCode = checkLevel83;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locationMappingList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + checkLevel83 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel83.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        java.io.PrintStream printStream13 = new java.io.PrintStream("Unversioned directory");
        printStream13.write((-1));
        printStream13.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup18;
        printStream13.print((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("Unversioned directory");
        char[] charArray25 = new char[] { '4', '4' };
        printStream22.print(charArray25);
        printStream22.print((int) ' ');
        byte[] byteArray35 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream22.write(byteArray35, (int) (byte) 0, (int) (byte) 1);
        printStream13.write(byteArray35, 0, 0);
        compilerOptions0.setInputPropertyMapSerialized(byteArray35);
        com.google.javascript.jscomp.SourceMap.Format format43 = compilerOptions0.sourceMapFormat;
        compilerOptions0.labelRenaming = true;
        boolean boolean46 = compilerOptions0.inlineVariables;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(format43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        double double3 = compiler1.getProgress();
        double double4 = compiler1.getProgress();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = compiler1.isTypeCheckingEnabled();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean24 = compilerOptions0.generateExports;
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.setConvertToDottedProperties(true);
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        compilerOptions0.setInlineLocalVariables(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler9 = compilerOptions0.getAliasTransformationHandler();
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        com.google.javascript.jscomp.CodingConvention codingConvention11 = compilerOptions0.getCodingConvention();
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.inlineGetters = false;
        compilerOptions12.setGroupVariableDeclarations(false);
        compilerOptions12.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode31 = compilerOptions26.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup32 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup32;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions34.brokenClosureRequiresLevel;
        compilerOptions26.setWarningLevel(diagnosticGroup32, checkLevel40);
        compilerOptions26.setRemoveUnusedVars(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet45 = compilerOptions44.stripNamePrefixes;
        byte[] byteArray46 = compilerOptions44.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach47 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions44.setInlineFunctions(reach47);
        compilerOptions26.setRemoveUnusedVariables(reach47);
        compilerOptions12.setRemoveUnusedVariable(reach47);
        compilerOptions0.setRemoveUnusedVariable(reach47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(codingConvention11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + tracerMode31 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode31.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertTrue("'" + reach47 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach47.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setShadowVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions9.setInlineVariables(reach13);
        compilerOptions9.setPrintInputDelimiter(true);
        boolean boolean17 = compilerOptions9.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle18 = null;
        compilerOptions9.messageBundle = messageBundle18;
        compilerOptions9.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap22 = null;
        compilerOptions9.cssRenamingMap = cssRenamingMap22;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet30 = compilerOptions24.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream31 = strSet30.parallelStream();
        compilerOptions9.setReplaceStringsReservedStrings(strSet30);
        compilerOptions0.setReplaceStringsReservedStrings(strSet30);
        boolean boolean34 = compilerOptions0.labelRenaming;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy35 = compilerOptions0.anonymousFunctionNaming;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy35 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy35.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        compilerOptions0.resetWarningsGuard();
        boolean boolean23 = compilerOptions0.generatePseudoNames;
        compilerOptions0.setRuntimeTypeCheck(true);
        compilerOptions0.generateExports = true;
        compilerOptions0.setDefineToStringLiteral("// Input %num%", "");
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.setCollapseProperties(false);
        compilerOptions31.setClosurePass(true);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions31.setInputPropertyMapSerialized(byteArray44);
        compilerOptions31.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions31.reportMissingOverride;
        compilerOptions31.setNameReferenceReportPath("java.io.IOException: ");
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setInlineConstantVars(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention58 = null;
        compilerOptions55.setCodingConvention(codingConvention58);
        compilerOptions55.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel62 = compilerOptions55.checkProvides;
        java.lang.String[] strArray64 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        compilerOptions55.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList65);
        java.util.stream.Stream<java.lang.String> strStream68 = strList65.stream();
        compilerOptions52.setManageClosureDependencies((java.util.List<java.lang.String>) strList65);
        compilerOptions31.setReplaceStringsConfiguration("java.io.IOException: Unversioned directory", (java.util.List<java.lang.String>) strList65);
        com.google.javascript.jscomp.CompilerOptions compilerOptions71 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions71.setRewriteNewDateGoogNow(true);
        boolean boolean74 = compilerOptions71.extractPrototypeMemberDeclarations;
        boolean boolean75 = compilerOptions71.jqueryPass;
        compilerOptions71.collapseAnonymousFunctions = false;
        compilerOptions71.setManageClosureDependencies(true);
        compilerOptions71.setAssumeStrictThis(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions82 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions82.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention85 = null;
        compilerOptions82.setCodingConvention(codingConvention85);
        boolean boolean87 = compilerOptions82.computeFunctionSideEffects;
        boolean boolean88 = compilerOptions82.printInputDelimiter;
        compilerOptions82.setGeneratePseudoNames(true);
        boolean boolean91 = compilerOptions82.disambiguateProperties;
        java.util.Set<java.lang.String> strSet92 = compilerOptions82.aliasableStrings;
        compilerOptions71.stripTypePrefixes = strSet92;
        compilerOptions31.stripNameSuffixes = strSet92;
        compilerOptions0.setStripTypePrefixes(strSet92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel62 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel62.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        java.lang.String str2 = sourceFile1.getOriginalPath();
        boolean boolean3 = sourceFile1.isExtern();
        java.lang.String str5 = sourceFile1.getLine((int) (byte) 100);
        java.lang.String str6 = sourceFile1.toString();
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        boolean boolean13 = compilerOptions10.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setLabelRenaming(true);
        compilerOptions14.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions14.checkGlobalThisLevel;
        compilerOptions10.setCheckGlobalNamesLevel(checkLevel19);
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel19);
        compilerOptions0.inlineGetters = true;
        boolean boolean24 = compilerOptions0.collapseProperties;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setFoldConstants(true);
        compilerOptions0.setSpecializeInitialModule(false);
        compilerOptions0.setRemoveClosureAsserts(false);
        compilerOptions0.setSourceMapOutputPath("");
        compilerOptions0.setSourceMapOutputPath("java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        compilerOptions0.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        boolean boolean9 = compilerOptions0.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions10.checkGlobalThisLevel;
        compilerOptions10.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions10.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        boolean boolean23 = compilerOptions20.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setLabelRenaming(true);
        compilerOptions24.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions24.checkGlobalThisLevel;
        compilerOptions20.setCheckGlobalNamesLevel(checkLevel29);
        compilerOptions10.setCheckMissingGetCssNameLevel(checkLevel29);
        compilerOptions10.setCheckTypes(true);
        compilerOptions10.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions.Reach reach36 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions10.setInlineVariables(reach36);
        compilerOptions0.setInlineFunctions(reach36);
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + reach36 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach36.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        com.google.javascript.jscomp.MessageBundle messageBundle19 = null;
        compilerOptions0.messageBundle = messageBundle19;
        compilerOptions0.ideMode = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap23 = compilerOptions0.customPasses;
        java.lang.String str24 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode25 = compilerOptions0.getLanguageOut();
        java.lang.Class<?> wildcardClass26 = compilerOptions0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(languageMode25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = null;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy8);
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.checkSuspiciousCode = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        java.lang.String str8 = compiler0.getAstDotGraph();
        java.lang.String str11 = compiler0.getSourceLine("java.io.IOException: Unversioned directory", 0);
        com.google.javascript.jscomp.SourceMap sourceMap12 = compiler0.getSourceMap();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = compiler0.getErrorCount();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(sourceMap12);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        printStream1.write((-1));
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("Unversioned directory");
        char[] charArray11 = new char[] { '4', '4' };
        printStream8.print(charArray11);
        printStream8.print((int) ' ');
        java.io.PrintStream printStream15 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        com.google.javascript.jscomp.SourceFile.Builder builder17 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException19 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { builder17, iOException20, (byte) 10 };
        java.io.PrintStream printStream23 = printStream15.printf("", objArray22);
        printStream23.println((float) (-1L));
        java.io.PrintStream printStream27 = printStream23.append('#');
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream23, true);
        printStream23.print(false);
        printStream23.print(' ');
        java.io.IOException iOException36 = new java.io.IOException("java.io.IOException: Unversioned directory");
        java.lang.Throwable[] throwableArray37 = iOException36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.PrintStream printStream39 = printStream23.printf("Unversioned directory", (java.lang.Object[]) throwableArray38);
        java.io.PrintStream printStream40 = printStream1.printf("java.io.IOException: java.io.IOException: 2019/07/12 07:12", (java.lang.Object[]) throwableArray38);
        boolean boolean41 = printStream40.checkError();
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setProtectHiddenSideEffects(true);
        compilerOptions0.aliasAllStrings = true;
        boolean boolean13 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setOptimizeArgumentsArray(false);
        compilerOptions0.setRemoveUnusedClassProperties(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        com.google.javascript.jscomp.SourceFile.Generator generator13 = null;
        com.google.javascript.jscomp.SourceFile sourceFile14 = builder0.buildFromGenerator("// Input %num%", generator13);
        java.nio.charset.Charset charset15 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder16 = builder0.withCharset(charset15);
        com.google.javascript.jscomp.SourceFile sourceFile19 = builder0.buildFromCode("java.io.IOException: java.io.IOException: 2019/07/12 07:12", "hi!");
        com.google.javascript.jscomp.SourceFile.Generator generator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile22 = builder0.buildFromGenerator("", generator21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: a source must have a name");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(sourceFile19);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setOptimizeArgumentsArray(true);
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkMissingReturn;
        java.lang.Object obj7 = compilerOptions0.clone();
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.removeTryCatchFinally = false;
        compilerOptions0.setLooseTypes(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setOptimizeCalls(true);
        java.lang.Object obj13 = compilerOptions0.clone();
        compilerOptions0.setCheckControlStructures(true);
        compilerOptions0.gatherCssNames = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions0.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        compilerOptions0.setRuntimeTypeCheck(true);
        compilerOptions0.setRemoveUnusedVars(false);
        com.google.javascript.jscomp.MessageBundle messageBundle12 = null;
        compilerOptions0.messageBundle = messageBundle12;
        boolean boolean14 = compilerOptions0.aliasExternals;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.enableExternExports(true);
        compilerOptions15.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet20 = compilerOptions15.stripNamePrefixes;
        compilerOptions15.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setLabelRenaming(true);
        compilerOptions23.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions23.checkGlobalThisLevel;
        compilerOptions23.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing31 = compilerOptions23.getTweakProcessing();
        compilerOptions15.setTweakProcessing(tweakProcessing31);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy33 = compilerOptions15.anonymousFunctionNaming;
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = null;
        compilerOptions15.setTweakReplacements(strMap34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        boolean boolean41 = compilerOptions36.computeFunctionSideEffects;
        boolean boolean42 = compilerOptions36.printInputDelimiter;
        compilerOptions36.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions36.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions36.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions36.setInputPropertyMapSerialized(byteArray51);
        compilerOptions15.inputVariableMapSerialized = byteArray51;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode54 = compilerOptions15.getLanguageIn();
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention58 = null;
        compilerOptions55.setCodingConvention(codingConvention58);
        compilerOptions55.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel62 = compilerOptions55.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray63 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList64 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList64, locationMappingArray63);
        compilerOptions55.sourceMapLocationMappings = locationMappingList64;
        boolean boolean67 = compilerOptions55.inlineVariables;
        boolean boolean68 = compilerOptions55.inlineLocalFunctions;
        boolean boolean69 = compilerOptions55.disambiguateProperties;
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions70.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention73 = null;
        compilerOptions70.setCodingConvention(codingConvention73);
        compilerOptions70.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel77 = compilerOptions70.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray78 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList79 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList79, locationMappingArray78);
        compilerOptions70.sourceMapLocationMappings = locationMappingList79;
        com.google.javascript.jscomp.CheckLevel checkLevel82 = compilerOptions70.aggressiveVarCheck;
        compilerOptions70.setExtractPrototypeMemberDeclarations(false);
        boolean boolean85 = compilerOptions70.optimizeCalls;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel86 = compilerOptions70.sourceMapDetailLevel;
        compilerOptions55.setSourceMapDetailLevel(detailLevel86);
        compilerOptions15.setSourceMapDetailLevel(detailLevel86);
        compilerOptions0.sourceMapDetailLevel = detailLevel86;
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing31 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing31.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy33 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy33.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertTrue("'" + languageMode54 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode54.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + checkLevel62 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel62.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + checkLevel77 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel77.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + checkLevel82 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel82.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(detailLevel86);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        java.lang.String str5 = compilerOptions0.checkMissingGetCssNameBlacklist;
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        boolean boolean12 = compilerOptions8.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions8.setCssRenamingMap(cssRenamingMap13);
        byte[] byteArray15 = compilerOptions8.inputVariableMapSerialized;
        compilerOptions8.setChainCalls(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        compilerOptions18.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions18.checkGlobalThisLevel;
        compilerOptions18.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel27 = compilerOptions18.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet29 = compilerOptions28.stripNamePrefixes;
        byte[] byteArray30 = compilerOptions28.inputVariableMapSerialized;
        boolean boolean31 = compilerOptions28.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setLabelRenaming(true);
        compilerOptions32.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions28.setCheckGlobalNamesLevel(checkLevel37);
        compilerOptions18.setCheckMissingGetCssNameLevel(checkLevel37);
        compilerOptions18.setCheckTypes(true);
        compilerOptions18.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet45 = compilerOptions44.stripNamePrefixes;
        byte[] byteArray46 = compilerOptions44.inputVariableMapSerialized;
        compilerOptions44.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.ErrorFormat errorFormat49 = compilerOptions44.errorFormat;
        compilerOptions18.setErrorFormat(errorFormat49);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention54 = null;
        compilerOptions51.setCodingConvention(codingConvention54);
        boolean boolean56 = compilerOptions51.generateExports;
        compilerOptions51.gatherCssNames = false;
        boolean boolean59 = compilerOptions51.optimizeReturns;
        compilerOptions51.smartNameRemoval = true;
        compilerOptions51.removeUnusedPrototypePropertiesInExterns = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setLabelRenaming(true);
        compilerOptions64.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy69 = compilerOptions64.anonymousFunctionNaming;
        compilerOptions51.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy69);
        compilerOptions18.anonymousFunctionNaming = anonymousFunctionNamingPolicy69;
        compilerOptions8.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy69);
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy69);
        compilerOptions0.setUnaliasableGlobals("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.generatePseudoNames = true;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel27 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel27.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(errorFormat49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy69 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy69.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setGroupVariableDeclarations(false);
        compilerOptions0.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode22 = compilerOptions0.getLanguageIn();
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet31 = compilerOptions25.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap32 = compilerOptions25.cssRenamingMap;
        compilerOptions25.reserveRawExports = true;
        compilerOptions25.jqueryPass = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        compilerOptions37.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions37.checkGlobalThisLevel;
        compilerOptions37.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.setCollapseProperties(false);
        compilerOptions46.setClosurePass(true);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions46.setInputPropertyMapSerialized(byteArray59);
        compilerOptions46.setFlowSensitiveInlineVariables(true);
        compilerOptions46.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        boolean boolean68 = compilerOptions65.extractPrototypeMemberDeclarations;
        compilerOptions65.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet71 = compilerOptions65.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream72 = strSet71.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream73 = strSet71.parallelStream();
        compilerOptions46.stripNameSuffixes = strSet71;
        compilerOptions37.setStripTypePrefixes(strSet71);
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setRewriteNewDateGoogNow(true);
        boolean boolean79 = compilerOptions76.extractPrototypeMemberDeclarations;
        compilerOptions76.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet82 = compilerOptions76.stripTypePrefixes;
        compilerOptions37.setAliasableStrings(strSet82);
        compilerOptions25.setExtraAnnotationNames(strSet82);
        compilerOptions0.aliasableStrings = strSet82;
        compilerOptions0.locale = "2019/07/12 07:12";
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + languageMode22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode22.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(cssRenamingMap32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertNotNull(strStream73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        boolean boolean15 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions0.markNoSideEffectCalls;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions0.propertyRenaming;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.print('4');
        printStream11.println(1L);
        printStream11.println(false);
        printStream11.print(10.0f);
        printStream11.flush();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream11, false, "// Input %num%");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: // Input %num%");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        compilerOptions0.setReplaceStringsPlaceholderToken("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.checkGlobalThisLevel;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        byte[] byteArray7 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode8 = compilerOptions0.getLanguageIn();
        com.google.javascript.jscomp.CodingConvention codingConvention9 = compilerOptions0.getCodingConvention();
        compilerOptions0.setAliasableGlobals("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode15 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions12.setTracer(tracerMode15);
        compilerOptions12.setSmartNameRemoval(false);
        compilerOptions12.setOptimizeReturns(false);
        compilerOptions12.generateExports = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet29 = compilerOptions23.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = null;
        compilerOptions23.setCheckGlobalThisLevel(checkLevel30);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode32 = compilerOptions23.getTracerMode();
        compilerOptions23.setInputDelimiter("java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        compilerOptions36.setCollapseProperties(false);
        boolean boolean42 = compilerOptions36.closurePass;
        compilerOptions36.setRemoveAbstractMethods(true);
        compilerOptions36.setPropertyAffinity(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention56 = null;
        compilerOptions53.setCodingConvention(codingConvention56);
        compilerOptions53.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions53.checkProvides;
        java.lang.String[] strArray62 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        compilerOptions53.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList63);
        compilerOptions47.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList63);
        compilerOptions36.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList63);
        compilerOptions23.setReplaceStringsConfiguration("Unversioned directory", (java.util.List<java.lang.String>) strList63);
        compilerOptions12.setManageClosureDependencies((java.util.List<java.lang.String>) strList63);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList63);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertTrue("'" + languageMode8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode8.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertNull(codingConvention9);
        org.junit.Assert.assertTrue("'" + tracerMode15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode15.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + tracerMode32 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode32.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setClosurePass(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy7 = compilerOptions0.propertyRenaming;
        compilerOptions0.setPrettyPrint(false);
        boolean boolean10 = compilerOptions0.checkSymbols;
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy7 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy7.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet13 = compilerOptions0.aliasableStrings;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap14 = compilerOptions0.customPasses;
        compilerOptions0.setLineLengthThreshold((int) (byte) 0);
        boolean boolean17 = compilerOptions0.inlineConstantVars;
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.setLineBreak(false);
        compilerOptions0.recordFunctionInformation = true;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setOptimizeArgumentsArray(true);
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkMissingReturn;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        compilerOptions8.optimizeParameters = true;
        compilerOptions8.setAliasAllStrings(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode15 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions8.setTracer(tracerMode15);
        compilerOptions0.setTracerMode(tracerMode15);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode15.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.renamePrefix = "";
        compilerOptions0.closurePass = false;
        compilerOptions0.setAliasStringsBlacklist("Unversioned directory");
        compilerOptions0.setIdeMode(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        char[] charArray17 = new char[] { '4', '4' };
        printStream14.print(charArray17);
        printStream14.print((int) ' ');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.write((int) '#');
        printStream14.print((float) (short) 0);
        printStream14.println("java.io.IOException");
        java.util.Locale locale29 = null;
        java.io.PrintStream printStream32 = new java.io.PrintStream("Unversioned directory");
        char[] charArray35 = new char[] { '4', '4' };
        printStream32.print(charArray35);
        printStream32.print((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        printStream32.write((int) '#');
        java.util.Locale locale43 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream47 = printStream32.format(locale43, "Unversioned directory", objArray46);
        java.io.PrintStream printStream48 = printStream14.printf(locale29, "Unversioned directory", objArray46);
        printStream48.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention53 = null;
        compilerOptions50.setCodingConvention(codingConvention53);
        boolean boolean55 = compilerOptions50.generateExports;
        compilerOptions50.printInputDelimiter = false;
        compilerOptions50.setCheckSymbols(true);
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions50.setInputVariableMapSerialized(byteArray64);
        printStream48.write(byteArray64);
        compilerOptions0.setInputPropertyMapSerialized(byteArray64);
        compilerOptions0.setAcceptConstKeyword(false);
        compilerOptions0.setLocale("");
        boolean boolean72 = compilerOptions0.collapseAnonymousFunctions;
        compilerOptions0.setCollapseProperties(true);
        compilerOptions0.optimizeParameters = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 100, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        compilerOptions0.setExternExportsPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setTweakToDoubleLiteral("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", (double) 1L);
        boolean boolean12 = compilerOptions0.isRemoveUnusedClassProperties();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        java.io.IOException iOException1 = new java.io.IOException("java.io.IOException: Unversioned directory");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.lang.String str3 = iOException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException: java.io.IOException: Unversioned directory" + "'", str3, "java.io.IOException: java.io.IOException: Unversioned directory");
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions0.getTracerMode();
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        boolean boolean17 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.setRemoveUnusedPrototypeProperties(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.setAssumeStrictThis(false);
        compilerOptions0.setInlineGetters(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        java.lang.String str7 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.SourceMap.Format format8 = compilerOptions0.sourceMapFormat;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(format8);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.setChainCalls(true);
        boolean boolean11 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setChainCalls(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        java.io.IOException iOException3 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException4 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException3);
        java.io.IOException iOException7 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException7);
        iOException3.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("", (java.lang.Throwable) iOException3);
        java.io.IOException iOException14 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException14);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException14);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray18 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList19 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList19, locationMappingArray18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        compilerOptions21.setCollapseProperties(false);
        compilerOptions21.setClosurePass(true);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions21.setInputPropertyMapSerialized(byteArray34);
        compilerOptions21.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet44 = compilerOptions38.stripTypePrefixes;
        compilerOptions21.aliasableStrings = strSet44;
        boolean boolean46 = locationMappingList19.removeAll((java.util.Collection<java.lang.String>) strSet44);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup47 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup47;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup47;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup47;
        boolean boolean51 = locationMappingList19.contains((java.lang.Object) diagnosticGroup47);
        java.io.IOException iOException54 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException55 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException54);
        java.lang.Throwable[] throwableArray56 = iOException54.getSuppressed();
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException54);
        int int58 = locationMappingList19.indexOf((java.lang.Object) iOException54);
        iOException14.addSuppressed((java.lang.Throwable) iOException54);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException14);
        iOException11.addSuppressed((java.lang.Throwable) iOException60);
        java.io.IOException iOException62 = new java.io.IOException((java.lang.Throwable) iOException11);
        org.junit.Assert.assertNotNull(locationMappingArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode14 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(languageMode14);
        compilerOptions0.setSmartNameRemoval(false);
        compilerOptions0.setSourceMapOutputPath("java.io.IOException: java.io.IOException: java.io.IOException: ");
        java.lang.Class<?> wildcardClass20 = compilerOptions0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + languageMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5 + "'", languageMode14.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", "hi!", "java.io.IOException: -1");
        org.junit.Assert.assertNotNull(sourceFile3);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        printStream1.write((-1));
        printStream1.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup6;
        printStream1.print((java.lang.Object) diagnosticGroup6);
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup6;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup6;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        com.google.javascript.jscomp.Compiler.CodeBuilder codeBuilder0 = new com.google.javascript.jscomp.Compiler.CodeBuilder();
        java.lang.String str1 = codeBuilder0.toString();
        int int2 = codeBuilder0.getLength();
        int int3 = codeBuilder0.getLength();
        java.lang.String str4 = codeBuilder0.toString();
        int int5 = codeBuilder0.getLength();
        int int6 = codeBuilder0.getLength();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel19;
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        compilerOptions0.setDefineReplacements(strMap21);
        compilerOptions0.checkControlStructures = true;
        compilerOptions0.inlineVariables = false;
        boolean boolean27 = compilerOptions0.crossModuleCodeMotion;
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkProvides;
        boolean boolean11 = compilerOptions0.checkControlStructures;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap12 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap12;
        compilerOptions0.setAliasExternals(false);
        java.lang.String str16 = compilerOptions0.renamePrefix;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setLabelRenaming(true);
        compilerOptions17.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions17.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap24 = compilerOptions17.cssRenamingMap;
        compilerOptions17.setRuntimeTypeCheck(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet28 = compilerOptions27.stripNamePrefixes;
        byte[] byteArray29 = compilerOptions27.inputVariableMapSerialized;
        boolean boolean30 = compilerOptions27.exportTestFunctions;
        compilerOptions27.setExtractPrototypeMemberDeclarations(true);
        compilerOptions27.reserveRawExports = false;
        compilerOptions27.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions27.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions38.jqueryPass;
        boolean boolean43 = compilerOptions38.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setLabelRenaming(true);
        compilerOptions44.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean49 = compilerOptions44.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format50 = compilerOptions44.sourceMapFormat;
        compilerOptions38.sourceMapFormat = format50;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        boolean boolean55 = compilerOptions52.extractPrototypeMemberDeclarations;
        compilerOptions52.setCollapseProperties(false);
        boolean boolean58 = compilerOptions52.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat59 = compilerOptions52.errorFormat;
        compilerOptions38.setErrorFormat(errorFormat59);
        compilerOptions27.setErrorFormat(errorFormat59);
        compilerOptions17.setErrorFormat(errorFormat59);
        compilerOptions17.setRemoveUnusedClassProperties(false);
        compilerOptions17.convertToDottedProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        boolean boolean70 = compilerOptions67.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach71 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions67.setInlineVariables(reach71);
        compilerOptions67.setPrintInputDelimiter(true);
        boolean boolean75 = compilerOptions67.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle76 = null;
        compilerOptions67.messageBundle = messageBundle76;
        compilerOptions67.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap80 = null;
        compilerOptions67.cssRenamingMap = cssRenamingMap80;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList82 = compilerOptions67.sourceMapLocationMappings;
        com.google.javascript.jscomp.CompilerOptions compilerOptions83 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions83.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention86 = null;
        compilerOptions83.setCodingConvention(codingConvention86);
        boolean boolean88 = compilerOptions83.generateExports;
        compilerOptions83.gatherCssNames = false;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy91 = compilerOptions83.variableRenaming;
        compilerOptions67.variableRenaming = variableRenamingPolicy91;
        compilerOptions17.setVariableRenaming(variableRenamingPolicy91);
        compilerOptions0.setVariableRenaming(variableRenamingPolicy91);
        compilerOptions0.setInlineLocalFunctions(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(cssRenamingMap24);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(format50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(errorFormat59);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + reach71 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach71.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locationMappingList82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy91 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy91.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping23 = null;
        boolean boolean24 = locationMappingList1.add(locationMapping23);
        locationMappingList1.clear();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList11 = compilerOptions0.sourceMapLocationMappings;
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: java.io.IOException: java.io.IOException: ", 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingList11);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) "");
        printStream22.print((float) 10);
        printStream22.close();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream22, false, "java.io.IOException: -1");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException: -1");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        char[] charArray24 = new char[] { ' ', '#', '4', 'a', '#', 'a' };
        printStream1.print(charArray24);
        java.io.PrintStream printStream28 = new java.io.PrintStream("Unversioned directory");
        char[] charArray31 = new char[] { '4', '4' };
        printStream28.print(charArray31);
        printStream28.print((int) ' ');
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream28, false);
        printStream28.write((int) '#');
        java.util.Locale locale39 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream43 = printStream28.format(locale39, "Unversioned directory", objArray42);
        java.io.PrintStream printStream44 = printStream1.printf("java.io.IOException: ", objArray42);
        printStream44.print((float) ' ');
        java.lang.Object obj47 = null;
        printStream44.print(obj47);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #, 4, a, #, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream44);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.ideMode = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach17 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineVariables(reach17);
        compilerOptions13.setPrintInputDelimiter(true);
        boolean boolean21 = compilerOptions13.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle22 = null;
        compilerOptions13.messageBundle = messageBundle22;
        compilerOptions13.setDeadAssignmentElimination(false);
        compilerOptions13.extractPrototypeMemberDeclarations = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream35 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet34.parallelStream();
        compilerOptions13.stripNamePrefixes = strSet34;
        compilerOptions0.setAliasableStrings(strSet34);
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions0.checkRequires;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + reach17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach17.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.checkTypes = true;
        compilerOptions0.collapseVariableDeclarations = false;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.checkUnreachableCode;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap13;
        compilerOptions0.setConvertToDottedProperties(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = null;
        compilerOptions0.setTweakReplacements(strMap17);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.rhino.Node node3 = compiler0.getRoot();
        com.google.javascript.jscomp.Compiler compiler4 = new com.google.javascript.jscomp.Compiler();
        double double5 = compiler4.getProgress();
        compiler4.reportCodeChange();
        com.google.javascript.jscomp.Scope scope7 = compiler4.getTopScope();
        compiler4.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState9 = compiler4.getState();
        compiler0.setState(intermediateState9);
        com.google.javascript.jscomp.SourceMap sourceMap11 = compiler0.getSourceMap();
        com.google.javascript.jscomp.Scope scope12 = compiler0.getTopScope();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(scope7);
        org.junit.Assert.assertNotNull(intermediateState9);
        org.junit.Assert.assertNull(sourceMap11);
        org.junit.Assert.assertNull(scope12);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean9 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.inlineConstantVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions12.checkProvides;
        compilerOptions0.checkRequires = checkLevel15;
        compilerOptions0.setUnaliasableGlobals("");
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap19 = compilerOptions0.cssRenamingMap;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(cssRenamingMap19);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        compilerOptions42.convertToDottedProperties = true;
        boolean boolean48 = compilerOptions42.inlineConstantVars;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy49 = compilerOptions42.propertyRenaming;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy49);
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions0.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        java.lang.String str55 = compilerOptions52.locale;
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions52.checkRequires;
        compilerOptions52.setDevirtualizePrototypeMethods(true);
        compilerOptions52.collapseAnonymousFunctions = true;
        compilerOptions52.inlineFunctions = true;
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions52.checkUnreachableCode;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel63);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy49 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy49.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        compilerOptions9.setClosurePass(true);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions9.setInputPropertyMapSerialized(byteArray22);
        compilerOptions9.setFlowSensitiveInlineVariables(true);
        boolean boolean26 = compilerOptions9.exportTestFunctions;
        compilerOptions9.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions9.setInlineFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing32 = compilerOptions9.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing32);
        boolean boolean34 = tweakProcessing32.shouldStrip();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing32 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing32.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setGenerateExports(false);
        compilerOptions0.setCollapseAnonymousFunctions(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGeneratePseudoNames(true);
        compilerOptions10.inlineLocalFunctions = false;
        compilerOptions10.setIdeMode(true);
        compilerOptions10.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions23.checkGlobalThisLevel;
        compilerOptions10.checkMissingReturn = checkLevel29;
        compilerOptions0.aggressiveVarCheck = checkLevel29;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setInlineConstantVars(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        boolean boolean41 = compilerOptions36.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setLabelRenaming(true);
        compilerOptions42.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean47 = compilerOptions42.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format48 = compilerOptions42.sourceMapFormat;
        compilerOptions36.setSourceMapFormat(format48);
        boolean boolean50 = compilerOptions36.ideMode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention54 = null;
        compilerOptions51.setCodingConvention(codingConvention54);
        boolean boolean56 = compilerOptions51.computeFunctionSideEffects;
        boolean boolean57 = compilerOptions51.printInputDelimiter;
        compilerOptions51.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions51.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions51.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions51.setInputPropertyMapSerialized(byteArray66);
        com.google.javascript.jscomp.CheckLevel checkLevel68 = compilerOptions51.reportMissingOverride;
        compilerOptions36.checkRequires = checkLevel68;
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel68);
        compilerOptions0.setPrettyPrint(true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(format48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertTrue("'" + checkLevel68 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel68.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap13;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList15 = compilerOptions0.sourceMapLocationMappings;
        locationMappingList15.clear();
        boolean boolean17 = locationMappingList15.isEmpty();
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList15.replaceAll(locationMappingUnaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.removeUnusedVars = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap6 = compilerOptions0.getDefineReplacements();
        boolean boolean7 = compilerOptions0.convertToDottedProperties;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel8 = compilerOptions0.sourceMapDetailLevel;
        boolean boolean9 = compilerOptions0.removeUnusedPrototypeProperties;
        compilerOptions0.setInlineConstantVars(false);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.checkMissingGetCssNameLevel;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(detailLevel8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        compilerOptions26.setIdGenerators(strSet34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        compilerOptions36.setGeneratePseudoNames(true);
        compilerOptions36.inlineLocalFunctions = false;
        compilerOptions36.setIdeMode(true);
        compilerOptions36.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        compilerOptions49.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel55 = compilerOptions49.checkGlobalThisLevel;
        compilerOptions36.checkMissingReturn = checkLevel55;
        compilerOptions26.aggressiveVarCheck = checkLevel55;
        compilerOptions0.setCheckUnreachableCode(checkLevel55);
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        boolean boolean63 = compilerOptions0.markNoSideEffectCalls;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + checkLevel55 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel55.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions0.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray7 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList8 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList8, locationMappingArray7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        compilerOptions10.setClosurePass(true);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions10.setInputPropertyMapSerialized(byteArray23);
        compilerOptions10.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet33 = compilerOptions27.stripTypePrefixes;
        compilerOptions10.aliasableStrings = strSet33;
        boolean boolean35 = locationMappingList8.removeAll((java.util.Collection<java.lang.String>) strSet33);
        compilerOptions0.setReplaceStringsReservedStrings(strSet33);
        boolean boolean37 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.setColorizeErrorOutput(false);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = compilerOptions0.getCodingConvention();
        org.junit.Assert.assertNotNull(locationMappingArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(codingConvention40);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.reportMissingOverride;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        compilerOptions0.setIgnoreCajaProperties(false);
        boolean boolean11 = compilerOptions0.aliasAllStrings;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet13 = compilerOptions12.stripNamePrefixes;
        byte[] byteArray14 = compilerOptions12.inputVariableMapSerialized;
        compilerOptions12.setRemoveUnusedClassProperties(true);
        java.lang.String str17 = compilerOptions12.checkMissingGetCssNameBlacklist;
        compilerOptions12.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        boolean boolean24 = compilerOptions20.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap25 = null;
        compilerOptions20.setCssRenamingMap(cssRenamingMap25);
        byte[] byteArray27 = compilerOptions20.inputVariableMapSerialized;
        compilerOptions20.setChainCalls(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions30.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions30.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet41 = compilerOptions40.stripNamePrefixes;
        byte[] byteArray42 = compilerOptions40.inputVariableMapSerialized;
        boolean boolean43 = compilerOptions40.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setLabelRenaming(true);
        compilerOptions44.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions44.checkGlobalThisLevel;
        compilerOptions40.setCheckGlobalNamesLevel(checkLevel49);
        compilerOptions30.setCheckMissingGetCssNameLevel(checkLevel49);
        compilerOptions30.setCheckTypes(true);
        compilerOptions30.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet57 = compilerOptions56.stripNamePrefixes;
        byte[] byteArray58 = compilerOptions56.inputVariableMapSerialized;
        compilerOptions56.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.ErrorFormat errorFormat61 = compilerOptions56.errorFormat;
        compilerOptions30.setErrorFormat(errorFormat61);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention66 = null;
        compilerOptions63.setCodingConvention(codingConvention66);
        boolean boolean68 = compilerOptions63.generateExports;
        compilerOptions63.gatherCssNames = false;
        boolean boolean71 = compilerOptions63.optimizeReturns;
        compilerOptions63.smartNameRemoval = true;
        compilerOptions63.removeUnusedPrototypePropertiesInExterns = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setLabelRenaming(true);
        compilerOptions76.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy81 = compilerOptions76.anonymousFunctionNaming;
        compilerOptions63.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy81);
        compilerOptions30.anonymousFunctionNaming = anonymousFunctionNamingPolicy81;
        compilerOptions20.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy81);
        compilerOptions12.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy81);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy81;
        compilerOptions0.setCheckSymbols(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(errorFormat61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy81 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy81.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.print("Unversioned directory");
        java.util.Locale locale11 = null;
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup16 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup16;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator21 = null;
        com.google.javascript.jscomp.SourceFile sourceFile22 = builder19.buildFromGenerator("hi!", generator21);
        java.lang.Object[] objArray23 = new java.lang.Object[] { diagnosticGroup16, diagnosticGroup18, sourceFile22 };
        java.io.PrintStream printStream24 = printStream14.printf("2019/07/12 07:12", objArray23);
        java.io.PrintStream printStream27 = new java.io.PrintStream("Unversioned directory");
        char[] charArray30 = new char[] { '4', '4' };
        printStream27.print(charArray30);
        printStream27.print((int) ' ');
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream27, false);
        printStream27.write((int) '#');
        java.util.Locale locale38 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream42 = printStream27.format(locale38, "Unversioned directory", objArray41);
        java.io.PrintStream printStream43 = printStream24.format("hi!", objArray41);
        java.io.PrintStream printStream44 = printStream8.format(locale11, "", objArray41);
        printStream8.print("");
        com.google.javascript.jscomp.Compiler compiler47 = new com.google.javascript.jscomp.Compiler(printStream8);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup16);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertNotNull(objArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream44);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.instrumentationTemplate = "java.io.IOException";
        boolean boolean22 = compilerOptions12.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.aggressiveVarCheck = checkLevel23;
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.setDebugFunctionSideEffectsPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean29 = compilerOptions0.removeUnusedClassProperties;
        boolean boolean30 = compilerOptions0.coalesceVariableNames;
        boolean boolean31 = compilerOptions0.inlineGetters;
        compilerOptions0.flowSensitiveInlineVariables = false;
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) "");
        printStream1.print((double) 0.0f);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream25.print((float) '#');
        java.io.PrintStream printStream29 = new java.io.PrintStream("Unversioned directory");
        char[] charArray32 = new char[] { '4', '4' };
        printStream29.print(charArray32);
        printStream29.print((int) ' ');
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream29, false);
        printStream29.write((int) '#');
        printStream29.print((float) (short) 0);
        printStream29.print(10L);
        printStream29.write(1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.setCollapseProperties(false);
        compilerOptions46.setClosurePass(true);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions46.setInputPropertyMapSerialized(byteArray59);
        printStream29.write(byteArray59);
        printStream29.println('#');
        java.util.Locale locale64 = null;
        java.io.IOException iOException67 = new java.io.IOException("java.io.IOException: Unversioned directory");
        java.lang.Throwable[] throwableArray68 = iOException67.getSuppressed();
        java.io.PrintStream printStream69 = printStream29.printf(locale64, "java.io.IOException: java.io.IOException: 2019/07/12 07:12", (java.lang.Object[]) throwableArray68);
        java.util.Locale locale70 = null;
        java.lang.Object[] objArray72 = null;
        java.io.PrintStream printStream73 = printStream69.printf(locale70, "4432#Unversionedhi!rector true\n0\n", objArray72);
        java.io.PrintStream printStream75 = new java.io.PrintStream((java.io.OutputStream) printStream73, false);
        printStream25.print((java.lang.Object) printStream75);
        printStream75.println(true);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printStream73);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler9 = compilerOptions0.getAliasTransformationHandler();
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        boolean boolean16 = compilerOptions11.generateExports;
        compilerOptions11.gatherCssNames = false;
        boolean boolean19 = compilerOptions11.optimizeReturns;
        compilerOptions11.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet22 = compilerOptions11.aliasableStrings;
        compilerOptions11.generateExports = false;
        boolean boolean25 = compilerOptions11.assumeStrictThis();
        boolean boolean26 = compilerOptions11.markNoSideEffectCalls;
        java.util.Set<java.lang.String> strSet27 = compilerOptions11.stripNamePrefixes;
        compilerOptions0.setExtraAnnotationNames(strSet27);
        compilerOptions0.rewriteFunctionExpressions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.enableExternExports(true);
        compilerOptions31.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet36 = compilerOptions31.stripNamePrefixes;
        compilerOptions31.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setLabelRenaming(true);
        compilerOptions39.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions39.checkGlobalThisLevel;
        compilerOptions39.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing47 = compilerOptions39.getTweakProcessing();
        compilerOptions31.setTweakProcessing(tweakProcessing47);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy49 = compilerOptions31.anonymousFunctionNaming;
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = null;
        compilerOptions31.setTweakReplacements(strMap50);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = null;
        compilerOptions52.setCodingConvention(codingConvention55);
        boolean boolean57 = compilerOptions52.computeFunctionSideEffects;
        boolean boolean58 = compilerOptions52.printInputDelimiter;
        compilerOptions52.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions52.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions52.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions52.setInputPropertyMapSerialized(byteArray67);
        compilerOptions31.inputVariableMapSerialized = byteArray67;
        compilerOptions0.inputVariableMapSerialized = byteArray67;
        boolean boolean71 = compilerOptions0.collapseProperties;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing47 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing47.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy49 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy49.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap11 = compilerOptions0.cssRenamingMap;
        boolean boolean12 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.optimizeReturns = true;
        compilerOptions0.setCheckTypes(true);
        org.junit.Assert.assertNull(cssRenamingMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.checkTypes = true;
        compilerOptions0.collapseVariableDeclarations = false;
        compilerOptions0.inlineVariables = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        compilerOptions14.setGeneratePseudoNames(true);
        compilerOptions14.inlineLocalFunctions = false;
        compilerOptions14.setInlineLocalVariables(true);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap25 = compilerOptions14.cssRenamingMap;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet32 = compilerOptions26.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap33 = compilerOptions26.cssRenamingMap;
        compilerOptions26.inlineVariables = false;
        com.google.javascript.jscomp.CompilerOptions.Reach reach36 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions26.setRemoveUnusedVariables(reach36);
        compilerOptions14.setRemoveUnusedVariable(reach36);
        compilerOptions0.setInlineFunctions(reach36);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(cssRenamingMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(cssRenamingMap33);
        org.junit.Assert.assertTrue("'" + reach36 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach36.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.smartNameRemoval = true;
        boolean boolean13 = compilerOptions0.aliasKeywords;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.reportMissingOverride;
        compilerOptions0.setCommonJSModulePathPrefix("// Input %num%");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        java.io.IOException iOException3 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException4 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException3);
        java.io.IOException iOException7 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException7);
        iOException3.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException3);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        compilerOptions0.ideMode = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet12 = compilerOptions11.stripNamePrefixes;
        byte[] byteArray13 = compilerOptions11.inputVariableMapSerialized;
        boolean boolean14 = compilerOptions11.exportTestFunctions;
        compilerOptions11.lineBreak = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap17 = null;
        compilerOptions11.setCustomPasses(customPassExecutionTimeMultimap17);
        compilerOptions11.printInputDelimiter = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        boolean boolean26 = compilerOptions21.generateExports;
        compilerOptions21.gatherCssNames = false;
        boolean boolean29 = compilerOptions21.optimizeReturns;
        compilerOptions21.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet32 = compilerOptions21.aliasableStrings;
        compilerOptions21.generateExports = false;
        boolean boolean35 = compilerOptions21.assumeStrictThis();
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions21.checkGlobalThisLevel;
        compilerOptions11.setCheckUnreachableCode(checkLevel36);
        compilerOptions0.checkGlobalNamesLevel = checkLevel36;
        compilerOptions0.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.setLocale("4432#Unversionedhi!rector true\n0\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean9 = compilerOptions0.crossModuleMethodMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkMissingGetCssNameLevel;
        compilerOptions0.smartNameRemoval = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        boolean boolean18 = compilerOptions13.generateExports;
        compilerOptions13.printInputDelimiter = false;
        compilerOptions13.setCheckSymbols(true);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions13.setInputVariableMapSerialized(byteArray27);
        java.lang.String str29 = compilerOptions13.renamePrefix;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy30 = compilerOptions13.propertyRenaming;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100, 10, 10]");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy30 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy30.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions8.checkGlobalThisLevel;
        compilerOptions8.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing16 = compilerOptions8.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing16);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler18 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.setOutputJsStringUsage(true);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing16.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(aliasTransformationHandler18);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet16 = compilerOptions10.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel17);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = compilerOptions10.getTracerMode();
        compilerOptions0.setTracer(tracerMode19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        boolean boolean29 = compilerOptions21.smartNameRemoval;
        java.util.Set<java.lang.String> strSet30 = compilerOptions21.aliasableStrings;
        compilerOptions0.stripNamePrefixes = strSet30;
        compilerOptions0.setRuntimeTypeCheck(true);
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setMarkNoSideEffectCalls(true);
        compilerOptions0.gatherCssNames = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + tracerMode19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode19.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkProvides;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.renamePrefix = "Unversioned directory";
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        boolean boolean19 = compilerOptions15.jqueryPass;
        compilerOptions15.collapseAnonymousFunctions = false;
        boolean boolean22 = compilerOptions15.checkTypes;
        compilerOptions15.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet33 = compilerOptions32.stripNamePrefixes;
        compilerOptions25.setIdGenerators(strSet33);
        compilerOptions15.setStripNameSuffixes(strSet33);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach40 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions36.setInlineVariables(reach40);
        boolean boolean42 = compilerOptions36.removeUnusedVars;
        boolean boolean43 = compilerOptions36.assumeClosuresOnlyCaptureReferences();
        compilerOptions36.setProcessObjectPropertyString(false);
        compilerOptions36.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean48 = compilerOptions36.removeDeadCode;
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions36.checkGlobalNamesLevel;
        compilerOptions15.checkGlobalThisLevel = checkLevel49;
        compilerOptions0.setCheckRequires(checkLevel49);
        compilerOptions0.setIdeMode(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + reach40 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach40.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        printStream1.println();
        printStream1.print((long) (byte) 0);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.write(1);
        printStream1.close();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream1.println(charArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        boolean boolean22 = compilerOptions17.computeFunctionSideEffects;
        boolean boolean23 = compilerOptions17.printInputDelimiter;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        byte[] byteArray26 = compilerOptions24.inputVariableMapSerialized;
        boolean boolean27 = compilerOptions24.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode28 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions24.setLanguageIn(languageMode28);
        compilerOptions17.setLanguageOut(languageMode28);
        printStream1.print((java.lang.Object) compilerOptions17);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + languageMode28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode28.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.io.IOException: java.io.IOException", "\ufffd\nddd");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 44d??ddd");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.renamePrefix = "";
        com.google.javascript.jscomp.MessageBundle messageBundle8 = null;
        compilerOptions0.messageBundle = messageBundle8;
        compilerOptions0.optimizeCalls = true;
        java.io.PrintStream printStream13 = new java.io.PrintStream("Unversioned directory");
        char[] charArray16 = new char[] { '4', '4' };
        printStream13.print(charArray16);
        printStream13.print((int) ' ');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        com.google.javascript.jscomp.SourceFile.Builder builder22 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException24 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { builder22, iOException25, (byte) 10 };
        java.io.PrintStream printStream28 = printStream20.printf("", objArray27);
        printStream28.println((float) (-1L));
        java.io.PrintStream printStream32 = printStream28.append('#');
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream28, true);
        printStream34.write((int) (byte) 10);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.enableExternExports(true);
        compilerOptions38.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet43 = compilerOptions38.stripNamePrefixes;
        compilerOptions38.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setLabelRenaming(true);
        compilerOptions46.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions46.checkGlobalThisLevel;
        compilerOptions46.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing54 = compilerOptions46.getTweakProcessing();
        compilerOptions38.setTweakProcessing(tweakProcessing54);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy56 = compilerOptions38.anonymousFunctionNaming;
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = null;
        compilerOptions38.setTweakReplacements(strMap57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        boolean boolean64 = compilerOptions59.computeFunctionSideEffects;
        boolean boolean65 = compilerOptions59.printInputDelimiter;
        compilerOptions59.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions59.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions59.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions59.setInputPropertyMapSerialized(byteArray74);
        compilerOptions38.inputVariableMapSerialized = byteArray74;
        printStream37.write(byteArray74, (int) (byte) 0, (int) (byte) 0);
        compilerOptions0.setInputVariableMapSerialized(byteArray74);
        compilerOptions0.setTweakToBooleanLiteral("java.io.IOException: java.io.IOException: Unversioned directory", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing54 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing54.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy56 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy56.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("java.io.IOException: Unversioned directory");
        sourceFile1.clearCachedSource();
        java.io.Reader reader3 = null; // flaky: sourceFile1.getCodeReader();
        java.lang.String str4 = sourceFile1.getName();
        org.junit.Assert.assertNotNull(sourceFile1);
// flaky:         org.junit.Assert.assertNotNull(reader3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: Unversioned directory" + "'", str4, "java.io.IOException: Unversioned directory");
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format6 = compilerOptions0.sourceMapFormat;
        boolean boolean7 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean14 = compilerOptions10.jqueryPass;
        compilerOptions10.setClosurePass(true);
        boolean boolean17 = compilerOptions10.assumeStrictThis();
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.enableExternExports(true);
        java.util.Set<java.lang.String> strSet21 = compilerOptions18.stripTypes;
        compilerOptions18.setRemoveUnusedVars(true);
        compilerOptions18.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet28 = compilerOptions27.stripNamePrefixes;
        byte[] byteArray29 = compilerOptions27.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach30 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions27.setInlineFunctions(reach30);
        compilerOptions18.setRemoveUnusedVariable(reach30);
        compilerOptions10.setRemoveUnusedVariables(reach30);
        compilerOptions0.setInlineFunctions(reach30);
        compilerOptions0.setPrettyPrint(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setLabelRenaming(true);
        compilerOptions37.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions37.checkGlobalThisLevel;
        compilerOptions37.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.ErrorFormat errorFormat45 = compilerOptions37.errorFormat;
        compilerOptions0.errorFormat = errorFormat45;
        compilerOptions0.inlineConstantVars = true;
        compilerOptions0.inlineFunctions = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(format6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + reach30 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach30.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat45);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkProvides;
        java.lang.String str9 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions10.checkProvides;
        java.lang.String[] strArray19 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        compilerOptions10.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList20);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setLabelRenaming(true);
        compilerOptions23.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean28 = compilerOptions23.labelRenaming;
        compilerOptions23.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet32 = compilerOptions31.stripNamePrefixes;
        byte[] byteArray33 = compilerOptions31.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup34 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup34;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        compilerOptions36.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions36.checkProvides;
        compilerOptions31.setWarningLevel(diagnosticGroup34, checkLevel43);
        compilerOptions23.checkUnreachableCode = checkLevel43;
        compilerOptions10.aggressiveVarCheck = checkLevel43;
        compilerOptions10.setCrossModuleCodeMotion(true);
        compilerOptions10.removeUnusedLocalVars = true;
        compilerOptions10.closurePass = false;
        compilerOptions10.removeUnusedPrototypePropertiesInExterns = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap55 = compilerOptions10.customPasses;
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions10.checkGlobalThisLevel;
        compilerOptions0.checkGlobalThisLevel = checkLevel56;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(byteArray33);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup34);
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap55);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.io.IOException iOException36 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException37 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException36);
        int int40 = locationMappingList1.indexOf((java.lang.Object) iOException36);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator41 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setLabelRenaming(true);
        compilerOptions42.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions42.locale = "2019/07/12 07:12";
        compilerOptions42.flowSensitiveInlineVariables = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet52 = compilerOptions51.stripNamePrefixes;
        byte[] byteArray53 = compilerOptions51.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup54 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup54;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions56.checkProvides;
        compilerOptions51.setWarningLevel(diagnosticGroup54, checkLevel63);
        compilerOptions51.setLooseTypes(false);
        java.util.Set<java.lang.String> strSet67 = compilerOptions51.aliasableStrings;
        compilerOptions42.aliasableStrings = strSet67;
        boolean boolean69 = locationMappingList1.containsAll((java.util.Collection<java.lang.String>) strSet67);
        int int70 = locationMappingList1.size();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(locationMappingSpliterator41);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(byteArray53);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup54);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.removeUnusedVars = true;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setClosurePass(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.rewriteFunctionExpressions = false;
        java.util.Set<java.lang.String> strSet9 = compilerOptions0.aliasableStrings;
        compilerOptions0.inlineVariables = false;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard12 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard12);
        compilerOptions0.collapseVariableDeclarations = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.setTightenTypes(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap8);
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setCheckSymbols(false);
        compilerOptions0.inputDelimiter = "4432#Unversionedhi!rector true\n0\n";
        compilerOptions0.setLineLengthThreshold(35);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.setDefineToStringLiteral("", "// Input %num%");
        compilerOptions0.setInstrumentationTemplate("");
        compilerOptions0.setMoveFunctionDeclarations(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.inlineFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet7 = compilerOptions6.stripNamePrefixes;
        byte[] byteArray8 = compilerOptions6.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach9 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions6.setInlineFunctions(reach9);
        compilerOptions0.setInlineFunctions(reach9);
        boolean boolean12 = compilerOptions0.jqueryPass;
        boolean boolean13 = compilerOptions0.closurePass;
        compilerOptions0.removeUnusedLocalVars = false;
        boolean boolean16 = compilerOptions0.recordFunctionInformation;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray17 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList18 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList18, locationMappingArray17);
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean23 = locationMappingList18.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping24 = null;
        boolean boolean25 = locationMappingList18.add(locationMapping24);
        java.lang.Object[] objArray26 = locationMappingList18.toArray();
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet28 = compilerOptions27.stripNamePrefixes;
        byte[] byteArray29 = compilerOptions27.inputVariableMapSerialized;
        boolean boolean30 = compilerOptions27.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setLabelRenaming(true);
        compilerOptions31.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions31.checkGlobalThisLevel;
        compilerOptions27.setCheckGlobalNamesLevel(checkLevel36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        boolean boolean43 = compilerOptions38.computeFunctionSideEffects;
        boolean boolean44 = compilerOptions38.printInputDelimiter;
        compilerOptions38.setGeneratePseudoNames(true);
        boolean boolean47 = compilerOptions38.disambiguateProperties;
        java.util.Set<java.lang.String> strSet48 = compilerOptions38.aliasableStrings;
        compilerOptions27.stripNameSuffixes = strSet48;
        boolean boolean50 = locationMappingList18.removeAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor52 = locationMappingList18.listIterator((int) (byte) 1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet54 = compilerOptions53.stripNamePrefixes;
        byte[] byteArray55 = compilerOptions53.inputVariableMapSerialized;
        compilerOptions53.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler58 = compilerOptions53.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy59 = compilerOptions53.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setRewriteNewDateGoogNow(true);
        boolean boolean63 = compilerOptions60.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach64 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions60.setInlineVariables(reach64);
        compilerOptions60.setPrintInputDelimiter(true);
        boolean boolean68 = compilerOptions60.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle69 = null;
        compilerOptions60.messageBundle = messageBundle69;
        compilerOptions60.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions74 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions74.setRewriteNewDateGoogNow(true);
        boolean boolean77 = compilerOptions74.extractPrototypeMemberDeclarations;
        compilerOptions74.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet80 = compilerOptions74.stripTypePrefixes;
        compilerOptions73.stripTypePrefixes = strSet80;
        compilerOptions60.setAliasableStrings(strSet80);
        compilerOptions53.stripTypePrefixes = strSet80;
        boolean boolean84 = locationMappingList18.containsAll((java.util.Collection<java.lang.String>) strSet80);
        compilerOptions0.setExtraAnnotationNames(strSet80);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertTrue("'" + reach9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach9.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locationMappingArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[null]");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locationMappingItor52);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(aliasTransformationHandler58);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy59 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy59.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + reach64 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach64.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setCheckSymbols(true);
        boolean boolean13 = compilerOptions0.devirtualizePrototypeMethods;
        boolean boolean14 = compilerOptions0.markNoSideEffectCalls;
        compilerOptions0.jqueryPass = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        boolean boolean21 = compilerOptions17.jqueryPass;
        boolean boolean22 = compilerOptions17.assumeClosuresOnlyCaptureReferences();
        compilerOptions17.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions17.setProcessObjectPropertyString(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap27 = null;
        compilerOptions17.setCssRenamingMap(cssRenamingMap27);
        compilerOptions17.checkMissingGetCssNameBlacklist = "-1";
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        boolean boolean35 = compilerOptions31.jqueryPass;
        compilerOptions31.collapseAnonymousFunctions = false;
        compilerOptions31.setManageClosureDependencies(true);
        compilerOptions31.setAssumeStrictThis(false);
        com.google.javascript.jscomp.ErrorHandler errorHandler42 = null;
        compilerOptions31.setErrorHandler(errorHandler42);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        boolean boolean47 = compilerOptions44.extractPrototypeMemberDeclarations;
        compilerOptions44.setCollapseProperties(false);
        compilerOptions44.setClosurePass(true);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions44.setInputPropertyMapSerialized(byteArray57);
        compilerOptions44.setFlowSensitiveInlineVariables(true);
        compilerOptions44.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        boolean boolean66 = compilerOptions63.extractPrototypeMemberDeclarations;
        compilerOptions63.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet69 = compilerOptions63.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream70 = strSet69.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream71 = strSet69.parallelStream();
        compilerOptions44.stripNameSuffixes = strSet69;
        compilerOptions31.setReplaceStringsReservedStrings(strSet69);
        compilerOptions17.setStripTypes(strSet69);
        compilerOptions0.setStripTypePrefixes(strSet69);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertNotNull(strStream71);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = null;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy8);
        compilerOptions0.setInlineConstantVars(true);
        compilerOptions0.aliasExternals = true;
        compilerOptions0.labelRenaming = false;
        compilerOptions0.setClosurePass(false);
        compilerOptions0.setOutputCharset("// Input %num%");
        boolean boolean20 = compilerOptions0.checkControlStructures;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        compilerOptions0.inputDelimiter = "java.io.IOException: Unversioned directory";
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy28 = compilerOptions0.propertyRenaming;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setLabelRenaming(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy28.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping7 = null;
        boolean boolean8 = locationMappingList1.add(locationMapping7);
        java.lang.Object[] objArray9 = locationMappingList1.toArray();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping10 = null;
        boolean boolean11 = locationMappingList1.add(locationMapping10);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping12 = null;
        boolean boolean13 = locationMappingList1.add(locationMapping12);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping15 = null;
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping16 = locationMappingList1.set((int) (byte) 1, locationMapping15);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping18 = null;
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping19 = locationMappingList1.set(2, locationMapping18);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[null]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(locationMapping16);
        org.junit.Assert.assertNull(locationMapping19);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.optimizeParameters = false;
        compilerOptions0.setDefineToStringLiteral("hi!", "Unversioned directory");
        boolean boolean12 = compilerOptions0.prettyPrint;
        compilerOptions0.exportTestFunctions = false;
        compilerOptions0.optimizeArgumentsArray = false;
        compilerOptions0.inlineConstantVars = false;
        compilerOptions0.aliasExternals = false;
        compilerOptions0.setLineBreak(true);
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        compilerOptions0.setDefineToBooleanLiteral("-1", true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setCheckSymbols(true);
        boolean boolean13 = compilerOptions0.devirtualizePrototypeMethods;
        boolean boolean14 = compilerOptions0.optimizeCalls;
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        boolean boolean17 = compilerOptions0.ambiguateProperties;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGeneratePseudoNames(true);
        compilerOptions10.inlineLocalFunctions = false;
        compilerOptions10.setIdeMode(true);
        compilerOptions10.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions23.checkGlobalThisLevel;
        compilerOptions10.checkMissingReturn = checkLevel29;
        compilerOptions0.aggressiveVarCheck = checkLevel29;
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.optimizeCalls = true;
        boolean boolean36 = compilerOptions0.foldConstants;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        compilerOptions8.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions8.brokenClosureRequiresLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup6, checkLevel14);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.smartNameRemoval = true;
        compilerOptions0.setProcessCommonJSModules(true);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        compilerOptions0.removeUnusedVars = true;
        compilerOptions0.setCrossModuleCodeMotion(false);
        boolean boolean12 = compilerOptions0.generateExports;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap15 = compilerOptions0.getTweakReplacements();
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        boolean boolean23 = compilerOptions17.closurePass;
        compilerOptions17.setRemoveAbstractMethods(true);
        compilerOptions17.setPropertyAffinity(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions34.checkProvides;
        java.lang.String[] strArray43 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        compilerOptions34.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList44);
        compilerOptions28.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList44);
        compilerOptions17.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList44);
        compilerOptions0.setReplaceStringsConfiguration("-1", (java.util.List<java.lang.String>) strList44);
        boolean boolean50 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setInferTypes(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.generateExports = false;
        compilerOptions0.jqueryPass = true;
        compilerOptions0.inlineFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach42 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions38.setInlineVariables(reach42);
        compilerOptions38.setPrintInputDelimiter(true);
        boolean boolean46 = compilerOptions38.closurePass;
        compilerOptions38.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        boolean boolean53 = compilerOptions49.jqueryPass;
        boolean boolean54 = compilerOptions49.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setLabelRenaming(true);
        compilerOptions55.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean60 = compilerOptions55.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format61 = compilerOptions55.sourceMapFormat;
        compilerOptions49.setSourceMapFormat(format61);
        compilerOptions38.setSourceMapFormat(format61);
        compilerOptions0.sourceMapFormat = format61;
        boolean boolean65 = compilerOptions0.removeUnusedClassProperties;
        compilerOptions0.setNameReferenceReportPath("");
        boolean boolean68 = compilerOptions0.lineBreak;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + reach42 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach42.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(format61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.setUnaliasableGlobals("Unversioned directory");
        compilerOptions0.checkTypes = true;
        boolean boolean8 = compilerOptions0.prettyPrint;
        compilerOptions0.setSkipAllPasses(true);
        compilerOptions0.setManageClosureDependencies(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("hi!");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = diagnosticGroups0.forName("4432#Unversionedhi!rector true\n0\n");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup8 = diagnosticGroups0.forName("4432#0.010\001\001\000\001\000\ufffd");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
        org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertNull(diagnosticGroup8);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor25 = locationMappingList1.listIterator();
        int int26 = locationMappingList1.size();
        com.google.javascript.jscomp.SourceFile.Builder builder27 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator29 = null;
        com.google.javascript.jscomp.SourceFile sourceFile30 = builder27.buildFromGenerator("hi!", generator29);
        java.nio.charset.Charset charset31 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder32 = builder27.withCharset(charset31);
        java.nio.charset.Charset charset33 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder34 = builder27.withCharset(charset33);
        boolean boolean35 = locationMappingList1.equals((java.lang.Object) builder34);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator36 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping39 = locationMappingList1.set((int) ' ', locationMapping38);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locationMappingItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(sourceFile30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator36);
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        boolean boolean11 = compilerOptions0.collapseProperties;
        compilerOptions0.setLocale("-1");
        boolean boolean14 = compilerOptions0.coalesceVariableNames;
        compilerOptions0.enableExternExports(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.setReserveRawExports(false);
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        compilerOptions0.setLooseTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        boolean boolean34 = compilerOptions30.jqueryPass;
        compilerOptions30.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        compilerOptions37.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions37.checkGlobalThisLevel;
        compilerOptions30.checkProvides = checkLevel43;
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel43;
        compilerOptions0.setInlineLocalVariables(false);
        compilerOptions0.setRuntimeTypeCheck(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention53 = null;
        compilerOptions50.setCodingConvention(codingConvention53);
        compilerOptions50.setGeneratePseudoNames(true);
        compilerOptions50.inlineLocalFunctions = false;
        compilerOptions50.setInlineLocalVariables(true);
        boolean boolean61 = compilerOptions50.optimizeParameters;
        compilerOptions50.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions50.setOutputCharset("java.io.IOException: Unversioned directory");
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap66 = null;
        compilerOptions50.customPasses = customPassExecutionTimeMultimap66;
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions68.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention71 = null;
        compilerOptions68.setCodingConvention(codingConvention71);
        compilerOptions68.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel75 = compilerOptions68.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray76 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList77 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList77, locationMappingArray76);
        compilerOptions68.sourceMapLocationMappings = locationMappingList77;
        boolean boolean80 = compilerOptions68.inlineVariables;
        com.google.javascript.jscomp.CompilerOptions compilerOptions81 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions81.setRewriteNewDateGoogNow(true);
        boolean boolean84 = compilerOptions81.extractPrototypeMemberDeclarations;
        compilerOptions81.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel87 = compilerOptions81.checkGlobalThisLevel;
        compilerOptions81.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode90 = compilerOptions81.getTracerMode();
        compilerOptions68.setTracer(tracerMode90);
        compilerOptions50.setTracerMode(tracerMode90);
        compilerOptions0.setTracer(tracerMode90);
        compilerOptions0.setSpecializeInitialModule(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + checkLevel75 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel75.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + checkLevel87 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel87.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode90 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode90.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        byte[] byteArray37 = compilerOptions0.inputPropertyMapSerialized;
        boolean boolean38 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.collapseProperties = true;
        boolean boolean41 = compilerOptions0.removeDeadCode;
        boolean boolean42 = compilerOptions0.inlineConstantVars;
        compilerOptions0.setIgnoreCajaProperties(true);
        compilerOptions0.setRuntimeTypeCheckLogFunction("java.io.IOException");
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        boolean boolean4 = compilerOptions0.markNoSideEffectCalls;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.crossModuleMethodMotion = true;
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.aliasAllStrings;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet7 = compilerOptions6.stripNamePrefixes;
        byte[] byteArray8 = compilerOptions6.inputVariableMapSerialized;
        boolean boolean9 = compilerOptions6.exportTestFunctions;
        compilerOptions6.setExtractPrototypeMemberDeclarations(true);
        compilerOptions6.reserveRawExports = false;
        compilerOptions6.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions6.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        boolean boolean21 = compilerOptions17.jqueryPass;
        boolean boolean22 = compilerOptions17.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setLabelRenaming(true);
        compilerOptions23.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean28 = compilerOptions23.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format29 = compilerOptions23.sourceMapFormat;
        compilerOptions17.sourceMapFormat = format29;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.setCollapseProperties(false);
        boolean boolean37 = compilerOptions31.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat38 = compilerOptions31.errorFormat;
        compilerOptions17.setErrorFormat(errorFormat38);
        compilerOptions6.setErrorFormat(errorFormat38);
        compilerOptions0.setErrorFormat(errorFormat38);
        boolean boolean42 = compilerOptions0.optimizeParameters;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.aliasStringsBlacklist = "// Input %num%";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(format29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(errorFormat38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setClosurePass(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy7 = compilerOptions0.propertyRenaming;
        compilerOptions0.setSyntheticBlockEndMarker("hi!");
        compilerOptions0.checkTypes = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy7 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy7.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        boolean boolean12 = compilerOptions0.moveFunctionDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        boolean boolean17 = compilerOptions13.jqueryPass;
        compilerOptions13.collapseAnonymousFunctions = false;
        boolean boolean20 = compilerOptions13.checkTypes;
        compilerOptions13.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions13.checkProvides;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel23);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        byte[] byteArray27 = compilerOptions25.inputVariableMapSerialized;
        boolean boolean28 = compilerOptions25.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode29 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions25.setLanguageIn(languageMode29);
        compilerOptions25.setNameAnonymousFunctionsOnly(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.setCollapseProperties(false);
        compilerOptions33.setClosurePass(true);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions33.setInputPropertyMapSerialized(byteArray46);
        compilerOptions33.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions33.reportMissingOverride;
        compilerOptions25.setCheckGlobalNamesLevel(checkLevel50);
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel50;
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet54 = compilerOptions53.stripNamePrefixes;
        byte[] byteArray55 = compilerOptions53.inputVariableMapSerialized;
        compilerOptions53.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions53.setRewriteFunctionExpressions(false);
        boolean boolean60 = compilerOptions53.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel61 = compilerOptions53.checkProvides;
        compilerOptions0.setCheckUnreachableCode(checkLevel61);
        compilerOptions0.removeUnusedLocalVars = false;
        java.lang.Class<?> wildcardClass65 = compilerOptions0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + languageMode29 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode29.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + checkLevel61 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel61.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy8 = compilerOptions0.variableRenaming;
        compilerOptions0.inlineFunctions = false;
        boolean boolean11 = compilerOptions0.checkSymbols;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.inlineVariables = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy8.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkProvides;
        java.lang.String str9 = compilerOptions0.syntheticBlockEndMarker;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        java.util.Set<java.lang.String> strSet9 = compilerOptions0.aliasableStrings;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        boolean boolean15 = compilerOptions10.generateExports;
        compilerOptions10.gatherCssNames = false;
        boolean boolean18 = compilerOptions10.optimizeReturns;
        compilerOptions10.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet21 = compilerOptions10.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        boolean boolean26 = compilerOptions22.jqueryPass;
        compilerOptions22.collapseAnonymousFunctions = false;
        boolean boolean29 = compilerOptions22.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setLabelRenaming(true);
        compilerOptions30.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean35 = compilerOptions30.labelRenaming;
        compilerOptions30.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet39 = compilerOptions38.stripNamePrefixes;
        byte[] byteArray40 = compilerOptions38.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup41 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup41;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention46 = null;
        compilerOptions43.setCodingConvention(codingConvention46);
        compilerOptions43.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions43.checkProvides;
        compilerOptions38.setWarningLevel(diagnosticGroup41, checkLevel50);
        compilerOptions30.checkUnreachableCode = checkLevel50;
        compilerOptions22.setAggressiveVarCheck(checkLevel50);
        compilerOptions10.setAggressiveVarCheck(checkLevel50);
        com.google.javascript.jscomp.ErrorFormat errorFormat55 = compilerOptions10.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat55);
        compilerOptions0.setChainCalls(false);
        boolean boolean59 = compilerOptions0.inlineFunctions;
        compilerOptions0.devirtualizePrototypeMethods = false;
        compilerOptions0.setConvertToDottedProperties(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(byteArray40);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup41);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "// Input %num%", "java.io.IOException", "", "// Input %num%", "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "Unversioned directory", "java.io.IOException: java.io.IOException: 2019/07/12 07:12" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator14 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        compilerOptions15.optimizeParameters = true;
        compilerOptions15.setAliasAllStrings(true);
        int int22 = locationMappingList1.lastIndexOf((java.lang.Object) true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach27 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions23.setInlineVariables(reach27);
        boolean boolean29 = compilerOptions23.removeUnusedVars;
        boolean boolean30 = compilerOptions23.assumeClosuresOnlyCaptureReferences();
        compilerOptions23.setProcessObjectPropertyString(false);
        compilerOptions23.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean35 = compilerOptions23.removeDeadCode;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel36 = null;
        compilerOptions23.sourceMapDetailLevel = detailLevel36;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        compilerOptions38.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions38.checkProvides;
        java.lang.String[] strArray47 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        compilerOptions38.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList48);
        java.util.stream.Stream<java.lang.String> strStream51 = strList48.stream();
        compilerOptions23.setManageClosureDependencies((java.util.List<java.lang.String>) strList48);
        boolean boolean53 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strList48);
        int int54 = locationMappingList1.size();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping55 = null;
        boolean boolean56 = locationMappingList1.add(locationMapping55);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + reach27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach27.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        compilerOptions26.setIdGenerators(strSet34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        compilerOptions36.setGeneratePseudoNames(true);
        compilerOptions36.inlineLocalFunctions = false;
        compilerOptions36.setIdeMode(true);
        compilerOptions36.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        compilerOptions49.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel55 = compilerOptions49.checkGlobalThisLevel;
        compilerOptions36.checkMissingReturn = checkLevel55;
        compilerOptions26.aggressiveVarCheck = checkLevel55;
        compilerOptions0.setCheckUnreachableCode(checkLevel55);
        compilerOptions0.lineBreak = true;
        compilerOptions0.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.setInlineConstantVars(true);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions0.brokenClosureRequiresLevel;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + checkLevel55 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel55.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        java.lang.String str13 = compilerOptions0.checkMissingGetCssNameBlacklist;
        compilerOptions0.setTransformAMDToCJSModules(true);
        compilerOptions0.setInlineVariables(true);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray18 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList19 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList19, locationMappingArray18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        compilerOptions21.setCollapseProperties(false);
        compilerOptions21.setClosurePass(true);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions21.setInputPropertyMapSerialized(byteArray34);
        compilerOptions21.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet44 = compilerOptions38.stripTypePrefixes;
        compilerOptions21.aliasableStrings = strSet44;
        boolean boolean46 = locationMappingList19.removeAll((java.util.Collection<java.lang.String>) strSet44);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup47 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup47;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup47;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup47;
        boolean boolean51 = locationMappingList19.contains((java.lang.Object) diagnosticGroup47);
        java.io.IOException iOException54 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException55 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException54);
        java.lang.Throwable[] throwableArray56 = iOException54.getSuppressed();
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException54);
        int int58 = locationMappingList19.indexOf((java.lang.Object) iOException54);
        int int59 = locationMappingList19.size();
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setLabelRenaming(true);
        compilerOptions60.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions60.setTweakToNumberLiteral("2019/07/12 07:12", 10);
        boolean boolean68 = locationMappingList19.equals((java.lang.Object) "2019/07/12 07:12");
        compilerOptions0.sourceMapLocationMappings = locationMappingList19;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList72 = locationMappingList19.subList((-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locationMappingArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        com.google.javascript.jscomp.SourceFile.Builder builder1 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator3 = null;
        com.google.javascript.jscomp.SourceFile sourceFile4 = builder1.buildFromGenerator("hi!", generator3);
        java.nio.charset.Charset charset5 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = builder1.withCharset(charset5);
        java.nio.charset.Charset charset7 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder8 = builder1.withCharset(charset7);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = builder1.withOriginalPath("Unversioned directory");
        java.nio.charset.Charset charset11 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder12 = builder10.withCharset(charset11);
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder12.buildFromCode("2019/07/12 07:12", "java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Builder builder17 = builder12.withOriginalPath("java.io.IOException");
        com.google.javascript.jscomp.SourceFile sourceFile22 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException", "", "Unversioned directory");
        java.io.Reader reader23 = sourceFile22.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile24 = builder17.buildFromReader("java.io.IOException: -1", reader23);
        com.google.javascript.jscomp.SourceFile sourceFile25 = com.google.javascript.jscomp.SourceFile.fromReader("// Input %num%", reader23);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertNotNull(reader23);
        org.junit.Assert.assertNotNull(sourceFile24);
        org.junit.Assert.assertNotNull(sourceFile25);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor23 = locationMappingList1.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator24 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        byte[] byteArray27 = compilerOptions25.inputVariableMapSerialized;
        boolean boolean28 = compilerOptions25.exportTestFunctions;
        compilerOptions25.setExtractPrototypeMemberDeclarations(true);
        compilerOptions25.reserveRawExports = false;
        compilerOptions25.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        boolean boolean41 = compilerOptions36.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setLabelRenaming(true);
        compilerOptions42.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean47 = compilerOptions42.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format48 = compilerOptions42.sourceMapFormat;
        compilerOptions36.sourceMapFormat = format48;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        compilerOptions50.setCollapseProperties(false);
        boolean boolean56 = compilerOptions50.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat57 = compilerOptions50.errorFormat;
        compilerOptions36.setErrorFormat(errorFormat57);
        compilerOptions25.setErrorFormat(errorFormat57);
        boolean boolean60 = locationMappingList1.remove((java.lang.Object) compilerOptions25);
        com.google.javascript.jscomp.CheckLevel checkLevel61 = compilerOptions25.checkRequires;
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationMappingItor23);
        org.junit.Assert.assertNotNull(locationMappingSpliterator24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(format48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(errorFormat57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + checkLevel61 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel61.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkProvides;
        boolean boolean11 = compilerOptions0.checkControlStructures;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap12 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap12;
        compilerOptions0.markAsCompiled = true;
        boolean boolean16 = compilerOptions0.aliasExternals;
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.setExportTestFunctions(true);
        compilerOptions0.setAcceptConstKeyword(false);
        compilerOptions0.setTweakToBooleanLiteral("java.io.IOException: java.io.IOException", true);
        compilerOptions0.setNameReferenceReportPath("// Input %num%");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setFoldConstants(true);
        java.lang.String str14 = compilerOptions0.instrumentationTemplate;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention18 = null;
        compilerOptions15.setCodingConvention(codingConvention18);
        compilerOptions15.setGeneratePseudoNames(true);
        compilerOptions15.inlineLocalFunctions = false;
        compilerOptions15.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention35 = null;
        compilerOptions32.setCodingConvention(codingConvention35);
        compilerOptions32.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions32.checkProvides;
        compilerOptions26.setReportUnknownTypes(checkLevel39);
        compilerOptions15.setCheckGlobalNamesLevel(checkLevel39);
        compilerOptions15.skipAllCompilerPasses();
        compilerOptions15.checkMissingGetCssNameBlacklist = "hi!";
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy45 = compilerOptions15.propertyRenaming;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy45);
        compilerOptions0.setCheckSymbols(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention52 = null;
        compilerOptions49.setCodingConvention(codingConvention52);
        compilerOptions49.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions49.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray57 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList58 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList58, locationMappingArray57);
        compilerOptions49.sourceMapLocationMappings = locationMappingList58;
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setRewriteNewDateGoogNow(true);
        boolean boolean64 = compilerOptions61.extractPrototypeMemberDeclarations;
        boolean boolean65 = compilerOptions61.jqueryPass;
        compilerOptions61.collapseAnonymousFunctions = false;
        boolean boolean68 = compilerOptions61.checkTypes;
        compilerOptions61.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel71 = compilerOptions61.checkProvides;
        compilerOptions49.checkUnreachableCode = checkLevel71;
        compilerOptions49.setReserveRawExports(false);
        compilerOptions49.setDevirtualizePrototypeMethods(false);
        compilerOptions49.setLooseTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions79 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions79.setRewriteNewDateGoogNow(true);
        boolean boolean82 = compilerOptions79.extractPrototypeMemberDeclarations;
        boolean boolean83 = compilerOptions79.jqueryPass;
        compilerOptions79.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions86 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions86.setRewriteNewDateGoogNow(true);
        boolean boolean89 = compilerOptions86.extractPrototypeMemberDeclarations;
        compilerOptions86.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel92 = compilerOptions86.checkGlobalThisLevel;
        compilerOptions79.checkProvides = checkLevel92;
        compilerOptions49.checkMissingGetCssNameLevel = checkLevel92;
        compilerOptions0.checkGlobalNamesLevel = checkLevel92;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy45 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy45.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + checkLevel71 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel71.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + checkLevel92 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel92.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        java.lang.String str17 = compilerOptions0.inputDelimiter;
        java.lang.String str18 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setInlineFunctions(false);
        compilerOptions0.optimizeReturns = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "// Input %num%" + "'", str17, "// Input %num%");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.setMarkAsCompiled(true);
        compilerOptions0.setAliasableGlobals("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel13 = null;
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel13);
        boolean boolean15 = compilerOptions0.checkTypes;
        compilerOptions0.setTweakToDoubleLiteral("// Input %num%", (double) (short) 10);
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.renamePrefixNamespace = "";
        compilerOptions0.deadAssignmentElimination = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setLabelRenaming(true);
        compilerOptions25.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean30 = compilerOptions25.labelRenaming;
        compilerOptions25.ambiguateProperties = false;
        boolean boolean33 = compilerOptions25.shouldColorizeErrorOutput();
        compilerOptions25.setExternExports(true);
        compilerOptions25.setInlineVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions38.jqueryPass;
        compilerOptions38.collapseAnonymousFunctions = false;
        java.lang.String str45 = compilerOptions38.aliasStringsBlacklist;
        compilerOptions38.instrumentationTemplate = "java.io.IOException";
        java.io.PrintStream printStream49 = new java.io.PrintStream("Unversioned directory");
        char[] charArray52 = new char[] { '4', '4' };
        printStream49.print(charArray52);
        printStream49.print((int) ' ');
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream49.write(byteArray62, (int) (byte) 0, (int) (byte) 1);
        compilerOptions38.setInputVariableMapSerialized(byteArray62);
        compilerOptions25.setInputPropertyMapSerialized(byteArray62);
        compilerOptions0.inputVariableMapSerialized = byteArray62;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet24 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions0.checkGlobalNamesLevel;
        boolean boolean26 = compilerOptions0.crossModuleCodeMotion;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing27 = compilerOptions0.getTweakProcessing();
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention31 = null;
        compilerOptions28.setCodingConvention(codingConvention31);
        compilerOptions28.setGenerateExports(true);
        compilerOptions28.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean37 = compilerOptions28.deadAssignmentElimination;
        compilerOptions28.optimizeCalls = false;
        compilerOptions28.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        boolean boolean42 = compilerOptions28.jqueryPass;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention46 = null;
        compilerOptions43.setCodingConvention(codingConvention46);
        compilerOptions43.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions43.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray51 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList52 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList52, locationMappingArray51);
        compilerOptions43.sourceMapLocationMappings = locationMappingList52;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        boolean boolean58 = compilerOptions55.extractPrototypeMemberDeclarations;
        boolean boolean59 = compilerOptions55.jqueryPass;
        compilerOptions55.collapseAnonymousFunctions = false;
        boolean boolean62 = compilerOptions55.checkTypes;
        compilerOptions55.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel65 = compilerOptions55.checkProvides;
        compilerOptions43.checkUnreachableCode = checkLevel65;
        compilerOptions43.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.setRewriteNewDateGoogNow(true);
        boolean boolean72 = compilerOptions69.extractPrototypeMemberDeclarations;
        boolean boolean73 = compilerOptions69.jqueryPass;
        compilerOptions69.collapseAnonymousFunctions = false;
        boolean boolean76 = compilerOptions69.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention80 = null;
        compilerOptions77.setCodingConvention(codingConvention80);
        compilerOptions77.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions84 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet85 = compilerOptions84.stripNamePrefixes;
        compilerOptions77.setIdGenerators(strSet85);
        compilerOptions69.stripNamePrefixes = strSet85;
        compilerOptions43.setIdGenerators(strSet85);
        compilerOptions28.stripTypePrefixes = strSet85;
        compilerOptions0.stripTypes = strSet85;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing27.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + checkLevel65 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel65.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet85);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        boolean boolean9 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCheckSymbols(true);
        compilerOptions0.preferLineBreakAtEndOfFile = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        boolean boolean20 = compilerOptions16.jqueryPass;
        compilerOptions16.collapseAnonymousFunctions = false;
        boolean boolean23 = compilerOptions16.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setLabelRenaming(true);
        compilerOptions24.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean29 = compilerOptions24.labelRenaming;
        compilerOptions24.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet33 = compilerOptions32.stripNamePrefixes;
        byte[] byteArray34 = compilerOptions32.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup35 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup35;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = null;
        compilerOptions37.setCodingConvention(codingConvention40);
        compilerOptions37.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions37.checkProvides;
        compilerOptions32.setWarningLevel(diagnosticGroup35, checkLevel44);
        compilerOptions24.checkUnreachableCode = checkLevel44;
        compilerOptions16.setAggressiveVarCheck(checkLevel44);
        compilerOptions16.recordFunctionInformation = true;
        boolean boolean50 = compilerOptions16.rewriteFunctionExpressions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        boolean boolean55 = compilerOptions51.jqueryPass;
        compilerOptions51.collapseAnonymousFunctions = false;
        compilerOptions51.setManageClosureDependencies(true);
        compilerOptions51.setMarkAsCompiled(true);
        boolean boolean62 = compilerOptions51.ideMode;
        boolean boolean63 = compilerOptions51.collapseProperties;
        compilerOptions51.enableExternExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions66.setRewriteNewDateGoogNow(true);
        boolean boolean69 = compilerOptions66.extractPrototypeMemberDeclarations;
        compilerOptions66.convertToDottedProperties = true;
        boolean boolean72 = compilerOptions66.inlineConstantVars;
        boolean boolean73 = compilerOptions66.extractPrototypeMemberDeclarations;
        boolean boolean74 = compilerOptions66.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard75 = null;
        compilerOptions66.setWarningsGuard(composeWarningsGuard75);
        compilerOptions66.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach79 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions66.setInlineFunctions(reach79);
        compilerOptions51.setRemoveUnusedVariables(reach79);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode82 = compilerOptions51.getLanguageIn();
        compilerOptions16.setLanguageIn(languageMode82);
        compilerOptions0.setLanguageOut(languageMode82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(byteArray34);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup35);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + reach79 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach79.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + languageMode82 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode82.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.foldConstants;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        boolean boolean15 = compilerOptions10.computeFunctionSideEffects;
        boolean boolean16 = compilerOptions10.printInputDelimiter;
        compilerOptions10.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        compilerOptions19.setIdGenerators(strSet27);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention32 = null;
        compilerOptions29.setCodingConvention(codingConvention32);
        compilerOptions29.setGeneratePseudoNames(true);
        compilerOptions29.inlineLocalFunctions = false;
        compilerOptions29.setIdeMode(true);
        compilerOptions29.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        compilerOptions42.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions42.checkGlobalThisLevel;
        compilerOptions29.checkMissingReturn = checkLevel48;
        compilerOptions19.aggressiveVarCheck = checkLevel48;
        compilerOptions10.reportMissingOverride = checkLevel48;
        compilerOptions0.brokenClosureRequiresLevel = checkLevel48;
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention58 = null;
        compilerOptions55.setCodingConvention(codingConvention58);
        boolean boolean60 = compilerOptions55.generateExports;
        compilerOptions55.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler63 = compilerOptions55.getAliasTransformationHandler();
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray64 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList65 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList65, locationMappingArray64);
        com.google.javascript.jscomp.SourceFile sourceFile69 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean70 = locationMappingList65.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions71 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet72 = compilerOptions71.stripNamePrefixes;
        byte[] byteArray73 = compilerOptions71.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup74 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup74;
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention79 = null;
        compilerOptions76.setCodingConvention(codingConvention79);
        compilerOptions76.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel83 = compilerOptions76.checkProvides;
        compilerOptions71.setWarningLevel(diagnosticGroup74, checkLevel83);
        java.util.Set<java.lang.String> strSet85 = compilerOptions71.stripNamePrefixes;
        boolean boolean86 = locationMappingList65.removeAll((java.util.Collection<java.lang.String>) strSet85);
        compilerOptions55.setStripNameSuffixes(strSet85);
        compilerOptions0.setAliasableStrings(strSet85);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler63);
        org.junit.Assert.assertNotNull(locationMappingArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(sourceFile69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNull(byteArray73);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup74);
        org.junit.Assert.assertTrue("'" + checkLevel83 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel83.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setAcceptConstKeyword(false);
        boolean boolean15 = compilerOptions0.reserveRawExports;
        compilerOptions0.checkMissingGetCssNameBlacklist = "-1";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setOptimizeArgumentsArray(true);
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkMissingReturn;
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention10 = null;
        compilerOptions7.setCodingConvention(codingConvention10);
        compilerOptions7.setDefineToBooleanLiteral("hi!", true);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        compilerOptions7.setInputPropertyMapSerialized(byteArray18);
        compilerOptions0.inputVariableMapSerialized = byteArray18;
        compilerOptions0.setDefineToNumberLiteral("", (int) '4');
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 1]");
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions17.checkProvides;
        compilerOptions11.setReportUnknownTypes(checkLevel24);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel24);
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.checkMissingGetCssNameBlacklist = "hi!";
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy30 = compilerOptions0.propertyRenaming;
        java.lang.Object obj31 = compilerOptions0.clone();
        boolean boolean32 = compilerOptions0.getInferTypes();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy30 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy30.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        printStream1.println((float) (byte) -1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet39 = compilerOptions33.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel40 = null;
        compilerOptions33.setCheckGlobalThisLevel(checkLevel40);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode42 = compilerOptions33.getTracerMode();
        printStream1.print((java.lang.Object) tracerMode42);
        printStream1.write((int) ' ');
        printStream1.println((-1.0d));
        java.util.Locale locale48 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach54 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions50.setInlineVariables(reach54);
        compilerOptions50.setPrintInputDelimiter(true);
        boolean boolean58 = compilerOptions50.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle59 = null;
        compilerOptions50.messageBundle = messageBundle59;
        compilerOptions50.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap63 = null;
        compilerOptions50.cssRenamingMap = cssRenamingMap63;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList65 = compilerOptions50.sourceMapLocationMappings;
        locationMappingList65.clear();
        java.lang.Object[] objArray67 = locationMappingList65.toArray();
        java.io.PrintStream printStream68 = printStream1.format(locale48, "Unversioned directory", objArray67);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + tracerMode42 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode42.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + reach54 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach54.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locationMappingList65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printStream68);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.setCheckControlStructures(true);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy13 = compilerOptions0.anonymousFunctionNaming;
        compilerOptions0.locale = "java.io.IOException: -1";
        compilerOptions0.sourceMapOutputPath = "Unversioned directory";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy13 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy13.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.MessageBundle messageBundle10 = null;
        compilerOptions0.messageBundle = messageBundle10;
        boolean boolean12 = compilerOptions0.optimizeCalls;
        boolean boolean13 = compilerOptions0.smartNameRemoval;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode14 = compilerOptions0.getLanguageOut();
        boolean boolean15 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setRemoveUnusedPrototypeProperties(false);
        compilerOptions0.closurePass = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(languageMode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor23 = locationMappingList1.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator24 = locationMappingList1.spliterator();
        java.io.PrintStream printStream26 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup28 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup28;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup30 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder31 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator33 = null;
        com.google.javascript.jscomp.SourceFile sourceFile34 = builder31.buildFromGenerator("hi!", generator33);
        java.lang.Object[] objArray35 = new java.lang.Object[] { diagnosticGroup28, diagnosticGroup30, sourceFile34 };
        java.io.PrintStream printStream36 = printStream26.printf("2019/07/12 07:12", objArray35);
        printStream26.write((int) (byte) 1);
        java.io.PrintStream printStream40 = printStream26.append((java.lang.CharSequence) "java.io.IOException: Unversioned directory");
        java.util.Locale locale41 = null;
        java.io.PrintStream printStream44 = new java.io.PrintStream("Unversioned directory");
        char[] charArray47 = new char[] { '4', '4' };
        printStream44.print(charArray47);
        printStream44.print((int) ' ');
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream44, false);
        java.io.PrintStream printStream55 = new java.io.PrintStream("Unversioned directory");
        char[] charArray58 = new char[] { '4', '4' };
        printStream55.print(charArray58);
        printStream55.print((int) ' ');
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream55.write(byteArray68, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream74 = new java.io.PrintStream("Unversioned directory");
        char[] charArray77 = new char[] { '4', '4' };
        printStream74.print(charArray77);
        printStream74.print((int) ' ');
        java.io.PrintStream printStream82 = new java.io.PrintStream((java.io.OutputStream) printStream74, false);
        printStream74.write((int) '#');
        java.util.Locale locale85 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream89 = printStream74.format(locale85, "Unversioned directory", objArray88);
        java.io.PrintStream printStream90 = printStream55.format("java.io.IOException: Unversioned directory", objArray88);
        java.io.PrintStream printStream91 = printStream52.printf("java.io.IOException: Unversioned directory", objArray88);
        java.io.PrintStream printStream92 = printStream40.printf(locale41, "java.io.IOException: -1", objArray88);
        printStream40.println((long) 0);
        com.google.javascript.jscomp.Compiler compiler95 = new com.google.javascript.jscomp.Compiler(printStream40);
        int int96 = locationMappingList1.indexOf((java.lang.Object) printStream40);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationMappingItor23);
        org.junit.Assert.assertNotNull(locationMappingSpliterator24);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup28);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup30);
        org.junit.Assert.assertNotNull(sourceFile34);
        org.junit.Assert.assertNotNull(objArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printStream92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setLabelRenaming(true);
        compilerOptions9.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions9.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.enableExternExports(true);
        compilerOptions16.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet21 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.aliasableStrings = strSet21;
        compilerOptions0.setReplaceStringsReservedStrings(strSet21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        boolean boolean29 = compilerOptions24.generateExports;
        compilerOptions24.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler32 = compilerOptions24.getAliasTransformationHandler();
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray33 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList34 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList34, locationMappingArray33);
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean39 = locationMappingList34.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet41 = compilerOptions40.stripNamePrefixes;
        byte[] byteArray42 = compilerOptions40.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup43 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup43;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention48 = null;
        compilerOptions45.setCodingConvention(codingConvention48);
        compilerOptions45.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel52 = compilerOptions45.checkProvides;
        compilerOptions40.setWarningLevel(diagnosticGroup43, checkLevel52);
        java.util.Set<java.lang.String> strSet54 = compilerOptions40.stripNamePrefixes;
        boolean boolean55 = locationMappingList34.removeAll((java.util.Collection<java.lang.String>) strSet54);
        compilerOptions24.setStripNameSuffixes(strSet54);
        compilerOptions0.stripNameSuffixes = strSet54;
        compilerOptions0.generatePseudoNames = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode63 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions60.setTracer(tracerMode63);
        compilerOptions60.setSmartNameRemoval(false);
        compilerOptions60.setOptimizeReturns(false);
        boolean boolean69 = compilerOptions60.aliasKeywords;
        boolean boolean70 = compilerOptions60.labelRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions71 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions71.setRewriteNewDateGoogNow(true);
        boolean boolean74 = compilerOptions71.extractPrototypeMemberDeclarations;
        boolean boolean75 = compilerOptions71.jqueryPass;
        compilerOptions71.collapseAnonymousFunctions = false;
        java.lang.String str78 = compilerOptions71.aliasStringsBlacklist;
        compilerOptions71.inlineGetters = false;
        compilerOptions71.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions71.setAliasStringsBlacklist("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel85 = compilerOptions71.checkGlobalThisLevel;
        compilerOptions60.setReportUnknownTypes(checkLevel85);
        compilerOptions0.brokenClosureRequiresLevel = checkLevel85;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler32);
        org.junit.Assert.assertNotNull(locationMappingArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(byteArray42);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup43);
        org.junit.Assert.assertTrue("'" + checkLevel52 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel52.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + tracerMode63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode63.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + checkLevel85 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel85.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap8;
        boolean boolean10 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet17 = compilerOptions11.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel18 = null;
        compilerOptions11.setCheckGlobalThisLevel(checkLevel18);
        com.google.javascript.jscomp.SourceMap.Format format20 = compilerOptions11.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy26 = compilerOptions21.anonymousFunctionNaming;
        compilerOptions11.anonymousFunctionNaming = anonymousFunctionNamingPolicy26;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy26);
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(format20);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy26 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy26.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        com.google.javascript.jscomp.CompilerOptions.Reach reach21 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions23.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray31 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList32 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList32, locationMappingArray31);
        compilerOptions23.sourceMapLocationMappings = locationMappingList32;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        boolean boolean39 = compilerOptions35.jqueryPass;
        compilerOptions35.collapseAnonymousFunctions = false;
        boolean boolean42 = compilerOptions35.checkTypes;
        compilerOptions35.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions35.checkProvides;
        compilerOptions23.checkUnreachableCode = checkLevel45;
        compilerOptions23.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention52 = null;
        compilerOptions49.setCodingConvention(codingConvention52);
        compilerOptions49.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet57 = compilerOptions56.stripNamePrefixes;
        compilerOptions49.setIdGenerators(strSet57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGeneratePseudoNames(true);
        compilerOptions59.inlineLocalFunctions = false;
        compilerOptions59.setIdeMode(true);
        compilerOptions59.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions72 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions72.setRewriteNewDateGoogNow(true);
        boolean boolean75 = compilerOptions72.extractPrototypeMemberDeclarations;
        compilerOptions72.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel78 = compilerOptions72.checkGlobalThisLevel;
        compilerOptions59.checkMissingReturn = checkLevel78;
        compilerOptions49.aggressiveVarCheck = checkLevel78;
        compilerOptions23.setCheckUnreachableCode(checkLevel78);
        compilerOptions0.setReportMissingOverride(checkLevel78);
        boolean boolean83 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        compilerOptions0.setRemoveUnusedLocalVars(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + reach21 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach21.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + checkLevel78 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel78.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.collapseVariableDeclarations = true;
        compilerOptions0.setRemoveUnusedVars(false);
        compilerOptions0.setCheckTypes(false);
        compilerOptions0.setProcessCommonJSModules(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap11 = compilerOptions0.cssRenamingMap;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet18 = compilerOptions12.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap19 = compilerOptions12.cssRenamingMap;
        compilerOptions12.inlineVariables = false;
        com.google.javascript.jscomp.CompilerOptions.Reach reach22 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions12.setRemoveUnusedVariables(reach22);
        compilerOptions0.setRemoveUnusedVariable(reach22);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.convertToDottedProperties = true;
        boolean boolean31 = compilerOptions25.inlineConstantVars;
        boolean boolean32 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.optimizeCalls = true;
        compilerOptions25.removeUnusedPrototypeProperties = false;
        compilerOptions25.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode39 = compilerOptions25.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        boolean boolean44 = compilerOptions40.jqueryPass;
        compilerOptions40.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions47.checkGlobalThisLevel;
        compilerOptions40.checkProvides = checkLevel53;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        boolean boolean58 = compilerOptions55.extractPrototypeMemberDeclarations;
        compilerOptions55.convertToDottedProperties = true;
        boolean boolean61 = compilerOptions55.inlineConstantVars;
        boolean boolean62 = compilerOptions55.extractPrototypeMemberDeclarations;
        compilerOptions55.optimizeCalls = true;
        compilerOptions55.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        boolean boolean70 = compilerOptions67.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach71 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions67.setInlineVariables(reach71);
        compilerOptions67.setPrintInputDelimiter(true);
        boolean boolean75 = compilerOptions67.closurePass;
        compilerOptions67.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.setRewriteNewDateGoogNow(true);
        boolean boolean81 = compilerOptions78.extractPrototypeMemberDeclarations;
        boolean boolean82 = compilerOptions78.jqueryPass;
        boolean boolean83 = compilerOptions78.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions84 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions84.setLabelRenaming(true);
        compilerOptions84.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean89 = compilerOptions84.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format90 = compilerOptions84.sourceMapFormat;
        compilerOptions78.setSourceMapFormat(format90);
        compilerOptions67.setSourceMapFormat(format90);
        compilerOptions55.sourceMapFormat = format90;
        compilerOptions40.sourceMapFormat = format90;
        compilerOptions25.sourceMapFormat = format90;
        compilerOptions0.sourceMapFormat = format90;
        compilerOptions0.markAsCompiled = true;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel99 = compilerOptions0.sourceMapDetailLevel;
        org.junit.Assert.assertNull(cssRenamingMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(cssRenamingMap19);
        org.junit.Assert.assertTrue("'" + reach22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach22.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + tracerMode39 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode39.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + reach71 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach71.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(format90);
        org.junit.Assert.assertNotNull(detailLevel99);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream16.print(false);
        java.io.PrintStream printStream26 = printStream16.append((java.lang.CharSequence) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet35 = compilerOptions34.stripNamePrefixes;
        compilerOptions27.setIdGenerators(strSet35);
        java.lang.String[] strArray41 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        compilerOptions27.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList42);
        compilerOptions27.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions27.setAliasKeywords(false);
        printStream16.println((java.lang.Object) compilerOptions27);
        printStream16.println();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap13;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList15 = compilerOptions0.sourceMapLocationMappings;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention19 = null;
        compilerOptions16.setCodingConvention(codingConvention19);
        boolean boolean21 = compilerOptions16.generateExports;
        compilerOptions16.gatherCssNames = false;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy24 = compilerOptions16.variableRenaming;
        compilerOptions0.variableRenaming = variableRenamingPolicy24;
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        java.util.Set<java.lang.String> strSet28 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.setPropertyAffinity(true);
        compilerOptions0.setMarkNoSideEffectCalls(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingList15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy24 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy24.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.setAliasableGlobals("java.io.IOException: ");
        compilerOptions0.setAliasKeywords(true);
        compilerOptions0.setOutputCharset("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.SourceMap.Format format29 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.setCheckSuspiciousCode(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(format29);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineConstantVars(true);
        compilerOptions0.setTweakToStringLiteral("", "java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        boolean boolean9 = compilerOptions6.extractPrototypeMemberDeclarations;
        compilerOptions6.setCollapseProperties(false);
        compilerOptions6.setClosurePass(true);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions6.setInputPropertyMapSerialized(byteArray19);
        compilerOptions6.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle23 = null;
        compilerOptions6.messageBundle = messageBundle23;
        com.google.javascript.jscomp.MessageBundle messageBundle25 = null;
        compilerOptions6.messageBundle = messageBundle25;
        compilerOptions6.lineBreak = true;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions6.checkMissingGetCssNameLevel;
        compilerOptions0.setAggressiveVarCheck(checkLevel29);
        compilerOptions0.setFoldConstants(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.aggressiveVarCheck;
        boolean boolean13 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException", 100);
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        compilerOptions36.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions36.checkProvides;
        compilerOptions30.setReportUnknownTypes(checkLevel43);
        compilerOptions19.setCheckGlobalNamesLevel(checkLevel43);
        compilerOptions0.setCheckMissingReturn(checkLevel43);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        boolean boolean51 = compilerOptions47.jqueryPass;
        compilerOptions47.setReplaceIdGenerators(true);
        compilerOptions47.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel56 = null;
        compilerOptions47.setReportMissingOverride(checkLevel56);
        com.google.javascript.jscomp.SourceMap.Format format58 = null;
        compilerOptions47.setSourceMapFormat(format58);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention63 = null;
        compilerOptions60.setCodingConvention(codingConvention63);
        compilerOptions60.setGeneratePseudoNames(true);
        compilerOptions60.inlineLocalFunctions = false;
        compilerOptions60.setIdeMode(true);
        compilerOptions60.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet73 = compilerOptions60.aliasableStrings;
        compilerOptions47.aliasableStrings = strSet73;
        compilerOptions0.setExtraAnnotationNames(strSet73);
        boolean boolean76 = compilerOptions0.generatePseudoNames;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        com.google.javascript.jscomp.Compiler.CodeBuilder codeBuilder0 = new com.google.javascript.jscomp.Compiler.CodeBuilder();
        java.lang.String str1 = codeBuilder0.toString();
        int int2 = codeBuilder0.getLength();
        java.lang.String str3 = codeBuilder0.toString();
        java.lang.String str4 = codeBuilder0.toString();
        java.lang.String str5 = codeBuilder0.toString();
        java.lang.String str6 = codeBuilder0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing9 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions0.setTweakProcessing(tweakProcessing9);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = true;
        boolean boolean13 = compilerOptions0.checkControlStructures;
        compilerOptions0.markAsCompiled = false;
        boolean boolean16 = compilerOptions0.preferLineBreakAtEndOfFile;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing9.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: ";
        boolean boolean16 = compilerOptions0.rewriteFunctionExpressions;
        compilerOptions0.setSmartNameRemoval(false);
        compilerOptions0.setCollapseObjectLiterals(true);
        boolean boolean21 = compilerOptions0.disambiguateProperties;
        compilerOptions0.inputDelimiter = "java.io.IOException";
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        boolean boolean14 = compilerOptions0.jqueryPass;
        compilerOptions0.instrumentationTemplate = "Unversioned directory";
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        compilerOptions0.disambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler21 = compilerOptions0.getAliasTransformationHandler();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler21);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromCode("4432#0.010\001\001\000\001\000\ufffd", "java.io.IOException: java.io.IOException", "-1");
        org.junit.Assert.assertNotNull(sourceFile3);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.resetWarningsGuard();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet17 = compilerOptions11.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap18 = compilerOptions11.cssRenamingMap;
        compilerOptions11.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach21 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions11.setInlineFunctions(reach21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet29 = compilerOptions23.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap30 = compilerOptions23.cssRenamingMap;
        compilerOptions23.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach33 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions23.setInlineFunctions(reach33);
        compilerOptions11.setRemoveUnusedVariable(reach33);
        compilerOptions0.setRemoveUnusedVariables(reach33);
        boolean boolean37 = compilerOptions0.ambiguateProperties;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet39 = compilerOptions38.stripNamePrefixes;
        byte[] byteArray40 = compilerOptions38.inputVariableMapSerialized;
        boolean boolean41 = compilerOptions38.exportTestFunctions;
        compilerOptions38.lineBreak = false;
        boolean boolean44 = compilerOptions38.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode45 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions38.setLanguageOut(languageMode45);
        compilerOptions0.setLanguageIn(languageMode45);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(cssRenamingMap18);
        org.junit.Assert.assertTrue("'" + reach21 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach21.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(cssRenamingMap30);
        org.junit.Assert.assertTrue("'" + reach33 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach33.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + languageMode45 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode45.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        boolean boolean13 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        java.lang.String str14 = compilerOptions0.syntheticBlockEndMarker;
        boolean boolean15 = compilerOptions0.checkSuspiciousCode;
        compilerOptions0.inputDelimiter = "java.io.IOException: java.io.IOException: java.io.IOException: ";
        boolean boolean18 = compilerOptions0.removeDeadCode;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setPropertyAffinity(true);
        boolean boolean26 = compilerOptions19.closurePass;
        compilerOptions19.setCheckCaja(true);
        compilerOptions19.closurePass = true;
        boolean boolean31 = compilerOptions19.markAsCompiled;
        compilerOptions19.setProcessCommonJSModules(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach38 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions34.setInlineVariables(reach38);
        boolean boolean40 = compilerOptions34.removeUnusedVars;
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention44 = null;
        compilerOptions41.setCodingConvention(codingConvention44);
        boolean boolean46 = compilerOptions41.generateExports;
        compilerOptions41.gatherCssNames = false;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy49 = compilerOptions41.variableRenaming;
        compilerOptions34.variableRenaming = variableRenamingPolicy49;
        compilerOptions19.setVariableRenaming(variableRenamingPolicy49);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy52 = null;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy49, propertyRenamingPolicy52);
        compilerOptions0.setMarkNoSideEffectCalls(true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + reach38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach38.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy49 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy49.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.write((int) (byte) 1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream16.println((long) (byte) 100);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setClosurePass(true);
        compilerOptions0.setCollapseObjectLiterals(false);
        boolean boolean9 = compilerOptions0.generatePseudoNames;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet17 = compilerOptions11.stripTypePrefixes;
        compilerOptions10.stripTypePrefixes = strSet17;
        compilerOptions10.setChainCalls(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap21 = null;
        compilerOptions10.setCustomPasses(customPassExecutionTimeMultimap21);
        compilerOptions10.setClosurePass(true);
        compilerOptions10.setSourceMapOutputPath("hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        boolean boolean33 = compilerOptions27.inlineConstantVars;
        boolean boolean34 = compilerOptions27.extractPrototypeMemberDeclarations;
        boolean boolean35 = compilerOptions27.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard36 = null;
        compilerOptions27.setWarningsGuard(composeWarningsGuard36);
        compilerOptions27.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach40 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions27.setInlineFunctions(reach40);
        compilerOptions10.setRemoveUnusedVariables(reach40);
        compilerOptions0.setRemoveUnusedVariables(reach40);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + reach40 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach40.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromGenerator("java.io.IOException: 2019/07/12 07:12", generator1);
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        java.io.IOException iOException2 = new java.io.IOException("4432#0.010\001\001\000\001\000\ufffd");
        java.io.IOException iOException3 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException2);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.inlineFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet7 = compilerOptions6.stripNamePrefixes;
        byte[] byteArray8 = compilerOptions6.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach9 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions6.setInlineFunctions(reach9);
        compilerOptions0.setInlineFunctions(reach9);
        boolean boolean12 = compilerOptions0.jqueryPass;
        boolean boolean13 = compilerOptions0.closurePass;
        compilerOptions0.removeUnusedLocalVars = false;
        boolean boolean16 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.setInputDelimiter("4432#Unversionedhi!rector true\n0\n");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertTrue("'" + reach9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach9.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.reportMissingOverride;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions8.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions8.reportMissingOverride;
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel12;
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException: ", (int) (byte) 0);
        compilerOptions0.setGroupVariableDeclarations(false);
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions0.checkMissingReturn;
        compilerOptions0.setComputeFunctionSideEffects(false);
        boolean boolean24 = compilerOptions0.prettyPrint;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("Unversioned directory");
        compilerOptions0.removeTryCatchFinally = true;
        compilerOptions0.setUnaliasableGlobals("hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("hi!");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = diagnosticGroups0.forName("4432#Unversionedhi!rector true\n0\n");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup8 = diagnosticGroups0.forName("java.io.IOException: Unversioned directory");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
        org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertNull(diagnosticGroup8);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions8.checkGlobalThisLevel;
        compilerOptions8.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing16 = compilerOptions8.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing16);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler18 = compilerOptions0.getAliasTransformationHandler();
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap19 = compilerOptions0.customPasses;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: -1";
        compilerOptions0.computeFunctionSideEffects = true;
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing16.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(aliasTransformationHandler18);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap19);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder0.buildFromCode("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", "// Input %num%");
        com.google.javascript.jscomp.SourceFile.Generator generator14 = null;
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder0.buildFromGenerator("java.io.IOException: -1", generator14);
        com.google.javascript.jscomp.SourceFile sourceFile17 = builder0.buildFromFile("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder0.buildFromCode("java.io.IOException: // Input %num%", "java.io.IOException: ");
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertNotNull(sourceFile17);
        org.junit.Assert.assertNotNull(sourceFile20);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        compilerOptions0.setInlineLocalVariables(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler5 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy6 = compilerOptions0.propertyRenaming;
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: ");
        compilerOptions0.checkSuspiciousCode = false;
        boolean boolean11 = compilerOptions0.reserveRawExports;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler5);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy6 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy6.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        compilerOptions0.setOptimizeParameters(true);
        compilerOptions0.setTransformAMDToCJSModules(false);
        boolean boolean18 = compilerOptions0.optimizeReturns;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.setChainCalls(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap11 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap11);
        compilerOptions0.exportTestFunctions = false;
        boolean boolean15 = compilerOptions0.optimizeCalls;
        java.lang.String str16 = compilerOptions0.checkMissingGetCssNameBlacklist;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode17 = compilerOptions0.getLanguageIn();
        compilerOptions0.optimizeArgumentsArray = false;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + languageMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode17.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setGroupVariableDeclarations(false);
        compilerOptions0.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach26 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions22.setInlineVariables(reach26);
        compilerOptions22.setPrintInputDelimiter(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy30 = null;
        compilerOptions22.setPropertyRenaming(propertyRenamingPolicy30);
        compilerOptions22.setInlineConstantVars(true);
        compilerOptions22.aliasExternals = true;
        compilerOptions22.labelRenaming = false;
        compilerOptions22.setClosurePass(false);
        compilerOptions22.closurePass = true;
        java.util.Set<java.lang.String> strSet42 = compilerOptions22.stripNamePrefixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        boolean boolean46 = compilerOptions43.extractPrototypeMemberDeclarations;
        compilerOptions43.setCollapseProperties(false);
        boolean boolean49 = compilerOptions43.closurePass;
        compilerOptions43.setRemoveAbstractMethods(true);
        compilerOptions43.recordFunctionInformation = false;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray54 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList55 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList55, locationMappingArray54);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        boolean boolean60 = compilerOptions57.extractPrototypeMemberDeclarations;
        compilerOptions57.convertToDottedProperties = true;
        boolean boolean63 = compilerOptions57.inlineConstantVars;
        boolean boolean64 = compilerOptions57.extractPrototypeMemberDeclarations;
        boolean boolean65 = compilerOptions57.reserveRawExports;
        boolean boolean66 = locationMappingList55.remove((java.lang.Object) boolean65);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention70 = null;
        compilerOptions67.setCodingConvention(codingConvention70);
        compilerOptions67.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions74 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet75 = compilerOptions74.stripNamePrefixes;
        compilerOptions67.setIdGenerators(strSet75);
        java.util.stream.Stream<java.lang.String> strStream77 = strSet75.stream();
        boolean boolean78 = locationMappingList55.retainAll((java.util.Collection<java.lang.String>) strSet75);
        compilerOptions43.setStripTypes(strSet75);
        compilerOptions22.setStripTypes(strSet75);
        compilerOptions0.stripTypes = strSet75;
        boolean boolean82 = compilerOptions0.optimizeArgumentsArray;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + reach26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach26.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locationMappingArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        java.lang.String str5 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setAliasExternals(true);
        compilerOptions0.collapseAnonymousFunctions = true;
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: -1");
        compilerOptions0.setInlineGetters(false);
        byte[] byteArray14 = compilerOptions0.inputVariableMapSerialized;
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.instrumentationTemplate = "java.io.IOException";
        boolean boolean22 = compilerOptions12.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.aggressiveVarCheck = checkLevel23;
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.generatePseudoNames = true;
        compilerOptions0.setRemoveUnusedPrototypeProperties(false);
        boolean boolean31 = compilerOptions0.smartNameRemoval;
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        compilerOptions0.setRuntimeTypeCheckLogFunction("hi!");
        compilerOptions0.setOptimizeParameters(true);
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap20 = compilerOptions0.customPasses;
        compilerOptions0.setRemoveClosureAsserts(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap20);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream20.print((int) (byte) 0);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        printStream20.print((float) (byte) -1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention31 = null;
        compilerOptions28.setCodingConvention(codingConvention31);
        compilerOptions28.setPropertyAffinity(true);
        boolean boolean35 = compilerOptions28.closurePass;
        boolean boolean36 = compilerOptions28.checkTypes;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode37 = null;
        compilerOptions28.setTracer(tracerMode37);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray39 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList40 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList40, locationMappingArray39);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        compilerOptions42.setCollapseProperties(false);
        compilerOptions42.setClosurePass(true);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions42.setInputPropertyMapSerialized(byteArray55);
        compilerOptions42.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        boolean boolean62 = compilerOptions59.extractPrototypeMemberDeclarations;
        compilerOptions59.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet65 = compilerOptions59.stripTypePrefixes;
        compilerOptions42.aliasableStrings = strSet65;
        boolean boolean67 = locationMappingList40.removeAll((java.util.Collection<java.lang.String>) strSet65);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup68 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup68;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup68;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup68;
        boolean boolean72 = locationMappingList40.contains((java.lang.Object) diagnosticGroup68);
        compilerOptions28.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList40);
        com.google.javascript.jscomp.CompilerOptions.TracerMode[] tracerModeArray74 = new com.google.javascript.jscomp.CompilerOptions.TracerMode[] {};
        com.google.javascript.jscomp.CompilerOptions.TracerMode[] tracerModeArray75 = locationMappingList40.toArray(tracerModeArray74);
        java.io.PrintStream printStream76 = printStream20.printf("java.io.IOException: java.io.IOException: java.io.IOException: ", (java.lang.Object[]) tracerModeArray74);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locationMappingArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(tracerModeArray74);
        org.junit.Assert.assertNotNull(tracerModeArray75);
        org.junit.Assert.assertNotNull(printStream76);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.convertToDottedProperties = true;
        boolean boolean15 = compilerOptions9.inlineConstantVars;
        boolean boolean16 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean17 = compilerOptions9.reserveRawExports;
        compilerOptions9.computeFunctionSideEffects = false;
        compilerOptions9.setOptimizeCalls(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = null;
        compilerOptions9.setSourceMapDetailLevel(detailLevel22);
        compilerOptions9.setProtectHiddenSideEffects(true);
        java.io.PrintStream printStream27 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream29 = new java.io.PrintStream("Unversioned directory");
        char[] charArray32 = new char[] { '4', '4' };
        printStream29.print(charArray32);
        printStream27.print(charArray32);
        java.io.PrintStream printStream36 = new java.io.PrintStream("Unversioned directory");
        char[] charArray39 = new char[] { '4', '4' };
        printStream36.print(charArray39);
        printStream36.print((int) ' ');
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream36.write(byteArray49, (int) (byte) 0, (int) (byte) 1);
        printStream27.write(byteArray49);
        compilerOptions9.setInputPropertyMapSerialized(byteArray49);
        compilerOptions0.inputVariableMapSerialized = byteArray49;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        boolean boolean59 = compilerOptions56.extractPrototypeMemberDeclarations;
        compilerOptions56.convertToDottedProperties = true;
        boolean boolean62 = compilerOptions56.inlineConstantVars;
        boolean boolean63 = compilerOptions56.extractPrototypeMemberDeclarations;
        boolean boolean64 = compilerOptions56.reserveRawExports;
        java.util.Set<java.lang.String> strSet65 = compilerOptions56.stripNamePrefixes;
        compilerOptions0.setStripNamePrefixes(strSet65);
        compilerOptions0.generateExports = true;
        compilerOptions0.setPropertyAffinity(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.enableExternExports(true);
        java.util.Set<java.lang.String> strSet20 = compilerOptions17.stripTypes;
        compilerOptions0.stripTypePrefixes = strSet20;
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention25 = null;
        compilerOptions22.setCodingConvention(codingConvention25);
        compilerOptions22.setGeneratePseudoNames(true);
        compilerOptions22.inlineLocalFunctions = false;
        compilerOptions22.setIdeMode(true);
        compilerOptions22.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        compilerOptions35.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions35.checkGlobalThisLevel;
        compilerOptions22.checkMissingReturn = checkLevel41;
        compilerOptions22.checkMissingGetCssNameBlacklist = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention48 = null;
        compilerOptions45.setCodingConvention(codingConvention48);
        compilerOptions45.setPropertyAffinity(true);
        boolean boolean52 = compilerOptions45.closurePass;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy53 = compilerOptions45.anonymousFunctionNaming;
        compilerOptions22.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy53);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy53;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode56 = compilerOptions0.getTracerMode();
        compilerOptions0.generatePseudoNames = false;
        compilerOptions0.setConvertToDottedProperties(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy53 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy53.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode56 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode56.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Generator generator7 = null;
        com.google.javascript.jscomp.SourceFile sourceFile8 = builder5.buildFromGenerator("hi!", generator7);
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder10 = builder5.withCharset(charset9);
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder5.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset13 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder14 = builder5.withCharset(charset13);
        com.google.javascript.jscomp.SourceFile.Generator generator16 = null;
        com.google.javascript.jscomp.SourceFile sourceFile17 = builder5.buildFromGenerator("2019/07/12 07:12", generator16);
        com.google.javascript.jscomp.SourceFile.Generator generator19 = null;
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder5.buildFromGenerator("java.io.IOException: java.io.IOException: ", generator19);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Region region22 = sourceFile20.getRegion((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(sourceFile17);
        org.junit.Assert.assertNotNull(sourceFile20);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setCheckSymbols(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode11 = compilerOptions0.getTracerMode();
        java.lang.String str12 = compilerOptions0.renamePrefixNamespace;
        java.lang.String str13 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.optimizeReturns = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + tracerMode11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode11.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Generator generator11 = null;
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder9.buildFromGenerator("java.io.IOException: ", generator11);
        com.google.javascript.jscomp.SourceFile.Builder builder14 = builder9.withOriginalPath("hi!");
        java.nio.charset.Charset charset15 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder16 = builder9.withCharset(charset15);
        java.nio.charset.Charset charset17 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder18 = builder9.withCharset(charset17);
        java.nio.charset.Charset charset19 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder20 = builder18.withCharset(charset19);
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile23 = builder18.buildFromInputStream("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.jqueryPass;
        compilerOptions0.crossModuleCodeMotion = true;
        compilerOptions0.setComputeFunctionSideEffects(true);
        boolean boolean21 = compilerOptions0.getInferTypes();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setMoveFunctionDeclarations(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean13 = compilerOptions9.jqueryPass;
        compilerOptions9.collapseAnonymousFunctions = false;
        boolean boolean16 = compilerOptions9.checkTypes;
        compilerOptions9.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        compilerOptions19.setIdGenerators(strSet27);
        compilerOptions9.setStripNameSuffixes(strSet27);
        compilerOptions0.stripTypePrefixes = strSet27;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions0.reportMissingOverride;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy32 = compilerOptions0.variableRenaming;
        compilerOptions0.setDeadAssignmentElimination(false);
        compilerOptions0.setMarkAsCompiled(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy32 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy32.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy6 = compilerOptions0.variableRenaming;
        compilerOptions0.setOptimizeParameters(false);
        compilerOptions0.setReserveRawExports(false);
        compilerOptions0.setRemoveDeadCode(true);
        boolean boolean13 = compilerOptions0.optimizeReturns;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy6 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy6.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        boolean boolean11 = compilerOptions0.markNoSideEffectCalls;
        compilerOptions0.moveFunctionDeclarations = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap14 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap14;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        java.lang.Object obj11 = compilerOptions0.clone();
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        boolean boolean17 = compilerOptions12.computeFunctionSideEffects;
        boolean boolean18 = compilerOptions12.printInputDelimiter;
        compilerOptions12.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions12.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions12.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions12.setInputPropertyMapSerialized(byteArray27);
        compilerOptions0.setInputPropertyMapSerialized(byteArray27);
        compilerOptions0.setCommonJSModulePathPrefix("hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap8;
        compilerOptions0.setClosurePass(false);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        compilerOptions0.setDefineReplacements(strMap12);
        boolean boolean14 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: Unversioned directory");
        boolean boolean17 = compilerOptions0.ambiguateProperties;
        compilerOptions0.setRenamePrefix("java.io.IOException: -1");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        compilerOptions24.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions24.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray32 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList33 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList33, locationMappingArray32);
        compilerOptions24.sourceMapLocationMappings = locationMappingList33;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        compilerOptions36.collapseAnonymousFunctions = false;
        boolean boolean43 = compilerOptions36.checkTypes;
        compilerOptions36.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions36.checkProvides;
        compilerOptions24.checkUnreachableCode = checkLevel46;
        compilerOptions0.aggressiveVarCheck = checkLevel46;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: ";
        compilerOptions0.setSmartNameRemoval(false);
        compilerOptions0.setLocale("java.io.IOException: -1");
        compilerOptions0.setTweakToBooleanLiteral("java.io.IOException: java.io.IOException: 2019/07/12 07:12", false);
        compilerOptions0.renamePrefix = "hi!";
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        compilerOptions7.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions7.checkGlobalThisLevel;
        compilerOptions0.checkProvides = checkLevel13;
        compilerOptions0.setGatherCssNames(true);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.checkGlobalThisLevel;
        boolean boolean18 = compilerOptions0.optimizeCalls;
        compilerOptions0.setInstrumentationTemplate("Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing9 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions0.setTweakProcessing(tweakProcessing9);
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: ", (int) (short) 10);
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: ";
        java.util.Set<java.lang.String> strSet16 = compilerOptions0.aliasableStrings;
        boolean boolean17 = compilerOptions0.inlineGetters;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing9.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        printStream1.print(0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean14 = compilerOptions10.jqueryPass;
        boolean boolean15 = compilerOptions10.deadAssignmentElimination;
        compilerOptions10.labelRenaming = true;
        compilerOptions10.setSyntheticBlockStartMarker("");
        compilerOptions10.ambiguateProperties = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap22 = compilerOptions10.getDefineReplacements();
        printStream1.println((java.lang.Object) compilerOptions10);
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard24 = null;
        compilerOptions10.setWarningsGuard(composeWarningsGuard24);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy8 = compilerOptions0.variableRenaming;
        compilerOptions0.inlineFunctions = false;
        boolean boolean11 = compilerOptions0.checkSymbols;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.setRenamePrefixNamespace("");
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.setSkipAllPasses(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy8 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy8.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        boolean boolean9 = compilerOptions6.extractPrototypeMemberDeclarations;
        compilerOptions6.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions6.checkGlobalThisLevel;
        compilerOptions0.setAggressiveVarCheck(checkLevel12);
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.jqueryPass = false;
        compilerOptions0.setReplaceIdGenerators(false);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray20 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList21 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList21, locationMappingArray20);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.setCollapseProperties(false);
        compilerOptions23.setClosurePass(true);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions23.setInputPropertyMapSerialized(byteArray36);
        compilerOptions23.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet46 = compilerOptions40.stripTypePrefixes;
        compilerOptions23.aliasableStrings = strSet46;
        boolean boolean48 = locationMappingList21.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.stream.Stream<java.lang.String> strStream49 = strSet46.stream();
        compilerOptions0.stripTypes = strSet46;
        boolean boolean51 = compilerOptions0.disambiguateProperties;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing52 = compilerOptions0.getTweakProcessing();
        boolean boolean53 = compilerOptions0.smartNameRemoval;
        compilerOptions0.setGroupVariableDeclarations(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing52 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing52.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList15);
        compilerOptions0.setCheckSymbols(true);
        boolean boolean20 = compilerOptions0.preferLineBreakAtEndOfFile;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        boolean boolean25 = compilerOptions21.jqueryPass;
        compilerOptions21.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions28.checkGlobalThisLevel;
        compilerOptions21.checkProvides = checkLevel34;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        compilerOptions36.convertToDottedProperties = true;
        boolean boolean42 = compilerOptions36.inlineConstantVars;
        boolean boolean43 = compilerOptions36.extractPrototypeMemberDeclarations;
        compilerOptions36.optimizeCalls = true;
        compilerOptions36.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.setRewriteNewDateGoogNow(true);
        boolean boolean51 = compilerOptions48.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach52 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions48.setInlineVariables(reach52);
        compilerOptions48.setPrintInputDelimiter(true);
        boolean boolean56 = compilerOptions48.closurePass;
        compilerOptions48.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        boolean boolean62 = compilerOptions59.extractPrototypeMemberDeclarations;
        boolean boolean63 = compilerOptions59.jqueryPass;
        boolean boolean64 = compilerOptions59.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setLabelRenaming(true);
        compilerOptions65.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean70 = compilerOptions65.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format71 = compilerOptions65.sourceMapFormat;
        compilerOptions59.setSourceMapFormat(format71);
        compilerOptions48.setSourceMapFormat(format71);
        compilerOptions36.sourceMapFormat = format71;
        compilerOptions21.sourceMapFormat = format71;
        boolean boolean76 = compilerOptions21.isRemoveUnusedClassProperties();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup77 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup77;
        com.google.javascript.jscomp.CompilerOptions compilerOptions79 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions79.setRewriteNewDateGoogNow(true);
        boolean boolean82 = compilerOptions79.extractPrototypeMemberDeclarations;
        compilerOptions79.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel85 = compilerOptions79.brokenClosureRequiresLevel;
        compilerOptions21.setWarningLevel(diagnosticGroup77, checkLevel85);
        compilerOptions0.brokenClosureRequiresLevel = checkLevel85;
        compilerOptions0.setSpecializeInitialModule(true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + reach52 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach52.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(format71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + checkLevel85 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel85.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing9 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions0.setTweakProcessing(tweakProcessing9);
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: ", (int) (short) 10);
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: ";
        java.util.Set<java.lang.String> strSet16 = compilerOptions0.aliasableStrings;
        compilerOptions0.setInlineFunctions(false);
        boolean boolean19 = compilerOptions0.jqueryPass;
        java.lang.String str20 = compilerOptions0.inputDelimiter;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing9.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "// Input %num%" + "'", str20, "// Input %num%");
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet16 = compilerOptions10.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel17);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = compilerOptions10.getTracerMode();
        compilerOptions0.setTracer(tracerMode19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        boolean boolean29 = compilerOptions21.smartNameRemoval;
        java.util.Set<java.lang.String> strSet30 = compilerOptions21.aliasableStrings;
        compilerOptions0.stripNamePrefixes = strSet30;
        compilerOptions0.setExportTestFunctions(true);
        compilerOptions0.setClosurePass(true);
        boolean boolean36 = compilerOptions0.markNoSideEffectCalls;
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        compilerOptions39.setCollapseProperties(false);
        compilerOptions39.setClosurePass(true);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions39.setInputPropertyMapSerialized(byteArray52);
        compilerOptions39.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions39.reportMissingOverride;
        compilerOptions39.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet60 = compilerOptions59.stripNamePrefixes;
        byte[] byteArray61 = compilerOptions59.inputVariableMapSerialized;
        compilerOptions59.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap64 = null;
        compilerOptions59.setCssRenamingMap(cssRenamingMap64);
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions66.setRewriteNewDateGoogNow(true);
        boolean boolean69 = compilerOptions66.extractPrototypeMemberDeclarations;
        compilerOptions66.convertToDottedProperties = true;
        boolean boolean72 = compilerOptions66.inlineConstantVars;
        compilerOptions66.aliasAllStrings = false;
        boolean boolean75 = compilerOptions66.smartNameRemoval;
        compilerOptions66.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel78 = compilerOptions66.checkGlobalNamesLevel;
        compilerOptions59.setCheckProvides(checkLevel78);
        compilerOptions39.setCheckGlobalNamesLevel(checkLevel78);
        boolean boolean81 = compilerOptions39.optimizeReturns;
        compilerOptions39.setRemoveUnusedVars(false);
        compilerOptions39.setInlineVariables(true);
        com.google.javascript.jscomp.CheckLevel checkLevel86 = compilerOptions39.checkMissingReturn;
        compilerOptions0.checkMissingReturn = checkLevel86;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + tracerMode19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode19.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + checkLevel78 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel78.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + checkLevel86 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel86.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet24 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.setRemoveUnusedClassProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        boolean boolean31 = compilerOptions27.jqueryPass;
        compilerOptions27.collapseAnonymousFunctions = false;
        java.lang.String str34 = compilerOptions27.aliasStringsBlacklist;
        compilerOptions27.inlineGetters = false;
        boolean boolean37 = compilerOptions27.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.setCollapseProperties(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy44 = compilerOptions38.variableRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet46 = compilerOptions45.stripNamePrefixes;
        byte[] byteArray47 = compilerOptions45.inputVariableMapSerialized;
        compilerOptions45.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler50 = compilerOptions45.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy51 = compilerOptions45.propertyRenaming;
        compilerOptions27.setRenamingPolicy(variableRenamingPolicy44, propertyRenamingPolicy51);
        compilerOptions0.propertyRenaming = propertyRenamingPolicy51;
        boolean boolean54 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        boolean boolean57 = compilerOptions0.coalesceVariableNames;
        compilerOptions0.setAliasExternals(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy44 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy44.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(aliasTransformationHandler50);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy51 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy51.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap8;
        compilerOptions0.setInlineConstantVars(false);
        boolean boolean12 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        boolean boolean13 = compilerOptions0.rewriteFunctionExpressions;
        compilerOptions0.setConvertToDottedProperties(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.setShadowVariables(true);
        compilerOptions0.setIdeMode(true);
        compilerOptions0.setGatherCssNames(false);
        compilerOptions0.setRemoveAbstractMethods(true);
        boolean boolean16 = compilerOptions0.smartNameRemoval;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGeneratePseudoNames(true);
        compilerOptions17.inlineLocalFunctions = false;
        compilerOptions17.setIdeMode(true);
        compilerOptions17.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions17.checkMissingReturn = checkLevel36;
        compilerOptions17.checkMissingGetCssNameBlacklist = "2019/07/12 07:12";
        boolean boolean40 = compilerOptions17.aliasExternals;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap41 = compilerOptions17.getDefineReplacements();
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention45 = null;
        compilerOptions42.setCodingConvention(codingConvention45);
        boolean boolean47 = compilerOptions42.generateExports;
        compilerOptions42.gatherCssNames = false;
        boolean boolean50 = compilerOptions42.optimizeReturns;
        compilerOptions42.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet53 = compilerOptions42.aliasableStrings;
        compilerOptions42.generateExports = false;
        boolean boolean56 = compilerOptions42.assumeStrictThis();
        compilerOptions42.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        boolean boolean62 = compilerOptions59.extractPrototypeMemberDeclarations;
        boolean boolean63 = compilerOptions59.jqueryPass;
        boolean boolean64 = compilerOptions59.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setLabelRenaming(true);
        compilerOptions65.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean70 = compilerOptions65.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format71 = compilerOptions65.sourceMapFormat;
        compilerOptions59.sourceMapFormat = format71;
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions73.setRewriteNewDateGoogNow(true);
        boolean boolean76 = compilerOptions73.extractPrototypeMemberDeclarations;
        compilerOptions73.setCollapseProperties(false);
        boolean boolean79 = compilerOptions73.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat80 = compilerOptions73.errorFormat;
        compilerOptions59.setErrorFormat(errorFormat80);
        compilerOptions42.setErrorFormat(errorFormat80);
        boolean boolean83 = compilerOptions42.inlineVariables;
        com.google.javascript.jscomp.SourceMap.Format format84 = compilerOptions42.sourceMapFormat;
        compilerOptions17.sourceMapFormat = format84;
        compilerOptions0.sourceMapFormat = format84;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(format71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(errorFormat80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(format84);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.println((float) (-1));
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream1);
        compiler14.reportCodeChange();
        compiler14.reportCodeChange();
        java.lang.String str17 = compiler14.getAstDotGraph();
        com.google.javascript.jscomp.JSError jSError18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CheckLevel checkLevel19 = compiler14.getErrorLevel(jSError18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        char[] charArray17 = new char[] { '4', '4' };
        printStream14.print(charArray17);
        printStream14.print((int) ' ');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.write((int) '#');
        printStream14.print((float) (short) 0);
        printStream14.println("java.io.IOException");
        java.util.Locale locale29 = null;
        java.io.PrintStream printStream32 = new java.io.PrintStream("Unversioned directory");
        char[] charArray35 = new char[] { '4', '4' };
        printStream32.print(charArray35);
        printStream32.print((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        printStream32.write((int) '#');
        java.util.Locale locale43 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream47 = printStream32.format(locale43, "Unversioned directory", objArray46);
        java.io.PrintStream printStream48 = printStream14.printf(locale29, "Unversioned directory", objArray46);
        printStream48.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention53 = null;
        compilerOptions50.setCodingConvention(codingConvention53);
        boolean boolean55 = compilerOptions50.generateExports;
        compilerOptions50.printInputDelimiter = false;
        compilerOptions50.setCheckSymbols(true);
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions50.setInputVariableMapSerialized(byteArray64);
        printStream48.write(byteArray64);
        compilerOptions0.setInputPropertyMapSerialized(byteArray64);
        compilerOptions0.setDeadAssignmentElimination(true);
        com.google.javascript.jscomp.CodingConvention codingConvention70 = compilerOptions0.getCodingConvention();
        compilerOptions0.coalesceVariableNames = true;
        boolean boolean73 = compilerOptions0.recordFunctionInformation;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 100, 10, 10]");
        org.junit.Assert.assertNull(codingConvention70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        printStream1.print((double) 0.0f);
        printStream1.print(0L);
        printStream1.println((float) (short) 0);
        java.util.Locale locale37 = null;
        java.io.PrintStream printStream40 = new java.io.PrintStream("Unversioned directory");
        char[] charArray43 = new char[] { '4', '4' };
        printStream40.print(charArray43);
        printStream40.print((int) ' ');
        java.io.PrintStream printStream48 = new java.io.PrintStream((java.io.OutputStream) printStream40, false);
        printStream40.write((int) '#');
        printStream40.print((float) (short) 0);
        printStream40.print(10L);
        printStream40.write(1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        boolean boolean60 = compilerOptions57.extractPrototypeMemberDeclarations;
        compilerOptions57.setCollapseProperties(false);
        compilerOptions57.setClosurePass(true);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions57.setInputPropertyMapSerialized(byteArray70);
        printStream40.write(byteArray70);
        printStream40.println('#');
        java.util.Locale locale75 = null;
        java.io.IOException iOException78 = new java.io.IOException("java.io.IOException: Unversioned directory");
        java.lang.Throwable[] throwableArray79 = iOException78.getSuppressed();
        java.io.PrintStream printStream80 = printStream40.printf(locale75, "java.io.IOException: java.io.IOException: 2019/07/12 07:12", (java.lang.Object[]) throwableArray79);
        java.io.PrintStream printStream81 = printStream1.format(locale37, "java.io.IOException: ", (java.lang.Object[]) throwableArray79);
        java.lang.Object obj82 = null;
        printStream81.print(obj82);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        boolean boolean9 = compilerOptions0.optimizeCalls;
        compilerOptions0.printInputDelimiter = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel9 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel9;
        compilerOptions0.setSourceMapOutputPath("");
        compilerOptions0.setManageClosureDependencies(false);
        compilerOptions0.optimizeParameters = false;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        java.lang.String str18 = compilerOptions0.checkMissingGetCssNameBlacklist;
        boolean boolean19 = compilerOptions0.collapseAnonymousFunctions;
        com.google.javascript.jscomp.MessageBundle messageBundle20 = null;
        compilerOptions0.messageBundle = messageBundle20;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        compilerOptions0.setSummaryDetailLevel((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setInlineProperties(true);
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        compilerOptions0.setNameReferenceGraphPath("-1");
        compilerOptions0.removeUnusedClassProperties = true;
        compilerOptions0.setTweakToBooleanLiteral("Unversioned directory", true);
        compilerOptions0.setTightenTypes(true);
        compilerOptions0.setInputDelimiter("java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setSkipAllPasses(true);
        compilerOptions0.setCheckMissingGetCssNameBlacklist("2019/07/12 07:12");
        compilerOptions0.setLabelRenaming(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap4 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap4;
        compilerOptions0.syntheticBlockEndMarker = "-1";
        compilerOptions0.deadAssignmentElimination = false;
        boolean boolean10 = compilerOptions0.collapseProperties;
        compilerOptions0.setRecordFunctionInformation(true);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        compilerOptions7.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions7.checkGlobalThisLevel;
        compilerOptions7.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle16 = null;
        compilerOptions7.setMessageBundle(messageBundle16);
        boolean boolean18 = compilerOptions7.recordFunctionInformation;
        boolean boolean19 = compilerOptions7.checkControlStructures;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions7.setInlineFunctions(reach20);
        compilerOptions0.setInlineVariables(reach20);
        compilerOptions0.setGatherCssNames(false);
        compilerOptions0.checkSymbols = false;
        byte[] byteArray27 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setTransformAMDToCJSModules(false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNull(byteArray27);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.ErrorFormat errorFormat8 = compilerOptions0.errorFormat;
        byte[] byteArray9 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setDefineToDoubleLiteral("java.io.IOException: ", (double) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet14 = compilerOptions13.stripNamePrefixes;
        byte[] byteArray15 = compilerOptions13.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup16 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup16;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention21 = null;
        compilerOptions18.setCodingConvention(codingConvention21);
        compilerOptions18.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions18.checkProvides;
        compilerOptions13.setWarningLevel(diagnosticGroup16, checkLevel25);
        java.util.Set<java.lang.String> strSet27 = compilerOptions13.stripNamePrefixes;
        compilerOptions13.setComputeFunctionSideEffects(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.setCollapseProperties(false);
        compilerOptions30.setClosurePass(true);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions30.setInputPropertyMapSerialized(byteArray43);
        compilerOptions30.setFlowSensitiveInlineVariables(true);
        boolean boolean47 = compilerOptions30.exportTestFunctions;
        compilerOptions30.closurePass = false;
        compilerOptions30.renamePrefix = "Unversioned directory";
        compilerOptions30.setMoveFunctionDeclarations(false);
        compilerOptions30.setProcessObjectPropertyString(false);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions13.setCheckGlobalThisLevel(checkLevel56);
        compilerOptions0.reportMissingOverride = checkLevel56;
        compilerOptions0.moveFunctionDeclarations = false;
        compilerOptions0.smartNameRemoval = true;
        compilerOptions0.setReportPath("2019/07/12 07:12");
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(byteArray15);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup16);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode44 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions0.setTracer(tracerMode44);
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard46 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard46);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.setLabelRenaming(true);
        compilerOptions48.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions48.locale = "2019/07/12 07:12";
        compilerOptions48.setRecordFunctionInformation(false);
        boolean boolean57 = compilerOptions48.devirtualizePrototypeMethods;
        compilerOptions48.setNameReferenceReportPath("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setRewriteNewDateGoogNow(true);
        boolean boolean63 = compilerOptions60.extractPrototypeMemberDeclarations;
        compilerOptions60.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet66 = compilerOptions60.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel67 = null;
        compilerOptions60.setCheckGlobalThisLevel(checkLevel67);
        com.google.javascript.jscomp.SourceMap.Format format69 = compilerOptions60.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions70.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention73 = null;
        compilerOptions70.setCodingConvention(codingConvention73);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy75 = compilerOptions70.anonymousFunctionNaming;
        compilerOptions60.anonymousFunctionNaming = anonymousFunctionNamingPolicy75;
        compilerOptions48.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy75);
        com.google.javascript.jscomp.CheckLevel checkLevel78 = compilerOptions48.checkUnreachableCode;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel78);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + tracerMode44 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode44.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(format69);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy75 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy75.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel78 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel78.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        compilerOptions0.setInlineGetters(true);
        compilerOptions0.removeUnusedPrototypeProperties = true;
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setDefineToNumberLiteral("2019/07/12 07:12", (int) '#');
        compilerOptions0.setProcessObjectPropertyString(false);
        boolean boolean9 = compilerOptions0.rewriteFunctionExpressions;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        boolean boolean13 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        java.lang.String str14 = compilerOptions0.syntheticBlockEndMarker;
        boolean boolean15 = compilerOptions0.checkSuspiciousCode;
        boolean boolean16 = compilerOptions0.reserveRawExports;
        compilerOptions0.coalesceVariableNames = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        boolean boolean22 = compilerOptions19.extractPrototypeMemberDeclarations;
        compilerOptions19.setCollapseProperties(false);
        compilerOptions19.setClosurePass(true);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions19.setInputPropertyMapSerialized(byteArray32);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        compilerOptions34.setRemoveUnusedVars(true);
        compilerOptions34.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy44 = compilerOptions34.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setLabelRenaming(true);
        compilerOptions45.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean50 = compilerOptions45.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        compilerOptions51.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel57 = compilerOptions51.checkGlobalThisLevel;
        compilerOptions45.setAggressiveVarCheck(checkLevel57);
        compilerOptions34.setCheckRequires(checkLevel57);
        compilerOptions19.setBrokenClosureRequiresLevel(checkLevel57);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel57);
        compilerOptions0.setCrossModuleMethodMotion(true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy44 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy44.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + checkLevel57 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel57.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        java.io.IOException iOException1 = new java.io.IOException("Unversioned directory");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.inlineFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet7 = compilerOptions6.stripNamePrefixes;
        byte[] byteArray8 = compilerOptions6.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach9 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions6.setInlineFunctions(reach9);
        compilerOptions0.setInlineFunctions(reach9);
        boolean boolean12 = compilerOptions0.jqueryPass;
        boolean boolean13 = compilerOptions0.closurePass;
        java.lang.String str14 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertTrue("'" + reach9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach9.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setCollapseAnonymousFunctions(true);
        compilerOptions0.aliasAllStrings = false;
        compilerOptions0.setSpecializeInitialModule(true);
        boolean boolean9 = compilerOptions0.aliasKeywords;
        compilerOptions0.setMoveFunctionDeclarations(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setOutputCharset("java.io.IOException: Unversioned directory");
        compilerOptions0.setPrettyPrint(false);
        java.util.Set<java.lang.String> strSet29 = compilerOptions0.stripTypes;
        java.lang.String str30 = compilerOptions0.locale;
        compilerOptions0.setInlineConstantVars(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        boolean boolean9 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        compilerOptions10.setClosurePass(true);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions10.setInputPropertyMapSerialized(byteArray23);
        compilerOptions10.setFlowSensitiveInlineVariables(true);
        boolean boolean27 = compilerOptions10.exportTestFunctions;
        compilerOptions10.closurePass = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach34 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions30.setInlineVariables(reach34);
        compilerOptions30.setPrintInputDelimiter(true);
        boolean boolean38 = compilerOptions30.closurePass;
        boolean boolean39 = compilerOptions30.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions30.checkMissingGetCssNameLevel;
        compilerOptions10.setCheckMissingGetCssNameLevel(checkLevel40);
        compilerOptions0.checkGlobalNamesLevel = checkLevel40;
        boolean boolean43 = compilerOptions0.collapseVariableDeclarations;
        compilerOptions0.deadAssignmentElimination = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + reach34 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach34.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions8.checkGlobalThisLevel;
        compilerOptions8.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing16 = compilerOptions8.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing16);
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException");
        boolean boolean20 = compilerOptions0.shouldColorizeErrorOutput();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap21 = compilerOptions0.getDefineReplacements();
        compilerOptions0.setAmbiguateProperties(true);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing16.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.aggressiveVarCheck;
        boolean boolean13 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException", 100);
        compilerOptions0.inlineVariables = false;
        compilerOptions0.setDefineToStringLiteral("hi!", "");
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        boolean boolean12 = compilerOptions0.moveFunctionDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.setCollapseProperties(false);
        compilerOptions13.setClosurePass(true);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions13.setInputPropertyMapSerialized(byteArray26);
        compilerOptions13.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions13.reportMissingOverride;
        compilerOptions13.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        byte[] byteArray35 = compilerOptions33.inputVariableMapSerialized;
        compilerOptions33.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap38 = null;
        compilerOptions33.setCssRenamingMap(cssRenamingMap38);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        boolean boolean46 = compilerOptions40.inlineConstantVars;
        compilerOptions40.aliasAllStrings = false;
        boolean boolean49 = compilerOptions40.smartNameRemoval;
        compilerOptions40.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel52 = compilerOptions40.checkGlobalNamesLevel;
        compilerOptions33.setCheckProvides(checkLevel52);
        compilerOptions13.setCheckGlobalNamesLevel(checkLevel52);
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel52;
        compilerOptions0.setIgnoreCajaProperties(true);
        boolean boolean58 = compilerOptions0.optimizeCalls;
        byte[] byteArray59 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setCrossModuleMethodMotion(false);
        compilerOptions0.setManageClosureDependencies(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + checkLevel52 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel52.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(byteArray59);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.resetWarningsGuard();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        compilerOptions7.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.instrumentationTemplate = "java.io.IOException";
        boolean boolean22 = compilerOptions12.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions7.checkUnreachableCode = checkLevel23;
        compilerOptions0.aggressiveVarCheck = checkLevel23;
        compilerOptions0.setCollapseAnonymousFunctions(false);
        boolean boolean28 = compilerOptions0.coalesceVariableNames;
        compilerOptions0.setSourceMapOutputPath("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        com.google.javascript.jscomp.MessageBundle messageBundle12 = null;
        compilerOptions0.messageBundle = messageBundle12;
        compilerOptions0.setRuntimeTypeCheckLogFunction("2019/07/12 07:12");
        compilerOptions0.inlineConstantVars = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = com.google.javascript.jscomp.SourceFile.builder();
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder2 = builder0.withCharset(charset1);
        java.nio.charset.Charset charset3 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder4 = builder2.withCharset(charset3);
        com.google.javascript.jscomp.SourceFile sourceFile6 = builder4.buildFromFile("java.io.IOException: // Input %num%");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceFile6);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.aggressiveVarCheck;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList12 = compilerOptions0.sourceMapLocationMappings;
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions0.setInlineVariables(reach13);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingList12);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler7 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.setSyntheticBlockStartMarker("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean10 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.setOutputCharset("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setInlineProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet21 = compilerOptions15.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = null;
        compilerOptions15.setCheckGlobalThisLevel(checkLevel22);
        com.google.javascript.jscomp.SourceMap.Format format24 = compilerOptions15.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy30 = compilerOptions25.anonymousFunctionNaming;
        compilerOptions15.anonymousFunctionNaming = anonymousFunctionNamingPolicy30;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention35 = null;
        compilerOptions32.setCodingConvention(codingConvention35);
        boolean boolean37 = compilerOptions32.generateExports;
        compilerOptions32.gatherCssNames = false;
        boolean boolean40 = compilerOptions32.optimizeReturns;
        compilerOptions32.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet43 = compilerOptions32.aliasableStrings;
        compilerOptions32.generateExports = false;
        boolean boolean46 = compilerOptions32.assumeStrictThis();
        compilerOptions32.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention52 = null;
        compilerOptions49.setCodingConvention(codingConvention52);
        compilerOptions49.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet57 = compilerOptions56.stripNamePrefixes;
        compilerOptions49.setIdGenerators(strSet57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGeneratePseudoNames(true);
        compilerOptions59.inlineLocalFunctions = false;
        compilerOptions59.setIdeMode(true);
        compilerOptions59.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions72 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions72.setRewriteNewDateGoogNow(true);
        boolean boolean75 = compilerOptions72.extractPrototypeMemberDeclarations;
        compilerOptions72.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel78 = compilerOptions72.checkGlobalThisLevel;
        compilerOptions59.checkMissingReturn = checkLevel78;
        compilerOptions49.aggressiveVarCheck = checkLevel78;
        compilerOptions32.checkUnreachableCode = checkLevel78;
        compilerOptions32.setCheckCaja(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap84 = compilerOptions32.getTweakReplacements();
        compilerOptions32.crossModuleMethodMotion = true;
        compilerOptions32.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel89 = compilerOptions32.checkMissingGetCssNameLevel;
        compilerOptions15.setReportMissingOverride(checkLevel89);
        compilerOptions0.checkGlobalThisLevel = checkLevel89;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(format24);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy30 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy30.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + checkLevel78 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel78.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertTrue("'" + checkLevel89 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel89.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.coalesceVariableNames;
        boolean boolean7 = compilerOptions0.gatherCssNames;
        boolean boolean8 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setCrossModuleCodeMotion(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions0.setTweakToNumberLiteral("2019/07/12 07:12", 10);
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        boolean boolean13 = compilerOptions10.exportTestFunctions;
        compilerOptions10.lineBreak = false;
        boolean boolean16 = compilerOptions10.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode17 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions10.setLanguageOut(languageMode17);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel19 = compilerOptions10.sourceMapDetailLevel;
        compilerOptions0.setSourceMapDetailLevel(detailLevel19);
        compilerOptions0.crossModuleMethodMotion = false;
        compilerOptions0.setAssumeStrictThis(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel25 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + languageMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode17.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertNotNull(detailLevel19);
        org.junit.Assert.assertNotNull(detailLevel25);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        compilerOptions8.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions8.brokenClosureRequiresLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup6, checkLevel14);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.checkGlobalThisLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions17.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions17.reportMissingOverride;
        compilerOptions17.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap24 = null;
        compilerOptions17.cssRenamingMap = cssRenamingMap24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        compilerOptions26.setIdGenerators(strSet34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        compilerOptions36.setGeneratePseudoNames(true);
        compilerOptions36.inlineLocalFunctions = false;
        compilerOptions36.setIdeMode(true);
        compilerOptions36.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        compilerOptions49.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel55 = compilerOptions49.checkGlobalThisLevel;
        compilerOptions36.checkMissingReturn = checkLevel55;
        compilerOptions26.aggressiveVarCheck = checkLevel55;
        compilerOptions17.setCheckMissingGetCssNameLevel(checkLevel55);
        compilerOptions0.checkMissingReturn = checkLevel55;
        compilerOptions0.gatherCssNames = false;
        compilerOptions0.resetWarningsGuard();
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + checkLevel55 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel55.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        compilerOptions0.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        boolean boolean9 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.disambiguateProperties = true;
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.setCoalesceVariableNames(false);
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        compilerOptions0.setSyntheticBlockStartMarker("");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.setRewriteFunctionExpressions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.generateExports;
        compilerOptions14.gatherCssNames = false;
        boolean boolean22 = compilerOptions14.optimizeReturns;
        compilerOptions14.smartNameRemoval = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        java.lang.String[] strArray35 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        compilerOptions26.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList36.stream();
        compilerOptions14.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList36);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList36);
        java.lang.String str42 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setProtectHiddenSideEffects(false);
        java.lang.String str45 = compilerOptions0.inputDelimiter;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "// Input %num%" + "'", str45, "// Input %num%");
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setPreferLineBreakAtEndOfFile(false);
        compilerOptions0.setDeadAssignmentElimination(false);
        compilerOptions0.jqueryPass = true;
        compilerOptions0.setNameReferenceReportPath("");
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        compilerOptions17.setClosurePass(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions17.setInputPropertyMapSerialized(byteArray30);
        compilerOptions17.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions17.reportMissingOverride;
        compilerOptions17.setNameReferenceReportPath("java.io.IOException: ");
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing37 = compilerOptions17.getTweakProcessing();
        boolean boolean38 = tweakProcessing37.isOn();
        compilerOptions0.setTweakProcessing(tweakProcessing37);
        boolean boolean40 = compilerOptions0.shouldColorizeErrorOutput();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing37 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing37.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.collapseVariableDeclarations = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGeneratePseudoNames(true);
        compilerOptions9.inlineLocalFunctions = false;
        compilerOptions9.setIdeMode(true);
        compilerOptions9.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet22 = compilerOptions9.aliasableStrings;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap23 = compilerOptions9.customPasses;
        compilerOptions9.setLabelRenaming(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.setCollapseProperties(false);
        boolean boolean32 = compilerOptions26.closurePass;
        compilerOptions26.setRemoveAbstractMethods(true);
        compilerOptions26.recordFunctionInformation = false;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray37 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList38 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList38, locationMappingArray37);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        boolean boolean46 = compilerOptions40.inlineConstantVars;
        boolean boolean47 = compilerOptions40.extractPrototypeMemberDeclarations;
        boolean boolean48 = compilerOptions40.reserveRawExports;
        boolean boolean49 = locationMappingList38.remove((java.lang.Object) boolean48);
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention53 = null;
        compilerOptions50.setCodingConvention(codingConvention53);
        compilerOptions50.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet58 = compilerOptions57.stripNamePrefixes;
        compilerOptions50.setIdGenerators(strSet58);
        java.util.stream.Stream<java.lang.String> strStream60 = strSet58.stream();
        boolean boolean61 = locationMappingList38.retainAll((java.util.Collection<java.lang.String>) strSet58);
        compilerOptions26.setStripTypes(strSet58);
        compilerOptions9.stripNamePrefixes = strSet58;
        compilerOptions0.stripTypes = strSet58;
        boolean boolean65 = compilerOptions0.aliasExternals;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locationMappingArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strStream60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.aliasAllStrings;
        compilerOptions0.markNoSideEffectCalls = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        java.io.PrintStream printStream1 = new java.io.PrintStream("java.io.IOException");
        printStream1.write((int) (short) 0);
        printStream1.println();
        printStream1.print(true);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setLabelRenaming(true);
        compilerOptions12.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions12.checkGlobalThisLevel;
        compilerOptions0.setCheckUnreachableCode(checkLevel17);
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.setCrossModuleMethodMotion(false);
        compilerOptions0.inlineFunctions = true;
        boolean boolean25 = compilerOptions0.getInferTypes();
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode26 = compilerOptions0.getTracerMode();
        compilerOptions0.setLooseTypes(false);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + tracerMode26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode26.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setProtectHiddenSideEffects(true);
        compilerOptions0.aliasAllStrings = true;
        boolean boolean13 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setReplaceIdGenerators(false);
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", (int) ' ');
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet20 = compilerOptions19.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions19.messageBundle = messageBundle21;
        compilerOptions19.setExtractPrototypeMemberDeclarations(true);
        boolean boolean25 = compilerOptions19.closurePass;
        compilerOptions19.setSmartNameRemoval(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention31 = null;
        compilerOptions28.setCodingConvention(codingConvention31);
        boolean boolean33 = compilerOptions28.generateExports;
        compilerOptions28.printInputDelimiter = false;
        compilerOptions28.prettyPrint = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.convertToDottedProperties = true;
        boolean boolean44 = compilerOptions38.inlineConstantVars;
        boolean boolean45 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.optimizeCalls = true;
        compilerOptions38.removeUnusedPrototypeProperties = false;
        compilerOptions38.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode52 = compilerOptions38.getTracerMode();
        compilerOptions38.generateExports = true;
        compilerOptions38.jqueryPass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        boolean boolean60 = compilerOptions57.extractPrototypeMemberDeclarations;
        compilerOptions57.convertToDottedProperties = true;
        compilerOptions57.setRemoveUnusedVars(true);
        compilerOptions57.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy67 = compilerOptions57.propertyRenaming;
        compilerOptions38.propertyRenaming = propertyRenamingPolicy67;
        compilerOptions28.setPropertyRenaming(propertyRenamingPolicy67);
        compilerOptions19.setPropertyRenaming(propertyRenamingPolicy67);
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + tracerMode52 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode52.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy67 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy67.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        java.util.Set<java.lang.String> strSet9 = compilerOptions0.aliasableStrings;
        compilerOptions0.setPrintInputDelimiter(false);
        compilerOptions0.setNameReferenceReportPath("// Input %num%");
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.JSError[] jSErrorArray3 = compiler1.getErrors();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        printStream1.print(10L);
        printStream1.write(1);
        java.io.PrintStream printStream20 = new java.io.PrintStream("Unversioned directory");
        char[] charArray23 = new char[] { '4', '4' };
        printStream20.print(charArray23);
        printStream20.print((int) ' ');
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        printStream20.write((int) '#');
        java.util.Locale locale31 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream35 = printStream20.format(locale31, "Unversioned directory", objArray34);
        printStream35.println((double) 1);
        printStream35.print(1L);
        java.util.Locale locale40 = null;
        java.io.PrintStream printStream43 = new java.io.PrintStream("Unversioned directory");
        char[] charArray46 = new char[] { '4', '4' };
        printStream43.print(charArray46);
        printStream43.print((int) ' ');
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream43, false);
        printStream43.write((int) '#');
        printStream43.print((float) (short) 0);
        printStream43.println("java.io.IOException");
        java.util.Locale locale58 = null;
        java.io.PrintStream printStream61 = new java.io.PrintStream("Unversioned directory");
        char[] charArray64 = new char[] { '4', '4' };
        printStream61.print(charArray64);
        printStream61.print((int) ' ');
        java.io.PrintStream printStream69 = new java.io.PrintStream((java.io.OutputStream) printStream61, false);
        printStream61.write((int) '#');
        java.util.Locale locale72 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream76 = printStream61.format(locale72, "Unversioned directory", objArray75);
        java.io.PrintStream printStream77 = printStream43.printf(locale58, "Unversioned directory", objArray75);
        java.io.PrintStream printStream78 = printStream35.format(locale40, "java.io.IOException: Unversioned directory", objArray75);
        java.io.PrintStream printStream79 = printStream1.format("hi!", objArray75);
        printStream1.close();
        printStream1.println((long) (short) 1);
        com.google.javascript.jscomp.Compiler compiler83 = new com.google.javascript.jscomp.Compiler(printStream1);
        double double84 = compiler83.getProgress();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printStream77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList15);
        compilerOptions0.setCheckSymbols(true);
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setSkipAllPasses(true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream1.println(charArray13);
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup21;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup23 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder24 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator26 = null;
        com.google.javascript.jscomp.SourceFile sourceFile27 = builder24.buildFromGenerator("hi!", generator26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { diagnosticGroup21, diagnosticGroup23, sourceFile27 };
        java.io.PrintStream printStream29 = printStream19.printf("2019/07/12 07:12", objArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("Unversioned directory");
        char[] charArray35 = new char[] { '4', '4' };
        printStream32.print(charArray35);
        printStream32.print((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        printStream32.write((int) '#');
        java.util.Locale locale43 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream47 = printStream32.format(locale43, "Unversioned directory", objArray46);
        java.io.PrintStream printStream48 = printStream29.format("hi!", objArray46);
        java.io.PrintStream printStream49 = printStream1.printf(locale16, "java.io.IOException: ", objArray46);
        printStream1.print((-1L));
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        boolean boolean55 = compilerOptions52.extractPrototypeMemberDeclarations;
        compilerOptions52.convertToDottedProperties = true;
        boolean boolean58 = compilerOptions52.inlineConstantVars;
        compilerOptions52.aliasAllStrings = false;
        boolean boolean61 = compilerOptions52.smartNameRemoval;
        java.util.Set<java.lang.String> strSet62 = null;
        compilerOptions52.stripNameSuffixes = strSet62;
        compilerOptions52.inlineVariables = true;
        printStream1.println((java.lang.Object) compilerOptions52);
        java.lang.Object[] objArray68 = null;
        java.io.PrintStream printStream69 = printStream1.printf("java.io.IOException: Unversioned directory", objArray68);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup21);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup23);
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertNotNull(objArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(printStream69);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.setChainCalls(true);
        boolean boolean11 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException", "// Input %num%");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = null;
        compilerOptions0.setTracerMode(tracerMode9);
        java.io.PrintStream printStream12 = new java.io.PrintStream("Unversioned directory");
        char[] charArray15 = new char[] { '4', '4' };
        printStream12.print(charArray15);
        printStream12.print((int) ' ');
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream12);
        com.google.javascript.jscomp.SourceFile.Builder builder21 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException23 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { builder21, iOException24, (byte) 10 };
        java.io.PrintStream printStream27 = printStream19.printf("", objArray26);
        printStream27.println((float) (-1L));
        java.io.PrintStream printStream31 = printStream27.append('#');
        printStream27.println();
        printStream27.print((-1L));
        printStream27.println(' ');
        printStream27.close();
        java.io.PrintStream printStream39 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup41 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup41;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup43 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder44 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator46 = null;
        com.google.javascript.jscomp.SourceFile sourceFile47 = builder44.buildFromGenerator("hi!", generator46);
        java.lang.Object[] objArray48 = new java.lang.Object[] { diagnosticGroup41, diagnosticGroup43, sourceFile47 };
        java.io.PrintStream printStream49 = printStream39.printf("2019/07/12 07:12", objArray48);
        printStream49.println();
        printStream49.write((int) (byte) 100);
        printStream49.println(true);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream49);
        java.io.PrintStream printStream57 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream59 = new java.io.PrintStream("Unversioned directory");
        char[] charArray62 = new char[] { '4', '4' };
        printStream59.print(charArray62);
        printStream57.print(charArray62);
        java.io.PrintStream printStream66 = new java.io.PrintStream("Unversioned directory");
        char[] charArray69 = new char[] { '4', '4' };
        printStream66.print(charArray69);
        printStream66.print((int) ' ');
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream66.write(byteArray79, (int) (byte) 0, (int) (byte) 1);
        printStream57.write(byteArray79);
        printStream55.write(byteArray79);
        printStream27.write(byteArray79);
        compilerOptions0.inputVariableMapSerialized = byteArray79;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream31);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup41);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup43);
        org.junit.Assert.assertNotNull(sourceFile47);
        org.junit.Assert.assertNotNull(objArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.setMarkNoSideEffectCalls(true);
        boolean boolean13 = compilerOptions0.inlineConstantVars;
        compilerOptions0.setTweakToStringLiteral("", "4432#Unversionedhi!rector true\n0\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.closurePass;
        compilerOptions0.setAppNameStr("");
        compilerOptions0.setAmbiguateProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        boolean boolean15 = compilerOptions11.jqueryPass;
        compilerOptions11.collapseAnonymousFunctions = false;
        java.lang.String str18 = compilerOptions11.aliasStringsBlacklist;
        compilerOptions11.inlineGetters = false;
        compilerOptions11.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions11.setAliasStringsBlacklist("java.io.IOException: ");
        compilerOptions11.setOptimizeArgumentsArray(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = null;
        compilerOptions11.setTweakReplacements(strMap27);
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions11.checkMissingReturn;
        compilerOptions0.checkUnreachableCode = checkLevel29;
        com.google.javascript.jscomp.CodingConvention codingConvention31 = null;
        compilerOptions0.setCodingConvention(codingConvention31);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        printStream16.println();
        printStream16.print((-1L));
        printStream16.println(' ');
        printStream16.close();
        java.io.PrintStream printStream28 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup30 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup30;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup32 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder33 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator35 = null;
        com.google.javascript.jscomp.SourceFile sourceFile36 = builder33.buildFromGenerator("hi!", generator35);
        java.lang.Object[] objArray37 = new java.lang.Object[] { diagnosticGroup30, diagnosticGroup32, sourceFile36 };
        java.io.PrintStream printStream38 = printStream28.printf("2019/07/12 07:12", objArray37);
        printStream38.println();
        printStream38.write((int) (byte) 100);
        printStream38.println(true);
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        java.io.PrintStream printStream46 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream48 = new java.io.PrintStream("Unversioned directory");
        char[] charArray51 = new char[] { '4', '4' };
        printStream48.print(charArray51);
        printStream46.print(charArray51);
        java.io.PrintStream printStream55 = new java.io.PrintStream("Unversioned directory");
        char[] charArray58 = new char[] { '4', '4' };
        printStream55.print(charArray58);
        printStream55.print((int) ' ');
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream55.write(byteArray68, (int) (byte) 0, (int) (byte) 1);
        printStream46.write(byteArray68);
        printStream44.write(byteArray68);
        printStream16.write(byteArray68);
        printStream16.write((int) (short) -1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup30);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup32);
        org.junit.Assert.assertNotNull(sourceFile36);
        org.junit.Assert.assertNotNull(objArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setNameReferenceReportPath("java.io.IOException");
        java.lang.String str5 = compilerOptions0.syntheticBlockEndMarker;
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.removeUnusedVars = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap6 = compilerOptions0.getDefineReplacements();
        com.google.javascript.jscomp.MessageBundle messageBundle7 = compilerOptions0.messageBundle;
        compilerOptions0.labelRenaming = false;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        compilerOptions13.setDevirtualizePrototypeMethods(true);
        boolean boolean23 = compilerOptions13.checkControlStructures;
        boolean boolean24 = compilerOptions13.collapseVariableDeclarations;
        boolean boolean25 = compilerOptions13.inlineVariables;
        java.io.PrintStream printStream27 = new java.io.PrintStream("Unversioned directory");
        char[] charArray30 = new char[] { '4', '4' };
        printStream27.print(charArray30);
        printStream27.print((int) ' ');
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream27, false);
        printStream27.write((int) '#');
        printStream27.print((float) (short) 0);
        printStream27.println("java.io.IOException");
        java.util.Locale locale42 = null;
        java.io.PrintStream printStream45 = new java.io.PrintStream("Unversioned directory");
        char[] charArray48 = new char[] { '4', '4' };
        printStream45.print(charArray48);
        printStream45.print((int) ' ');
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream45, false);
        printStream45.write((int) '#');
        java.util.Locale locale56 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream60 = printStream45.format(locale56, "Unversioned directory", objArray59);
        java.io.PrintStream printStream61 = printStream27.printf(locale42, "Unversioned directory", objArray59);
        printStream61.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention66 = null;
        compilerOptions63.setCodingConvention(codingConvention66);
        boolean boolean68 = compilerOptions63.generateExports;
        compilerOptions63.printInputDelimiter = false;
        compilerOptions63.setCheckSymbols(true);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions63.setInputVariableMapSerialized(byteArray77);
        printStream61.write(byteArray77);
        compilerOptions13.setInputVariableMapSerialized(byteArray77);
        compilerOptions0.setInputPropertyMapSerialized(byteArray77);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(messageBundle7);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 100, 10, 10]");
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.removeUnusedVars = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap6 = compilerOptions0.getDefineReplacements();
        com.google.javascript.jscomp.MessageBundle messageBundle7 = compilerOptions0.messageBundle;
        compilerOptions0.labelRenaming = false;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkGlobalNamesLevel;
        boolean boolean11 = compilerOptions0.aliasKeywords;
        java.lang.String str12 = compilerOptions0.renamePrefix;
        java.util.Set<java.lang.String> strSet13 = compilerOptions0.aliasableStrings;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        compilerOptions14.setGenerateExports(true);
        compilerOptions14.setCollapseProperties(false);
        boolean boolean23 = compilerOptions14.inlineVariables;
        boolean boolean24 = compilerOptions14.generateExports;
        compilerOptions14.setCheckTypes(false);
        compilerOptions14.reserveRawExports = false;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel29 = compilerOptions14.sourceMapDetailLevel;
        compilerOptions0.sourceMapDetailLevel = detailLevel29;
        compilerOptions0.deadAssignmentElimination = true;
        boolean boolean33 = compilerOptions0.lineBreak;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(messageBundle7);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(detailLevel29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setRuntimeTypeCheckLogFunction("java.io.IOException: 2019/07/12 07:12");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        compilerOptions9.setClosurePass(true);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions9.setInputPropertyMapSerialized(byteArray22);
        compilerOptions9.setFlowSensitiveInlineVariables(true);
        compilerOptions9.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream35 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet34.parallelStream();
        compilerOptions9.stripNameSuffixes = strSet34;
        compilerOptions0.setStripTypePrefixes(strSet34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        compilerOptions39.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet45 = compilerOptions39.stripTypePrefixes;
        compilerOptions0.setAliasableStrings(strSet45);
        compilerOptions0.setRewriteNewDateGoogNow(false);
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions0.setCollapseObjectLiterals(true);
        compilerOptions0.inlineVariables = false;
        compilerOptions0.checkSymbols = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream3 = new java.io.PrintStream("Unversioned directory");
        char[] charArray6 = new char[] { '4', '4' };
        printStream3.print(charArray6);
        printStream1.print(charArray6);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        boolean boolean11 = printStream10.checkError();
        printStream10.write(52);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        printStream20.println('a');
        printStream20.println((float) 35);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet16 = compilerOptions10.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel17);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = compilerOptions10.getTracerMode();
        compilerOptions0.setTracer(tracerMode19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        boolean boolean29 = compilerOptions21.smartNameRemoval;
        java.util.Set<java.lang.String> strSet30 = compilerOptions21.aliasableStrings;
        compilerOptions0.stripNamePrefixes = strSet30;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        java.lang.String str34 = compilerOptions0.checkMissingGetCssNameBlacklist;
        boolean boolean35 = compilerOptions0.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions0.checkUnreachableCode;
        boolean boolean37 = compilerOptions0.crossModuleMethodMotion;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + tracerMode19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode19.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setNameReferenceReportPath("Unversioned directory");
        compilerOptions0.aliasExternals = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap10 = compilerOptions0.customPasses;
        boolean boolean11 = compilerOptions0.shouldColorizeErrorOutput();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        boolean boolean13 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputVariableMapSerialized(byteArray29);
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setRewriteFunctionExpressions(true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setIgnoreCajaProperties(false);
        compilerOptions0.removeUnusedClassProperties = true;
        boolean boolean11 = compilerOptions0.crossModuleCodeMotion;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        compilerOptions12.setOutputCharset("java.io.IOException");
        compilerOptions12.setCheckControlStructures(true);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions12.aggressiveVarCheck;
        compilerOptions0.setCheckProvides(checkLevel25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setProtectHiddenSideEffects(true);
        compilerOptions0.aliasAllStrings = true;
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        compilerOptions0.checkSuspiciousCode = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONST;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.write((int) (byte) 100);
        printStream11.println(true);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream21 = new java.io.PrintStream("Unversioned directory");
        char[] charArray24 = new char[] { '4', '4' };
        printStream21.print(charArray24);
        printStream19.print(charArray24);
        java.io.PrintStream printStream28 = new java.io.PrintStream("Unversioned directory");
        char[] charArray31 = new char[] { '4', '4' };
        printStream28.print(charArray31);
        printStream28.print((int) ' ');
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream28.write(byteArray41, (int) (byte) 0, (int) (byte) 1);
        printStream19.write(byteArray41);
        printStream17.write(byteArray41);
        java.io.PrintStream printStream48 = printStream17.append('4');
        com.google.javascript.jscomp.Compiler compiler49 = new com.google.javascript.jscomp.Compiler(printStream17);
        compiler49.disableThreads();
        com.google.javascript.rhino.Node node51 = compiler49.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result52 = compiler49.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNull(node51);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        double double3 = compiler1.getProgress();
        com.google.javascript.jscomp.SourceMap sourceMap4 = compiler1.getSourceMap();
        compiler1.reportCodeChange();
        com.google.javascript.jscomp.Compiler compiler6 = new com.google.javascript.jscomp.Compiler();
        double double7 = compiler6.getProgress();
        compiler6.reportCodeChange();
        com.google.javascript.jscomp.Scope scope9 = compiler6.getTopScope();
        double double10 = compiler6.getProgress();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState11 = compiler6.getState();
        compiler1.setState(intermediateState11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = compiler1.acceptEcmaScript5();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNull(sourceMap4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNull(scope9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(intermediateState11);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        printStream16.println();
        printStream16.print((-1L));
        printStream16.println(' ');
        java.io.IOException iOException28 = new java.io.IOException("java.io.IOException: Unversioned directory");
        java.lang.Throwable[] throwableArray29 = iOException28.getSuppressed();
        java.io.PrintStream printStream30 = printStream16.format("java.io.IOException: java.io.IOException: java.io.IOException: ", (java.lang.Object[]) throwableArray29);
        printStream16.close();
        java.io.PrintStream printStream33 = printStream16.append((java.lang.CharSequence) "");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkProvides;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.renamePrefix = "Unversioned directory";
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        boolean boolean19 = compilerOptions15.jqueryPass;
        compilerOptions15.collapseAnonymousFunctions = false;
        java.lang.String str22 = compilerOptions15.aliasStringsBlacklist;
        compilerOptions15.inlineGetters = false;
        compilerOptions15.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions15.setAliasStringsBlacklist("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions15.checkGlobalThisLevel;
        compilerOptions0.checkGlobalNamesLevel = checkLevel29;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setCheckSuspiciousCode(true);
        compilerOptions0.setConvertToDottedProperties(false);
        compilerOptions0.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions9.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup15 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup15;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions17.brokenClosureRequiresLevel;
        compilerOptions9.setWarningLevel(diagnosticGroup15, checkLevel23);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions9.checkGlobalThisLevel;
        compilerOptions0.setCheckProvides(checkLevel25);
        compilerOptions0.setTweakToStringLiteral("java.io.IOException: ", "java.io.IOException: Unversioned directory");
        boolean boolean30 = compilerOptions0.exportTestFunctions;
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.io.IOException: Unversioned directory", "java.io.IOException: java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException: java.io.IOException");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        boolean boolean7 = compilerOptions0.checkSuspiciousCode;
        compilerOptions0.inputDelimiter = "2019/07/12 07:12";
        boolean boolean10 = compilerOptions0.reserveRawExports;
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray13 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList14 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList14, locationMappingArray13);
        com.google.javascript.jscomp.SourceFile sourceFile18 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean19 = locationMappingList14.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup23 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup23;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions25.checkProvides;
        compilerOptions20.setWarningLevel(diagnosticGroup23, checkLevel32);
        java.util.Set<java.lang.String> strSet34 = compilerOptions20.stripNamePrefixes;
        boolean boolean35 = locationMappingList14.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor36 = locationMappingList14.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator37 = locationMappingList14.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        compilerOptions38.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet46 = compilerOptions45.stripNamePrefixes;
        compilerOptions38.setIdGenerators(strSet46);
        java.util.stream.Stream<java.lang.String> strStream48 = strSet46.stream();
        boolean boolean49 = locationMappingList14.retainAll((java.util.Collection<java.lang.String>) strSet46);
        compilerOptions0.setStripTypePrefixes(strSet46);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locationMappingArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(sourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup23);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locationMappingItor36);
        org.junit.Assert.assertNotNull(locationMappingSpliterator37);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.foldConstants = true;
        compilerOptions0.setSummaryDetailLevel((int) '#');
        compilerOptions0.extractPrototypeMemberDeclarations = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setLabelRenaming(true);
        compilerOptions19.setCollapseAnonymousFunctions(true);
        compilerOptions19.aliasAllStrings = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions26.checkGlobalThisLevel;
        compilerOptions26.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions26.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray36 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList37 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList37, locationMappingArray36);
        java.lang.String[] strArray46 = new java.lang.String[] { "// Input %num%", "java.io.IOException", "", "// Input %num%", "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "Unversioned directory", "java.io.IOException: java.io.IOException: 2019/07/12 07:12" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = locationMappingList37.removeAll((java.util.Collection<java.lang.String>) strList47);
        compilerOptions26.setManageClosureDependencies((java.util.List<java.lang.String>) strList47);
        compilerOptions19.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList47);
        compilerOptions0.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setReportPath("2019/07/12 07:12");
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        java.lang.String str11 = compilerOptions0.sourceMapOutputPath;
        compilerOptions0.setGatherCssNames(false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        boolean boolean8 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = null;
        compilerOptions0.setTracer(tracerMode9);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray11 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList12 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList12, locationMappingArray11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        compilerOptions14.setClosurePass(true);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray27);
        compilerOptions14.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet37 = compilerOptions31.stripTypePrefixes;
        compilerOptions14.aliasableStrings = strSet37;
        boolean boolean39 = locationMappingList12.removeAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup40 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup40;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup40;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup40;
        boolean boolean44 = locationMappingList12.contains((java.lang.Object) diagnosticGroup40);
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList12);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap46 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap46;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap48 = compilerOptions0.getDefineReplacements();
        compilerOptions0.labelRenaming = true;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        boolean boolean13 = compilerOptions0.collapseVariableDeclarations;
        compilerOptions0.setUnaliasableGlobals("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        compilerOptions0.removeTryCatchFinally = true;
        compilerOptions0.setProcessObjectPropertyString(true);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.syntheticBlockEndMarker = "Unversioned directory";
        compilerOptions0.setRemoveUnusedLocalVars(true);
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.disambiguateProperties = true;
        boolean boolean51 = compilerOptions0.jqueryPass;
        compilerOptions0.setRewriteNewDateGoogNow(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.checkUnreachableCode;
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor25 = locationMappingList1.listIterator();
        int int26 = locationMappingList1.size();
        com.google.javascript.jscomp.SourceFile.Builder builder27 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator29 = null;
        com.google.javascript.jscomp.SourceFile sourceFile30 = builder27.buildFromGenerator("hi!", generator29);
        java.nio.charset.Charset charset31 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder32 = builder27.withCharset(charset31);
        java.nio.charset.Charset charset33 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder34 = builder27.withCharset(charset33);
        boolean boolean35 = locationMappingList1.equals((java.lang.Object) builder34);
        com.google.javascript.jscomp.SourceFile sourceFile38 = builder34.buildFromCode("// Input %num%", "4432#Unversionedhi!rector true\n0\n");
        java.io.InputStream inputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile41 = builder34.buildFromInputStream("Unversioned directory", inputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locationMappingItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(sourceFile30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(sourceFile38);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setLabelRenaming(true);
        compilerOptions9.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions9.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.enableExternExports(true);
        compilerOptions16.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet21 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.aliasableStrings = strSet21;
        compilerOptions0.setReplaceStringsReservedStrings(strSet21);
        compilerOptions0.setReserveRawExports(true);
        compilerOptions0.setRemoveUnusedVars(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions0.checkGlobalNamesLevel;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap29 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap29);
        compilerOptions0.syntheticBlockStartMarker = "\ufffd\nddd";
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap6 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap6;
        boolean boolean8 = compilerOptions0.preferLineBreakAtEndOfFile;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.reportMissingOverride;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet16 = compilerOptions10.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel17);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = compilerOptions10.getTracerMode();
        compilerOptions0.setTracerMode(tracerMode19);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + tracerMode19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode19.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: ";
        boolean boolean12 = compilerOptions0.jqueryPass;
        boolean boolean13 = compilerOptions0.collapseProperties;
        compilerOptions0.setRewriteFunctionExpressions(false);
        boolean boolean16 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.deadAssignmentElimination = false;
        com.google.javascript.jscomp.MessageBundle messageBundle19 = null;
        compilerOptions0.messageBundle = messageBundle19;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        boolean boolean26 = compilerOptions21.generateExports;
        compilerOptions21.gatherCssNames = false;
        boolean boolean29 = compilerOptions21.optimizeReturns;
        compilerOptions21.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet32 = compilerOptions21.aliasableStrings;
        compilerOptions21.generateExports = false;
        boolean boolean35 = compilerOptions21.assumeStrictThis();
        compilerOptions21.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions38.jqueryPass;
        boolean boolean43 = compilerOptions38.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setLabelRenaming(true);
        compilerOptions44.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean49 = compilerOptions44.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format50 = compilerOptions44.sourceMapFormat;
        compilerOptions38.sourceMapFormat = format50;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        boolean boolean55 = compilerOptions52.extractPrototypeMemberDeclarations;
        compilerOptions52.setCollapseProperties(false);
        boolean boolean58 = compilerOptions52.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat59 = compilerOptions52.errorFormat;
        compilerOptions38.setErrorFormat(errorFormat59);
        compilerOptions21.setErrorFormat(errorFormat59);
        boolean boolean62 = compilerOptions21.inlineVariables;
        com.google.javascript.jscomp.SourceMap.Format format63 = compilerOptions21.sourceMapFormat;
        com.google.javascript.jscomp.CheckLevel checkLevel64 = compilerOptions21.checkMissingGetCssNameLevel;
        compilerOptions0.setAggressiveVarCheck(checkLevel64);
        compilerOptions0.inlineGetters = true;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(format50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(errorFormat59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(format63);
        org.junit.Assert.assertTrue("'" + checkLevel64 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel64.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setReplaceStringsPlaceholderToken("java.io.IOException: ");
        compilerOptions0.setDefineToNumberLiteral("Unversioned directory", (int) (byte) 10);
        compilerOptions0.setCrossModuleMethodMotion(false);
        compilerOptions0.setInlineVariables(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.setCollapseProperties(false);
        compilerOptions13.setClosurePass(true);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions13.setInputPropertyMapSerialized(byteArray26);
        compilerOptions13.setAliasAllStrings(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.enableExternExports(true);
        java.util.Set<java.lang.String> strSet33 = compilerOptions30.stripTypes;
        compilerOptions13.stripTypePrefixes = strSet33;
        compilerOptions0.setStripNamePrefixes(strSet33);
        compilerOptions0.setSyntheticBlockEndMarker("java.io.IOException: -1");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(strSet33);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        boolean boolean21 = compilerOptions17.jqueryPass;
        boolean boolean22 = compilerOptions17.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setLabelRenaming(true);
        compilerOptions23.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean28 = compilerOptions23.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format29 = compilerOptions23.sourceMapFormat;
        compilerOptions17.sourceMapFormat = format29;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.setCollapseProperties(false);
        boolean boolean37 = compilerOptions31.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat38 = compilerOptions31.errorFormat;
        compilerOptions17.setErrorFormat(errorFormat38);
        compilerOptions0.setErrorFormat(errorFormat38);
        boolean boolean41 = compilerOptions0.inlineVariables;
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean44 = compilerOptions0.rewriteFunctionExpressions;
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.setDefineToStringLiteral("", "4432#0.010\001\001\000\001\000\ufffd");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(format29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(errorFormat38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("java.io.IOException");
        com.google.javascript.jscomp.Region region3 = sourceFile1.getRegion((int) (short) 10);
        int int5 = sourceFile1.getLineOfOffset((int) (short) 10);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertNull(region3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        sourceFile2.setOriginalPath("");
        sourceFile2.setOriginalPath("");
        java.lang.String str9 = sourceFile2.toString();
        java.lang.String str10 = sourceFile2.getName();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        compilerOptions0.markNoSideEffectCalls = true;
        java.io.PrintStream printStream13 = new java.io.PrintStream("Unversioned directory");
        char[] charArray16 = new char[] { '4', '4' };
        printStream13.print(charArray16);
        printStream13.print((int) ' ');
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream13, false);
        printStream13.write((int) '#');
        printStream13.print((float) (short) 0);
        printStream13.println("java.io.IOException");
        java.util.Locale locale28 = null;
        java.io.PrintStream printStream31 = new java.io.PrintStream("Unversioned directory");
        char[] charArray34 = new char[] { '4', '4' };
        printStream31.print(charArray34);
        printStream31.print((int) ' ');
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream31, false);
        printStream31.write((int) '#');
        java.util.Locale locale42 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream46 = printStream31.format(locale42, "Unversioned directory", objArray45);
        java.io.PrintStream printStream47 = printStream13.printf(locale28, "Unversioned directory", objArray45);
        printStream47.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention52 = null;
        compilerOptions49.setCodingConvention(codingConvention52);
        boolean boolean54 = compilerOptions49.generateExports;
        compilerOptions49.printInputDelimiter = false;
        compilerOptions49.setCheckSymbols(true);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions49.setInputVariableMapSerialized(byteArray63);
        printStream47.write(byteArray63);
        compilerOptions0.setInputVariableMapSerialized(byteArray63);
        compilerOptions0.convertToDottedProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.setRewriteNewDateGoogNow(true);
        boolean boolean72 = compilerOptions69.extractPrototypeMemberDeclarations;
        boolean boolean73 = compilerOptions69.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap74 = null;
        compilerOptions69.setCssRenamingMap(cssRenamingMap74);
        com.google.javascript.jscomp.CheckLevel checkLevel76 = compilerOptions69.reportMissingOverride;
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel80 = compilerOptions77.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel81 = compilerOptions77.reportMissingOverride;
        compilerOptions69.checkMissingGetCssNameLevel = checkLevel81;
        compilerOptions0.checkUnreachableCode = checkLevel81;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + checkLevel76 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel76.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel80 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel80.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel81 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel81.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet15 = compilerOptions9.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel16 = null;
        compilerOptions9.setCheckGlobalThisLevel(checkLevel16);
        com.google.javascript.jscomp.SourceMap.Format format18 = compilerOptions9.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy24 = compilerOptions19.anonymousFunctionNaming;
        compilerOptions9.anonymousFunctionNaming = anonymousFunctionNamingPolicy24;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        boolean boolean32 = compilerOptions27.generateExports;
        compilerOptions27.printInputDelimiter = false;
        compilerOptions27.setCheckSymbols(true);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions27.setInputVariableMapSerialized(byteArray41);
        compilerOptions0.inputPropertyMapSerialized = byteArray41;
        compilerOptions0.collapseAnonymousFunctions = true;
        compilerOptions0.setCommonJSModulePathPrefix("");
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.setRewriteNewDateGoogNow(true);
        boolean boolean51 = compilerOptions48.extractPrototypeMemberDeclarations;
        compilerOptions48.convertToDottedProperties = true;
        boolean boolean54 = compilerOptions48.inlineConstantVars;
        boolean boolean55 = compilerOptions48.extractPrototypeMemberDeclarations;
        boolean boolean56 = compilerOptions48.gatherCssNames;
        compilerOptions48.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions48.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions62.setRewriteNewDateGoogNow(true);
        boolean boolean65 = compilerOptions62.extractPrototypeMemberDeclarations;
        boolean boolean66 = compilerOptions62.jqueryPass;
        boolean boolean67 = compilerOptions62.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions68.setLabelRenaming(true);
        compilerOptions68.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean73 = compilerOptions68.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format74 = compilerOptions68.sourceMapFormat;
        compilerOptions62.setSourceMapFormat(format74);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing76 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions62.setTweakProcessing(tweakProcessing76);
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention81 = null;
        compilerOptions78.setCodingConvention(codingConvention81);
        compilerOptions78.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel85 = compilerOptions78.checkProvides;
        java.util.Set<java.lang.String> strSet86 = compilerOptions78.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream87 = strSet86.stream();
        compilerOptions62.stripTypes = strSet86;
        compilerOptions48.setStripNameSuffixes(strSet86);
        compilerOptions48.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap92 = compilerOptions48.customPasses;
        java.util.Set<java.lang.String> strSet93 = compilerOptions48.stripNameSuffixes;
        compilerOptions0.setIdGenerators(strSet93);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: java.io.IOException: ";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(format18);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy24 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy24.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(format74);
        org.junit.Assert.assertTrue("'" + tweakProcessing76 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing76.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel85 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel85.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strStream87);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap92);
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setOutputJsStringUsage(false);
        boolean boolean8 = compilerOptions0.collapseAnonymousFunctions;
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet12 = compilerOptions11.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle13 = null;
        compilerOptions11.messageBundle = messageBundle13;
        compilerOptions11.setExtractPrototypeMemberDeclarations(true);
        boolean boolean17 = compilerOptions11.closurePass;
        compilerOptions11.setSmartNameRemoval(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention23 = null;
        compilerOptions20.setCodingConvention(codingConvention23);
        compilerOptions20.setGenerateExports(true);
        compilerOptions20.optimizeParameters = false;
        compilerOptions20.setDefineToStringLiteral("hi!", "Unversioned directory");
        boolean boolean32 = compilerOptions20.prettyPrint;
        compilerOptions20.exportTestFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention38 = null;
        compilerOptions35.setCodingConvention(codingConvention38);
        compilerOptions35.setPropertyAffinity(true);
        compilerOptions35.setInlineConstantVars(true);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions35.checkMissingReturn;
        compilerOptions20.checkMissingReturn = checkLevel44;
        compilerOptions11.setCheckProvides(checkLevel44);
        compilerOptions0.brokenClosureRequiresLevel = checkLevel44;
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        compilerOptions0.disableRuntimeTypeCheck();
        compilerOptions0.removeTryCatchFinally = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        compilerOptions10.setIdGenerators(strSet18);
        compilerOptions0.setStripNameSuffixes(strSet18);
        compilerOptions0.prettyPrint = false;
        java.util.Set<java.lang.String> strSet23 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.optimizeArgumentsArray = false;
        compilerOptions0.setReplaceStringsPlaceholderToken("4432#0.010\001\001\000\001\000\ufffd");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet23);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        compilerOptions0.setGenerateExports(false);
        compilerOptions0.enableRuntimeTypeCheck("2019/07/12 07:12");
        compilerOptions0.setGatherCssNames(false);
        compilerOptions0.setInlineLocalFunctions(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setLabelRenaming(true);
        compilerOptions15.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean20 = compilerOptions15.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format21 = compilerOptions15.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format21;
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(format21);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.write((int) (byte) 1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "java.io.IOException: Unversioned directory");
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        printStream15.println((float) (-1));
        printStream15.print((long) 10);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        printStream15.print('#');
        java.io.PrintStream printStream25 = printStream15.append((java.lang.CharSequence) "");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        java.lang.String str8 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.setAppNameStr("");
        compilerOptions0.setAliasExternals(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        compilerOptions0.setLooseTypes(false);
        compilerOptions0.setNameReferenceReportPath("");
        boolean boolean18 = compilerOptions0.collapseAnonymousFunctions;
        boolean boolean19 = compilerOptions0.deadAssignmentElimination;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        char[] charArray24 = new char[] { ' ', '#', '4', 'a', '#', 'a' };
        printStream1.print(charArray24);
        java.io.PrintStream printStream28 = new java.io.PrintStream("Unversioned directory");
        char[] charArray31 = new char[] { '4', '4' };
        printStream28.print(charArray31);
        printStream28.print((int) ' ');
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream28, false);
        printStream28.write((int) '#');
        java.util.Locale locale39 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream43 = printStream28.format(locale39, "Unversioned directory", objArray42);
        java.io.PrintStream printStream44 = printStream1.printf("java.io.IOException: ", objArray42);
        java.util.Locale locale45 = null;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray47 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList48 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList48, locationMappingArray47);
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        compilerOptions50.convertToDottedProperties = true;
        boolean boolean56 = compilerOptions50.inlineConstantVars;
        boolean boolean57 = compilerOptions50.extractPrototypeMemberDeclarations;
        boolean boolean58 = compilerOptions50.reserveRawExports;
        boolean boolean59 = locationMappingList48.remove((java.lang.Object) boolean58);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention63 = null;
        compilerOptions60.setCodingConvention(codingConvention63);
        compilerOptions60.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet68 = compilerOptions67.stripNamePrefixes;
        compilerOptions60.setIdGenerators(strSet68);
        java.util.stream.Stream<java.lang.String> strStream70 = strSet68.stream();
        boolean boolean71 = locationMappingList48.retainAll((java.util.Collection<java.lang.String>) strSet68);
        boolean boolean73 = locationMappingList48.remove((java.lang.Object) (byte) 0);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping74 = null;
        boolean boolean75 = locationMappingList48.add(locationMapping74);
        int int76 = locationMappingList48.size();
        java.lang.Object[] objArray77 = locationMappingList48.toArray();
        java.io.PrintStream printStream78 = printStream44.format(locale45, "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", objArray77);
        printStream44.write(0);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #, 4, a, #, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(locationMappingArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[null]");
        org.junit.Assert.assertNotNull(printStream78);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        compilerOptions0.setTweakToStringLiteral("// Input %num%", "");
        compilerOptions0.setSkipAllPasses(false);
        compilerOptions0.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode19 = compilerOptions0.getLanguageOut();
        compilerOptions0.setDefineToDoubleLiteral("java.io.IOException: // Input %num%", (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(languageMode19);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setReplaceStringsPlaceholderToken("java.io.IOException: ");
        compilerOptions0.setDefineToNumberLiteral("Unversioned directory", (int) (byte) 10);
        compilerOptions0.setCrossModuleMethodMotion(false);
        compilerOptions0.setInlineVariables(false);
        compilerOptions0.setRuntimeTypeCheckLogFunction("Unversioned directory");
        compilerOptions0.setDefineToBooleanLiteral("java.io.IOException: 2019/07/12 07:12", false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        int int4 = sourceFile2.getColumnOfOffset(10);
        int int6 = sourceFile2.getLineOfOffset((int) (short) 1);
        com.google.javascript.jscomp.Region region8 = sourceFile2.getRegion(32);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(region8);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        compilerOptions12.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        boolean boolean27 = compilerOptions23.jqueryPass;
        boolean boolean28 = compilerOptions23.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setLabelRenaming(true);
        compilerOptions29.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean34 = compilerOptions29.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format35 = compilerOptions29.sourceMapFormat;
        compilerOptions23.setSourceMapFormat(format35);
        compilerOptions12.setSourceMapFormat(format35);
        compilerOptions0.sourceMapFormat = format35;
        compilerOptions0.setInlineConstantVars(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(format35);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        boolean boolean14 = printStream1.checkError();
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup17 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup17;
        printStream1.println((java.lang.Object) diagnosticGroup17);
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream28 = printStream1.append('#');
        boolean boolean29 = printStream1.checkError();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream33 = printStream1.append((java.lang.CharSequence) "java.io.IOException: java.io.IOException: ", (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup17);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.checkTypes = true;
        boolean boolean10 = compilerOptions0.inlineGetters;
        compilerOptions0.setTweakToDoubleLiteral("-1", (double) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.prettyPrint = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        compilerOptions10.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean19 = compilerOptions10.deadAssignmentElimination;
        compilerOptions10.optimizeCalls = false;
        compilerOptions10.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        boolean boolean24 = compilerOptions10.jqueryPass;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions25.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray33 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList34 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList34, locationMappingArray33);
        compilerOptions25.sourceMapLocationMappings = locationMappingList34;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        boolean boolean41 = compilerOptions37.jqueryPass;
        compilerOptions37.collapseAnonymousFunctions = false;
        boolean boolean44 = compilerOptions37.checkTypes;
        compilerOptions37.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions37.checkProvides;
        compilerOptions25.checkUnreachableCode = checkLevel47;
        compilerOptions25.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        boolean boolean55 = compilerOptions51.jqueryPass;
        compilerOptions51.collapseAnonymousFunctions = false;
        boolean boolean58 = compilerOptions51.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet67 = compilerOptions66.stripNamePrefixes;
        compilerOptions59.setIdGenerators(strSet67);
        compilerOptions51.stripNamePrefixes = strSet67;
        compilerOptions25.setIdGenerators(strSet67);
        compilerOptions10.stripTypePrefixes = strSet67;
        compilerOptions0.stripNameSuffixes = strSet67;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy73 = compilerOptions0.variableRenaming;
        boolean boolean74 = compilerOptions0.flowSensitiveInlineVariables;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy73 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy73.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.renamePrefix = "// Input %num%";
        compilerOptions0.inlineFunctions = true;
        compilerOptions0.crossModuleMethodMotion = true;
        boolean boolean22 = compilerOptions0.optimizeParameters;
        compilerOptions0.setAcceptConstKeyword(false);
        compilerOptions0.renamePrefix = "java.io.IOException: java.io.IOException: java.io.IOException: ";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap13;
        compilerOptions0.setAliasKeywords(false);
        compilerOptions0.lineBreak = true;
        compilerOptions0.disambiguateProperties = true;
        boolean boolean21 = compilerOptions0.optimizeArgumentsArray;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        boolean boolean13 = compilerOptions0.optimizeParameters;
        compilerOptions0.setCollapseVariableDeclarations(false);
        compilerOptions0.renamePrefixNamespace = "java.io.IOException";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        java.lang.String str53 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        compilerOptions54.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions54.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet61 = compilerOptions54.stripTypes;
        compilerOptions0.setIdGenerators(strSet61);
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList63 = compilerOptions0.sourceMapLocationMappings;
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator64 = locationMappingList63.spliterator();
        com.google.javascript.jscomp.Compiler compiler65 = new com.google.javascript.jscomp.Compiler();
        double double66 = compiler65.getProgress();
        compiler65.reportCodeChange();
        com.google.javascript.jscomp.Scope scope68 = compiler65.getTopScope();
        double double69 = compiler65.getProgress();
        compiler65.disableThreads();
        boolean boolean71 = locationMappingList63.remove((java.lang.Object) compiler65);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker72 = null;
        compiler65.tracker = performanceTracker72;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.JSError[] jSErrorArray74 = compiler65.getMessages();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locationMappingList63);
        org.junit.Assert.assertNotNull(locationMappingSpliterator64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNull(scope68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("hi!");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = diagnosticGroups0.forName("-1");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
        org.junit.Assert.assertNull(diagnosticGroup6);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream1.println(charArray13);
        printStream1.print((long) (byte) -1);
        printStream1.close();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        compilerOptions20.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap25 = null;
        compilerOptions20.setCssRenamingMap(cssRenamingMap25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        boolean boolean33 = compilerOptions27.inlineConstantVars;
        compilerOptions27.aliasAllStrings = false;
        boolean boolean36 = compilerOptions27.smartNameRemoval;
        compilerOptions27.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions27.checkGlobalNamesLevel;
        compilerOptions20.setCheckProvides(checkLevel39);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel39);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap42 = compilerOptions0.getTweakReplacements();
        boolean boolean43 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        compilerOptions0.disableRuntimeTypeCheck();
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions0.aggressiveVarCheck;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.instrumentationTemplate = "java.io.IOException";
        boolean boolean22 = compilerOptions12.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.aggressiveVarCheck = checkLevel23;
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.setDebugFunctionSideEffectsPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean29 = compilerOptions0.removeUnusedClassProperties;
        compilerOptions0.setSyntheticBlockStartMarker("4432#0.010\001\001\000\001\000\ufffd");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.convertToDottedProperties = true;
        boolean boolean30 = compilerOptions24.inlineConstantVars;
        boolean boolean31 = compilerOptions24.extractPrototypeMemberDeclarations;
        boolean boolean32 = compilerOptions24.gatherCssNames;
        compilerOptions24.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions24.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions38.jqueryPass;
        boolean boolean43 = compilerOptions38.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setLabelRenaming(true);
        compilerOptions44.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean49 = compilerOptions44.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format50 = compilerOptions44.sourceMapFormat;
        compilerOptions38.setSourceMapFormat(format50);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing52 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions38.setTweakProcessing(tweakProcessing52);
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention57 = null;
        compilerOptions54.setCodingConvention(codingConvention57);
        compilerOptions54.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel61 = compilerOptions54.checkProvides;
        java.util.Set<java.lang.String> strSet62 = compilerOptions54.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream63 = strSet62.stream();
        compilerOptions38.stripTypes = strSet62;
        compilerOptions24.setStripNameSuffixes(strSet62);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions24.checkProvides;
        compilerOptions0.reportMissingOverride = checkLevel66;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode68 = compilerOptions0.getLanguageIn();
        boolean boolean69 = compilerOptions0.inlineFunctions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(format50);
        org.junit.Assert.assertTrue("'" + tweakProcessing52 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing52.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel61 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel61.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strStream63);
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + languageMode68 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode68.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        com.google.javascript.jscomp.MessageBundle messageBundle8 = compilerOptions0.messageBundle;
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.optimizeArgumentsArray = false;
        boolean boolean13 = compilerOptions0.printInputDelimiter;
        compilerOptions0.crossModuleMethodMotion = false;
        compilerOptions0.removeUnusedVars = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertNull(messageBundle8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setLabelRenaming(true);
        compilerOptions31.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean36 = compilerOptions31.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format37 = compilerOptions31.sourceMapFormat;
        compilerOptions31.setCollapseAnonymousFunctions(true);
        printStream1.print((java.lang.Object) compilerOptions31);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        boolean boolean44 = compilerOptions41.extractPrototypeMemberDeclarations;
        compilerOptions41.convertToDottedProperties = true;
        boolean boolean47 = compilerOptions41.inlineConstantVars;
        boolean boolean48 = compilerOptions41.extractPrototypeMemberDeclarations;
        boolean boolean49 = compilerOptions41.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard50 = null;
        compilerOptions41.setWarningsGuard(composeWarningsGuard50);
        compilerOptions41.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach54 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions41.setInlineFunctions(reach54);
        compilerOptions31.setRemoveUnusedVariable(reach54);
        compilerOptions31.setAcceptConstKeyword(false);
        boolean boolean59 = compilerOptions31.computeFunctionSideEffects;
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(format37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + reach54 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach54.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Generator generator11 = null;
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder9.buildFromGenerator("java.io.IOException: ", generator11);
        com.google.javascript.jscomp.SourceFile.Generator generator14 = null;
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder9.buildFromGenerator("2019/07/12 07:12", generator14);
        java.nio.charset.Charset charset16 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder17 = builder9.withCharset(charset16);
        com.google.javascript.jscomp.SourceFile.Builder builder20 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator22 = null;
        com.google.javascript.jscomp.SourceFile sourceFile23 = builder20.buildFromGenerator("hi!", generator22);
        java.nio.charset.Charset charset24 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder25 = builder20.withCharset(charset24);
        com.google.javascript.jscomp.SourceFile.Generator generator27 = null;
        com.google.javascript.jscomp.SourceFile sourceFile28 = builder25.buildFromGenerator("hi!", generator27);
        com.google.javascript.jscomp.SourceFile.Builder builder30 = builder25.withOriginalPath("");
        com.google.javascript.jscomp.SourceFile.Builder builder32 = builder30.withOriginalPath("java.io.IOException: ");
        com.google.javascript.jscomp.SourceFile.Builder builder34 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator36 = null;
        com.google.javascript.jscomp.SourceFile sourceFile37 = builder34.buildFromGenerator("hi!", generator36);
        java.nio.charset.Charset charset38 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder39 = builder34.withCharset(charset38);
        java.nio.charset.Charset charset40 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder41 = builder34.withCharset(charset40);
        com.google.javascript.jscomp.SourceFile.Builder builder43 = builder34.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile46 = builder34.buildFromCode("// Input %num%", "hi!");
        boolean boolean47 = sourceFile46.isExtern();
        java.io.Reader reader48 = sourceFile46.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile49 = builder32.buildFromReader("java.io.IOException: -1", reader48);
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: ", reader48);
        com.google.javascript.jscomp.SourceFile sourceFile51 = builder17.buildFromReader("java.io.IOException: 2019/07/12 07:12", reader48);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(sourceFile28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(sourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(reader48);
        org.junit.Assert.assertNotNull(sourceFile49);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertNotNull(sourceFile51);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Generator generator7 = null;
        com.google.javascript.jscomp.SourceFile sourceFile8 = builder5.buildFromGenerator("hi!", generator7);
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder10 = builder5.withCharset(charset9);
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder5.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset13 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder14 = builder5.withCharset(charset13);
        com.google.javascript.jscomp.SourceFile.Generator generator16 = null;
        com.google.javascript.jscomp.SourceFile sourceFile17 = builder5.buildFromGenerator("2019/07/12 07:12", generator16);
        com.google.javascript.jscomp.SourceFile.Generator generator19 = null;
        com.google.javascript.jscomp.SourceFile sourceFile20 = builder5.buildFromGenerator("java.io.IOException: java.io.IOException: ", generator19);
        java.nio.charset.Charset charset21 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder22 = builder5.withCharset(charset21);
        com.google.javascript.jscomp.SourceFile.Builder builder24 = builder5.withOriginalPath("-1");
        java.nio.charset.Charset charset25 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder26 = builder24.withCharset(charset25);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(sourceFile17);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.collapseVariableDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        boolean boolean12 = compilerOptions8.jqueryPass;
        compilerOptions8.collapseAnonymousFunctions = false;
        boolean boolean15 = compilerOptions8.checkTypes;
        compilerOptions8.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions8.checkProvides;
        compilerOptions0.setCheckRequires(checkLevel18);
        boolean boolean20 = compilerOptions0.recordFunctionInformation;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream16.println((double) 1);
        printStream16.print(1L);
        java.io.PrintStream printStream22 = printStream16.append('4');
        java.lang.Object[] objArray24 = null;
        java.io.PrintStream printStream25 = printStream16.format("hi!", objArray24);
        printStream25.print((long) (short) 1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        java.lang.String str8 = compiler0.getAstDotGraph();
        java.lang.String str11 = compiler0.getSourceLine("java.io.IOException: Unversioned directory", 0);
        com.google.javascript.jscomp.SourceMap sourceMap12 = compiler0.getSourceMap();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker13 = null;
        compiler0.tracker = performanceTracker13;
        compiler0.reportCodeChange();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.JSError[] jSErrorArray16 = compiler0.getMessages();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(sourceMap12);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.inlineFunctions = false;
        boolean boolean6 = compilerOptions0.ideMode;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.setRewriteNewDateGoogNow(false);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap11 = compilerOptions0.customPasses;
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap11);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkProvides;
        compilerOptions0.sourceMapOutputPath = "";
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.checkMissingReturn;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        boolean boolean12 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setLabelRenaming(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        boolean boolean11 = compilerOptions6.generateExports;
        compilerOptions6.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy17 = compilerOptions14.variableRenaming;
        compilerOptions6.setVariableRenaming(variableRenamingPolicy17);
        compilerOptions0.variableRenaming = variableRenamingPolicy17;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention23 = null;
        compilerOptions20.setCodingConvention(codingConvention23);
        compilerOptions20.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel27 = compilerOptions20.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray28 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList29 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList29, locationMappingArray28);
        compilerOptions20.sourceMapLocationMappings = locationMappingList29;
        boolean boolean32 = compilerOptions20.inlineVariables;
        boolean boolean33 = compilerOptions20.inlineLocalFunctions;
        compilerOptions20.setRenamePrefix("java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        compilerOptions36.setCollapseProperties(false);
        compilerOptions36.setClosurePass(true);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions36.setInputPropertyMapSerialized(byteArray49);
        compilerOptions36.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions36.reportMissingOverride;
        compilerOptions36.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet57 = compilerOptions56.stripNamePrefixes;
        byte[] byteArray58 = compilerOptions56.inputVariableMapSerialized;
        compilerOptions56.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap61 = null;
        compilerOptions56.setCssRenamingMap(cssRenamingMap61);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        boolean boolean66 = compilerOptions63.extractPrototypeMemberDeclarations;
        compilerOptions63.convertToDottedProperties = true;
        boolean boolean69 = compilerOptions63.inlineConstantVars;
        compilerOptions63.aliasAllStrings = false;
        boolean boolean72 = compilerOptions63.smartNameRemoval;
        compilerOptions63.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel75 = compilerOptions63.checkGlobalNamesLevel;
        compilerOptions56.setCheckProvides(checkLevel75);
        compilerOptions36.setCheckGlobalNamesLevel(checkLevel75);
        compilerOptions20.setReportUnknownTypes(checkLevel75);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel75);
        compilerOptions0.deadAssignmentElimination = false;
        boolean boolean82 = compilerOptions0.crossModuleCodeMotion;
        compilerOptions0.aliasAllStrings = false;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy17.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel27 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel27.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + checkLevel75 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel75.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile sourceFile10 = builder7.buildFromCode("java.io.IOException: ", "java.io.IOException: ");
        com.google.javascript.jscomp.SourceFile sourceFile13 = builder7.buildFromCode("java.io.IOException: ", "java.io.IOException: Unversioned directory");
        // The following exception was thrown during execution in test generation
        try {
            int int15 = sourceFile13.getLineOffset((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Expected line number between 1 and 1?Actual: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertNotNull(sourceFile13);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        boolean boolean22 = compilerOptions19.extractPrototypeMemberDeclarations;
        compilerOptions19.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions19.checkGlobalThisLevel;
        compilerOptions12.checkProvides = checkLevel25;
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel25);
        compilerOptions0.setInputDelimiter("java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setAppNameStr("java.io.IOException");
        compilerOptions0.setInstrumentationTemplate("// Input %num%");
        compilerOptions0.optimizeArgumentsArray = true;
        compilerOptions0.setRemoveDeadCode(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        boolean boolean15 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCheckTypes(false);
        boolean boolean18 = compilerOptions0.markAsCompiled;
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Builder builder13 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator15 = null;
        com.google.javascript.jscomp.SourceFile sourceFile16 = builder13.buildFromGenerator("hi!", generator15);
        java.nio.charset.Charset charset17 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder18 = builder13.withCharset(charset17);
        com.google.javascript.jscomp.SourceFile.Generator generator20 = null;
        com.google.javascript.jscomp.SourceFile sourceFile21 = builder18.buildFromGenerator("hi!", generator20);
        java.nio.charset.Charset charset22 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder23 = builder18.withCharset(charset22);
        com.google.javascript.jscomp.SourceFile sourceFile25 = builder18.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset26 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder27 = builder18.withCharset(charset26);
        com.google.javascript.jscomp.SourceFile.Builder builder29 = builder18.withOriginalPath("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile.Builder builder32 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator34 = null;
        com.google.javascript.jscomp.SourceFile sourceFile35 = builder32.buildFromGenerator("hi!", generator34);
        java.nio.charset.Charset charset36 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder37 = builder32.withCharset(charset36);
        java.nio.charset.Charset charset38 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder39 = builder32.withCharset(charset38);
        com.google.javascript.jscomp.SourceFile.Builder builder41 = builder32.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile44 = builder32.buildFromCode("// Input %num%", "hi!");
        boolean boolean45 = sourceFile44.isExtern();
        java.io.Reader reader46 = sourceFile44.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile47 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: 2019/07/12 07:12", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile48 = builder18.buildFromReader("java.io.IOException: Unversioned directory", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile49 = com.google.javascript.jscomp.SourceFile.fromReader("2019/07/12 07:12", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: -1", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile51 = builder9.buildFromReader("4432#0.010\001\001\000\001\000\ufffd", reader46);
        boolean boolean52 = sourceFile51.isExtern();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = sourceFile51.getLineOffset((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Expected line number between 1 and 1?Actual: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(sourceFile21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(sourceFile25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(sourceFile35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(reader46);
        org.junit.Assert.assertNotNull(sourceFile47);
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertNotNull(sourceFile49);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertNotNull(sourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        com.google.javascript.jscomp.PassConfig passConfig2 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler0.setPassConfig(passConfig2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        boolean boolean3 = locationMappingList1.isEmpty();
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor4 = locationMappingList1.iterator();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locationMappingItor4);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setInlineFunctions(false);
        boolean boolean12 = compilerOptions0.isRemoveUnusedClassProperties();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.println((float) (-1));
        printStream1.write((int) (byte) 0);
        printStream1.print("java.io.IOException: 2019/07/12 07:12");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.crossModuleMethodMotion;
        boolean boolean2 = compilerOptions0.markNoSideEffectCalls;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean7 = compilerOptions3.jqueryPass;
        compilerOptions3.collapseAnonymousFunctions = false;
        boolean boolean10 = compilerOptions3.checkTypes;
        compilerOptions3.setRemoveTryCatchFinally(false);
        java.lang.String str13 = compilerOptions3.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode14 = compilerOptions3.getLanguageIn();
        compilerOptions0.setLanguageIn(languageMode14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + languageMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode14.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.reportMissingOverride;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        compilerOptions0.recordFunctionInformation = false;
        compilerOptions0.setSyntheticBlockEndMarker("java.io.IOException: Unversioned directory");
        compilerOptions0.setTweakToDoubleLiteral("java.io.IOException: java.io.IOException: 2019/07/12 07:12", (double) 100);
        boolean boolean16 = compilerOptions0.collapseProperties;
        boolean boolean17 = compilerOptions0.moveFunctionDeclarations;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.collapseProperties = true;
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.setTweakToBooleanLiteral("java.io.IOException", false);
        compilerOptions0.setAssumeStrictThis(false);
        com.google.javascript.jscomp.MessageBundle messageBundle18 = null;
        compilerOptions0.messageBundle = messageBundle18;
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        com.google.javascript.jscomp.MessageBundle messageBundle8 = compilerOptions0.messageBundle;
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        compilerOptions0.disambiguateProperties = true;
        compilerOptions0.setUnaliasableGlobals("4432#Unversionedhi!rector true\n0\n");
        boolean boolean19 = compilerOptions0.crossModuleMethodMotion;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertNull(messageBundle8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream22.write((int) (byte) 10);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        printStream25.flush();
        printStream25.println((double) 0);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        compilerOptions7.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler12 = compilerOptions7.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy13 = compilerOptions7.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach18 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions14.setInlineVariables(reach18);
        compilerOptions14.setPrintInputDelimiter(true);
        boolean boolean22 = compilerOptions14.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle23 = null;
        compilerOptions14.messageBundle = messageBundle23;
        compilerOptions14.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        compilerOptions27.stripTypePrefixes = strSet34;
        compilerOptions14.setAliasableStrings(strSet34);
        compilerOptions7.stripTypePrefixes = strSet34;
        compilerOptions0.setStripNameSuffixes(strSet34);
        compilerOptions0.setExportTestFunctions(true);
        compilerOptions0.setRuntimeTypeCheckLogFunction("\ufffd\nddd");
        compilerOptions0.setProcessCommonJSModules(false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(aliasTransformationHandler12);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy13 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy13.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + reach18 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach18.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler7 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.setSyntheticBlockStartMarker("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.lang.String str10 = compilerOptions0.syntheticBlockEndMarker;
        java.lang.String str11 = compilerOptions0.syntheticBlockEndMarker;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        boolean boolean13 = compilerOptions10.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setLabelRenaming(true);
        compilerOptions14.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions14.checkGlobalThisLevel;
        compilerOptions10.setCheckGlobalNamesLevel(checkLevel19);
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel19);
        compilerOptions0.setCheckTypes(true);
        compilerOptions0.setFoldConstants(false);
        compilerOptions0.disableRuntimeTypeCheck();
        compilerOptions0.generatePseudoNames = false;
        compilerOptions0.devirtualizePrototypeMethods = false;
        java.lang.String str31 = compilerOptions0.inputDelimiter;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap32 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "// Input %num%" + "'", str31, "// Input %num%");
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setFoldConstants(true);
        compilerOptions0.setSpecializeInitialModule(false);
        compilerOptions0.setRemoveClosureAsserts(false);
        compilerOptions0.setSourceMapOutputPath("");
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        compilerOptions20.setClosurePass(true);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions20.setInputPropertyMapSerialized(byteArray33);
        compilerOptions20.setSyntheticBlockStartMarker("Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = null;
        compilerOptions37.setCodingConvention(codingConvention40);
        boolean boolean42 = compilerOptions37.generateExports;
        compilerOptions37.gatherCssNames = false;
        boolean boolean45 = compilerOptions37.optimizeReturns;
        compilerOptions37.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet48 = compilerOptions37.aliasableStrings;
        compilerOptions37.generateExports = false;
        boolean boolean51 = compilerOptions37.assumeStrictThis();
        compilerOptions37.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention57 = null;
        compilerOptions54.setCodingConvention(codingConvention57);
        compilerOptions54.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet62 = compilerOptions61.stripNamePrefixes;
        compilerOptions54.setIdGenerators(strSet62);
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention67 = null;
        compilerOptions64.setCodingConvention(codingConvention67);
        compilerOptions64.setGeneratePseudoNames(true);
        compilerOptions64.inlineLocalFunctions = false;
        compilerOptions64.setIdeMode(true);
        compilerOptions64.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.setRewriteNewDateGoogNow(true);
        boolean boolean80 = compilerOptions77.extractPrototypeMemberDeclarations;
        compilerOptions77.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel83 = compilerOptions77.checkGlobalThisLevel;
        compilerOptions64.checkMissingReturn = checkLevel83;
        compilerOptions54.aggressiveVarCheck = checkLevel83;
        compilerOptions37.checkUnreachableCode = checkLevel83;
        compilerOptions20.setCheckGlobalNamesLevel(checkLevel83);
        compilerOptions20.enableRuntimeTypeCheck("");
        com.google.javascript.jscomp.CheckLevel checkLevel90 = compilerOptions20.checkRequires;
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel90;
        compilerOptions0.setSmartNameRemoval(true);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + checkLevel83 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel83.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel90 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel90.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap8;
        boolean boolean10 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet17 = compilerOptions11.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel18 = null;
        compilerOptions11.setCheckGlobalThisLevel(checkLevel18);
        com.google.javascript.jscomp.SourceMap.Format format20 = compilerOptions11.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy26 = compilerOptions21.anonymousFunctionNaming;
        compilerOptions11.anonymousFunctionNaming = anonymousFunctionNamingPolicy26;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy26);
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(format20);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy26 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy26.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        java.lang.String str6 = compiler0.getSourceLine("Unversioned directory", (int) (byte) -1);
        compiler0.disableThreads();
        compiler0.disableThreads();
        com.google.javascript.jscomp.JSError jSError9 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler0.report(jSError9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setAliasAllStrings(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions0.setTracer(tracerMode7);
        compilerOptions0.setExternExports(true);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = true;
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.setAliasableGlobals("java.io.IOException: ");
        boolean boolean25 = compilerOptions0.checkSymbols;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setPropertyAffinity(true);
        boolean boolean33 = compilerOptions26.closurePass;
        compilerOptions26.setCheckCaja(true);
        compilerOptions26.closurePass = true;
        java.util.Set<java.lang.String> strSet38 = compilerOptions26.stripTypes;
        compilerOptions0.aliasableStrings = strSet38;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet46 = compilerOptions40.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel47 = null;
        compilerOptions40.setCheckGlobalThisLevel(checkLevel47);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setLabelRenaming(true);
        compilerOptions49.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions49.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.enableExternExports(true);
        compilerOptions56.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet61 = compilerOptions56.stripNamePrefixes;
        compilerOptions49.aliasableStrings = strSet61;
        compilerOptions40.setStripNameSuffixes(strSet61);
        compilerOptions0.setStripTypes(strSet61);
        compilerOptions0.setAliasableGlobals("4432#0.010\001\001\000\001\000\ufffd");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strSet61);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        com.google.javascript.jscomp.SourceMap.Format format11 = compilerOptions0.sourceMapFormat;
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.enableRuntimeTypeCheck("2019/07/12 07:12");
        compilerOptions0.setAliasAllStrings(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(format11);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.renamePrefixNamespace = "Unversioned directory";
        compilerOptions0.collapseAnonymousFunctions = true;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing14 = compilerOptions0.getTweakProcessing();
        boolean boolean15 = tweakProcessing14.isOn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing14.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setCheckControlStructures(true);
        compilerOptions0.setInlineLocalFunctions(true);
        compilerOptions0.setAmbiguateProperties(false);
        boolean boolean21 = compilerOptions0.getInferTypes();
        boolean boolean22 = compilerOptions0.labelRenaming;
        compilerOptions0.enableExternExports(false);
        boolean boolean25 = compilerOptions0.inlineGetters;
        compilerOptions0.setDefineToBooleanLiteral("", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setNameReferenceReportPath("java.io.IOException");
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setDisambiguateProperties(false);
        compilerOptions0.setRenamePrefix("java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.lang.String str12 = compilerOptions0.checkMissingGetCssNameBlacklist;
        compilerOptions0.checkSymbols = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("", throwable3);
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("", throwable6);
        iOException4.addSuppressed((java.lang.Throwable) iOException7);
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException("", throwable11);
        java.lang.Throwable throwable14 = null;
        java.io.IOException iOException15 = new java.io.IOException("", throwable14);
        iOException12.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException("", (java.lang.Throwable) iOException12);
        iOException7.addSuppressed((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException17);
        java.io.IOException iOException20 = new java.io.IOException("-1", (java.lang.Throwable) iOException17);
        java.io.IOException iOException24 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException25 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException24);
        java.io.IOException iOException28 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException28);
        iOException24.addSuppressed((java.lang.Throwable) iOException30);
        java.io.IOException iOException33 = new java.io.IOException("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        iOException24.addSuppressed((java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException("java.io.IOException: java.io.IOException: 2019/07/12 07:12", (java.lang.Throwable) iOException24);
        iOException20.addSuppressed((java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException37);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        compilerOptions0.setOptimizeCalls(false);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray15 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList16 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList16, locationMappingArray15);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        compilerOptions18.convertToDottedProperties = true;
        boolean boolean24 = compilerOptions18.inlineConstantVars;
        boolean boolean25 = compilerOptions18.extractPrototypeMemberDeclarations;
        boolean boolean26 = compilerOptions18.reserveRawExports;
        boolean boolean27 = locationMappingList16.remove((java.lang.Object) boolean26);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor28 = locationMappingList16.listIterator();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList16);
        compilerOptions0.setReplaceIdGenerators(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locationMappingArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locationMappingItor28);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.optimizeParameters = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setCheckControlStructures(true);
        compilerOptions0.setInlineLocalFunctions(true);
        compilerOptions0.setAmbiguateProperties(false);
        boolean boolean21 = compilerOptions0.getInferTypes();
        boolean boolean22 = compilerOptions0.labelRenaming;
        compilerOptions0.enableExternExports(false);
        boolean boolean25 = compilerOptions0.inlineGetters;
        compilerOptions0.setAliasAllStrings(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy28 = compilerOptions0.propertyRenaming;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy28.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withOriginalPath("// Input %num%");
        com.google.javascript.jscomp.SourceFile sourceFile10 = builder7.buildFromCode("-1", "");
        java.nio.charset.Charset charset11 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder12 = builder7.withCharset(charset11);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        com.google.javascript.jscomp.SourceFile sourceFile6 = builder0.buildFromCode("2019/07/12 07:12", "hi!");
        java.nio.charset.Charset charset7 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder8 = builder0.withCharset(charset7);
        com.google.javascript.jscomp.SourceFile sourceFile10 = builder8.buildFromFile("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(sourceFile10);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode11 = compilerOptions0.getLanguageIn();
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        compilerOptions0.setDefineReplacements(strMap12);
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions0.checkGlobalThisLevel;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + languageMode11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode11.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        compilerOptions0.setDefineToBooleanLiteral("Unversioned directory", true);
        compilerOptions0.setMoveFunctionDeclarations(true);
        compilerOptions0.setRewriteFunctionExpressions(false);
        boolean boolean15 = compilerOptions0.ambiguateProperties;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.MessageBundle messageBundle15 = compilerOptions0.messageBundle;
        boolean boolean16 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(messageBundle15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.optimizeParameters = false;
        compilerOptions0.setDefineToStringLiteral("hi!", "Unversioned directory");
        boolean boolean12 = compilerOptions0.prettyPrint;
        compilerOptions0.exportTestFunctions = false;
        compilerOptions0.optimizeArgumentsArray = false;
        compilerOptions0.setAcceptConstKeyword(true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        compilerOptions0.setTransformAMDToCJSModules(false);
        java.lang.String str12 = compilerOptions0.aliasStringsBlacklist;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.setCollapseProperties(false);
        boolean boolean19 = compilerOptions13.lineBreak;
        compilerOptions13.recordFunctionInformation = false;
        com.google.javascript.jscomp.CompilerOptions.Reach reach22 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions13.setInlineFunctions(reach22);
        compilerOptions0.setRemoveUnusedVariable(reach22);
        compilerOptions0.setPrintInputDelimiter(false);
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + reach22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach22.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        printStream1.print((double) 0.0f);
        printStream1.print(0L);
        printStream1.write(100);
        printStream1.println('#');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.prettyPrint = false;
        compilerOptions0.checkTypes = true;
        compilerOptions0.setProcessCommonJSModules(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setGenerateExports(true);
        compilerOptions25.setCollapseProperties(false);
        boolean boolean34 = compilerOptions25.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        compilerOptions25.setCheckSymbols(true);
        boolean boolean38 = compilerOptions25.devirtualizePrototypeMethods;
        boolean boolean39 = locationMappingList1.equals((java.lang.Object) compilerOptions25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGeneratePseudoNames(true);
        compilerOptions40.inlineLocalFunctions = false;
        compilerOptions40.setInlineLocalVariables(true);
        boolean boolean51 = compilerOptions40.optimizeParameters;
        compilerOptions40.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions40.closurePass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions56.checkProvides;
        java.util.Set<java.lang.String> strSet64 = compilerOptions56.stripTypes;
        compilerOptions40.setStripNamePrefixes(strSet64);
        boolean boolean66 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet64);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet68 = compilerOptions67.stripNamePrefixes;
        byte[] byteArray69 = compilerOptions67.inputVariableMapSerialized;
        compilerOptions67.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap72 = null;
        compilerOptions67.setCssRenamingMap(cssRenamingMap72);
        compilerOptions67.setDefineToNumberLiteral("java.io.IOException: ", 100);
        java.util.Set<java.lang.String> strSet77 = compilerOptions67.stripTypePrefixes;
        boolean boolean78 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet77);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.write((int) (byte) 100);
        printStream11.println(true);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup18;
        printStream17.print((java.lang.Object) diagnosticGroup18);
        printStream17.println();
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setInlineProperties(true);
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        compilerOptions0.setNameReferenceGraphPath("-1");
        compilerOptions0.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGeneratePseudoNames(true);
        compilerOptions13.inlineLocalFunctions = false;
        compilerOptions13.setInlineLocalVariables(true);
        boolean boolean24 = compilerOptions13.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        boolean boolean29 = compilerOptions25.jqueryPass;
        compilerOptions25.collapseAnonymousFunctions = false;
        java.lang.String str32 = compilerOptions25.aliasStringsBlacklist;
        compilerOptions25.instrumentationTemplate = "java.io.IOException";
        boolean boolean35 = compilerOptions25.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions25.checkMissingGetCssNameLevel;
        compilerOptions13.aggressiveVarCheck = checkLevel36;
        compilerOptions0.reportMissingOverride = checkLevel36;
        compilerOptions0.setCrossModuleMethodMotion(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing41 = null;
        compilerOptions0.setTweakProcessing(tweakProcessing41);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler9 = compilerOptions0.getAliasTransformationHandler();
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        boolean boolean16 = compilerOptions11.generateExports;
        compilerOptions11.gatherCssNames = false;
        boolean boolean19 = compilerOptions11.optimizeReturns;
        compilerOptions11.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet22 = compilerOptions11.aliasableStrings;
        compilerOptions11.generateExports = false;
        boolean boolean25 = compilerOptions11.assumeStrictThis();
        boolean boolean26 = compilerOptions11.markNoSideEffectCalls;
        java.util.Set<java.lang.String> strSet27 = compilerOptions11.stripNamePrefixes;
        compilerOptions0.setExtraAnnotationNames(strSet27);
        compilerOptions0.setRewriteNewDateGoogNow(false);
        java.util.Set<java.lang.String> strSet31 = compilerOptions0.stripTypePrefixes;
        java.util.Set<java.lang.String> strSet32 = compilerOptions0.stripTypes;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        compilerOptions0.setOptimizeCalls(false);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray15 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList16 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList16, locationMappingArray15);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        compilerOptions18.convertToDottedProperties = true;
        boolean boolean24 = compilerOptions18.inlineConstantVars;
        boolean boolean25 = compilerOptions18.extractPrototypeMemberDeclarations;
        boolean boolean26 = compilerOptions18.reserveRawExports;
        boolean boolean27 = locationMappingList16.remove((java.lang.Object) boolean26);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor28 = locationMappingList16.listIterator();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList16);
        boolean boolean30 = compilerOptions0.jqueryPass;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locationMappingArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locationMappingItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.instrumentationTemplate = "// Input %num%";
        compilerOptions0.setInstrumentationTemplate("-1");
        boolean boolean16 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        compilerOptions17.setClosurePass(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions17.setInputPropertyMapSerialized(byteArray30);
        compilerOptions17.setCheckControlStructures(true);
        compilerOptions17.setInlineLocalFunctions(true);
        com.google.javascript.jscomp.SourceMap.Format format36 = compilerOptions17.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format36;
        java.lang.String str38 = compilerOptions0.inputDelimiter;
        boolean boolean39 = compilerOptions0.removeUnusedLocalVars;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(format36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "// Input %num%" + "'", str38, "// Input %num%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        java.io.InputStream inputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromInputStream("java.io.IOException: // Input %num%", "java.io.IOException", inputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        boolean boolean14 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setAliasAllStrings(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.renamePrefixNamespace = "Unversioned directory";
        compilerOptions0.collapseAnonymousFunctions = true;
        compilerOptions0.smartNameRemoval = false;
        java.util.Set<java.lang.String> strSet16 = compilerOptions0.stripTypes;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler5 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy6 = compilerOptions0.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach11 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions7.setInlineVariables(reach11);
        compilerOptions7.setPrintInputDelimiter(true);
        boolean boolean15 = compilerOptions7.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle16 = null;
        compilerOptions7.messageBundle = messageBundle16;
        compilerOptions7.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        compilerOptions21.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet27 = compilerOptions21.stripTypePrefixes;
        compilerOptions20.stripTypePrefixes = strSet27;
        compilerOptions7.setAliasableStrings(strSet27);
        compilerOptions0.stripTypePrefixes = strSet27;
        java.util.stream.Stream<java.lang.String> strStream31 = strSet27.stream();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler5);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy6 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy6.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + reach11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach11.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strStream31);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.setReplaceIdGenerators(false);
        compilerOptions0.setInlineLocalVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        boolean boolean19 = compilerOptions13.inlineConstantVars;
        compilerOptions13.aliasAllStrings = false;
        boolean boolean22 = compilerOptions13.smartNameRemoval;
        compilerOptions13.gatherCssNames = true;
        compilerOptions13.collapseVariableDeclarations = true;
        compilerOptions13.aliasExternals = false;
        com.google.javascript.jscomp.CodingConvention codingConvention29 = compilerOptions13.getCodingConvention();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy30 = compilerOptions13.propertyRenaming;
        compilerOptions0.propertyRenaming = propertyRenamingPolicy30;
        java.util.Set<java.lang.String> strSet32 = compilerOptions0.stripNamePrefixes;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(codingConvention29);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy30 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy30.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        compilerOptions0.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        boolean boolean9 = compilerOptions0.aliasAllStrings;
        compilerOptions0.removeUnusedVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        java.lang.String[] strArray21 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        compilerOptions12.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList22);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setLabelRenaming(true);
        compilerOptions25.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean30 = compilerOptions25.labelRenaming;
        compilerOptions25.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        byte[] byteArray35 = compilerOptions33.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup36 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup36;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        compilerOptions38.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions38.checkProvides;
        compilerOptions33.setWarningLevel(diagnosticGroup36, checkLevel45);
        compilerOptions25.checkUnreachableCode = checkLevel45;
        compilerOptions12.aggressiveVarCheck = checkLevel45;
        compilerOptions12.setCrossModuleCodeMotion(true);
        compilerOptions12.removeUnusedLocalVars = true;
        compilerOptions12.setLineBreak(false);
        java.util.Set<java.lang.String> strSet55 = null;
        compilerOptions12.setStripTypePrefixes(strSet55);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention60 = null;
        compilerOptions57.setCodingConvention(codingConvention60);
        compilerOptions57.setGenerateExports(true);
        compilerOptions57.setCollapseProperties(false);
        boolean boolean66 = compilerOptions57.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel67 = compilerOptions57.aggressiveVarCheck;
        compilerOptions57.setCheckSymbols(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions70.setRewriteNewDateGoogNow(true);
        boolean boolean73 = compilerOptions70.extractPrototypeMemberDeclarations;
        compilerOptions70.convertToDottedProperties = true;
        boolean boolean76 = compilerOptions70.inlineConstantVars;
        boolean boolean77 = compilerOptions70.extractPrototypeMemberDeclarations;
        boolean boolean78 = compilerOptions70.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard79 = null;
        compilerOptions70.setWarningsGuard(composeWarningsGuard79);
        compilerOptions70.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach83 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions70.setInlineFunctions(reach83);
        compilerOptions57.setRemoveUnusedVariables(reach83);
        compilerOptions12.setInlineVariables(reach83);
        compilerOptions0.setRemoveUnusedVariables(reach83);
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(byteArray35);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup36);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + checkLevel67 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel67.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + reach83 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach83.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        java.lang.String str8 = compiler0.getAstDotGraph();
        java.lang.String str11 = compiler0.getSourceLine("java.io.IOException: Unversioned directory", 0);
        com.google.javascript.jscomp.SourceMap sourceMap12 = compiler0.getSourceMap();
        com.google.javascript.jscomp.Scope scope13 = compiler0.getTopScope();
        // The following exception was thrown during execution in test generation
        try {
            compiler0.optimize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(sourceMap12);
        org.junit.Assert.assertNull(scope13);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        boolean boolean9 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard12 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard12);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        boolean boolean6 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode7 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageOut(languageMode7);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel9 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.closurePass = true;
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + languageMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode7.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertNotNull(detailLevel9);
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        compilerOptions10.setIdGenerators(strSet18);
        compilerOptions0.setStripNameSuffixes(strSet18);
        compilerOptions0.prettyPrint = false;
        java.lang.String str23 = compilerOptions0.sourceMapOutputPath;
        compilerOptions0.crossModuleCodeMotion = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        java.io.PrintStream printStream1 = new java.io.PrintStream("java.io.IOException");
        printStream1.write((int) (short) 0);
        printStream1.println();
        printStream1.close();
        boolean boolean6 = printStream1.checkError();
        printStream1.print(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkProvides;
        boolean boolean11 = compilerOptions0.checkControlStructures;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap12 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap12;
        compilerOptions0.markAsCompiled = true;
        boolean boolean16 = compilerOptions0.aliasExternals;
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.inlineConstantVars = false;
        compilerOptions0.exportTestFunctions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet24 = compilerOptions23.stripNamePrefixes;
        byte[] byteArray25 = compilerOptions23.inputVariableMapSerialized;
        compilerOptions23.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler28 = compilerOptions23.getAliasTransformationHandler();
        compilerOptions23.setOptimizeCalls(false);
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions23.checkMissingGetCssNameLevel;
        compilerOptions0.reportMissingOverride = checkLevel31;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(aliasTransformationHandler28);
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.removeTryCatchFinally = true;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel13 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel13;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.aliasKeywords;
        compilerOptions0.gatherCssNames = true;
        boolean boolean19 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.instrumentationTemplate = "Unversioned directory";
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup22 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup22;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions24.checkGlobalThisLevel;
        compilerOptions24.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle33 = null;
        compilerOptions24.setMessageBundle(messageBundle33);
        boolean boolean35 = compilerOptions24.recordFunctionInformation;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy36 = compilerOptions24.anonymousFunctionNaming;
        boolean boolean37 = compilerOptions24.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions24.checkGlobalThisLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup22, checkLevel38);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy36 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy36.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setPreferLineBreakAtEndOfFile(true);
        compilerOptions0.coalesceVariableNames = false;
        boolean boolean15 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.jqueryPass = false;
        compilerOptions0.setRewriteFunctionExpressions(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        boolean boolean24 = compilerOptions20.jqueryPass;
        compilerOptions20.collapseAnonymousFunctions = false;
        compilerOptions20.setTransformAMDToCJSModules(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet35 = compilerOptions29.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel36 = null;
        compilerOptions29.setCheckGlobalThisLevel(checkLevel36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setLabelRenaming(true);
        compilerOptions38.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions38.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.enableExternExports(true);
        compilerOptions45.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet50 = compilerOptions45.stripNamePrefixes;
        compilerOptions38.aliasableStrings = strSet50;
        compilerOptions29.setStripNameSuffixes(strSet50);
        compilerOptions20.stripTypes = strSet50;
        compilerOptions20.closurePass = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy61 = compilerOptions56.anonymousFunctionNaming;
        compilerOptions20.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy61);
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy61);
        compilerOptions0.setUnaliasableGlobals("java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy61 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy61.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        boolean boolean10 = compilerOptions0.checkControlStructures;
        boolean boolean11 = compilerOptions0.collapseVariableDeclarations;
        boolean boolean12 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.SourceMap.Format format13 = compilerOptions0.sourceMapFormat;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(format13);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setCheckCaja(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap52 = compilerOptions0.getTweakReplacements();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setTightenTypes(false);
        boolean boolean57 = compilerOptions0.ambiguateProperties;
        compilerOptions0.setMoveFunctionDeclarations(false);
        compilerOptions0.setInlineFunctions(true);
        compilerOptions0.setRecordFunctionInformation(false);
        compilerOptions0.jqueryPass = false;
        compilerOptions0.checkSymbols = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setDefineToNumberLiteral("2019/07/12 07:12", (int) '#');
        java.lang.String str7 = compilerOptions0.instrumentationTemplate;
        boolean boolean8 = compilerOptions0.coalesceVariableNames;
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions0.getTracerMode();
        compilerOptions0.generateExports = true;
        boolean boolean17 = compilerOptions0.gatherCssNames;
        compilerOptions0.optimizeArgumentsArray = true;
        boolean boolean20 = compilerOptions0.isRemoveUnusedClassProperties();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        java.lang.String str53 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        compilerOptions54.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions54.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet61 = compilerOptions54.stripTypes;
        compilerOptions0.setIdGenerators(strSet61);
        compilerOptions0.setPrettyPrint(false);
        compilerOptions0.setInstrumentationTemplate("java.io.IOException: -1");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet61);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: ";
        boolean boolean12 = compilerOptions0.jqueryPass;
        boolean boolean13 = compilerOptions0.collapseProperties;
        compilerOptions0.setRewriteFunctionExpressions(false);
        boolean boolean16 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setGenerateExports(false);
        compilerOptions0.setSpecializeInitialModule(true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        boolean boolean9 = compilerOptions6.extractPrototypeMemberDeclarations;
        compilerOptions6.setCollapseProperties(false);
        compilerOptions6.setClosurePass(true);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions6.setInputPropertyMapSerialized(byteArray19);
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions6.checkMissingGetCssNameLevel;
        compilerOptions0.checkGlobalThisLevel = checkLevel21;
        compilerOptions0.setTweakToStringLiteral("java.io.IOException: ", "");
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.generatePseudoNames = false;
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        boolean boolean32 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setGroupVariableDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.enableExternExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions35.checkRequires;
        compilerOptions0.checkGlobalThisLevel = checkLevel38;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.collapseVariableDeclarations = true;
        compilerOptions0.aliasExternals = false;
        com.google.javascript.jscomp.CodingConvention codingConvention16 = compilerOptions0.getCodingConvention();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy17 = compilerOptions0.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        compilerOptions18.setCollapseProperties(false);
        compilerOptions18.setClosurePass(true);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions18.setInputPropertyMapSerialized(byteArray31);
        compilerOptions0.inputPropertyMapSerialized = byteArray31;
        compilerOptions0.setCollapseObjectLiterals(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(codingConvention16);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy17.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        boolean boolean7 = compilerOptions0.removeUnusedPrototypeProperties;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 0L);
        java.lang.String str11 = compilerOptions0.instrumentationTemplate;
        boolean boolean12 = compilerOptions0.removeUnusedPrototypeProperties;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        compilerOptions0.setDeadAssignmentElimination(false);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap15 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap15;
        compilerOptions0.setCheckControlStructures(false);
        java.util.Set<java.lang.String> strSet19 = compilerOptions0.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention23 = null;
        compilerOptions20.setCodingConvention(codingConvention23);
        compilerOptions20.setGeneratePseudoNames(true);
        compilerOptions20.inlineLocalFunctions = false;
        compilerOptions20.setIdeMode(true);
        compilerOptions20.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet33 = compilerOptions20.aliasableStrings;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap34 = compilerOptions20.customPasses;
        compilerOptions20.setLabelRenaming(false);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions20.checkProvides;
        compilerOptions0.setCheckProvides(checkLevel37);
        compilerOptions0.enableRuntimeTypeCheck("// Input %num%");
        compilerOptions0.aliasStringsBlacklist = "";
        compilerOptions0.setDisambiguateProperties(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap34);
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        compilerOptions8.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions8.brokenClosureRequiresLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup6, checkLevel14);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.checkGlobalThisLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode22 = compilerOptions17.getTracerMode();
        compilerOptions17.lineBreak = false;
        compilerOptions17.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions17.inlineLocalFunctions = false;
        compilerOptions17.setFoldConstants(true);
        java.lang.String str31 = compilerOptions17.instrumentationTemplate;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention35 = null;
        compilerOptions32.setCodingConvention(codingConvention35);
        compilerOptions32.setGeneratePseudoNames(true);
        compilerOptions32.inlineLocalFunctions = false;
        compilerOptions32.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        boolean boolean46 = compilerOptions43.extractPrototypeMemberDeclarations;
        compilerOptions43.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention52 = null;
        compilerOptions49.setCodingConvention(codingConvention52);
        compilerOptions49.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions49.checkProvides;
        compilerOptions43.setReportUnknownTypes(checkLevel56);
        compilerOptions32.setCheckGlobalNamesLevel(checkLevel56);
        compilerOptions32.skipAllCompilerPasses();
        compilerOptions32.checkMissingGetCssNameBlacklist = "hi!";
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy62 = compilerOptions32.propertyRenaming;
        compilerOptions17.setPropertyRenaming(propertyRenamingPolicy62);
        compilerOptions0.propertyRenaming = propertyRenamingPolicy62;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        boolean boolean68 = compilerOptions65.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach69 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions65.setInlineVariables(reach69);
        compilerOptions65.setPrintInputDelimiter(true);
        boolean boolean73 = compilerOptions65.closurePass;
        compilerOptions65.setOutputCharset("java.io.IOException");
        compilerOptions65.reserveRawExports = true;
        compilerOptions65.setAcceptConstKeyword(false);
        compilerOptions65.setMoveFunctionDeclarations(false);
        compilerOptions65.aliasKeywords = false;
        com.google.javascript.jscomp.SourceMap.Format format84 = compilerOptions65.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format84;
        boolean boolean86 = compilerOptions0.closurePass;
        java.lang.String str87 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode22.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy62 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy62.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + reach69 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach69.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(format84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = compilerOptions8.variableRenaming;
        compilerOptions0.setVariableRenaming(variableRenamingPolicy11);
        compilerOptions0.setSmartNameRemoval(false);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        boolean boolean18 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.aliasExternals = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy11 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy11.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions10.setInlineFunctions(reach13);
        compilerOptions0.setRemoveUnusedVariables(reach13);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions16.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions16.checkMissingGetCssNameLevel;
        java.util.Set<java.lang.String> strSet26 = compilerOptions16.stripNamePrefixes;
        compilerOptions0.setReplaceStringsReservedStrings(strSet26);
        compilerOptions0.setRenamePrefixNamespace("");
        java.util.Set<java.lang.String> strSet30 = compilerOptions0.aliasableStrings;
        compilerOptions0.setInlineLocalVariables(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        boolean boolean14 = printStream1.checkError();
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup17 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup17;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup17;
        printStream1.println((java.lang.Object) diagnosticGroup17);
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "java.io.IOException: // Input %num%");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException: // Input %num%");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup17);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        compilerOptions0.setFoldConstants(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        compilerOptions0.setSmartNameRemoval(false);
        compilerOptions0.setProcessCommonJSModules(false);
        boolean boolean18 = compilerOptions0.aliasExternals;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions0.setRewriteFunctionExpressions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach11 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions7.setInlineVariables(reach11);
        compilerOptions7.setPrintInputDelimiter(true);
        boolean boolean15 = compilerOptions7.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle16 = null;
        compilerOptions7.messageBundle = messageBundle16;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        boolean boolean22 = compilerOptions18.jqueryPass;
        boolean boolean23 = compilerOptions18.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setLabelRenaming(true);
        compilerOptions24.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean29 = compilerOptions24.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format30 = compilerOptions24.sourceMapFormat;
        compilerOptions18.setSourceMapFormat(format30);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing32 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions18.setTweakProcessing(tweakProcessing32);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions34.checkProvides;
        java.util.Set<java.lang.String> strSet42 = compilerOptions34.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream43 = strSet42.stream();
        compilerOptions18.stripTypes = strSet42;
        compilerOptions7.setAliasableStrings(strSet42);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setLabelRenaming(true);
        compilerOptions46.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions46.checkGlobalThisLevel;
        boolean boolean52 = compilerOptions46.collapseProperties;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel53 = compilerOptions46.sourceMapDetailLevel;
        compilerOptions7.setSourceMapDetailLevel(detailLevel53);
        compilerOptions7.printInputDelimiter = false;
        compilerOptions7.setCheckMissingGetCssNameBlacklist("-1");
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        boolean boolean62 = compilerOptions59.extractPrototypeMemberDeclarations;
        boolean boolean63 = compilerOptions59.jqueryPass;
        boolean boolean64 = compilerOptions59.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setLabelRenaming(true);
        compilerOptions65.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean70 = compilerOptions65.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format71 = compilerOptions65.sourceMapFormat;
        compilerOptions59.sourceMapFormat = format71;
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions73.setRewriteNewDateGoogNow(true);
        boolean boolean76 = compilerOptions73.extractPrototypeMemberDeclarations;
        compilerOptions73.setCollapseProperties(false);
        boolean boolean79 = compilerOptions73.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat80 = compilerOptions73.errorFormat;
        compilerOptions59.setErrorFormat(errorFormat80);
        com.google.javascript.jscomp.CompilerOptions compilerOptions82 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions82.setRewriteNewDateGoogNow(true);
        boolean boolean85 = compilerOptions82.extractPrototypeMemberDeclarations;
        compilerOptions82.setCollapseProperties(false);
        boolean boolean88 = compilerOptions82.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat89 = compilerOptions82.errorFormat;
        boolean boolean90 = compilerOptions82.convertToDottedProperties;
        com.google.javascript.jscomp.ErrorFormat errorFormat91 = compilerOptions82.errorFormat;
        compilerOptions59.errorFormat = errorFormat91;
        compilerOptions7.errorFormat = errorFormat91;
        compilerOptions0.errorFormat = errorFormat91;
        compilerOptions0.setPrettyPrint(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + reach11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach11.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(format30);
        org.junit.Assert.assertTrue("'" + tweakProcessing32 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing32.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(detailLevel53);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(format71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(errorFormat80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(errorFormat89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(errorFormat91);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.inlineFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet7 = compilerOptions6.stripNamePrefixes;
        byte[] byteArray8 = compilerOptions6.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach9 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions6.setInlineFunctions(reach9);
        compilerOptions0.setInlineFunctions(reach9);
        boolean boolean12 = compilerOptions0.jqueryPass;
        compilerOptions0.setProcessObjectPropertyString(true);
        compilerOptions0.setRemoveUnusedClassProperties(false);
        compilerOptions0.setManageClosureDependencies(false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertTrue("'" + reach9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach9.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        java.io.IOException iOException2 = new java.io.IOException("");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("4432#0.010\001\001\000\001\000\ufffd", (java.lang.Throwable) iOException2);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        boolean boolean13 = compilerOptions10.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setLabelRenaming(true);
        compilerOptions14.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions14.checkGlobalThisLevel;
        compilerOptions10.setCheckGlobalNamesLevel(checkLevel19);
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel19);
        compilerOptions0.setRemoveUnusedLocalVars(false);
        boolean boolean24 = compilerOptions0.inlineFunctions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        compilerOptions0.removeUnusedVars = true;
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.setAcceptConstKeyword(false);
        compilerOptions0.setCrossModuleMethodMotion(true);
        boolean boolean16 = compilerOptions0.aliasKeywords;
        java.util.Set<java.lang.String> strSet17 = null;
        compilerOptions0.setReplaceStringsReservedStrings(strSet17);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException: -1", "java.io.IOException");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        boolean boolean15 = compilerOptions0.markNoSideEffectCalls;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        compilerOptions0.setInlineLocalFunctions(false);
        compilerOptions0.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel22);
        compilerOptions0.optimizeArgumentsArray = true;
        com.google.javascript.jscomp.CheckLevel checkLevel26 = null;
        compilerOptions0.checkRequires = checkLevel26;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setIgnoreCajaProperties(false);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = null;
        compilerOptions0.setDefineReplacements(strMap9);
        compilerOptions0.setRenamePrefix("");
        compilerOptions0.setReserveRawExports(false);
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        compilerOptions0.setGenerateExports(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.labelRenaming;
        compilerOptions6.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet15 = compilerOptions14.stripNamePrefixes;
        byte[] byteArray16 = compilerOptions14.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup17 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup17;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel26 = compilerOptions19.checkProvides;
        compilerOptions14.setWarningLevel(diagnosticGroup17, checkLevel26);
        compilerOptions6.checkUnreachableCode = checkLevel26;
        compilerOptions6.prettyPrint = false;
        compilerOptions6.checkSymbols = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = null;
        compilerOptions33.setCodingConvention(codingConvention36);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode38 = compilerOptions33.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup39 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup39;
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        boolean boolean44 = compilerOptions41.extractPrototypeMemberDeclarations;
        compilerOptions41.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions41.brokenClosureRequiresLevel;
        compilerOptions33.setWarningLevel(diagnosticGroup39, checkLevel47);
        compilerOptions33.setRemoveUnusedVars(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention54 = null;
        compilerOptions51.setCodingConvention(codingConvention54);
        boolean boolean56 = compilerOptions51.generateExports;
        compilerOptions51.deadAssignmentElimination = false;
        compilerOptions51.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setRewriteNewDateGoogNow(true);
        boolean boolean64 = compilerOptions61.extractPrototypeMemberDeclarations;
        boolean boolean65 = compilerOptions61.jqueryPass;
        compilerOptions61.collapseAnonymousFunctions = false;
        java.lang.String str68 = compilerOptions61.aliasStringsBlacklist;
        compilerOptions61.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions71 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions71.setRewriteNewDateGoogNow(true);
        boolean boolean74 = compilerOptions71.extractPrototypeMemberDeclarations;
        boolean boolean75 = compilerOptions71.jqueryPass;
        compilerOptions71.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention81 = null;
        compilerOptions78.setCodingConvention(codingConvention81);
        compilerOptions78.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel85 = compilerOptions78.checkProvides;
        compilerOptions71.brokenClosureRequiresLevel = checkLevel85;
        compilerOptions61.setCheckGlobalThisLevel(checkLevel85);
        compilerOptions51.aggressiveVarCheck = checkLevel85;
        compilerOptions33.setReportUnknownTypes(checkLevel85);
        compilerOptions6.reportMissingOverride = checkLevel85;
        compilerOptions0.setCheckRequires(checkLevel85);
        compilerOptions0.setAppNameStr("java.io.IOException");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(byteArray16);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup17);
        org.junit.Assert.assertTrue("'" + checkLevel26 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel26.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode38.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + checkLevel85 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel85.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setTransformAMDToCJSModules(true);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        compilerOptions0.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach10 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions0.setInlineFunctions(reach10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet18 = compilerOptions12.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap19 = compilerOptions12.cssRenamingMap;
        compilerOptions12.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach22 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions12.setInlineFunctions(reach22);
        compilerOptions0.setRemoveUnusedVariable(reach22);
        compilerOptions0.setCrossModuleCodeMotion(false);
        boolean boolean27 = compilerOptions0.isRemoveUnusedClassProperties();
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap28 = compilerOptions0.customPasses;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertTrue("'" + reach10 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach10.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(cssRenamingMap19);
        org.junit.Assert.assertTrue("'" + reach22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach22.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap28);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.setMarkAsCompiled(true);
        compilerOptions0.setAliasableGlobals("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel13 = null;
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel13);
        boolean boolean15 = compilerOptions0.checkTypes;
        compilerOptions0.crossModuleMethodMotion = false;
        compilerOptions0.setLooseTypes(true);
        compilerOptions0.setCheckTypes(true);
        java.lang.Class<?> wildcardClass22 = compilerOptions0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        java.lang.String str6 = compiler0.getSourceLine("Unversioned directory", (int) (byte) -1);
        double double7 = compiler0.getProgress();
        com.google.javascript.jscomp.SourceMap sourceMap8 = compiler0.getSourceMap();
        com.google.javascript.jscomp.JSModule jSModule9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = compiler0.toSource(jSModule9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNull(sourceMap8);
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = compiler1.getWarningCount();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setInlineProperties(true);
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        compilerOptions0.setInlineLocalFunctions(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions12.checkGlobalThisLevel;
        compilerOptions12.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions12.setMessageBundle(messageBundle21);
        boolean boolean23 = compilerOptions12.recordFunctionInformation;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy24 = compilerOptions12.anonymousFunctionNaming;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy24);
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet29 = compilerOptions28.stripNamePrefixes;
        byte[] byteArray30 = compilerOptions28.inputVariableMapSerialized;
        compilerOptions28.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.ErrorFormat errorFormat33 = compilerOptions28.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy24 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy24.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(errorFormat33);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        com.google.javascript.jscomp.SourceFile.Generator generator5 = null;
        com.google.javascript.jscomp.SourceFile sourceFile6 = builder0.buildFromGenerator("hi!", generator5);
        com.google.javascript.jscomp.SourceFile.Builder builder8 = builder0.withOriginalPath("// Input %num%");
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile11 = builder8.buildFromInputStream("// Input %num%", inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.jqueryPass;
        boolean boolean17 = compilerOptions0.isRemoveUnusedClassProperties();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        com.google.javascript.jscomp.MessageBundle messageBundle8 = compilerOptions0.messageBundle;
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.setCrossModuleCodeMotion(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setGatherCssNames(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertNull(messageBundle8);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.coalesceVariableNames = false;
        compilerOptions0.removeUnusedLocalVars = true;
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.moveFunctionDeclarations = true;
        boolean boolean10 = compilerOptions0.generatePseudoNames;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.inlineGetters = true;
        boolean boolean7 = compilerOptions0.inlineFunctions;
        compilerOptions0.setProcessObjectPropertyString(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setAliasableGlobals("");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray25 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList26 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList26, locationMappingArray25);
        com.google.javascript.jscomp.SourceFile sourceFile30 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean31 = locationMappingList26.remove((java.lang.Object) "hi!");
        boolean boolean32 = locationMappingList26.isEmpty();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList26);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        boolean boolean40 = compilerOptions34.inlineConstantVars;
        boolean boolean41 = compilerOptions34.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions34.gatherCssNames;
        compilerOptions34.setCheckSymbols(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode45 = compilerOptions34.getTracerMode();
        compilerOptions34.moveFunctionDeclarations = false;
        boolean boolean48 = locationMappingList26.equals((java.lang.Object) false);
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator49 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList26.replaceAll(locationMappingUnaryOperator49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(sourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + tracerMode45 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode45.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        printStream1.write((int) (short) 100);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.rewriteFunctionExpressions = false;
        java.util.Set<java.lang.String> strSet9 = compilerOptions0.aliasableStrings;
        boolean boolean10 = compilerOptions0.inlineConstantVars;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.SourceMap.Format format7 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setRemoveUnusedPrototypeProperties(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(format7);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        char[] charArray17 = new char[] { '4', '4' };
        printStream14.print(charArray17);
        printStream14.print((int) ' ');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.write((int) '#');
        printStream14.print((float) (short) 0);
        printStream14.println("java.io.IOException");
        java.util.Locale locale29 = null;
        java.io.PrintStream printStream32 = new java.io.PrintStream("Unversioned directory");
        char[] charArray35 = new char[] { '4', '4' };
        printStream32.print(charArray35);
        printStream32.print((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        printStream32.write((int) '#');
        java.util.Locale locale43 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream47 = printStream32.format(locale43, "Unversioned directory", objArray46);
        java.io.PrintStream printStream48 = printStream14.printf(locale29, "Unversioned directory", objArray46);
        printStream48.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention53 = null;
        compilerOptions50.setCodingConvention(codingConvention53);
        boolean boolean55 = compilerOptions50.generateExports;
        compilerOptions50.printInputDelimiter = false;
        compilerOptions50.setCheckSymbols(true);
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions50.setInputVariableMapSerialized(byteArray64);
        printStream48.write(byteArray64);
        compilerOptions0.setInputPropertyMapSerialized(byteArray64);
        compilerOptions0.setAcceptConstKeyword(false);
        compilerOptions0.setLocale("");
        compilerOptions0.setTweakToBooleanLiteral("java.io.IOException: java.io.IOException: 2019/07/12 07:12", true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 100, 10, 10]");
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        boolean boolean5 = compilerOptions0.ideMode;
        boolean boolean6 = compilerOptions0.computeFunctionSideEffects;
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean13 = compilerOptions8.labelRenaming;
        compilerOptions8.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        byte[] byteArray18 = compilerOptions16.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup19 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup19;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        compilerOptions16.setWarningLevel(diagnosticGroup19, checkLevel28);
        compilerOptions8.checkUnreachableCode = checkLevel28;
        compilerOptions0.setAggressiveVarCheck(checkLevel28);
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean34 = compilerOptions0.getInferTypes();
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList35 = compilerOptions0.sourceMapLocationMappings;
        boolean boolean36 = compilerOptions0.inlineFunctions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(byteArray18);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup19);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locationMappingList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.aliasKeywords;
        compilerOptions0.gatherCssNames = true;
        boolean boolean19 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.instrumentationTemplate = "Unversioned directory";
        compilerOptions0.optimizeArgumentsArray = true;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        boolean boolean11 = compilerOptions8.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode12 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions8.setLanguageIn(languageMode12);
        compilerOptions0.setLanguageIn(languageMode12);
        compilerOptions0.setRenamePrefix("Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + languageMode12 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode12.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setCheckSuspiciousCode(true);
        compilerOptions0.setConvertToDottedProperties(false);
        compilerOptions0.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions9.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup15 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup15;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions17.brokenClosureRequiresLevel;
        compilerOptions9.setWarningLevel(diagnosticGroup15, checkLevel23);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions9.checkGlobalThisLevel;
        compilerOptions0.setCheckProvides(checkLevel25);
        com.google.javascript.jscomp.MessageBundle messageBundle27 = null;
        compilerOptions0.setMessageBundle(messageBundle27);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        compilerOptions0.setAliasKeywords(false);
        boolean boolean12 = compilerOptions0.checkTypes;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        java.io.IOException iOException3 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException4 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException3);
        java.io.IOException iOException7 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException7);
        iOException3.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("-1", (java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.lang.String str13 = iOException11.toString();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException: -1" + "'", str13, "java.io.IOException: -1");
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        printStream1.print((float) 1L);
        printStream1.print((double) 100L);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.syntheticBlockEndMarker = "Unversioned directory";
        compilerOptions0.setRemoveUnusedLocalVars(true);
        compilerOptions0.setDebugFunctionSideEffectsPath("java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setSyntheticBlockStartMarker("Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing17 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.CHECK;
        boolean boolean18 = tweakProcessing17.isOn();
        compilerOptions0.setTweakProcessing(tweakProcessing17);
        compilerOptions0.optimizeParameters = true;
        boolean boolean22 = compilerOptions0.aliasKeywords;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions23 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setDependencyOptions(dependencyOptions23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + tweakProcessing17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.CHECK + "'", tweakProcessing17.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.CHECK));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.setUnaliasableGlobals("Unversioned directory");
        boolean boolean6 = compilerOptions0.markNoSideEffectCalls;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.ambiguateProperties = true;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList10 = compilerOptions0.sourceMapLocationMappings;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping12 = locationMappingList10.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locationMappingList10);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile6 = builder0.buildFromInputStream("java.io.IOException: -1", inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setComputeFunctionSideEffects(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        compilerOptions17.setClosurePass(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions17.setInputPropertyMapSerialized(byteArray30);
        compilerOptions17.setFlowSensitiveInlineVariables(true);
        boolean boolean34 = compilerOptions17.exportTestFunctions;
        compilerOptions17.closurePass = false;
        compilerOptions17.renamePrefix = "Unversioned directory";
        compilerOptions17.setMoveFunctionDeclarations(false);
        compilerOptions17.setProcessObjectPropertyString(false);
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions17.checkGlobalThisLevel;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel43);
        com.google.javascript.jscomp.CodingConvention codingConvention45 = compilerOptions0.getCodingConvention();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(codingConvention45);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        java.lang.String str53 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        compilerOptions54.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions54.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet61 = compilerOptions54.stripTypes;
        compilerOptions0.setIdGenerators(strSet61);
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList63 = compilerOptions0.sourceMapLocationMappings;
        java.lang.Object[] objArray64 = locationMappingList63.toArray();
        java.util.Collection<java.lang.String> strCollection65 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = locationMappingList63.retainAll(strCollection65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locationMappingList63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setDefineToNumberLiteral("", 0);
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setGatherCssNames(false);
        compilerOptions0.removeUnusedVars = true;
        compilerOptions0.setDeadAssignmentElimination(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator34 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping35 = null;
        boolean boolean36 = locationMappingList1.add(locationMapping35);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        compilerOptions37.convertToDottedProperties = true;
        boolean boolean43 = compilerOptions37.inlineConstantVars;
        boolean boolean44 = compilerOptions37.extractPrototypeMemberDeclarations;
        boolean boolean45 = compilerOptions37.gatherCssNames;
        compilerOptions37.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions37.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        boolean boolean55 = compilerOptions51.jqueryPass;
        boolean boolean56 = compilerOptions51.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setLabelRenaming(true);
        compilerOptions57.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean62 = compilerOptions57.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format63 = compilerOptions57.sourceMapFormat;
        compilerOptions51.setSourceMapFormat(format63);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing65 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions51.setTweakProcessing(tweakProcessing65);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention70 = null;
        compilerOptions67.setCodingConvention(codingConvention70);
        compilerOptions67.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel74 = compilerOptions67.checkProvides;
        java.util.Set<java.lang.String> strSet75 = compilerOptions67.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream76 = strSet75.stream();
        compilerOptions51.stripTypes = strSet75;
        compilerOptions37.setStripNameSuffixes(strSet75);
        com.google.javascript.jscomp.CheckLevel checkLevel79 = compilerOptions37.checkProvides;
        compilerOptions37.setSyntheticBlockStartMarker("java.io.IOException: Unversioned directory");
        boolean boolean82 = locationMappingList1.remove((java.lang.Object) "java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping83 = null;
        boolean boolean84 = locationMappingList1.add(locationMapping83);
        java.lang.String[] strArray91 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "", "java.io.IOException: -1", "java.io.IOException: -1", "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12" };
        java.lang.Comparable<java.lang.String>[] strComparableArray92 = locationMappingList1.toArray((java.lang.Comparable<java.lang.String>[]) strArray91);
        boolean boolean93 = locationMappingList1.isEmpty();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(format63);
        org.junit.Assert.assertTrue("'" + tweakProcessing65 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing65.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel74 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel74.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertTrue("'" + checkLevel79 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel79.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strComparableArray92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator34 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping35 = null;
        boolean boolean36 = locationMappingList1.add(locationMapping35);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor37 = locationMappingList1.listIterator();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping39 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList1.add((int) (byte) 100, locationMapping39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locationMappingItor37);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean24 = compilerOptions0.generateExports;
        compilerOptions0.computeFunctionSideEffects = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder0.buildFromCode("// Input %num%", "hi!");
        boolean boolean13 = sourceFile12.isExtern();
        java.io.Reader reader14 = sourceFile12.getCodeReader();
        int int16 = sourceFile12.getLineOfOffset(0);
        int int18 = sourceFile12.getLineOfOffset((int) (short) 1);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setOutputJsStringUsage(false);
        compilerOptions0.checkSymbols = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: ";
        compilerOptions0.setCheckCaja(true);
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.optimizeReturns = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat7 = compilerOptions0.errorFormat;
        boolean boolean8 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.aliasAllStrings = false;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard11 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard11);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(errorFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream16.print(false);
        java.io.PrintStream printStream26 = printStream16.append((java.lang.CharSequence) "hi!");
        printStream26.print('4');
        printStream26.print(10.0f);
        java.io.PrintStream printStream32 = printStream26.append('a');
        java.io.PrintStream printStream34 = new java.io.PrintStream("Unversioned directory");
        printStream34.write((-1));
        printStream34.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup39 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup39;
        printStream34.print((java.lang.Object) diagnosticGroup39);
        java.io.PrintStream printStream43 = new java.io.PrintStream("Unversioned directory");
        char[] charArray46 = new char[] { '4', '4' };
        printStream43.print(charArray46);
        printStream43.print((int) ' ');
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream43.write(byteArray56, (int) (byte) 0, (int) (byte) 1);
        printStream34.write(byteArray56, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            printStream32.write(byteArray56, (-1), 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream32);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup39);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        java.io.IOException iOException2 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray6 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList7 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList7, locationMappingArray6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        compilerOptions9.setClosurePass(true);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions9.setInputPropertyMapSerialized(byteArray22);
        compilerOptions9.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet32 = compilerOptions26.stripTypePrefixes;
        compilerOptions9.aliasableStrings = strSet32;
        boolean boolean34 = locationMappingList7.removeAll((java.util.Collection<java.lang.String>) strSet32);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup35 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup35;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup35;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup35;
        boolean boolean39 = locationMappingList7.contains((java.lang.Object) diagnosticGroup35);
        java.io.IOException iOException42 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException43 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException42);
        java.lang.Throwable[] throwableArray44 = iOException42.getSuppressed();
        java.io.IOException iOException45 = new java.io.IOException((java.lang.Throwable) iOException42);
        int int46 = locationMappingList7.indexOf((java.lang.Object) iOException42);
        iOException2.addSuppressed((java.lang.Throwable) iOException42);
        java.lang.Class<?> wildcardClass48 = iOException2.getClass();
        org.junit.Assert.assertNotNull(locationMappingArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setAliasAllStrings(true);
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException");
        compilerOptions0.setDeadAssignmentElimination(true);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream16.print(false);
        java.io.PrintStream printStream26 = printStream16.append((java.lang.CharSequence) "hi!");
        printStream26.print('4');
        printStream26.print(10.0f);
        printStream26.print('4');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setCheckSuspiciousCode(true);
        compilerOptions0.setConvertToDottedProperties(false);
        compilerOptions0.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions9.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup15 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup15;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions17.brokenClosureRequiresLevel;
        compilerOptions9.setWarningLevel(diagnosticGroup15, checkLevel23);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions9.checkGlobalThisLevel;
        compilerOptions0.setCheckProvides(checkLevel25);
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList27 = compilerOptions0.sourceMapLocationMappings;
        boolean boolean28 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedLocalVars = false;
        boolean boolean20 = compilerOptions0.optimizeCalls;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        boolean boolean8 = compilerOptions0.jqueryPass;
        compilerOptions0.aliasExternals = true;
        compilerOptions0.setRuntimeTypeCheckLogFunction("// Input %num%");
        compilerOptions0.generateExports = true;
        compilerOptions0.inlineLocalFunctions = true;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.print('4');
        printStream11.println(1L);
        printStream11.println(false);
        printStream11.print(10.0f);
        printStream11.write((int) (byte) 1);
        java.io.PrintStream printStream24 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream26 = new java.io.PrintStream("Unversioned directory");
        char[] charArray29 = new char[] { '4', '4' };
        printStream26.print(charArray29);
        printStream24.print(charArray29);
        printStream11.print(charArray29);
        printStream11.println((long) ' ');
        java.io.PrintStream printStream37 = new java.io.PrintStream("Unversioned directory");
        char[] charArray40 = new char[] { '4', '4' };
        printStream37.print(charArray40);
        printStream37.print((int) ' ');
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream37, false);
        printStream37.write((int) '#');
        java.util.Locale locale48 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream52 = printStream37.format(locale48, "Unversioned directory", objArray51);
        printStream52.println((double) 1);
        printStream52.print(1L);
        java.util.Locale locale57 = null;
        java.io.PrintStream printStream60 = new java.io.PrintStream("Unversioned directory");
        char[] charArray63 = new char[] { '4', '4' };
        printStream60.print(charArray63);
        printStream60.print((int) ' ');
        java.io.PrintStream printStream68 = new java.io.PrintStream((java.io.OutputStream) printStream60, false);
        printStream60.write((int) '#');
        printStream60.print((float) (short) 0);
        printStream60.println("java.io.IOException");
        java.util.Locale locale75 = null;
        java.io.PrintStream printStream78 = new java.io.PrintStream("Unversioned directory");
        char[] charArray81 = new char[] { '4', '4' };
        printStream78.print(charArray81);
        printStream78.print((int) ' ');
        java.io.PrintStream printStream86 = new java.io.PrintStream((java.io.OutputStream) printStream78, false);
        printStream78.write((int) '#');
        java.util.Locale locale89 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream93 = printStream78.format(locale89, "Unversioned directory", objArray92);
        java.io.PrintStream printStream94 = printStream60.printf(locale75, "Unversioned directory", objArray92);
        java.io.PrintStream printStream95 = printStream52.format(locale57, "java.io.IOException: Unversioned directory", objArray92);
        java.io.PrintStream printStream96 = printStream11.format("-1", objArray92);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertNotNull(printStream94);
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertNotNull(printStream96);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.generateExports = true;
        compilerOptions0.renamePrefixNamespace = "Unversioned directory";
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.instrumentationTemplate = "java.io.IOException";
        compilerOptions0.setProcessCommonJSModules(false);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = compilerOptions0.getCodingConvention();
        compilerOptions0.inputDelimiter = "2019/07/12 07:12";
        compilerOptions0.markAsCompiled = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.convertToDottedProperties = true;
        boolean boolean23 = compilerOptions17.inlineConstantVars;
        boolean boolean24 = compilerOptions17.extractPrototypeMemberDeclarations;
        boolean boolean25 = compilerOptions17.gatherCssNames;
        compilerOptions17.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean29 = compilerOptions17.aliasExternals;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet31 = compilerOptions30.stripNamePrefixes;
        byte[] byteArray32 = compilerOptions30.inputVariableMapSerialized;
        boolean boolean33 = compilerOptions30.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setLabelRenaming(true);
        compilerOptions34.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions34.checkGlobalThisLevel;
        compilerOptions30.setCheckGlobalNamesLevel(checkLevel39);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention44 = null;
        compilerOptions41.setCodingConvention(codingConvention44);
        boolean boolean46 = compilerOptions41.computeFunctionSideEffects;
        boolean boolean47 = compilerOptions41.printInputDelimiter;
        compilerOptions41.setGeneratePseudoNames(true);
        boolean boolean50 = compilerOptions41.disambiguateProperties;
        java.util.Set<java.lang.String> strSet51 = compilerOptions41.aliasableStrings;
        compilerOptions30.stripNameSuffixes = strSet51;
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions30.checkProvides;
        compilerOptions17.setReportMissingOverride(checkLevel53);
        compilerOptions0.setCheckUnreachableCode(checkLevel53);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(codingConvention12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = compilerOptions8.variableRenaming;
        compilerOptions0.setVariableRenaming(variableRenamingPolicy11);
        compilerOptions0.setSmartNameRemoval(false);
        compilerOptions0.lineBreak = false;
        compilerOptions0.setGeneratePseudoNames(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy11 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy11.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = null;
        compilerOptions0.setReportMissingOverride(checkLevel9);
        java.lang.String str11 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.inlineGetters = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        java.lang.String str2 = sourceFile1.getOriginalPath();
        java.lang.String str4 = sourceFile1.getLine(0);
        java.lang.String str5 = sourceFile1.getName();
        java.lang.String str6 = sourceFile1.toString();
        int int8 = sourceFile1.getColumnOfOffset((int) '4');
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        compilerOptions20.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap25 = null;
        compilerOptions20.setCssRenamingMap(cssRenamingMap25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        boolean boolean33 = compilerOptions27.inlineConstantVars;
        compilerOptions27.aliasAllStrings = false;
        boolean boolean36 = compilerOptions27.smartNameRemoval;
        compilerOptions27.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions27.checkGlobalNamesLevel;
        compilerOptions20.setCheckProvides(checkLevel39);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel39);
        boolean boolean42 = compilerOptions0.optimizeReturns;
        compilerOptions0.setRemoveUnusedVars(false);
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler(printStream1);
        com.google.javascript.rhino.Node node22 = compiler21.getRoot();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker23 = null;
        compiler21.tracker = performanceTracker23;
        com.google.javascript.jscomp.PassConfig passConfig25 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler21.setPassConfig(passConfig25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setGenerateExports(true);
        compilerOptions25.setCollapseProperties(false);
        boolean boolean34 = compilerOptions25.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        compilerOptions25.setCheckSymbols(true);
        boolean boolean38 = compilerOptions25.devirtualizePrototypeMethods;
        boolean boolean39 = locationMappingList1.equals((java.lang.Object) compilerOptions25);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping41 = locationMappingList1.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler(printStream1);
        com.google.javascript.jscomp.JSModule jSModule11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray12 = compiler10.toSourceArray(jSModule11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.removeUnusedVars = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        compilerOptions11.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet19 = compilerOptions18.stripNamePrefixes;
        compilerOptions11.setIdGenerators(strSet19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGeneratePseudoNames(true);
        compilerOptions21.inlineLocalFunctions = false;
        compilerOptions21.setIdeMode(true);
        compilerOptions21.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions34.checkGlobalThisLevel;
        compilerOptions21.checkMissingReturn = checkLevel40;
        compilerOptions11.aggressiveVarCheck = checkLevel40;
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions11.reportMissingOverride;
        compilerOptions0.checkGlobalThisLevel = checkLevel43;
        compilerOptions0.computeFunctionSideEffects = true;
        boolean boolean47 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat21 = compilerOptions14.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat21);
        boolean boolean23 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.flowSensitiveInlineVariables = false;
        java.util.Set<java.lang.String> strSet26 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.checkMissingGetCssNameBlacklist = "-1";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(errorFormat21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream16.println((double) 1);
        printStream16.print(1L);
        java.util.Locale locale21 = null;
        java.io.PrintStream printStream24 = new java.io.PrintStream("Unversioned directory");
        char[] charArray27 = new char[] { '4', '4' };
        printStream24.print(charArray27);
        printStream24.print((int) ' ');
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream24, false);
        printStream24.write((int) '#');
        printStream24.print((float) (short) 0);
        printStream24.println("java.io.IOException");
        java.util.Locale locale39 = null;
        java.io.PrintStream printStream42 = new java.io.PrintStream("Unversioned directory");
        char[] charArray45 = new char[] { '4', '4' };
        printStream42.print(charArray45);
        printStream42.print((int) ' ');
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream42, false);
        printStream42.write((int) '#');
        java.util.Locale locale53 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream57 = printStream42.format(locale53, "Unversioned directory", objArray56);
        java.io.PrintStream printStream58 = printStream24.printf(locale39, "Unversioned directory", objArray56);
        java.io.PrintStream printStream59 = printStream16.format(locale21, "java.io.IOException: Unversioned directory", objArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream16, false, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(printStream59);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.jqueryPass;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = compilerOptions0.getTracerMode();
        boolean boolean18 = compilerOptions0.optimizeReturns;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.println((float) (-1));
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream1);
        compiler14.reportCodeChange();
        com.google.javascript.rhino.Node node16 = compiler14.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SymbolTable symbolTable17 = compiler14.buildKnownSymbolTable();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel9 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions11.checkGlobalThisLevel;
        compilerOptions11.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode20 = compilerOptions11.getTracerMode();
        compilerOptions0.setTracerMode(tracerMode20);
        compilerOptions0.setShadowVariables(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode20.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("", throwable1);
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("", throwable4);
        iOException2.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException7);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        compilerOptions0.setCheckTypes(true);
        compilerOptions0.setSummaryDetailLevel((int) ' ');
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet10 = compilerOptions9.stripNamePrefixes;
        byte[] byteArray11 = compilerOptions9.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet13 = compilerOptions12.stripNamePrefixes;
        byte[] byteArray14 = compilerOptions12.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup15 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup15;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions17.checkProvides;
        compilerOptions12.setWarningLevel(diagnosticGroup15, checkLevel24);
        compilerOptions9.setAggressiveVarCheck(checkLevel24);
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel24;
        boolean boolean28 = compilerOptions0.optimizeParameters;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(byteArray14);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup15);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        java.lang.String str3 = compiler0.getAstDotGraph();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState4 = compiler0.getState();
        compiler0.disableThreads();
        double double6 = compiler0.getProgress();
        com.google.javascript.rhino.InputId inputId7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerInput compilerInput8 = compiler0.getInput(inputId7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(intermediateState4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setAmbiguateProperties(true);
        java.util.Set<java.lang.String> strSet13 = compilerOptions0.stripNamePrefixes;
        boolean boolean14 = compilerOptions0.generateExports;
        compilerOptions0.setDeadAssignmentElimination(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        boolean boolean23 = compilerOptions17.lineBreak;
        compilerOptions17.recordFunctionInformation = false;
        com.google.javascript.jscomp.CompilerOptions.Reach reach26 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions17.setInlineFunctions(reach26);
        compilerOptions0.setInlineFunctions(reach26);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + reach26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach26.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Generator generator7 = null;
        com.google.javascript.jscomp.SourceFile sourceFile8 = builder5.buildFromGenerator("hi!", generator7);
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder10 = builder5.withCharset(charset9);
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder5.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset13 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder14 = builder5.withCharset(charset13);
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile17 = builder5.buildFromReader("java.io.IOException", reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream3 = new java.io.PrintStream("Unversioned directory");
        char[] charArray6 = new char[] { '4', '4' };
        printStream3.print(charArray6);
        printStream1.print(charArray6);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream10.print((int) ' ');
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream10.write(byteArray23, (int) (byte) 0, (int) (byte) 1);
        printStream1.write(byteArray23);
        printStream1.print("java.io.IOException: Unversioned directory");
        printStream1.println('4');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        compilerOptions12.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        boolean boolean27 = compilerOptions23.jqueryPass;
        boolean boolean28 = compilerOptions23.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setLabelRenaming(true);
        compilerOptions29.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean34 = compilerOptions29.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format35 = compilerOptions29.sourceMapFormat;
        compilerOptions23.setSourceMapFormat(format35);
        compilerOptions12.setSourceMapFormat(format35);
        compilerOptions0.sourceMapFormat = format35;
        boolean boolean39 = compilerOptions0.collapseVariableDeclarations;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(format35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions17.checkProvides;
        compilerOptions11.setReportUnknownTypes(checkLevel24);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel24);
        compilerOptions0.checkMissingGetCssNameBlacklist = "";
        compilerOptions0.setLineBreak(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        boolean boolean35 = compilerOptions31.jqueryPass;
        compilerOptions31.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions38.checkGlobalThisLevel;
        compilerOptions31.checkProvides = checkLevel44;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.convertToDottedProperties = true;
        boolean boolean52 = compilerOptions46.inlineConstantVars;
        boolean boolean53 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.optimizeCalls = true;
        compilerOptions46.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setRewriteNewDateGoogNow(true);
        boolean boolean61 = compilerOptions58.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach62 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions58.setInlineVariables(reach62);
        compilerOptions58.setPrintInputDelimiter(true);
        boolean boolean66 = compilerOptions58.closurePass;
        compilerOptions58.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.setRewriteNewDateGoogNow(true);
        boolean boolean72 = compilerOptions69.extractPrototypeMemberDeclarations;
        boolean boolean73 = compilerOptions69.jqueryPass;
        boolean boolean74 = compilerOptions69.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions75 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions75.setLabelRenaming(true);
        compilerOptions75.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean80 = compilerOptions75.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format81 = compilerOptions75.sourceMapFormat;
        compilerOptions69.setSourceMapFormat(format81);
        compilerOptions58.setSourceMapFormat(format81);
        compilerOptions46.sourceMapFormat = format81;
        compilerOptions31.sourceMapFormat = format81;
        boolean boolean86 = compilerOptions31.isRemoveUnusedClassProperties();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup87 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup87;
        com.google.javascript.jscomp.CompilerOptions compilerOptions89 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions89.setRewriteNewDateGoogNow(true);
        boolean boolean92 = compilerOptions89.extractPrototypeMemberDeclarations;
        compilerOptions89.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel95 = compilerOptions89.brokenClosureRequiresLevel;
        compilerOptions31.setWarningLevel(diagnosticGroup87, checkLevel95);
        compilerOptions0.checkRequires = checkLevel95;
        boolean boolean98 = compilerOptions0.optimizeArgumentsArray;
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + reach62 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach62.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(format81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + checkLevel95 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel95.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.setShadowVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        boolean boolean14 = compilerOptions9.generateExports;
        compilerOptions9.gatherCssNames = false;
        boolean boolean17 = compilerOptions9.optimizeReturns;
        compilerOptions9.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet20 = compilerOptions9.stripTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        boolean boolean25 = compilerOptions21.jqueryPass;
        compilerOptions21.collapseAnonymousFunctions = false;
        boolean boolean28 = compilerOptions21.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setLabelRenaming(true);
        compilerOptions29.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean34 = compilerOptions29.labelRenaming;
        compilerOptions29.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet38 = compilerOptions37.stripNamePrefixes;
        byte[] byteArray39 = compilerOptions37.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup40 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup40;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention45 = null;
        compilerOptions42.setCodingConvention(codingConvention45);
        compilerOptions42.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions42.checkProvides;
        compilerOptions37.setWarningLevel(diagnosticGroup40, checkLevel49);
        compilerOptions29.checkUnreachableCode = checkLevel49;
        compilerOptions21.setAggressiveVarCheck(checkLevel49);
        compilerOptions9.setAggressiveVarCheck(checkLevel49);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel49);
        compilerOptions0.setMarkAsCompiled(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(byteArray39);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup40);
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention19 = null;
        compilerOptions16.setCodingConvention(codingConvention19);
        boolean boolean21 = compilerOptions16.generateExports;
        compilerOptions16.collapseVariableDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        boolean boolean28 = compilerOptions24.jqueryPass;
        compilerOptions24.collapseAnonymousFunctions = false;
        boolean boolean31 = compilerOptions24.checkTypes;
        compilerOptions24.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions24.checkProvides;
        compilerOptions16.setCheckRequires(checkLevel34);
        compilerOptions0.setCheckProvides(checkLevel34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        com.google.javascript.jscomp.SourceMap.Format format9 = compilerOptions0.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy15 = compilerOptions10.anonymousFunctionNaming;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy15;
        boolean boolean17 = compilerOptions0.deadAssignmentElimination;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap18 = compilerOptions0.customPasses;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(format9);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy15 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy15.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap18);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        java.lang.String str8 = compiler0.getAstDotGraph();
        java.lang.String str11 = compiler0.getSourceLine("java.io.IOException", (int) (byte) -1);
        com.google.javascript.jscomp.JSModule jSModule12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray13 = compiler0.toSourceArray(jSModule12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        java.lang.Class<?> wildcardClass12 = printStream11.getClass();
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.setUnaliasableGlobals("Unversioned directory");
        boolean boolean6 = compilerOptions0.markNoSideEffectCalls;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.ambiguateProperties = true;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList10 = compilerOptions0.sourceMapLocationMappings;
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping12 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList10.add((int) ' ', locationMapping12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locationMappingList10);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setCheckTypes(false);
        boolean boolean13 = compilerOptions0.printInputDelimiter;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions0.checkRequires;
        compilerOptions0.setDisambiguateProperties(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkRequires;
        compilerOptions0.setRuntimeTypeCheck(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        boolean boolean13 = compilerOptions8.generateExports;
        compilerOptions8.deadAssignmentElimination = false;
        compilerOptions8.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        boolean boolean22 = compilerOptions18.jqueryPass;
        compilerOptions18.collapseAnonymousFunctions = false;
        java.lang.String str25 = compilerOptions18.aliasStringsBlacklist;
        compilerOptions18.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        boolean boolean32 = compilerOptions28.jqueryPass;
        compilerOptions28.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention38 = null;
        compilerOptions35.setCodingConvention(codingConvention38);
        compilerOptions35.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions35.checkProvides;
        compilerOptions28.brokenClosureRequiresLevel = checkLevel42;
        compilerOptions18.setCheckGlobalThisLevel(checkLevel42);
        compilerOptions8.aggressiveVarCheck = checkLevel42;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention49 = null;
        compilerOptions46.setCodingConvention(codingConvention49);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy51 = compilerOptions46.anonymousFunctionNaming;
        compilerOptions8.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy51);
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy51);
        compilerOptions0.setTweakToStringLiteral("-1", "java.io.IOException");
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy51 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy51.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.foldConstants;
        compilerOptions0.setProtectHiddenSideEffects(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions12.checkGlobalThisLevel;
        compilerOptions12.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions12.setMessageBundle(messageBundle21);
        boolean boolean23 = compilerOptions12.recordFunctionInformation;
        boolean boolean24 = compilerOptions12.moveFunctionDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        boolean boolean29 = compilerOptions25.jqueryPass;
        compilerOptions25.collapseAnonymousFunctions = false;
        boolean boolean32 = compilerOptions25.checkTypes;
        compilerOptions25.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.checkProvides;
        compilerOptions12.setCheckGlobalNamesLevel(checkLevel35);
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel35);
        compilerOptions0.markNoSideEffectCalls = false;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions0.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray7 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList8 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList8, locationMappingArray7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        compilerOptions10.setClosurePass(true);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions10.setInputPropertyMapSerialized(byteArray23);
        compilerOptions10.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet33 = compilerOptions27.stripTypePrefixes;
        compilerOptions10.aliasableStrings = strSet33;
        boolean boolean35 = locationMappingList8.removeAll((java.util.Collection<java.lang.String>) strSet33);
        compilerOptions0.setReplaceStringsReservedStrings(strSet33);
        boolean boolean37 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.aliasAllStrings = true;
        boolean boolean42 = compilerOptions0.ideMode;
        org.junit.Assert.assertNotNull(locationMappingArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        printStream16.println();
        printStream16.print((-1L));
        printStream16.println(' ');
        java.io.IOException iOException28 = new java.io.IOException("java.io.IOException: Unversioned directory");
        java.lang.Throwable[] throwableArray29 = iOException28.getSuppressed();
        java.io.PrintStream printStream30 = printStream16.format("java.io.IOException: java.io.IOException: java.io.IOException: ", (java.lang.Object[]) throwableArray29);
        printStream30.println(false);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream30);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        compilerOptions20.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap25 = null;
        compilerOptions20.setCssRenamingMap(cssRenamingMap25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        boolean boolean33 = compilerOptions27.inlineConstantVars;
        compilerOptions27.aliasAllStrings = false;
        boolean boolean36 = compilerOptions27.smartNameRemoval;
        compilerOptions27.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions27.checkGlobalNamesLevel;
        compilerOptions20.setCheckProvides(checkLevel39);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel39);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap42 = compilerOptions0.getTweakReplacements();
        boolean boolean43 = compilerOptions0.flowSensitiveInlineVariables;
        boolean boolean44 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        sourceFile2.setOriginalPath("");
        sourceFile2.setOriginalPath("");
        int int10 = sourceFile2.getColumnOfOffset(10);
        int int12 = sourceFile2.getColumnOfOffset(0);
        java.lang.String str13 = sourceFile2.getName();
        sourceFile2.clearCachedSource();
        int int16 = sourceFile2.getLineOfOffset((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = sourceFile2.getLineOffset((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Expected line number between 1 and 1?Actual: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.setPrettyPrint(false);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel11 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel11);
        compilerOptions0.setCollapseAnonymousFunctions(false);
        compilerOptions0.setReserveRawExports(false);
        boolean boolean17 = compilerOptions0.removeDeadCode;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention10 = null;
        compilerOptions7.setCodingConvention(codingConvention10);
        compilerOptions7.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions7.checkProvides;
        compilerOptions0.brokenClosureRequiresLevel = checkLevel14;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException");
        boolean boolean20 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel21 = compilerOptions0.sourceMapDetailLevel;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(detailLevel21);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setColorizeErrorOutput(false);
        boolean boolean11 = compilerOptions0.labelRenaming;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions52.checkGlobalNamesLevel;
        compilerOptions0.setReportUnknownTypes(checkLevel53);
        boolean boolean55 = compilerOptions0.removeUnusedVars;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setCheckCaja(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap52 = compilerOptions0.getTweakReplacements();
        compilerOptions0.crossModuleMethodMotion = true;
        compilerOptions0.setAliasAllStrings(false);
        boolean boolean57 = compilerOptions0.removeTryCatchFinally;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.print("Unversioned directory");
        java.util.Locale locale11 = null;
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup16 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup16;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator21 = null;
        com.google.javascript.jscomp.SourceFile sourceFile22 = builder19.buildFromGenerator("hi!", generator21);
        java.lang.Object[] objArray23 = new java.lang.Object[] { diagnosticGroup16, diagnosticGroup18, sourceFile22 };
        java.io.PrintStream printStream24 = printStream14.printf("2019/07/12 07:12", objArray23);
        java.io.PrintStream printStream27 = new java.io.PrintStream("Unversioned directory");
        char[] charArray30 = new char[] { '4', '4' };
        printStream27.print(charArray30);
        printStream27.print((int) ' ');
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream27, false);
        printStream27.write((int) '#');
        java.util.Locale locale38 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream42 = printStream27.format(locale38, "Unversioned directory", objArray41);
        java.io.PrintStream printStream43 = printStream24.format("hi!", objArray41);
        java.io.PrintStream printStream44 = printStream8.format(locale11, "", objArray41);
        java.io.PrintStream printStream46 = printStream44.append(' ');
        printStream46.println(true);
        printStream46.println((int) (short) 0);
        com.google.javascript.jscomp.Compiler compiler51 = new com.google.javascript.jscomp.Compiler(printStream46);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = compiler51.acceptEcmaScript5();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup16);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertNotNull(objArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream46);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setInlineFunctions(false);
        compilerOptions0.setPrettyPrint(false);
        boolean boolean25 = compilerOptions0.checkSymbols;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.moveFunctionDeclarations = true;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        java.util.Set<java.lang.String> strSet9 = compilerOptions0.aliasableStrings;
        compilerOptions0.setPrintInputDelimiter(false);
        compilerOptions0.setAliasableGlobals("java.io.IOException");
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        java.io.PrintStream printStream1 = new java.io.PrintStream("java.io.IOException: java.io.IOException: java.io.IOException: ");
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        compilerOptions20.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap25 = null;
        compilerOptions20.setCssRenamingMap(cssRenamingMap25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        boolean boolean33 = compilerOptions27.inlineConstantVars;
        compilerOptions27.aliasAllStrings = false;
        boolean boolean36 = compilerOptions27.smartNameRemoval;
        compilerOptions27.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions27.checkGlobalNamesLevel;
        compilerOptions20.setCheckProvides(checkLevel39);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel39);
        java.util.Set<java.lang.String> strSet42 = null;
        compilerOptions0.setStripTypes(strSet42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setPreferLineBreakAtEndOfFile(true);
        compilerOptions0.coalesceVariableNames = false;
        compilerOptions0.setProcessObjectPropertyString(true);
        boolean boolean17 = compilerOptions0.gatherCssNames;
        compilerOptions0.skipAllCompilerPasses();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile11 = builder0.buildFromFile("Unversioned directory");
        java.lang.String str13 = sourceFile11.getLine(100);
        java.lang.String str14 = sourceFile11.getCode();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "4432#Unversionedhi!rector true\n0\n" + "'", str14, "4432#Unversionedhi!rector true\n0\n");
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        compilerOptions14.setClosurePass(true);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray27);
        compilerOptions14.setFlowSensitiveInlineVariables(true);
        boolean boolean31 = compilerOptions14.exportTestFunctions;
        compilerOptions14.closurePass = false;
        com.google.javascript.jscomp.ErrorFormat errorFormat34 = compilerOptions14.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat34);
        compilerOptions0.aliasStringsBlacklist = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.javascript.jscomp.SourceMap.Format format38 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setMoveFunctionDeclarations(true);
        compilerOptions0.removeUnusedPrototypeProperties = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(errorFormat34);
        org.junit.Assert.assertNotNull(format38);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        java.lang.String str17 = compilerOptions0.inputDelimiter;
        java.lang.String str18 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setInlineFunctions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray29 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList30 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList30, locationMappingArray29);
        compilerOptions21.sourceMapLocationMappings = locationMappingList30;
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions21.aggressiveVarCheck;
        boolean boolean34 = compilerOptions21.aliasAllStrings;
        compilerOptions21.setDefineToNumberLiteral("java.io.IOException", 100);
        compilerOptions21.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGeneratePseudoNames(true);
        compilerOptions40.inlineLocalFunctions = false;
        compilerOptions40.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        compilerOptions51.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention60 = null;
        compilerOptions57.setCodingConvention(codingConvention60);
        compilerOptions57.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel64 = compilerOptions57.checkProvides;
        compilerOptions51.setReportUnknownTypes(checkLevel64);
        compilerOptions40.setCheckGlobalNamesLevel(checkLevel64);
        compilerOptions21.setCheckMissingReturn(checkLevel64);
        compilerOptions0.setCheckProvides(checkLevel64);
        compilerOptions0.setSummaryDetailLevel((-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "// Input %num%" + "'", str17, "// Input %num%");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + checkLevel64 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel64.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder5.withOriginalPath("");
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile9 = builder7.buildFromFile(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName("2019/07/12 07:12");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = diagnosticGroups0.forName("2019/07/12 07:12");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup8 = diagnosticGroups0.forName("2019/07/12 07:12");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
        org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertNull(diagnosticGroup8);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.generateExports = false;
        java.lang.String str34 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.collapseVariableDeclarations = false;
        compilerOptions0.setOptimizeParameters(true);
        compilerOptions0.deadAssignmentElimination = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        compilerOptions0.setAssumeStrictThis(true);
        boolean boolean44 = compilerOptions0.devirtualizePrototypeMethods;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        compilerOptions0.setSkipAllPasses(true);
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        boolean boolean8 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = null;
        compilerOptions0.setTracer(tracerMode9);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray11 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList12 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList12, locationMappingArray11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        compilerOptions14.setClosurePass(true);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray27);
        compilerOptions14.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet37 = compilerOptions31.stripTypePrefixes;
        compilerOptions14.aliasableStrings = strSet37;
        boolean boolean39 = locationMappingList12.removeAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup40 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup40;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup40;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup40;
        boolean boolean44 = locationMappingList12.contains((java.lang.Object) diagnosticGroup40);
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList12);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping46 = null;
        boolean boolean47 = locationMappingList12.add(locationMapping46);
        int int48 = locationMappingList12.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList51 = locationMappingList12.subList((int) (short) 100, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        boolean boolean6 = compilerOptions0.collapseProperties;
        boolean boolean7 = compilerOptions0.checkSuspiciousCode;
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.setInlineVariables(true);
        compilerOptions0.aliasAllStrings = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.setInlineVariables(true);
        boolean boolean9 = compilerOptions0.generateExports;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean14 = compilerOptions10.jqueryPass;
        compilerOptions10.collapseAnonymousFunctions = false;
        compilerOptions10.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler19 = compilerOptions10.getAliasTransformationHandler();
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler19);
        compilerOptions0.setInlineFunctions(false);
        compilerOptions0.printInputDelimiter = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler19);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: ");
        compilerOptions0.setOptimizeArgumentsArray(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        byte[] byteArray18 = compilerOptions0.inputVariableMapSerialized;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(byteArray18);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.println((float) (-1));
        printStream1.write((int) (byte) 0);
        printStream1.close();
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.print((float) 100);
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("", throwable16);
        java.lang.Throwable throwable19 = null;
        java.io.IOException iOException20 = new java.io.IOException("", throwable19);
        iOException17.addSuppressed((java.lang.Throwable) iOException20);
        java.lang.Throwable[] throwableArray22 = iOException17.getSuppressed();
        java.lang.Throwable[] throwableArray23 = iOException17.getSuppressed();
        java.lang.Throwable[] throwableArray24 = iOException17.getSuppressed();
        java.io.PrintStream printStream25 = printStream1.printf("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray24);
        printStream1.print("java.io.IOException");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.setPrettyPrint(false);
        boolean boolean11 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setPreferLineBreakAtEndOfFile(false);
        compilerOptions0.setExportTestFunctions(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setGroupVariableDeclarations(false);
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap22 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap22);
        java.lang.String str24 = compilerOptions0.locale;
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions0.checkGlobalThisLevel;
        boolean boolean26 = compilerOptions0.removeUnusedClassProperties;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        boolean boolean8 = compilerOptions5.extractPrototypeMemberDeclarations;
        compilerOptions5.setCollapseProperties(false);
        compilerOptions5.setClosurePass(true);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions5.setInputPropertyMapSerialized(byteArray18);
        compilerOptions5.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions5.reportMissingOverride;
        compilerOptions5.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        byte[] byteArray27 = compilerOptions25.inputVariableMapSerialized;
        compilerOptions25.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap30 = null;
        compilerOptions25.setCssRenamingMap(cssRenamingMap30);
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        boolean boolean38 = compilerOptions32.inlineConstantVars;
        compilerOptions32.aliasAllStrings = false;
        boolean boolean41 = compilerOptions32.smartNameRemoval;
        compilerOptions32.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions32.checkGlobalNamesLevel;
        compilerOptions25.setCheckProvides(checkLevel44);
        compilerOptions5.setCheckGlobalNamesLevel(checkLevel44);
        compilerOptions0.setReportUnknownTypes(checkLevel44);
        boolean boolean48 = compilerOptions0.removeUnusedPrototypeProperties;
        compilerOptions0.setTightenTypes(true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.setTightenTypes(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap8);
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setCheckSymbols(false);
        compilerOptions0.setReplaceStringsPlaceholderToken("");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        compilerOptions0.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap7);
        java.lang.String str9 = compilerOptions0.checkMissingGetCssNameBlacklist;
        compilerOptions0.smartNameRemoval = false;
        compilerOptions0.setInputDelimiter("");
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.disableThreads();
        java.lang.String str3 = compiler0.getAstDotGraph();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker4 = compiler0.tracker;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile5 = null;
        com.google.javascript.jscomp.JSModule[] jSModuleArray6 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention10 = null;
        compilerOptions7.setCodingConvention(codingConvention10);
        boolean boolean12 = compilerOptions7.generateExports;
        compilerOptions7.gatherCssNames = false;
        boolean boolean15 = compilerOptions7.optimizeReturns;
        compilerOptions7.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet18 = compilerOptions7.aliasableStrings;
        compilerOptions7.generateExports = false;
        boolean boolean21 = compilerOptions7.assumeStrictThis();
        compilerOptions7.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        compilerOptions24.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet32 = compilerOptions31.stripNamePrefixes;
        compilerOptions24.setIdGenerators(strSet32);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setGeneratePseudoNames(true);
        compilerOptions34.inlineLocalFunctions = false;
        compilerOptions34.setIdeMode(true);
        compilerOptions34.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions47.checkGlobalThisLevel;
        compilerOptions34.checkMissingReturn = checkLevel53;
        compilerOptions24.aggressiveVarCheck = checkLevel53;
        compilerOptions7.checkUnreachableCode = checkLevel53;
        compilerOptions7.setTweakToDoubleLiteral("", 0.0d);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap60 = compilerOptions7.getTweakReplacements();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result61 = compiler0.compile(jSSourceFile5, jSModuleArray6, compilerOptions7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(performanceTracker4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap60);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setDefineToNumberLiteral("2019/07/12 07:12", (int) '#');
        java.lang.String str7 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        compilerOptions0.setLineLengthThreshold(35);
        boolean boolean12 = compilerOptions0.labelRenaming;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        boolean boolean9 = compilerOptions0.inlineFunctions;
        boolean boolean10 = compilerOptions0.isExternExportsEnabled();
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setDefineToBooleanLiteral("hi!", true);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkGlobalThisLevel;
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        java.lang.String str6 = compiler0.getSourceLine("Unversioned directory", (int) (byte) -1);
        compiler0.disableThreads();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker8 = null;
        compiler0.tracker = performanceTracker8;
        com.google.javascript.jscomp.JSError jSError10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CheckLevel checkLevel11 = compiler0.getErrorLevel(jSError10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.setTransformAMDToCJSModules(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions0.setTracer(tracerMode3);
        boolean boolean5 = compilerOptions0.smartNameRemoval;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = null;
        compilerOptions0.setTracer(tracerMode6);
        compilerOptions0.setInferTypes(false);
        compilerOptions0.setRemoveUnusedClassProperties(false);
        boolean boolean12 = compilerOptions0.removeTryCatchFinally;
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.setReserveRawExports(false);
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy28 = compilerOptions0.variableRenaming;
        java.lang.String str29 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy28 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy28.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.util.Set<java.lang.String> strSet44 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.enableExternExports(false);
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        printStream1.println("java.io.IOException");
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        char[] charArray22 = new char[] { '4', '4' };
        printStream19.print(charArray22);
        printStream19.print((int) ' ');
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream19, false);
        printStream19.write((int) '#');
        java.util.Locale locale30 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream34 = printStream19.format(locale30, "Unversioned directory", objArray33);
        java.io.PrintStream printStream35 = printStream1.printf(locale16, "Unversioned directory", objArray33);
        printStream35.flush();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream35);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.removeUnusedVars = false;
        compilerOptions0.setCollapseObjectLiterals(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.write((int) (byte) 100);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printStream16.write((int) (byte) 1);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setPreferLineBreakAtEndOfFile(false);
        compilerOptions0.setDeadAssignmentElimination(false);
        compilerOptions0.setRemoveAbstractMethods(true);
        boolean boolean15 = compilerOptions0.generateExports;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap12 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap12);
        byte[] byteArray14 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setFoldConstants(false);
        java.lang.String str17 = compilerOptions0.renamePrefixNamespace;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        boolean boolean10 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.generateExports = true;
        compilerOptions0.setAliasAllStrings(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor23 = locationMappingList1.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator24 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        byte[] byteArray27 = compilerOptions25.inputVariableMapSerialized;
        boolean boolean28 = compilerOptions25.exportTestFunctions;
        compilerOptions25.setExtractPrototypeMemberDeclarations(true);
        compilerOptions25.reserveRawExports = false;
        compilerOptions25.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        boolean boolean41 = compilerOptions36.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setLabelRenaming(true);
        compilerOptions42.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean47 = compilerOptions42.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format48 = compilerOptions42.sourceMapFormat;
        compilerOptions36.sourceMapFormat = format48;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        compilerOptions50.setCollapseProperties(false);
        boolean boolean56 = compilerOptions50.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat57 = compilerOptions50.errorFormat;
        compilerOptions36.setErrorFormat(errorFormat57);
        compilerOptions25.setErrorFormat(errorFormat57);
        boolean boolean60 = locationMappingList1.remove((java.lang.Object) compilerOptions25);
        compilerOptions25.checkTypes = false;
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationMappingItor23);
        org.junit.Assert.assertNotNull(locationMappingSpliterator24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(format48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(errorFormat57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.setLocale("java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = compilerOptions0.errorFormat;
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat9);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        compilerOptions0.setClosurePass(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        byte[] byteArray18 = compilerOptions16.inputVariableMapSerialized;
        compilerOptions16.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions16.setDeadAssignmentElimination(true);
        compilerOptions16.setShadowVariables(true);
        java.lang.String str25 = compilerOptions16.inputDelimiter;
        compilerOptions16.setComputeFunctionSideEffects(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions16.checkMissingReturn;
        compilerOptions0.aggressiveVarCheck = checkLevel28;
        compilerOptions0.setOptimizeCalls(false);
        compilerOptions0.setRemoveUnusedLocalVars(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "// Input %num%" + "'", str25, "// Input %num%");
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.prettyPrint = true;
        compilerOptions0.aliasExternals = true;
        compilerOptions0.setIdeMode(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.setPreferLineBreakAtEndOfFile(false);
        compilerOptions0.setSyntheticBlockStartMarker("2019/07/12 07:12");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        boolean boolean6 = compilerOptions0.optimizeParameters;
        java.util.Set<java.lang.String> strSet7 = null;
        compilerOptions0.setStripTypes(strSet7);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray9 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList10 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList10, locationMappingArray9);
        com.google.javascript.jscomp.SourceFile sourceFile14 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean15 = locationMappingList10.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        byte[] byteArray18 = compilerOptions16.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup19 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup19;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        compilerOptions16.setWarningLevel(diagnosticGroup19, checkLevel28);
        java.util.Set<java.lang.String> strSet30 = compilerOptions16.stripNamePrefixes;
        boolean boolean31 = locationMappingList10.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.lang.Object obj32 = null;
        boolean boolean33 = locationMappingList10.equals(obj32);
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor34 = locationMappingList10.iterator();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList10);
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList10.replaceAll(locationMappingUnaryOperator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locationMappingArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(byteArray18);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup19);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locationMappingItor34);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.closurePass = true;
        compilerOptions0.setAppNameStr("Unversioned directory");
        com.google.javascript.jscomp.MessageBundle messageBundle14 = null;
        compilerOptions0.setMessageBundle(messageBundle14);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        compilerOptions16.setRemoveUnusedVars(true);
        boolean boolean24 = compilerOptions16.labelRenaming;
        boolean boolean25 = compilerOptions16.inlineVariables;
        compilerOptions16.setPreferLineBreakAtEndOfFile(false);
        com.google.javascript.jscomp.SourceMap.Format format28 = compilerOptions16.sourceMapFormat;
        boolean boolean29 = compilerOptions16.labelRenaming;
        compilerOptions16.sourceMapOutputPath = "java.io.IOException: ";
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions32.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle41 = null;
        compilerOptions32.setMessageBundle(messageBundle41);
        boolean boolean43 = compilerOptions32.recordFunctionInformation;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy44 = compilerOptions32.anonymousFunctionNaming;
        compilerOptions16.anonymousFunctionNaming = anonymousFunctionNamingPolicy44;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy44 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy44.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        boolean boolean11 = compilerOptions0.lineBreak;
        compilerOptions0.setDebugFunctionSideEffectsPath("hi!");
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy15 = null;
        compilerOptions0.setVariableRenaming(variableRenamingPolicy15);
        boolean boolean17 = compilerOptions0.disambiguateProperties;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        compilerOptions0.enableExternExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode17 = compilerOptions12.getTracerMode();
        compilerOptions12.lineBreak = false;
        compilerOptions12.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions12.inlineLocalFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach28 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions24.setInlineVariables(reach28);
        boolean boolean30 = compilerOptions24.removeUnusedVars;
        boolean boolean31 = compilerOptions24.assumeClosuresOnlyCaptureReferences();
        compilerOptions24.setProcessObjectPropertyString(false);
        compilerOptions24.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean36 = compilerOptions24.removeDeadCode;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel37 = null;
        compilerOptions24.sourceMapDetailLevel = detailLevel37;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions39.checkProvides;
        java.lang.String[] strArray48 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        compilerOptions39.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList49);
        java.util.stream.Stream<java.lang.String> strStream52 = strList49.stream();
        compilerOptions24.setManageClosureDependencies((java.util.List<java.lang.String>) strList49);
        compilerOptions12.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList49);
        compilerOptions0.setReplaceStringsConfiguration("2019/07/12 07:12", (java.util.List<java.lang.String>) strList49);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap56 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap56;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + tracerMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode17.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + reach28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach28.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strStream52);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.setChainCalls(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap11 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap11);
        compilerOptions0.setClosurePass(true);
        compilerOptions0.setSourceMapOutputPath("hi!");
        compilerOptions0.prettyPrint = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        boolean boolean22 = compilerOptions19.extractPrototypeMemberDeclarations;
        boolean boolean23 = compilerOptions19.jqueryPass;
        boolean boolean24 = compilerOptions19.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setLabelRenaming(true);
        compilerOptions25.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean30 = compilerOptions25.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format31 = compilerOptions25.sourceMapFormat;
        compilerOptions19.setSourceMapFormat(format31);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing33 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions19.setTweakProcessing(tweakProcessing33);
        compilerOptions19.setCheckMissingGetCssNameBlacklist("-1");
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setLabelRenaming(true);
        compilerOptions37.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean42 = compilerOptions37.labelRenaming;
        compilerOptions37.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet46 = compilerOptions45.stripNamePrefixes;
        byte[] byteArray47 = compilerOptions45.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup48 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup48;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention53 = null;
        compilerOptions50.setCodingConvention(codingConvention53);
        compilerOptions50.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel57 = compilerOptions50.checkProvides;
        compilerOptions45.setWarningLevel(diagnosticGroup48, checkLevel57);
        compilerOptions37.checkUnreachableCode = checkLevel57;
        compilerOptions37.setAssumeStrictThis(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions62.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention65 = null;
        compilerOptions62.setCodingConvention(codingConvention65);
        compilerOptions62.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel69 = compilerOptions62.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray70 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList71 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList71, locationMappingArray70);
        compilerOptions62.sourceMapLocationMappings = locationMappingList71;
        com.google.javascript.jscomp.CompilerOptions compilerOptions74 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions74.setRewriteNewDateGoogNow(true);
        boolean boolean77 = compilerOptions74.extractPrototypeMemberDeclarations;
        boolean boolean78 = compilerOptions74.jqueryPass;
        compilerOptions74.collapseAnonymousFunctions = false;
        boolean boolean81 = compilerOptions74.checkTypes;
        compilerOptions74.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel84 = compilerOptions74.checkProvides;
        compilerOptions62.checkUnreachableCode = checkLevel84;
        compilerOptions37.setBrokenClosureRequiresLevel(checkLevel84);
        compilerOptions19.checkMissingGetCssNameLevel = checkLevel84;
        compilerOptions0.brokenClosureRequiresLevel = checkLevel84;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(format31);
        org.junit.Assert.assertTrue("'" + tweakProcessing33 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing33.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(byteArray47);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup48);
        org.junit.Assert.assertTrue("'" + checkLevel57 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel57.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel69 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel69.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + checkLevel84 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel84.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.closurePass = false;
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap45 = compilerOptions0.customPasses;
        compilerOptions0.setReplaceIdGenerators(true);
        java.lang.String str48 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap45);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        compilerOptions0.setLineBreak(true);
        compilerOptions0.disambiguateProperties = false;
        compilerOptions0.smartNameRemoval = false;
        compilerOptions0.setSyntheticBlockEndMarker("-1");
        com.google.javascript.jscomp.DependencyOptions dependencyOptions22 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setDependencyOptions(dependencyOptions22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkProvides;
        boolean boolean11 = compilerOptions0.checkControlStructures;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap12 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap12;
        compilerOptions0.setDefineToBooleanLiteral("-1", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setExportTestFunctions(true);
        compilerOptions0.setTweakToStringLiteral("// Input %num%", "hi!");
        compilerOptions0.setSmartNameRemoval(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        double double4 = compiler0.getProgress();
        com.google.javascript.jscomp.JSError jSError5 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler0.report(jSError5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineFunctions(reach13);
        compilerOptions0.crossModuleCodeMotion = false;
        boolean boolean17 = compilerOptions0.generatePseudoNames;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.MessageBundle messageBundle10 = null;
        compilerOptions0.messageBundle = messageBundle10;
        boolean boolean12 = compilerOptions0.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        compilerOptions0.setInlineProperties(false);
        boolean boolean9 = compilerOptions0.labelRenaming;
        compilerOptions0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.setRewriteFunctionExpressions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.generateExports;
        compilerOptions14.gatherCssNames = false;
        boolean boolean22 = compilerOptions14.optimizeReturns;
        compilerOptions14.smartNameRemoval = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        java.lang.String[] strArray35 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        compilerOptions26.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList36.stream();
        compilerOptions14.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList36);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList36);
        compilerOptions0.disableRuntimeTypeCheck();
        java.lang.String str43 = compilerOptions0.inputDelimiter;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "// Input %num%" + "'", str43, "// Input %num%");
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.removeUnusedClassProperties = true;
        compilerOptions0.setAppNameStr("");
        boolean boolean7 = compilerOptions0.crossModuleMethodMotion;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing14 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions0.setTweakProcessing(tweakProcessing14);
        boolean boolean16 = tweakProcessing14.isOn();
        boolean boolean17 = tweakProcessing14.isOn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + tweakProcessing14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing14.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setProtectHiddenSideEffects(true);
        compilerOptions0.aliasAllStrings = true;
        boolean boolean13 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setInlineConstantVars(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.setCheckMissingGetCssNameBlacklist("java.io.IOException: -1");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions8.checkGlobalThisLevel;
        compilerOptions8.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing16 = compilerOptions8.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing16);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy18 = compilerOptions0.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        compilerOptions19.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean28 = compilerOptions19.foldConstants;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions19.brokenClosureRequiresLevel;
        compilerOptions0.setCheckUnreachableCode(checkLevel29);
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions0.checkUnreachableCode;
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing16.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy18 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy18.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        java.util.Set<java.lang.String> strSet7 = compilerOptions0.stripTypes;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        java.lang.String[] strArray21 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        compilerOptions12.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList22.stream();
        compilerOptions0.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList22);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions27.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray35 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList36 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList36, locationMappingArray35);
        compilerOptions27.sourceMapLocationMappings = locationMappingList36;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        boolean boolean43 = compilerOptions39.jqueryPass;
        compilerOptions39.collapseAnonymousFunctions = false;
        boolean boolean46 = compilerOptions39.checkTypes;
        compilerOptions39.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions39.checkProvides;
        compilerOptions27.checkUnreachableCode = checkLevel49;
        compilerOptions0.checkUnreachableCode = checkLevel49;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = null;
        compilerOptions52.setCodingConvention(codingConvention55);
        compilerOptions52.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet60 = compilerOptions59.stripNamePrefixes;
        compilerOptions52.setIdGenerators(strSet60);
        compilerOptions52.sourceMapOutputPath = "java.io.IOException: ";
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler64 = compilerOptions52.getAliasTransformationHandler();
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler64);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation> aliasTransformationSourcePosition67 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerOptions.AliasTransformation aliasTransformation68 = aliasTransformationHandler64.logAliasTransformation("java.io.IOException: ", aliasTransformationSourcePosition67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(aliasTransformationHandler64);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromCode("// Input %num%", "// Input %num%", "-1");
        sourceFile3.clearCachedSource();
        boolean boolean5 = sourceFile3.isExtern();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        boolean boolean15 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setRemoveTryCatchFinally(true);
        compilerOptions0.setAliasKeywords(true);
        compilerOptions0.syntheticBlockStartMarker = "";
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: java.io.IOException: java.io.IOException: ", (int) (byte) 10);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setInlineConstantVars(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        java.lang.String str8 = compiler0.getAstDotGraph();
        java.lang.String str11 = compiler0.getSourceLine("java.io.IOException: Unversioned directory", 0);
        com.google.javascript.jscomp.SourceMap sourceMap12 = compiler0.getSourceMap();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result13 = compiler0.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(sourceMap12);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        compilerOptions0.setMoveFunctionDeclarations(true);
        compilerOptions0.setLocale("java.io.IOException: ");
        compilerOptions0.inlineVariables = true;
        compilerOptions0.setCollapseAnonymousFunctions(false);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream16.write((int) (short) 1);
        printStream16.print((double) 0);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        java.io.IOException iOException2 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException3 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException2.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.setInlineFunctions(false);
        boolean boolean26 = compilerOptions0.optimizeCalls;
        compilerOptions0.rewriteFunctionExpressions = false;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: ");
        compilerOptions0.setOptimizeArgumentsArray(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions0.checkRequires;
        compilerOptions0.setProtectHiddenSideEffects(true);
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: java.io.IOException: 2019/07/12 07:12", 35);
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setTweakToDoubleLiteral("java.io.IOException: java.io.IOException: java.io.IOException: ", (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        compilerOptions26.setIdGenerators(strSet34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        compilerOptions36.setGeneratePseudoNames(true);
        compilerOptions36.inlineLocalFunctions = false;
        compilerOptions36.setIdeMode(true);
        compilerOptions36.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        compilerOptions49.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel55 = compilerOptions49.checkGlobalThisLevel;
        compilerOptions36.checkMissingReturn = checkLevel55;
        compilerOptions26.aggressiveVarCheck = checkLevel55;
        compilerOptions0.setCheckUnreachableCode(checkLevel55);
        compilerOptions0.lineBreak = true;
        compilerOptions0.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention66 = null;
        compilerOptions63.setCodingConvention(codingConvention66);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode68 = compilerOptions63.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup69 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup69;
        com.google.javascript.jscomp.CompilerOptions compilerOptions71 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions71.setRewriteNewDateGoogNow(true);
        boolean boolean74 = compilerOptions71.extractPrototypeMemberDeclarations;
        compilerOptions71.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel77 = compilerOptions71.brokenClosureRequiresLevel;
        compilerOptions63.setWarningLevel(diagnosticGroup69, checkLevel77);
        compilerOptions0.setAggressiveVarCheck(checkLevel77);
        compilerOptions0.setOptimizeCalls(true);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + checkLevel55 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel55.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode68 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode68.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + checkLevel77 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel77.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setReplaceStringsPlaceholderToken("2019/07/12 07:12");
        compilerOptions0.setUnaliasableGlobals("hi!");
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet15 = compilerOptions14.stripNamePrefixes;
        byte[] byteArray16 = compilerOptions14.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach17 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions14.setInlineFunctions(reach17);
        compilerOptions14.setRecordFunctionInformation(true);
        compilerOptions14.setExtractPrototypeMemberDeclarations(true);
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException");
        java.lang.String str25 = compilerOptions14.inputDelimiter;
        java.io.PrintStream printStream27 = new java.io.PrintStream("Unversioned directory");
        char[] charArray30 = new char[] { '4', '4' };
        printStream27.print(charArray30);
        printStream27.print((int) ' ');
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream27, false);
        printStream27.write((int) '#');
        printStream27.print((float) (short) 0);
        printStream27.print(10L);
        printStream27.write(1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        boolean boolean47 = compilerOptions44.extractPrototypeMemberDeclarations;
        compilerOptions44.setCollapseProperties(false);
        compilerOptions44.setClosurePass(true);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions44.setInputPropertyMapSerialized(byteArray57);
        printStream27.write(byteArray57);
        compilerOptions14.inputVariableMapSerialized = byteArray57;
        compilerOptions0.inputVariableMapSerialized = byteArray57;
        java.util.List<java.lang.String> strList62 = null;
        compilerOptions0.setReplaceStringsFunctionDescriptions(strList62);
        compilerOptions0.setSpecializeInitialModule(false);
        boolean boolean66 = compilerOptions0.reserveRawExports;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertTrue("'" + reach17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach17.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "// Input %num%" + "'", str25, "// Input %num%");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        java.io.InputStream inputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromInputStream("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: java.io.IOException: java.io.IOException: ", inputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("-1");
        org.junit.Assert.assertNotNull(sourceFile1);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        boolean boolean19 = compilerOptions15.jqueryPass;
        compilerOptions15.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions22.checkGlobalThisLevel;
        compilerOptions15.checkProvides = checkLevel28;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.convertToDottedProperties = true;
        boolean boolean36 = compilerOptions30.inlineConstantVars;
        boolean boolean37 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.optimizeCalls = true;
        compilerOptions30.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach46 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions42.setInlineVariables(reach46);
        compilerOptions42.setPrintInputDelimiter(true);
        boolean boolean50 = compilerOptions42.closurePass;
        compilerOptions42.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setRewriteNewDateGoogNow(true);
        boolean boolean56 = compilerOptions53.extractPrototypeMemberDeclarations;
        boolean boolean57 = compilerOptions53.jqueryPass;
        boolean boolean58 = compilerOptions53.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setLabelRenaming(true);
        compilerOptions59.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean64 = compilerOptions59.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format65 = compilerOptions59.sourceMapFormat;
        compilerOptions53.setSourceMapFormat(format65);
        compilerOptions42.setSourceMapFormat(format65);
        compilerOptions30.sourceMapFormat = format65;
        compilerOptions15.sourceMapFormat = format65;
        compilerOptions0.sourceMapFormat = format65;
        boolean boolean71 = compilerOptions0.removeUnusedLocalVars;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList72 = compilerOptions0.sourceMapLocationMappings;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap73 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap73;
        compilerOptions0.setInlineLocalFunctions(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + reach46 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach46.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(format65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locationMappingList72);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        boolean boolean13 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.setExternExportsPath("2019/07/12 07:12");
        compilerOptions0.checkTypes = true;
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: java.io.IOException: ";
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setCheckSuspiciousCode(true);
        compilerOptions0.setConvertToDottedProperties(false);
        compilerOptions0.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions9.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup15 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup15;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions17.brokenClosureRequiresLevel;
        compilerOptions9.setWarningLevel(diagnosticGroup15, checkLevel23);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions9.checkGlobalThisLevel;
        compilerOptions0.setCheckProvides(checkLevel25);
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList27 = compilerOptions0.sourceMapLocationMappings;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap35 = compilerOptions28.cssRenamingMap;
        compilerOptions28.reserveRawExports = true;
        compilerOptions28.jqueryPass = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions40.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        compilerOptions49.setCollapseProperties(false);
        compilerOptions49.setClosurePass(true);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions49.setInputPropertyMapSerialized(byteArray62);
        compilerOptions49.setFlowSensitiveInlineVariables(true);
        compilerOptions49.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions68.setRewriteNewDateGoogNow(true);
        boolean boolean71 = compilerOptions68.extractPrototypeMemberDeclarations;
        compilerOptions68.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet74 = compilerOptions68.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream75 = strSet74.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream76 = strSet74.parallelStream();
        compilerOptions49.stripNameSuffixes = strSet74;
        compilerOptions40.setStripTypePrefixes(strSet74);
        com.google.javascript.jscomp.CompilerOptions compilerOptions79 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions79.setRewriteNewDateGoogNow(true);
        boolean boolean82 = compilerOptions79.extractPrototypeMemberDeclarations;
        compilerOptions79.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet85 = compilerOptions79.stripTypePrefixes;
        compilerOptions40.setAliasableStrings(strSet85);
        compilerOptions28.setExtraAnnotationNames(strSet85);
        boolean boolean88 = locationMappingList27.remove((java.lang.Object) compilerOptions28);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping90 = locationMappingList27.remove(1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingList27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(cssRenamingMap35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy16 = compilerOptions0.propertyRenaming;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy16 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy16.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.setGatherCssNames(false);
        byte[] byteArray11 = compilerOptions0.inputPropertyMapSerialized;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(byteArray11);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONST;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.coalesceVariableNames = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setLabelRenaming(true);
        compilerOptions7.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean12 = compilerOptions7.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions7.setAggressiveVarCheck(checkLevel19);
        compilerOptions7.markAsCompiled = false;
        compilerOptions7.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach29 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions25.setInlineVariables(reach29);
        compilerOptions25.setPrintInputDelimiter(true);
        java.lang.String[] strArray40 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "// Input %num%", "", "java.io.IOException: Unversioned directory", "java.io.IOException: " };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        compilerOptions25.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList41);
        compilerOptions7.setManageClosureDependencies((java.util.List<java.lang.String>) strList41);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList41);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.convertToDottedProperties = true;
        boolean boolean52 = compilerOptions46.inlineConstantVars;
        compilerOptions46.aliasAllStrings = false;
        boolean boolean55 = compilerOptions46.smartNameRemoval;
        compilerOptions46.gatherCssNames = true;
        compilerOptions46.collapseVariableDeclarations = true;
        compilerOptions46.aliasExternals = false;
        compilerOptions46.setGatherCssNames(false);
        java.util.Set<java.lang.String> strSet64 = compilerOptions46.stripTypePrefixes;
        compilerOptions0.setStripTypePrefixes(strSet64);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + reach29 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach29.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSet64);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.checkGlobalNamesLevel = checkLevel13;
        java.lang.String str15 = compilerOptions0.syntheticBlockStartMarker;
        java.util.Set<java.lang.String> strSet16 = compilerOptions0.stripTypes;
        compilerOptions0.setAliasKeywords(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setReserveRawExports(false);
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setCheckSuspiciousCode(false);
        byte[] byteArray8 = compilerOptions0.inputPropertyMapSerialized;
        java.lang.String str9 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.syntheticBlockEndMarker = "";
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.setAliasAllStrings(true);
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.removeUnusedClassProperties = true;
        java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> strMap5 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setPropertyInvalidationErrors(strMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setAcceptConstKeyword(false);
        compilerOptions0.removeUnusedPrototypeProperties = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        compilerOptions0.setTweakToStringLiteral("// Input %num%", "");
        java.util.Set<java.lang.String> strSet15 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.setProcessCommonJSModules(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        java.lang.String[] strArray21 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        compilerOptions12.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList22.stream();
        compilerOptions0.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList22);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions27.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray35 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList36 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList36, locationMappingArray35);
        compilerOptions27.sourceMapLocationMappings = locationMappingList36;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        boolean boolean43 = compilerOptions39.jqueryPass;
        compilerOptions39.collapseAnonymousFunctions = false;
        boolean boolean46 = compilerOptions39.checkTypes;
        compilerOptions39.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions39.checkProvides;
        compilerOptions27.checkUnreachableCode = checkLevel49;
        compilerOptions0.checkUnreachableCode = checkLevel49;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = null;
        compilerOptions52.setCodingConvention(codingConvention55);
        compilerOptions52.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet60 = compilerOptions59.stripNamePrefixes;
        compilerOptions52.setIdGenerators(strSet60);
        compilerOptions52.sourceMapOutputPath = "java.io.IOException: ";
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler64 = compilerOptions52.getAliasTransformationHandler();
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler64);
        boolean boolean66 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setExternExports(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(aliasTransformationHandler64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setCheckControlStructures(true);
        boolean boolean10 = compilerOptions0.collapseAnonymousFunctions;
        compilerOptions0.setChainCalls(true);
        compilerOptions0.setLineLengthThreshold((int) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach19 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions15.setInlineVariables(reach19);
        compilerOptions15.setAliasAllStrings(false);
        java.util.Set<java.lang.String> strSet23 = compilerOptions15.aliasableStrings;
        compilerOptions0.aliasableStrings = strSet23;
        java.util.stream.Stream<java.lang.String> strStream25 = strSet23.stream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + reach19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach19.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strStream25);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("hi!", "java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setAliasableGlobals("");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray25 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList26 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList26, locationMappingArray25);
        com.google.javascript.jscomp.SourceFile sourceFile30 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean31 = locationMappingList26.remove((java.lang.Object) "hi!");
        boolean boolean32 = locationMappingList26.isEmpty();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList26);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        boolean boolean40 = compilerOptions34.inlineConstantVars;
        boolean boolean41 = compilerOptions34.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions34.gatherCssNames;
        compilerOptions34.setCheckSymbols(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode45 = compilerOptions34.getTracerMode();
        compilerOptions34.moveFunctionDeclarations = false;
        boolean boolean48 = locationMappingList26.equals((java.lang.Object) false);
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor49 = locationMappingList26.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping51 = locationMappingList26.remove((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(sourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + tracerMode45 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode45.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locationMappingItor49);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        boolean boolean13 = compilerOptions10.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setLabelRenaming(true);
        compilerOptions14.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions14.checkGlobalThisLevel;
        compilerOptions10.setCheckGlobalNamesLevel(checkLevel19);
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel19);
        compilerOptions0.setCheckTypes(true);
        compilerOptions0.setSourceMapOutputPath("Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromGenerator("java.io.IOException: java.io.IOException: java.io.IOException: ", generator1);
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setAcceptConstKeyword(false);
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.locale = "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        java.lang.String str2 = sourceFile1.getOriginalPath();
        java.lang.String str4 = sourceFile1.getLine(0);
        java.lang.String str5 = sourceFile1.getName();
        java.lang.String str6 = sourceFile1.toString();
        int int8 = sourceFile1.getLineOfOffset(35);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel9 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel9;
        compilerOptions0.setSourceMapOutputPath("");
        compilerOptions0.setManageClosureDependencies(false);
        compilerOptions0.exportTestFunctions = false;
        boolean boolean17 = compilerOptions0.optimizeArgumentsArray;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        sourceFile2.setOriginalPath("");
        sourceFile2.setOriginalPath("");
        boolean boolean9 = sourceFile2.isExtern();
        java.lang.String str11 = sourceFile2.getLine((int) (byte) 10);
        sourceFile2.setOriginalPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader14 = sourceFile2.getCodeReader();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        boolean boolean26 = locationMappingList1.remove((java.lang.Object) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor28 = locationMappingList1.listIterator((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        boolean boolean10 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.aliasStringsBlacklist = "java.io.IOException: ";
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions0.brokenClosureRequiresLevel;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setLabelRenaming(true);
        compilerOptions31.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean36 = compilerOptions31.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format37 = compilerOptions31.sourceMapFormat;
        compilerOptions31.setCollapseAnonymousFunctions(true);
        printStream1.print((java.lang.Object) compilerOptions31);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        boolean boolean44 = compilerOptions41.extractPrototypeMemberDeclarations;
        compilerOptions41.convertToDottedProperties = true;
        boolean boolean47 = compilerOptions41.inlineConstantVars;
        boolean boolean48 = compilerOptions41.extractPrototypeMemberDeclarations;
        boolean boolean49 = compilerOptions41.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard50 = null;
        compilerOptions41.setWarningsGuard(composeWarningsGuard50);
        compilerOptions41.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach54 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions41.setInlineFunctions(reach54);
        compilerOptions31.setRemoveUnusedVariable(reach54);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setLabelRenaming(true);
        compilerOptions57.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean62 = compilerOptions57.labelRenaming;
        compilerOptions57.ambiguateProperties = false;
        boolean boolean65 = compilerOptions57.shouldColorizeErrorOutput();
        boolean boolean66 = compilerOptions57.crossModuleMethodMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel67 = compilerOptions57.checkMissingGetCssNameLevel;
        compilerOptions31.checkProvides = checkLevel67;
        compilerOptions31.setDevirtualizePrototypeMethods(true);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(format37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + reach54 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach54.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + checkLevel67 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel67.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setProtectHiddenSideEffects(true);
        boolean boolean11 = compilerOptions0.disambiguateProperties;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setRemoveUnusedVars(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName("// Input %num%");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("-1");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.prettyPrint = false;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setRenamePrefixNamespace("java.io.IOException: -1");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.checkMissingGetCssNameBlacklist = "Unversioned directory";
        compilerOptions0.resetWarningsGuard();
        java.lang.String str12 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.setOutputCharset("java.io.IOException: -1");
        compilerOptions0.setOptimizeParameters(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        printStream1.write((-1));
        printStream1.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup6;
        printStream1.print((java.lang.Object) diagnosticGroup6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions9.getTracerMode();
        compilerOptions9.lineBreak = false;
        compilerOptions9.resetWarningsGuard();
        compilerOptions9.setRemoveUnusedClassProperties(true);
        compilerOptions9.aliasExternals = false;
        printStream1.print((java.lang.Object) false);
        java.io.PrintStream printStream24 = new java.io.PrintStream("Unversioned directory");
        char[] charArray27 = new char[] { '4', '4' };
        printStream24.print(charArray27);
        printStream24.print((int) ' ');
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream24, false);
        printStream24.write((int) '#');
        printStream24.print((float) (short) 0);
        java.io.PrintStream printStream38 = new java.io.PrintStream("Unversioned directory");
        char[] charArray41 = new char[] { '4', '4' };
        printStream38.print(charArray41);
        printStream38.print((int) ' ');
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream38.write(byteArray51, (int) (byte) 0, (int) (byte) 1);
        printStream24.write(byteArray51);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setGeneratePseudoNames(true);
        compilerOptions56.inlineLocalFunctions = false;
        compilerOptions56.setIdeMode(true);
        compilerOptions56.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.setRewriteNewDateGoogNow(true);
        boolean boolean72 = compilerOptions69.extractPrototypeMemberDeclarations;
        compilerOptions69.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel75 = compilerOptions69.checkGlobalThisLevel;
        compilerOptions56.checkMissingReturn = checkLevel75;
        printStream24.println((java.lang.Object) compilerOptions56);
        java.io.PrintStream printStream79 = new java.io.PrintStream("Unversioned directory");
        char[] charArray82 = new char[] { '4', '4' };
        printStream79.print(charArray82);
        printStream79.print((int) ' ');
        java.io.PrintStream printStream86 = new java.io.PrintStream((java.io.OutputStream) printStream79);
        java.io.PrintStream printStream88 = new java.io.PrintStream("Unversioned directory");
        char[] charArray91 = new char[] { '4', '4' };
        printStream88.print(charArray91);
        printStream79.println(charArray91);
        printStream24.println(charArray91);
        printStream1.print(charArray91);
        printStream1.println('a');
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + checkLevel75 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel75.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[4, 4]");
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        java.io.InputStream inputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromInputStream("// Input %num%", "java.io.IOException: java.io.IOException: 2019/07/12 07:12", inputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        compilerOptions0.setCheckSuspiciousCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        boolean boolean31 = compilerOptions26.generateExports;
        compilerOptions26.collapseVariableDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions34.checkProvides;
        java.lang.String[] strArray43 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        compilerOptions34.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList44);
        compilerOptions26.setManageClosureDependencies((java.util.List<java.lang.String>) strList44);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList44);
        boolean boolean49 = compilerOptions0.coalesceVariableNames;
        compilerOptions0.setTweakToStringLiteral("java.io.IOException: java.io.IOException: 2019/07/12 07:12", "2019/07/12 07:12");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.renamePrefix = "hi!";
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setAliasableGlobals("");
        compilerOptions0.ambiguateProperties = false;
        boolean boolean27 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        compilerOptions0.inlineFunctions = false;
        compilerOptions0.locale = "// Input %num%";
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray32 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList33 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList33, locationMappingArray32);
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        compilerOptions35.convertToDottedProperties = true;
        boolean boolean41 = compilerOptions35.inlineConstantVars;
        boolean boolean42 = compilerOptions35.extractPrototypeMemberDeclarations;
        boolean boolean43 = compilerOptions35.reserveRawExports;
        boolean boolean44 = locationMappingList33.remove((java.lang.Object) boolean43);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention48 = null;
        compilerOptions45.setCodingConvention(codingConvention48);
        compilerOptions45.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet53 = compilerOptions52.stripNamePrefixes;
        compilerOptions45.setIdGenerators(strSet53);
        java.util.stream.Stream<java.lang.String> strStream55 = strSet53.stream();
        boolean boolean56 = locationMappingList33.retainAll((java.util.Collection<java.lang.String>) strSet53);
        compilerOptions0.setStripNameSuffixes(strSet53);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locationMappingArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        boolean boolean13 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy14 = compilerOptions0.variableRenaming;
        compilerOptions0.setSyntheticBlockEndMarker("4432#Unversionedhi!rector true\n0\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy14 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy14.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        printStream20.write((int) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach27 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions23.setInlineVariables(reach27);
        compilerOptions23.setPrintInputDelimiter(true);
        compilerOptions23.setExportTestFunctions(false);
        java.io.PrintStream printStream34 = new java.io.PrintStream("Unversioned directory");
        printStream34.write((-1));
        printStream34.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup39 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup39;
        printStream34.print((java.lang.Object) diagnosticGroup39);
        java.io.PrintStream printStream43 = new java.io.PrintStream("Unversioned directory");
        char[] charArray46 = new char[] { '4', '4' };
        printStream43.print(charArray46);
        printStream43.print((int) ' ');
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream43.write(byteArray56, (int) (byte) 0, (int) (byte) 1);
        printStream34.write(byteArray56, 0, 0);
        compilerOptions23.setInputVariableMapSerialized(byteArray56);
        printStream20.write(byteArray56);
        java.io.PrintStream printStream66 = printStream20.append((java.lang.CharSequence) "java.io.IOException: ");
        printStream20.flush();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + reach27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach27.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup39);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = null;
        compilerOptions0.setReportMissingOverride(checkLevel9);
        compilerOptions0.setNameReferenceReportPath("java.io.IOException");
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: Unversioned directory", 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        java.lang.String str17 = compilerOptions0.inputDelimiter;
        java.lang.String str18 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setInlineFunctions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray29 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList30 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList30, locationMappingArray29);
        compilerOptions21.sourceMapLocationMappings = locationMappingList30;
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions21.aggressiveVarCheck;
        boolean boolean34 = compilerOptions21.aliasAllStrings;
        compilerOptions21.setDefineToNumberLiteral("java.io.IOException", 100);
        compilerOptions21.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGeneratePseudoNames(true);
        compilerOptions40.inlineLocalFunctions = false;
        compilerOptions40.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        compilerOptions51.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention60 = null;
        compilerOptions57.setCodingConvention(codingConvention60);
        compilerOptions57.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel64 = compilerOptions57.checkProvides;
        compilerOptions51.setReportUnknownTypes(checkLevel64);
        compilerOptions40.setCheckGlobalNamesLevel(checkLevel64);
        compilerOptions21.setCheckMissingReturn(checkLevel64);
        compilerOptions0.setCheckProvides(checkLevel64);
        compilerOptions0.setReplaceIdGenerators(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "// Input %num%" + "'", str17, "// Input %num%");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + checkLevel64 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel64.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CodingConvention codingConvention10 = compilerOptions0.getCodingConvention();
        byte[] byteArray11 = compilerOptions0.inputPropertyMapSerialized;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(codingConvention10);
        org.junit.Assert.assertNull(byteArray11);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.print('4');
        java.io.PrintStream printStream16 = printStream11.append('#');
        boolean boolean17 = printStream16.checkError();
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.io.IOException iOException36 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException37 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException36);
        int int40 = locationMappingList1.indexOf((java.lang.Object) iOException36);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping41 = null;
        boolean boolean42 = locationMappingList1.add(locationMapping41);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping44 = locationMappingList1.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.print("Unversioned directory");
        java.util.Locale locale11 = null;
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup16 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup16;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator21 = null;
        com.google.javascript.jscomp.SourceFile sourceFile22 = builder19.buildFromGenerator("hi!", generator21);
        java.lang.Object[] objArray23 = new java.lang.Object[] { diagnosticGroup16, diagnosticGroup18, sourceFile22 };
        java.io.PrintStream printStream24 = printStream14.printf("2019/07/12 07:12", objArray23);
        java.io.PrintStream printStream27 = new java.io.PrintStream("Unversioned directory");
        char[] charArray30 = new char[] { '4', '4' };
        printStream27.print(charArray30);
        printStream27.print((int) ' ');
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream27, false);
        printStream27.write((int) '#');
        java.util.Locale locale38 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream42 = printStream27.format(locale38, "Unversioned directory", objArray41);
        java.io.PrintStream printStream43 = printStream24.format("hi!", objArray41);
        java.io.PrintStream printStream44 = printStream8.format(locale11, "", objArray41);
        java.io.PrintStream printStream46 = printStream44.append(' ');
        printStream46.println(true);
        printStream46.println((int) (short) 0);
        com.google.javascript.jscomp.Compiler compiler51 = new com.google.javascript.jscomp.Compiler(printStream46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Region region54 = compiler51.getSourceRegion("java.io.IOException: ", 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup16);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertNotNull(objArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream46);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel9 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel9;
        compilerOptions0.setSourceMapOutputPath("");
        compilerOptions0.setManageClosureDependencies(false);
        compilerOptions0.optimizeParameters = false;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        java.lang.String str18 = compilerOptions0.checkMissingGetCssNameBlacklist;
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = null;
        compilerOptions0.setDefineReplacements(strMap19);
        compilerOptions0.setTweakToBooleanLiteral("java.io.IOException: Unversioned directory", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.rewriteFunctionExpressions = false;
        boolean boolean9 = compilerOptions0.optimizeArgumentsArray;
        boolean boolean10 = compilerOptions0.optimizeCalls;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        compilerOptions0.setRecordFunctionInformation(true);
        java.lang.String str7 = compilerOptions0.locale;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel8 = compilerOptions0.sourceMapDetailLevel;
        compilerOptions0.setTweakToStringLiteral("java.io.IOException: ", "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveUnusedLocalVars(true);
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.checkTypes = false;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(detailLevel8);
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.resetWarningsGuard();
        boolean boolean9 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setInlineVariables(false);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean9 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.inlineConstantVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions12.checkProvides;
        compilerOptions0.checkRequires = checkLevel15;
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup10;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        compilerOptions14.collapseAnonymousFunctions = false;
        java.lang.String str21 = compilerOptions14.aliasStringsBlacklist;
        compilerOptions14.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        boolean boolean28 = compilerOptions24.jqueryPass;
        compilerOptions24.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention34 = null;
        compilerOptions31.setCodingConvention(codingConvention34);
        compilerOptions31.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions31.checkProvides;
        compilerOptions24.brokenClosureRequiresLevel = checkLevel38;
        compilerOptions14.setCheckGlobalThisLevel(checkLevel38);
        compilerOptions0.setWarningLevel(diagnosticGroup10, checkLevel38);
        compilerOptions0.setInferTypes(false);
        boolean boolean44 = compilerOptions0.checkSymbols;
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.skipAllCompilerPasses();
        boolean boolean48 = compilerOptions0.removeDeadCode;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        boolean boolean17 = compilerOptions12.generateExports;
        compilerOptions12.gatherCssNames = false;
        boolean boolean20 = compilerOptions12.optimizeReturns;
        compilerOptions12.smartNameRemoval = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        compilerOptions24.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions24.checkProvides;
        java.lang.String[] strArray33 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        compilerOptions24.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList34);
        java.util.stream.Stream<java.lang.String> strStream37 = strList34.stream();
        compilerOptions12.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList34);
        compilerOptions0.setReplaceStringsConfiguration("java.io.IOException: java.io.IOException: 2019/07/12 07:12", (java.util.List<java.lang.String>) strList34);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseAnonymousFunctions = true;
        compilerOptions0.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions0.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention50 = null;
        compilerOptions47.setCodingConvention(codingConvention50);
        compilerOptions47.setGeneratePseudoNames(true);
        compilerOptions47.inlineLocalFunctions = false;
        compilerOptions47.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setRewriteNewDateGoogNow(true);
        boolean boolean61 = compilerOptions58.extractPrototypeMemberDeclarations;
        compilerOptions58.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention67 = null;
        compilerOptions64.setCodingConvention(codingConvention67);
        compilerOptions64.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel71 = compilerOptions64.checkProvides;
        compilerOptions58.setReportUnknownTypes(checkLevel71);
        compilerOptions47.setCheckGlobalNamesLevel(checkLevel71);
        compilerOptions47.skipAllCompilerPasses();
        compilerOptions47.checkMissingGetCssNameBlacklist = "hi!";
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy77 = compilerOptions47.propertyRenaming;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy77);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions79 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setDependencyOptions(dependencyOptions79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + checkLevel71 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel71.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy77 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy77.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: ");
        compilerOptions0.setOptimizeArgumentsArray(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions0.checkRequires;
        compilerOptions0.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setComputeFunctionSideEffects(true);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypePrefixes;
        java.lang.String str18 = compilerOptions0.inputDelimiter;
        compilerOptions0.collapseAnonymousFunctions = false;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "// Input %num%" + "'", str18, "// Input %num%");
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet10 = compilerOptions9.stripNamePrefixes;
        byte[] byteArray11 = compilerOptions9.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach12 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions9.setInlineFunctions(reach12);
        compilerOptions0.setRemoveUnusedVariable(reach12);
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + reach12 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach12.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup9 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        boolean boolean21 = compilerOptions12.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup9, checkLevel22);
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup9;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean13 = compilerOptions8.labelRenaming;
        compilerOptions8.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        byte[] byteArray18 = compilerOptions16.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup19 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup19;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        compilerOptions16.setWarningLevel(diagnosticGroup19, checkLevel28);
        compilerOptions8.checkUnreachableCode = checkLevel28;
        compilerOptions0.setAggressiveVarCheck(checkLevel28);
        compilerOptions0.collapseVariableDeclarations = true;
        compilerOptions0.flowSensitiveInlineVariables = true;
        compilerOptions0.setOptimizeReturns(false);
        boolean boolean38 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.setRenamePrefix("Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(byteArray18);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup19);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.setReplaceIdGenerators(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        compilerOptions7.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet13 = compilerOptions7.stripTypePrefixes;
        compilerOptions6.stripTypePrefixes = strSet13;
        compilerOptions6.removeUnusedVars = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions17.reportMissingOverride;
        compilerOptions6.checkGlobalThisLevel = checkLevel49;
        compilerOptions0.setReportUnknownTypes(checkLevel49);
        compilerOptions0.setLineBreak(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        boolean boolean8 = compilerOptions0.checkTypes;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = null;
        compilerOptions0.setTracer(tracerMode9);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray11 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList12 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList12, locationMappingArray11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        compilerOptions14.setClosurePass(true);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray27);
        compilerOptions14.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet37 = compilerOptions31.stripTypePrefixes;
        compilerOptions14.aliasableStrings = strSet37;
        boolean boolean39 = locationMappingList12.removeAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup40 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup40;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup40;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup40;
        boolean boolean44 = locationMappingList12.contains((java.lang.Object) diagnosticGroup40);
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList12);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping46 = null;
        boolean boolean47 = locationMappingList12.add(locationMapping46);
        boolean boolean48 = locationMappingList12.isEmpty();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping50 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping51 = locationMappingList12.set(100, locationMapping50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("java.io.IOException: java.io.IOException: 2019/07/12 07:12", charset1);
        sourceFile2.clearCachedSource();
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.collapseVariableDeclarations = true;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = null;
        compilerOptions0.checkGlobalThisLevel = checkLevel13;
        compilerOptions0.reserveRawExports = false;
        compilerOptions0.collapseProperties = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.checkMissingGetCssNameBlacklist = "Unversioned directory";
        compilerOptions0.resetWarningsGuard();
        com.google.javascript.jscomp.DependencyOptions dependencyOptions12 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setDependencyOptions(dependencyOptions12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        compilerOptions0.setCrossModuleMethodMotion(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setPreferLineBreakAtEndOfFile(false);
        compilerOptions0.setDeadAssignmentElimination(false);
        compilerOptions0.jqueryPass = true;
        compilerOptions0.setNameReferenceReportPath("");
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        compilerOptions0.setTweakToNumberLiteral("Unversioned directory", (int) (short) 1);
        compilerOptions0.setSkipAllPasses(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        printStream1.print((double) 0.0f);
        printStream1.print(0L);
        char[] charArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.println(charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream16.println((double) 1);
        printStream16.flush();
        printStream16.print("// Input %num%");
        java.io.PrintStream printStream23 = printStream16.append((java.lang.CharSequence) "2019/07/12 07:12");
        printStream23.print(' ');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        java.nio.charset.Charset charset12 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder13 = builder11.withCharset(charset12);
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder13.buildFromFile("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile sourceFile18 = builder13.buildFromCode("java.io.IOException: ", "java.io.IOException");
        sourceFile18.setOriginalPath("");
        java.lang.String str21 = sourceFile18.getOriginalPath();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertNotNull(sourceFile18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        compilerOptions0.setInlineGetters(true);
        compilerOptions0.removeUnusedPrototypeProperties = true;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.setDebugFunctionSideEffectsPath("java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        boolean boolean15 = compilerOptions0.markNoSideEffectCalls;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setTweakToStringLiteral("Unversioned directory", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        boolean boolean17 = compilerOptions0.aliasExternals;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach22 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions18.setInlineVariables(reach22);
        boolean boolean24 = compilerOptions18.removeUnusedVars;
        boolean boolean25 = compilerOptions18.assumeClosuresOnlyCaptureReferences();
        compilerOptions18.setCheckControlStructures(true);
        compilerOptions18.inlineConstantVars = false;
        compilerOptions18.generateExports = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet38 = compilerOptions32.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap39 = compilerOptions32.cssRenamingMap;
        compilerOptions32.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach42 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions32.setInlineFunctions(reach42);
        compilerOptions18.setInlineVariables(reach42);
        compilerOptions0.setRemoveUnusedVariables(reach42);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + reach22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach22.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(cssRenamingMap39);
        org.junit.Assert.assertTrue("'" + reach42 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach42.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.setTransformAMDToCJSModules(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap18 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap18;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.generateExports = false;
        compilerOptions0.jqueryPass = true;
        compilerOptions0.inlineFunctions = false;
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.io.IOException: java.io.IOException: 2019/07/12 07:12", "4432#Unversionedhi!rector true\n0\n");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 4432#Unversionedhi!rector true?0?");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.setCheckSymbols(true);
        compilerOptions0.removeUnusedLocalVars = false;
        boolean boolean12 = compilerOptions0.foldConstants;
        compilerOptions0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((float) (short) 100);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList11 = compilerOptions0.sourceMapLocationMappings;
        boolean boolean12 = locationMappingList11.isEmpty();
        int int13 = locationMappingList11.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        compilerOptions10.setIdGenerators(strSet18);
        compilerOptions0.setStripNameSuffixes(strSet18);
        compilerOptions0.prettyPrint = false;
        boolean boolean23 = compilerOptions0.markAsCompiled;
        compilerOptions0.setSmartNameRemoval(true);
        compilerOptions0.setRewriteFunctionExpressions(true);
        compilerOptions0.setDefineToDoubleLiteral("2019/07/12 07:12", (double) 1);
        compilerOptions0.removeDeadCode = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.gatherCssNames = false;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap10 = compilerOptions0.getDefineReplacements();
        boolean boolean11 = compilerOptions0.checkTypes;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.closurePass = false;
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.setSpecializeInitialModule(false);
        boolean boolean47 = compilerOptions0.collapseAnonymousFunctions;
        compilerOptions0.setClosurePass(true);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.closurePass = true;
        boolean boolean25 = compilerOptions0.deadAssignmentElimination;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile sourceFile7 = builder0.buildFromFile("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("java.io.IOException: -1");
        com.google.javascript.jscomp.SourceFile.Generator generator11 = null;
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder0.buildFromGenerator("java.io.IOException: java.io.IOException: 2019/07/12 07:12", generator11);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print("4432#Unversionedhi!rector true\n0\n");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.setMarkAsCompiled(true);
        compilerOptions0.setInstrumentationTemplate("java.io.IOException: Unversioned directory");
        java.lang.String str12 = compilerOptions0.syntheticBlockStartMarker;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler9 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setLabelRenaming(true);
        compilerOptions10.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean15 = compilerOptions10.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions10.setAggressiveVarCheck(checkLevel22);
        compilerOptions0.checkMissingReturn = checkLevel22;
        compilerOptions0.setSyntheticBlockEndMarker("hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder5.withOriginalPath("");
        com.google.javascript.jscomp.SourceFile sourceFile10 = builder7.buildFromCode("-1", "java.io.IOException");
        sourceFile10.clearCachedSource();
        int int13 = sourceFile10.getColumnOfOffset((int) 'a');
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Generator generator11 = null;
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder9.buildFromGenerator("java.io.IOException: ", generator11);
        com.google.javascript.jscomp.SourceFile.Builder builder14 = builder9.withOriginalPath("hi!");
        java.nio.charset.Charset charset15 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder16 = builder9.withCharset(charset15);
        java.nio.charset.Charset charset17 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder18 = builder9.withCharset(charset17);
        java.io.File file19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile20 = builder9.buildFromFile(file19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach24 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions20.setInlineVariables(reach24);
        compilerOptions20.setPrintInputDelimiter(true);
        boolean boolean28 = compilerOptions20.closurePass;
        boolean boolean29 = compilerOptions20.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions20.checkMissingGetCssNameLevel;
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel30);
        boolean boolean32 = compilerOptions0.rewriteFunctionExpressions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.convertToDottedProperties = true;
        boolean boolean39 = compilerOptions33.inlineConstantVars;
        boolean boolean40 = compilerOptions33.extractPrototypeMemberDeclarations;
        boolean boolean41 = compilerOptions33.reserveRawExports;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel42 = null;
        compilerOptions33.sourceMapDetailLevel = detailLevel42;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        boolean boolean47 = compilerOptions44.extractPrototypeMemberDeclarations;
        compilerOptions44.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions44.checkGlobalThisLevel;
        compilerOptions44.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode53 = compilerOptions44.getTracerMode();
        compilerOptions33.setTracerMode(tracerMode53);
        compilerOptions0.setTracerMode(tracerMode53);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + reach24 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach24.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode53 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode53.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.ErrorFormat errorFormat8 = compilerOptions0.errorFormat;
        boolean boolean9 = compilerOptions0.foldConstants;
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException: ", "java.io.IOException", "Unversioned directory");
        java.lang.String str4 = sourceFile3.toString();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: " + "'", str4, "java.io.IOException: ");
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.renamePrefix = "";
        compilerOptions0.closurePass = false;
        compilerOptions0.setAliasStringsBlacklist("Unversioned directory");
        boolean boolean12 = compilerOptions0.removeUnusedClassProperties;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException");
        compilerOptions0.setMoveFunctionDeclarations(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        double double3 = compiler1.getProgress();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result4 = compiler1.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        com.google.javascript.jscomp.MessageBundle messageBundle19 = null;
        compilerOptions0.messageBundle = messageBundle19;
        boolean boolean21 = compilerOptions0.disambiguateProperties;
        java.util.Set<java.lang.String> strSet22 = null;
        compilerOptions0.aliasableStrings = strSet22;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap24 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.io.IOException iOException36 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException37 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException36);
        int int40 = locationMappingList1.indexOf((java.lang.Object) iOException36);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping41 = null;
        boolean boolean42 = locationMappingList1.add(locationMapping41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor44 = locationMappingList1.listIterator((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.setCheckSymbols(true);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions0.setInputVariableMapSerialized(byteArray14);
        java.lang.String str16 = compilerOptions0.renamePrefix;
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setRuntimeTypeCheckLogFunction("java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, 10]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Generator generator11 = null;
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder9.buildFromGenerator("java.io.IOException: ", generator11);
        com.google.javascript.jscomp.SourceFile.Generator generator14 = null;
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder9.buildFromGenerator("2019/07/12 07:12", generator14);
        sourceFile15.setOriginalPath("Unversioned directory");
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(sourceFile15);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = null;
        compilerOptions0.setReportMissingOverride(checkLevel9);
        com.google.javascript.jscomp.SourceMap.Format format11 = null;
        compilerOptions0.setSourceMapFormat(format11);
        compilerOptions0.enableExternExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention18 = null;
        compilerOptions15.setCodingConvention(codingConvention18);
        compilerOptions15.setGeneratePseudoNames(true);
        compilerOptions15.inlineLocalFunctions = false;
        compilerOptions15.setIdeMode(true);
        boolean boolean26 = compilerOptions15.crossModuleMethodMotion;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup27 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup27;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup27;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup27;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet32 = compilerOptions31.stripNamePrefixes;
        byte[] byteArray33 = compilerOptions31.inputVariableMapSerialized;
        boolean boolean34 = compilerOptions31.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setLabelRenaming(true);
        compilerOptions35.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions35.checkGlobalThisLevel;
        compilerOptions31.setCheckGlobalNamesLevel(checkLevel40);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention45 = null;
        compilerOptions42.setCodingConvention(codingConvention45);
        boolean boolean47 = compilerOptions42.computeFunctionSideEffects;
        boolean boolean48 = compilerOptions42.printInputDelimiter;
        compilerOptions42.setGeneratePseudoNames(true);
        boolean boolean51 = compilerOptions42.disambiguateProperties;
        java.util.Set<java.lang.String> strSet52 = compilerOptions42.aliasableStrings;
        compilerOptions31.stripNameSuffixes = strSet52;
        com.google.javascript.jscomp.CheckLevel checkLevel54 = compilerOptions31.checkProvides;
        compilerOptions15.setWarningLevel(diagnosticGroup27, checkLevel54);
        compilerOptions0.checkGlobalNamesLevel = checkLevel54;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup27);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + checkLevel54 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel54.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setCheckControlStructures(false);
        compilerOptions0.setRemoveAbstractMethods(false);
        compilerOptions0.recordFunctionInformation = false;
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy8 = compilerOptions0.anonymousFunctionNaming;
        compilerOptions0.setReportPath("Unversioned directory");
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.checkMissingReturn;
        compilerOptions0.setExportTestFunctions(false);
        compilerOptions0.setReportPath("2019/07/12 07:12");
        compilerOptions0.setGatherCssNames(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy8 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy8.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.prettyPrint = false;
        boolean boolean14 = compilerOptions0.checkSuspiciousCode;
        compilerOptions0.setCollapseAnonymousFunctions(false);
        compilerOptions0.optimizeArgumentsArray = false;
        boolean boolean19 = compilerOptions0.lineBreak;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean12 = compilerOptions0.removeDeadCode;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel13 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel13;
        compilerOptions0.removeUnusedVars = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        int int6 = sourceFile2.getLineOfOffset((int) (short) 10);
        java.lang.String str7 = sourceFile2.getOriginalPath();
        sourceFile2.clearCachedSource();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        sourceFile2.setOriginalPath("");
        sourceFile2.setOriginalPath("");
        java.lang.String str9 = sourceFile2.toString();
        com.google.javascript.jscomp.Region region11 = sourceFile2.getRegion(32);
        java.lang.String str13 = sourceFile2.getLine(52);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(region11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setClosurePass(true);
        boolean boolean7 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.enableExternExports(true);
        java.util.Set<java.lang.String> strSet11 = compilerOptions8.stripTypes;
        compilerOptions8.setRemoveUnusedVars(true);
        compilerOptions8.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        byte[] byteArray19 = compilerOptions17.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions17.setInlineFunctions(reach20);
        compilerOptions8.setRemoveUnusedVariable(reach20);
        compilerOptions0.setRemoveUnusedVariables(reach20);
        boolean boolean24 = compilerOptions0.recordFunctionInformation;
        compilerOptions0.setChainCalls(true);
        java.lang.Object obj27 = compilerOptions0.clone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setPrettyPrint(true);
        compilerOptions0.sourceMapOutputPath = "hi!";
        compilerOptions0.setInlineVariables(false);
        compilerOptions0.aliasKeywords = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        compilerOptions0.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach10 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions0.setInlineFunctions(reach10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet18 = compilerOptions12.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap19 = compilerOptions12.cssRenamingMap;
        compilerOptions12.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach22 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions12.setInlineFunctions(reach22);
        compilerOptions0.setRemoveUnusedVariable(reach22);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.setIgnoreCajaProperties(true);
        compilerOptions0.setSmartNameRemoval(true);
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException: Unversioned directory";
        compilerOptions0.recordFunctionInformation = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertTrue("'" + reach10 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach10.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(cssRenamingMap19);
        org.junit.Assert.assertTrue("'" + reach22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach22.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        com.google.javascript.jscomp.MessageBundle messageBundle19 = null;
        compilerOptions0.messageBundle = messageBundle19;
        boolean boolean21 = compilerOptions0.disambiguateProperties;
        compilerOptions0.instrumentationTemplate = "Unversioned directory";
        compilerOptions0.setAliasStringsBlacklist("// Input %num%");
        compilerOptions0.setInlineLocalVariables(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream16.println((float) (-1L));
        java.io.PrintStream printStream20 = printStream16.append('#');
        printStream20.write((int) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach27 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions23.setInlineVariables(reach27);
        compilerOptions23.setPrintInputDelimiter(true);
        compilerOptions23.setExportTestFunctions(false);
        java.io.PrintStream printStream34 = new java.io.PrintStream("Unversioned directory");
        printStream34.write((-1));
        printStream34.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup39 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup39;
        printStream34.print((java.lang.Object) diagnosticGroup39);
        java.io.PrintStream printStream43 = new java.io.PrintStream("Unversioned directory");
        char[] charArray46 = new char[] { '4', '4' };
        printStream43.print(charArray46);
        printStream43.print((int) ' ');
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream43.write(byteArray56, (int) (byte) 0, (int) (byte) 1);
        printStream34.write(byteArray56, 0, 0);
        compilerOptions23.setInputVariableMapSerialized(byteArray56);
        printStream20.write(byteArray56);
        java.io.PrintStream printStream66 = printStream20.append((java.lang.CharSequence) "java.io.IOException: ");
        printStream20.println();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + reach27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach27.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup39);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        boolean boolean9 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setAliasAllStrings(true);
        compilerOptions0.setRewriteFunctionExpressions(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.setCoalesceVariableNames(true);
        compilerOptions0.setOptimizeParameters(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.setExternExports(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("hi!", "java.io.IOException: java.io.IOException: java.io.IOException: ");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException: java.io.IOException: java.io.IOException: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        java.io.PrintStream printStream15 = new java.io.PrintStream("Unversioned directory");
        char[] charArray18 = new char[] { '4', '4' };
        printStream15.print(charArray18);
        printStream15.print((int) ' ');
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream15.write(byteArray28, (int) (byte) 0, (int) (byte) 1);
        printStream1.write(byteArray28);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format6 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        compilerOptions0.checkMissingGetCssNameBlacklist = "hi!";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(format6);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream1.println(charArray13);
        printStream1.write((int) (short) 10);
        printStream1.print((int) (short) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.flowSensitiveInlineVariables = false;
        compilerOptions20.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        java.io.PrintStream printStream29 = new java.io.PrintStream("Unversioned directory");
        char[] charArray32 = new char[] { '4', '4' };
        printStream29.print(charArray32);
        printStream29.print((int) ' ');
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream29, false);
        printStream29.write((int) '#');
        printStream29.print((float) (short) 0);
        printStream29.println("java.io.IOException");
        java.util.Locale locale44 = null;
        java.io.PrintStream printStream47 = new java.io.PrintStream("Unversioned directory");
        char[] charArray50 = new char[] { '4', '4' };
        printStream47.print(charArray50);
        printStream47.print((int) ' ');
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream47, false);
        printStream47.write((int) '#');
        java.util.Locale locale58 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream62 = printStream47.format(locale58, "Unversioned directory", objArray61);
        java.io.PrintStream printStream63 = printStream29.printf(locale44, "Unversioned directory", objArray61);
        printStream63.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention68 = null;
        compilerOptions65.setCodingConvention(codingConvention68);
        boolean boolean70 = compilerOptions65.generateExports;
        compilerOptions65.printInputDelimiter = false;
        compilerOptions65.setCheckSymbols(true);
        byte[] byteArray79 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions65.setInputVariableMapSerialized(byteArray79);
        printStream63.write(byteArray79);
        compilerOptions20.inputVariableMapSerialized = byteArray79;
        printStream1.write(byteArray79);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1, 100, 10, 10]");
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineFunctions(reach13);
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.devirtualizePrototypeMethods = true;
        compilerOptions0.setAliasAllStrings(true);
        boolean boolean21 = compilerOptions0.removeUnusedVars;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.io.IOException iOException36 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException37 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException36);
        int int40 = locationMappingList1.indexOf((java.lang.Object) iOException36);
        int int41 = locationMappingList1.size();
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention45 = null;
        compilerOptions42.setCodingConvention(codingConvention45);
        boolean boolean47 = compilerOptions42.generateExports;
        compilerOptions42.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy53 = compilerOptions50.variableRenaming;
        compilerOptions42.setVariableRenaming(variableRenamingPolicy53);
        compilerOptions42.printInputDelimiter = false;
        int int57 = locationMappingList1.lastIndexOf((java.lang.Object) compilerOptions42);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping58 = null;
        boolean boolean59 = locationMappingList1.add(locationMapping58);
        java.util.Collection<java.lang.String> strCollection60 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = locationMappingList1.retainAll(strCollection60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy53 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy53.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = null;
        compilerOptions0.setTweakReplacements(strMap42);
        compilerOptions0.setOptimizeReturns(false);
        java.lang.String str46 = compilerOptions0.locale;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel19;
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        compilerOptions0.setDefineReplacements(strMap21);
        compilerOptions0.checkControlStructures = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.convertToDottedProperties = true;
        boolean boolean31 = compilerOptions25.inlineConstantVars;
        compilerOptions25.setInlineVariables(true);
        boolean boolean34 = compilerOptions25.generateExports;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        boolean boolean39 = compilerOptions35.jqueryPass;
        compilerOptions35.collapseAnonymousFunctions = false;
        compilerOptions35.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler44 = compilerOptions35.getAliasTransformationHandler();
        compilerOptions25.setAliasTransformationHandler(aliasTransformationHandler44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention49 = null;
        compilerOptions46.setCodingConvention(codingConvention49);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode51 = compilerOptions46.getTracerMode();
        compilerOptions25.setTracer(tracerMode51);
        compilerOptions0.setTracer(tracerMode51);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler44);
        org.junit.Assert.assertTrue("'" + tracerMode51 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode51.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        java.util.Set<java.lang.String> strSet9 = compilerOptions0.aliasableStrings;
        compilerOptions0.setPrintInputDelimiter(false);
        compilerOptions0.setMoveFunctionDeclarations(false);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy14 = null;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy14;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.aggressiveVarCheck;
        boolean boolean13 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setAppNameStr("");
        compilerOptions0.generatePseudoNames = false;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.rewriteFunctionExpressions = false;
        compilerOptions0.setProcessCommonJSModules(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap8;
        compilerOptions0.checkSuspiciousCode = true;
        compilerOptions0.setOutputJsStringUsage(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup9 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        boolean boolean21 = compilerOptions12.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup9, checkLevel22);
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup9;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("Unversioned directory", "hi!");
        sourceFile2.setOriginalPath("-1");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        java.lang.String str3 = compiler1.getAstDotGraph();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputIdMap4 = compiler1.getInputsById();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        compiler1.reportCodeChange();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = compiler1.acceptConstKeyword();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel5 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel5;
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setLabelRenaming(true);
        compilerOptions7.reserveRawExports = true;
        compilerOptions7.setCollapsePropertiesOnExternTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet15 = compilerOptions14.stripNamePrefixes;
        byte[] byteArray16 = compilerOptions14.inputVariableMapSerialized;
        compilerOptions14.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler19 = compilerOptions14.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy20 = compilerOptions14.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach25 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions21.setInlineVariables(reach25);
        compilerOptions21.setPrintInputDelimiter(true);
        boolean boolean29 = compilerOptions21.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle30 = null;
        compilerOptions21.messageBundle = messageBundle30;
        compilerOptions21.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        compilerOptions35.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet41 = compilerOptions35.stripTypePrefixes;
        compilerOptions34.stripTypePrefixes = strSet41;
        compilerOptions21.setAliasableStrings(strSet41);
        compilerOptions14.stripTypePrefixes = strSet41;
        compilerOptions7.setStripNameSuffixes(strSet41);
        compilerOptions0.setAliasableStrings(strSet41);
        compilerOptions0.syntheticBlockStartMarker = "4432#Unversionedhi!rector true\n0\n";
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(aliasTransformationHandler19);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy20 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy20.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + reach25 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach25.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet41);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        compilerOptions11.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions11.checkProvides;
        java.util.Set<java.lang.String> strSet19 = compilerOptions11.stripTypes;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy20 = compilerOptions11.variableRenaming;
        compilerOptions0.setVariableRenaming(variableRenamingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy20 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy20.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        compilerOptions10.setIdGenerators(strSet18);
        compilerOptions0.setStripNameSuffixes(strSet18);
        compilerOptions0.prettyPrint = false;
        java.lang.String str23 = compilerOptions0.sourceMapOutputPath;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions0.setStripTypePrefixes(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        boolean boolean31 = compilerOptions27.jqueryPass;
        boolean boolean32 = compilerOptions27.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setLabelRenaming(true);
        compilerOptions33.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean38 = compilerOptions33.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format39 = compilerOptions33.sourceMapFormat;
        compilerOptions27.setSourceMapFormat(format39);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        boolean boolean44 = compilerOptions41.extractPrototypeMemberDeclarations;
        compilerOptions41.setCollapseProperties(false);
        compilerOptions41.setClosurePass(true);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions41.setInputPropertyMapSerialized(byteArray54);
        compilerOptions41.setFlowSensitiveInlineVariables(true);
        boolean boolean58 = compilerOptions41.exportTestFunctions;
        compilerOptions41.closurePass = false;
        com.google.javascript.jscomp.ErrorFormat errorFormat61 = compilerOptions41.errorFormat;
        compilerOptions27.setErrorFormat(errorFormat61);
        compilerOptions0.setErrorFormat(errorFormat61);
        compilerOptions0.setLineBreak(false);
        boolean boolean66 = compilerOptions0.markAsCompiled;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(format39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(errorFormat61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy12 = compilerOptions0.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach17 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineVariables(reach17);
        boolean boolean19 = compilerOptions13.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap20 = null;
        compilerOptions13.cssRenamingMap = cssRenamingMap20;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing22 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions13.setTweakProcessing(tweakProcessing22);
        compilerOptions13.setDefineToNumberLiteral("java.io.IOException: ", (int) (short) 10);
        compilerOptions13.renamePrefixNamespace = "java.io.IOException: ";
        java.util.Set<java.lang.String> strSet29 = compilerOptions13.aliasableStrings;
        compilerOptions0.stripTypePrefixes = strSet29;
        compilerOptions0.setLocale("");
        byte[] byteArray33 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.rewriteFunctionExpressions = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy12 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy12.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + reach17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach17.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing22.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray33);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setMarkNoSideEffectCalls(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setLocale("Unversioned directory");
        compilerOptions0.setCheckCaja(true);
        java.lang.String str9 = compilerOptions0.sourceMapOutputPath;
        java.lang.String str10 = compilerOptions0.inputDelimiter;
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "// Input %num%" + "'", str10, "// Input %num%");
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup29;
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean9 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.inlineConstantVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions12.checkProvides;
        compilerOptions0.checkRequires = checkLevel15;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        byte[] byteArray19 = compilerOptions17.inputVariableMapSerialized;
        boolean boolean20 = compilerOptions17.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode21 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions17.setLanguageIn(languageMode21);
        compilerOptions17.setNameAnonymousFunctionsOnly(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.setCollapseProperties(false);
        compilerOptions25.setClosurePass(true);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions25.setInputPropertyMapSerialized(byteArray38);
        compilerOptions25.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions25.reportMissingOverride;
        compilerOptions17.setCheckGlobalNamesLevel(checkLevel42);
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel42);
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + languageMode21 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode21.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        printStream1.println("java.io.IOException");
        java.io.PrintStream printStream17 = new java.io.PrintStream("Unversioned directory");
        char[] charArray20 = new char[] { '4', '4' };
        printStream17.print(charArray20);
        printStream17.print((int) ' ');
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        printStream17.write((int) '#');
        java.util.Locale locale28 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream32 = printStream17.format(locale28, "Unversioned directory", objArray31);
        printStream32.println((double) 1);
        printStream32.print(1L);
        java.io.PrintStream printStream38 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream40 = new java.io.PrintStream("Unversioned directory");
        char[] charArray43 = new char[] { '4', '4' };
        printStream40.print(charArray43);
        printStream38.print(charArray43);
        printStream32.println(charArray43);
        printStream1.println(charArray43);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, 4]");
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy7 = compilerOptions0.propertyRenaming;
        compilerOptions0.setOutputCharset("Unversioned directory");
        compilerOptions0.setCheckCaja(false);
        compilerOptions0.setReserveRawExports(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy7 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy7.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        boolean boolean9 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.setInlineConstantVars(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setSpecializeInitialModule(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap17 = compilerOptions0.customPasses;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap17);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.setShadowVariables(true);
        compilerOptions0.setIdeMode(true);
        compilerOptions0.setGatherCssNames(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        compilerOptions14.collapseAnonymousFunctions = false;
        compilerOptions14.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler23 = compilerOptions14.getAliasTransformationHandler();
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setLabelRenaming(true);
        compilerOptions24.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean29 = compilerOptions24.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions24.setAggressiveVarCheck(checkLevel36);
        compilerOptions14.checkMissingReturn = checkLevel36;
        compilerOptions0.aggressiveVarCheck = checkLevel36;
        compilerOptions0.aliasExternals = true;
        compilerOptions0.labelRenaming = false;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions44 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setDependencyOptions(dependencyOptions44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", "hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        boolean boolean8 = compilerOptions0.labelRenaming;
        compilerOptions0.setColorizeErrorOutput(true);
        boolean boolean11 = compilerOptions0.crossModuleCodeMotion;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        compilerOptions0.disableRuntimeTypeCheck();
        compilerOptions0.removeUnusedPrototypeProperties = true;
        boolean boolean11 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromGenerator("java.io.IOException", generator1);
        java.lang.String str3 = sourceFile2.getOriginalPath();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = sourceFile2.getLine((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException" + "'", str3, "java.io.IOException");
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK;
        com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream1.println(charArray13);
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup21;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup23 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder24 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator26 = null;
        com.google.javascript.jscomp.SourceFile sourceFile27 = builder24.buildFromGenerator("hi!", generator26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { diagnosticGroup21, diagnosticGroup23, sourceFile27 };
        java.io.PrintStream printStream29 = printStream19.printf("2019/07/12 07:12", objArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("Unversioned directory");
        char[] charArray35 = new char[] { '4', '4' };
        printStream32.print(charArray35);
        printStream32.print((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        printStream32.write((int) '#');
        java.util.Locale locale43 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream47 = printStream32.format(locale43, "Unversioned directory", objArray46);
        java.io.PrintStream printStream48 = printStream29.format("hi!", objArray46);
        java.io.PrintStream printStream49 = printStream1.printf(locale16, "java.io.IOException: ", objArray46);
        printStream49.print(false);
        printStream49.close();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup21);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup23);
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertNotNull(objArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream49);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        sourceFile2.setOriginalPath("");
        boolean boolean7 = sourceFile2.isExtern();
        int int9 = sourceFile2.getLineOfOffset((int) ' ');
        java.lang.String str11 = sourceFile2.getLine((int) (short) 1);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedLocalVars = false;
        compilerOptions0.markAsCompiled = false;
        compilerOptions0.smartNameRemoval = true;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream3 = new java.io.PrintStream("Unversioned directory");
        char[] charArray6 = new char[] { '4', '4' };
        printStream3.print(charArray6);
        printStream1.print(charArray6);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream10.print((int) ' ');
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream10.write(byteArray23, (int) (byte) 0, (int) (byte) 1);
        printStream1.write(byteArray23);
        printStream1.write(97);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setCheckSymbols(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        boolean boolean19 = compilerOptions13.inlineConstantVars;
        boolean boolean20 = compilerOptions13.extractPrototypeMemberDeclarations;
        boolean boolean21 = compilerOptions13.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard22 = null;
        compilerOptions13.setWarningsGuard(composeWarningsGuard22);
        compilerOptions13.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach26 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineFunctions(reach26);
        compilerOptions0.setRemoveUnusedVariables(reach26);
        boolean boolean29 = compilerOptions0.gatherCssNames;
        compilerOptions0.checkControlStructures = true;
        com.google.javascript.jscomp.CheckLevel checkLevel32 = null;
        compilerOptions0.setCheckUnreachableCode(checkLevel32);
        compilerOptions0.setRemoveTryCatchFinally(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + reach26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach26.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        compilerOptions0.setSkipAllPasses(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap26 = compilerOptions0.getDefineReplacements();
        com.google.javascript.jscomp.CheckLevel checkLevel27 = compilerOptions0.checkRequires;
        compilerOptions0.disableRuntimeTypeCheck();
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions0.checkUnreachableCode;
        com.google.javascript.jscomp.MessageBundle messageBundle30 = null;
        compilerOptions0.setMessageBundle(messageBundle30);
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions0.checkRequires;
        compilerOptions0.setRemoveUnusedVars(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + checkLevel27 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel27.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        boolean boolean19 = compilerOptions15.jqueryPass;
        compilerOptions15.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions22.checkGlobalThisLevel;
        compilerOptions15.checkProvides = checkLevel28;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.convertToDottedProperties = true;
        boolean boolean36 = compilerOptions30.inlineConstantVars;
        boolean boolean37 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.optimizeCalls = true;
        compilerOptions30.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach46 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions42.setInlineVariables(reach46);
        compilerOptions42.setPrintInputDelimiter(true);
        boolean boolean50 = compilerOptions42.closurePass;
        compilerOptions42.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setRewriteNewDateGoogNow(true);
        boolean boolean56 = compilerOptions53.extractPrototypeMemberDeclarations;
        boolean boolean57 = compilerOptions53.jqueryPass;
        boolean boolean58 = compilerOptions53.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setLabelRenaming(true);
        compilerOptions59.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean64 = compilerOptions59.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format65 = compilerOptions59.sourceMapFormat;
        compilerOptions53.setSourceMapFormat(format65);
        compilerOptions42.setSourceMapFormat(format65);
        compilerOptions30.sourceMapFormat = format65;
        compilerOptions15.sourceMapFormat = format65;
        compilerOptions0.sourceMapFormat = format65;
        boolean boolean71 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        boolean boolean76 = compilerOptions0.crossModuleCodeMotion;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + reach46 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach46.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(format65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        boolean boolean15 = compilerOptions11.jqueryPass;
        boolean boolean16 = compilerOptions11.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setLabelRenaming(true);
        compilerOptions17.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean22 = compilerOptions17.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format23 = compilerOptions17.sourceMapFormat;
        compilerOptions11.setSourceMapFormat(format23);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing25 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions11.setTweakProcessing(tweakProcessing25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions27.checkProvides;
        java.util.Set<java.lang.String> strSet35 = compilerOptions27.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.stream();
        compilerOptions11.stripTypes = strSet35;
        compilerOptions0.setAliasableStrings(strSet35);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap39 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap39;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap41 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap41;
        compilerOptions0.generatePseudoNames = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(format23);
        org.junit.Assert.assertTrue("'" + tweakProcessing25 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing25.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean12 = compilerOptions0.removeDeadCode;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions0.checkGlobalNamesLevel;
        java.lang.String str14 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode15 = compilerOptions0.getTracerMode();
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap16 = compilerOptions0.customPasses;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + tracerMode15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode15.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap16);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean12 = compilerOptions0.removeDeadCode;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions0.checkGlobalNamesLevel;
        java.lang.String str14 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode15 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy16 = compilerOptions0.variableRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setLabelRenaming(true);
        compilerOptions17.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy22 = compilerOptions17.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setLabelRenaming(true);
        compilerOptions23.reserveRawExports = true;
        compilerOptions23.setCollapsePropertiesOnExternTypes(false);
        compilerOptions23.setInlineProperties(false);
        boolean boolean32 = compilerOptions23.labelRenaming;
        boolean boolean33 = compilerOptions23.aliasKeywords;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        boolean boolean39 = compilerOptions34.generateExports;
        compilerOptions34.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing42 = compilerOptions34.getTweakProcessing();
        compilerOptions34.setProtectHiddenSideEffects(true);
        compilerOptions34.aliasAllStrings = true;
        compilerOptions34.setCheckSuspiciousCode(false);
        compilerOptions34.setCollapsePropertiesOnExternTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach55 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions51.setInlineVariables(reach55);
        compilerOptions51.lineBreak = false;
        compilerOptions51.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention64 = null;
        compilerOptions61.setCodingConvention(codingConvention64);
        compilerOptions61.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet69 = compilerOptions68.stripNamePrefixes;
        compilerOptions61.setIdGenerators(strSet69);
        com.google.javascript.jscomp.CompilerOptions compilerOptions71 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions71.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention74 = null;
        compilerOptions71.setCodingConvention(codingConvention74);
        compilerOptions71.setGeneratePseudoNames(true);
        compilerOptions71.inlineLocalFunctions = false;
        compilerOptions71.setIdeMode(true);
        compilerOptions71.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions84 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions84.setRewriteNewDateGoogNow(true);
        boolean boolean87 = compilerOptions84.extractPrototypeMemberDeclarations;
        compilerOptions84.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel90 = compilerOptions84.checkGlobalThisLevel;
        compilerOptions71.checkMissingReturn = checkLevel90;
        compilerOptions61.aggressiveVarCheck = checkLevel90;
        com.google.javascript.jscomp.CheckLevel checkLevel93 = compilerOptions61.reportMissingOverride;
        compilerOptions51.setReportUnknownTypes(checkLevel93);
        compilerOptions34.setCheckProvides(checkLevel93);
        compilerOptions23.checkGlobalThisLevel = checkLevel93;
        compilerOptions17.checkUnreachableCode = checkLevel93;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + tracerMode15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode15.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy16 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy16.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy22 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy22.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing42 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing42.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + reach55 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach55.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + checkLevel90 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel90.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel93 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel93.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.removeUnusedVars = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        compilerOptions11.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet19 = compilerOptions18.stripNamePrefixes;
        compilerOptions11.setIdGenerators(strSet19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGeneratePseudoNames(true);
        compilerOptions21.inlineLocalFunctions = false;
        compilerOptions21.setIdeMode(true);
        compilerOptions21.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions34.checkGlobalThisLevel;
        compilerOptions21.checkMissingReturn = checkLevel40;
        compilerOptions11.aggressiveVarCheck = checkLevel40;
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions11.reportMissingOverride;
        compilerOptions0.checkGlobalThisLevel = checkLevel43;
        compilerOptions0.computeFunctionSideEffects = true;
        compilerOptions0.closurePass = false;
        compilerOptions0.removeUnusedClassProperties = true;
        boolean boolean51 = compilerOptions0.jqueryPass;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + checkLevel40 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel40.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("java.io.IOException: -1");
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.ideMode = false;
        compilerOptions0.disambiguateProperties = true;
        compilerOptions0.setIgnoreCajaProperties(false);
        boolean boolean17 = compilerOptions0.ideMode;
        compilerOptions0.setInlineLocalVariables(false);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap20 = compilerOptions0.customPasses;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap20);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        java.io.PrintStream printStream15 = new java.io.PrintStream("Unversioned directory");
        char[] charArray18 = new char[] { '4', '4' };
        printStream15.print(charArray18);
        printStream15.print((int) ' ');
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream15.write(byteArray28, (int) (byte) 0, (int) (byte) 1);
        printStream1.write(byteArray28);
        java.io.PrintStream printStream34 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup36 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup36;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup38 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder39 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator41 = null;
        com.google.javascript.jscomp.SourceFile sourceFile42 = builder39.buildFromGenerator("hi!", generator41);
        java.lang.Object[] objArray43 = new java.lang.Object[] { diagnosticGroup36, diagnosticGroup38, sourceFile42 };
        java.io.PrintStream printStream44 = printStream34.printf("2019/07/12 07:12", objArray43);
        printStream44.println();
        printStream44.print('4');
        printStream44.println(1L);
        printStream44.println(false);
        printStream44.print(10.0f);
        printStream44.write((int) (byte) 1);
        java.io.PrintStream printStream57 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream59 = new java.io.PrintStream("Unversioned directory");
        char[] charArray62 = new char[] { '4', '4' };
        printStream59.print(charArray62);
        printStream57.print(charArray62);
        printStream44.print(charArray62);
        printStream1.print(charArray62);
        printStream1.println((float) (byte) 100);
        printStream1.close();
        printStream1.println((double) 0L);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup36);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup38);
        org.junit.Assert.assertNotNull(sourceFile42);
        org.junit.Assert.assertNotNull(objArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[4, 4]");
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.closurePass = true;
        boolean boolean12 = compilerOptions0.markAsCompiled;
        compilerOptions0.ideMode = false;
        boolean boolean15 = compilerOptions0.printInputDelimiter;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker3 = compiler0.tracker;
        com.google.javascript.jscomp.JSModule jSModule4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray5 = compiler0.toSourceArray(jSModule4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(performanceTracker3);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        boolean boolean4 = compilerOptions0.removeUnusedVars;
        compilerOptions0.setCommonJSModulePathPrefix("java.io.IOException: ");
        compilerOptions0.setRemoveUnusedPrototypeProperties(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = compilerOptions0.messageBundle;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(messageBundle9);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.setSourceMapOutputPath("");
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing9 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions0.setTweakProcessing(tweakProcessing9);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.aliasExternals = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing9.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setRemoveUnusedClassProperties(true);
        compilerOptions0.setLooseTypes(false);
        boolean boolean13 = compilerOptions0.crossModuleMethodMotion;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        compilerOptions7.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler12 = compilerOptions7.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy13 = compilerOptions7.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach18 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions14.setInlineVariables(reach18);
        compilerOptions14.setPrintInputDelimiter(true);
        boolean boolean22 = compilerOptions14.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle23 = null;
        compilerOptions14.messageBundle = messageBundle23;
        compilerOptions14.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        compilerOptions27.stripTypePrefixes = strSet34;
        compilerOptions14.setAliasableStrings(strSet34);
        compilerOptions7.stripTypePrefixes = strSet34;
        compilerOptions0.setStripNameSuffixes(strSet34);
        compilerOptions0.setTweakToNumberLiteral("Unversioned directory", 0);
        compilerOptions0.instrumentationTemplate = "Unversioned directory";
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap44 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap44;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(aliasTransformationHandler12);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy13 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy13.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + reach18 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach18.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        compilerOptions0.coalesceVariableNames = true;
        compilerOptions0.setRemoveUnusedClassProperties(false);
        compilerOptions0.setProcessCommonJSModules(true);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.setMarkAsCompiled(true);
        boolean boolean11 = compilerOptions0.ideMode;
        boolean boolean12 = compilerOptions0.collapseProperties;
        compilerOptions0.setDefineToStringLiteral("java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions0.setTweakToNumberLiteral("2019/07/12 07:12", 10);
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.ErrorFormat errorFormat10 = compilerOptions0.errorFormat;
        compilerOptions0.setInlineProperties(true);
        org.junit.Assert.assertNotNull(errorFormat10);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler8 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.inlineConstantVars = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        compilerOptions11.setClosurePass(true);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions11.setInputPropertyMapSerialized(byteArray24);
        compilerOptions11.setFlowSensitiveInlineVariables(true);
        boolean boolean28 = compilerOptions11.exportTestFunctions;
        compilerOptions11.closurePass = false;
        compilerOptions11.renamePrefix = "Unversioned directory";
        compilerOptions11.setMoveFunctionDeclarations(false);
        compilerOptions11.setCheckSuspiciousCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = null;
        compilerOptions37.setCodingConvention(codingConvention40);
        boolean boolean42 = compilerOptions37.generateExports;
        compilerOptions37.collapseVariableDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention48 = null;
        compilerOptions45.setCodingConvention(codingConvention48);
        compilerOptions45.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel52 = compilerOptions45.checkProvides;
        java.lang.String[] strArray54 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        compilerOptions45.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList55);
        compilerOptions37.setManageClosureDependencies((java.util.List<java.lang.String>) strList55);
        compilerOptions11.setManageClosureDependencies((java.util.List<java.lang.String>) strList55);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList55);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + checkLevel52 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel52.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        java.lang.String str3 = compiler0.getAstDotGraph();
        java.nio.charset.Charset charset5 = null;
        com.google.javascript.jscomp.SourceFile sourceFile6 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset5);
        sourceFile6.setOriginalPath("hi!");
        sourceFile6.setOriginalPath("");
        sourceFile6.setOriginalPath("");
        boolean boolean13 = sourceFile6.isExtern();
        java.lang.String str15 = sourceFile6.getLine((int) (byte) 10);
        java.lang.String str17 = sourceFile6.getLine(32);
        com.google.javascript.jscomp.SourceFile.Builder builder21 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator23 = null;
        com.google.javascript.jscomp.SourceFile sourceFile24 = builder21.buildFromGenerator("hi!", generator23);
        java.nio.charset.Charset charset25 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder26 = builder21.withCharset(charset25);
        java.nio.charset.Charset charset27 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder28 = builder21.withCharset(charset27);
        com.google.javascript.jscomp.SourceFile.Builder builder30 = builder21.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile33 = builder21.buildFromCode("// Input %num%", "hi!");
        boolean boolean34 = sourceFile33.isExtern();
        java.io.Reader reader35 = sourceFile33.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile36 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: 2019/07/12 07:12", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile37 = com.google.javascript.jscomp.SourceFile.fromReader("Unversioned directory", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: java.io.IOException: ", reader35);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        boolean boolean43 = compilerOptions39.jqueryPass;
        compilerOptions39.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention49 = null;
        compilerOptions46.setCodingConvention(codingConvention49);
        compilerOptions46.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions46.checkProvides;
        compilerOptions39.brokenClosureRequiresLevel = checkLevel53;
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = null;
        compilerOptions39.setTweakReplacements(strMap55);
        compilerOptions39.enableRuntimeTypeCheck("java.io.IOException");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result59 = compiler0.compile(sourceFile6, sourceFile38, compilerOptions39);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(sourceFile24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(reader35);
        org.junit.Assert.assertNotNull(sourceFile36);
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setCollapseAnonymousFunctions(true);
        compilerOptions0.setOutputCharset("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean7 = compilerOptions0.assumeStrictThis();
        compilerOptions0.inlineFunctions = false;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setSummaryDetailLevel((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: ", 100);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGeneratePseudoNames(true);
        compilerOptions10.inlineLocalFunctions = false;
        compilerOptions10.setIdeMode(true);
        compilerOptions10.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions23.checkGlobalThisLevel;
        compilerOptions10.checkMissingReturn = checkLevel29;
        compilerOptions10.checkMissingGetCssNameBlacklist = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = null;
        compilerOptions33.setCodingConvention(codingConvention36);
        compilerOptions33.setPropertyAffinity(true);
        boolean boolean40 = compilerOptions33.closurePass;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy41 = compilerOptions33.anonymousFunctionNaming;
        compilerOptions10.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy41);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy41;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setLabelRenaming(true);
        compilerOptions44.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions44.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.enableExternExports(true);
        compilerOptions51.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet56 = compilerOptions51.stripNamePrefixes;
        compilerOptions44.aliasableStrings = strSet56;
        compilerOptions0.stripTypePrefixes = strSet56;
        compilerOptions0.checkSymbols = true;
        java.lang.String str61 = compilerOptions0.renamePrefixNamespace;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy41 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy41.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode26 = compilerOptions21.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup27 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup27;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions29.brokenClosureRequiresLevel;
        compilerOptions21.setWarningLevel(diagnosticGroup27, checkLevel35);
        compilerOptions15.setCheckMissingReturn(checkLevel35);
        compilerOptions0.checkMissingReturn = checkLevel35;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode44 = compilerOptions39.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup45 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup45;
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions47.brokenClosureRequiresLevel;
        compilerOptions39.setWarningLevel(diagnosticGroup45, checkLevel53);
        com.google.javascript.jscomp.CheckLevel checkLevel55 = compilerOptions39.checkGlobalThisLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        boolean boolean59 = compilerOptions56.extractPrototypeMemberDeclarations;
        compilerOptions56.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet62 = compilerOptions56.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap63 = compilerOptions56.cssRenamingMap;
        compilerOptions56.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach66 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions56.setInlineFunctions(reach66);
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions68.setRewriteNewDateGoogNow(true);
        boolean boolean71 = compilerOptions68.extractPrototypeMemberDeclarations;
        compilerOptions68.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet74 = compilerOptions68.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap75 = compilerOptions68.cssRenamingMap;
        compilerOptions68.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach78 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions68.setInlineFunctions(reach78);
        compilerOptions56.setRemoveUnusedVariable(reach78);
        compilerOptions39.setInlineFunctions(reach78);
        java.util.Set<java.lang.String> strSet82 = compilerOptions39.stripNamePrefixes;
        compilerOptions0.setExtraAnnotationNames(strSet82);
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + tracerMode26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode26.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + tracerMode44 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode44.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel55 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel55.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(cssRenamingMap63);
        org.junit.Assert.assertTrue("'" + reach66 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach66.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNull(cssRenamingMap75);
        org.junit.Assert.assertTrue("'" + reach78 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach78.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        sourceFile2.setOriginalPath("");
        sourceFile2.setOriginalPath("");
        java.lang.String str10 = sourceFile2.getLine((int) 'a');
        sourceFile2.setOriginalPath("// Input %num%");
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        boolean boolean13 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.setExternExportsPath("2019/07/12 07:12");
        compilerOptions0.checkTypes = true;
        compilerOptions0.setReserveRawExports(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        boolean boolean9 = compilerOptions0.inlineFunctions;
        compilerOptions0.setSyntheticBlockStartMarker("hi!");
        compilerOptions0.recordFunctionInformation = false;
        boolean boolean14 = compilerOptions0.removeUnusedClassProperties;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet16 = compilerOptions15.stripNamePrefixes;
        byte[] byteArray17 = compilerOptions15.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet19 = compilerOptions18.stripNamePrefixes;
        byte[] byteArray20 = compilerOptions18.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup21;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions23.checkProvides;
        compilerOptions18.setWarningLevel(diagnosticGroup21, checkLevel30);
        compilerOptions15.setAggressiveVarCheck(checkLevel30);
        compilerOptions15.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions15.closurePass = false;
        boolean boolean37 = compilerOptions15.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        compilerOptions38.setPropertyAffinity(true);
        boolean boolean45 = compilerOptions38.closurePass;
        compilerOptions38.setCheckCaja(true);
        compilerOptions38.closurePass = true;
        compilerOptions38.setMarkAsCompiled(true);
        compilerOptions38.setGeneratePseudoNames(false);
        compilerOptions38.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        boolean boolean59 = compilerOptions56.extractPrototypeMemberDeclarations;
        compilerOptions56.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel62 = compilerOptions56.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet63 = compilerOptions56.stripTypes;
        compilerOptions38.setStripTypePrefixes(strSet63);
        compilerOptions15.setStripTypes(strSet63);
        compilerOptions0.setStripNamePrefixes(strSet63);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(byteArray20);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup21);
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + checkLevel62 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel62.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet63);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format6 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        compilerOptions0.inlineVariables = true;
        java.lang.String str11 = compilerOptions0.inputDelimiter;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(format6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "// Input %num%" + "'", str11, "// Input %num%");
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        printStream8.print((double) '4');
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream23 = printStream8.append((java.lang.CharSequence) "java.io.IOException: -1", (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -90");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.lineBreak = false;
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        compilerOptions10.setIdGenerators(strSet18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention23 = null;
        compilerOptions20.setCodingConvention(codingConvention23);
        compilerOptions20.setGeneratePseudoNames(true);
        compilerOptions20.inlineLocalFunctions = false;
        compilerOptions20.setIdeMode(true);
        compilerOptions20.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions33.checkGlobalThisLevel;
        compilerOptions20.checkMissingReturn = checkLevel39;
        compilerOptions10.aggressiveVarCheck = checkLevel39;
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions10.reportMissingOverride;
        compilerOptions0.setReportUnknownTypes(checkLevel42);
        boolean boolean44 = compilerOptions0.exportTestFunctions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.io.IOException iOException36 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException37 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException36);
        int int40 = locationMappingList1.indexOf((java.lang.Object) iOException36);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator41 = locationMappingList1.spliterator();
        locationMappingList1.clear();
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray43 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList44 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44, locationMappingArray43);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.convertToDottedProperties = true;
        boolean boolean52 = compilerOptions46.inlineConstantVars;
        boolean boolean53 = compilerOptions46.extractPrototypeMemberDeclarations;
        boolean boolean54 = compilerOptions46.reserveRawExports;
        boolean boolean55 = locationMappingList44.remove((java.lang.Object) boolean54);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet64 = compilerOptions63.stripNamePrefixes;
        compilerOptions56.setIdGenerators(strSet64);
        java.util.stream.Stream<java.lang.String> strStream66 = strSet64.stream();
        boolean boolean67 = locationMappingList44.retainAll((java.util.Collection<java.lang.String>) strSet64);
        boolean boolean69 = locationMappingList44.remove((java.lang.Object) (byte) 0);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping70 = null;
        boolean boolean71 = locationMappingList44.add(locationMapping70);
        int int72 = locationMappingList44.size();
        java.lang.Object[] objArray73 = locationMappingList44.toArray();
        boolean boolean74 = locationMappingList1.remove((java.lang.Object) objArray73);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(locationMappingSpliterator41);
        org.junit.Assert.assertNotNull(locationMappingArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[null]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions0.setTracer(tracerMode3);
        compilerOptions0.optimizeReturns = true;
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping7 = null;
        boolean boolean8 = locationMappingList1.add(locationMapping7);
        java.lang.Object[] objArray9 = locationMappingList1.toArray();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping10 = null;
        boolean boolean11 = locationMappingList1.add(locationMapping10);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping12 = null;
        boolean boolean13 = locationMappingList1.add(locationMapping12);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping15 = null;
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping16 = locationMappingList1.set((int) (byte) 1, locationMapping15);
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor17 = locationMappingList1.iterator();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[null]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(locationMapping16);
        org.junit.Assert.assertNotNull(locationMappingItor17);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setLabelRenaming(true);
        compilerOptions10.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean15 = compilerOptions10.labelRenaming;
        compilerOptions10.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet19 = compilerOptions18.stripNamePrefixes;
        byte[] byteArray20 = compilerOptions18.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup21;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions23.checkProvides;
        compilerOptions18.setWarningLevel(diagnosticGroup21, checkLevel30);
        compilerOptions10.checkUnreachableCode = checkLevel30;
        compilerOptions0.checkProvides = checkLevel30;
        compilerOptions0.setSkipAllPasses(false);
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions0.checkRequires;
        java.lang.String str37 = compilerOptions0.instrumentationTemplate;
        boolean boolean38 = compilerOptions0.flowSensitiveInlineVariables;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap39 = compilerOptions0.getTweakReplacements();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(byteArray20);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup21);
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGeneratePseudoNames(true);
        compilerOptions10.inlineLocalFunctions = false;
        compilerOptions10.setIdeMode(true);
        compilerOptions10.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions23.checkGlobalThisLevel;
        compilerOptions10.checkMissingReturn = checkLevel29;
        compilerOptions0.aggressiveVarCheck = checkLevel29;
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.exportTestFunctions = false;
        compilerOptions0.resetWarningsGuard();
        boolean boolean37 = compilerOptions0.ideMode;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach11 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions7.setInlineVariables(reach11);
        compilerOptions7.setPrintInputDelimiter(true);
        boolean boolean15 = compilerOptions7.closurePass;
        compilerOptions7.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions7.brokenClosureRequiresLevel;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel18);
        boolean boolean20 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + reach11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach11.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        java.lang.String str14 = compilerOptions0.sourceMapOutputPath;
        compilerOptions0.setExternExports(true);
        boolean boolean17 = compilerOptions0.checkSuspiciousCode;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.removeUnusedVars = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap6 = compilerOptions0.getDefineReplacements();
        boolean boolean7 = compilerOptions0.convertToDottedProperties;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        boolean boolean13 = compilerOptions8.computeFunctionSideEffects;
        boolean boolean14 = compilerOptions8.printInputDelimiter;
        compilerOptions8.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions8.reportMissingOverride = checkLevel46;
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel46);
        boolean boolean51 = compilerOptions0.closurePass;
        boolean boolean52 = compilerOptions0.ideMode;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setOptimizeCalls(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel13 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel13);
        boolean boolean15 = compilerOptions0.preferLineBreakAtEndOfFile;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList16 = compilerOptions0.sourceMapLocationMappings;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList19 = locationMappingList16.subList((int) (short) -1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locationMappingList16);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.closurePass = false;
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap45 = compilerOptions0.customPasses;
        boolean boolean46 = compilerOptions0.crossModuleCodeMotion;
        java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> strMap47 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setPropertyInvalidationErrors(strMap47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.setReplaceIdGenerators(false);
        java.lang.String str13 = compilerOptions0.syntheticBlockStartMarker;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.generateExports = false;
        compilerOptions0.setTightenTypes(true);
        compilerOptions0.setPrettyPrint(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet39 = compilerOptions38.stripNamePrefixes;
        byte[] byteArray40 = compilerOptions38.inputVariableMapSerialized;
        compilerOptions38.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap43 = null;
        compilerOptions38.setCssRenamingMap(cssRenamingMap43);
        compilerOptions38.setDefineToNumberLiteral("java.io.IOException: ", 100);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.setRewriteNewDateGoogNow(true);
        boolean boolean51 = compilerOptions48.extractPrototypeMemberDeclarations;
        compilerOptions48.convertToDottedProperties = true;
        boolean boolean54 = compilerOptions48.inlineConstantVars;
        boolean boolean55 = compilerOptions48.extractPrototypeMemberDeclarations;
        boolean boolean56 = compilerOptions48.gatherCssNames;
        compilerOptions48.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions48.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions62.setRewriteNewDateGoogNow(true);
        boolean boolean65 = compilerOptions62.extractPrototypeMemberDeclarations;
        boolean boolean66 = compilerOptions62.jqueryPass;
        boolean boolean67 = compilerOptions62.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions68.setLabelRenaming(true);
        compilerOptions68.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean73 = compilerOptions68.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format74 = compilerOptions68.sourceMapFormat;
        compilerOptions62.setSourceMapFormat(format74);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing76 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions62.setTweakProcessing(tweakProcessing76);
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention81 = null;
        compilerOptions78.setCodingConvention(codingConvention81);
        compilerOptions78.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel85 = compilerOptions78.checkProvides;
        java.util.Set<java.lang.String> strSet86 = compilerOptions78.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream87 = strSet86.stream();
        compilerOptions62.stripTypes = strSet86;
        compilerOptions48.setStripNameSuffixes(strSet86);
        compilerOptions48.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap92 = compilerOptions48.customPasses;
        java.util.Set<java.lang.String> strSet93 = compilerOptions48.stripNameSuffixes;
        compilerOptions38.setIdGenerators(strSet93);
        compilerOptions0.setStripTypes(strSet93);
        compilerOptions0.setExternExports(true);
        boolean boolean98 = compilerOptions0.gatherCssNames;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(format74);
        org.junit.Assert.assertTrue("'" + tweakProcessing76 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing76.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel85 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel85.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strStream87);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setLineLengthThreshold(1);
        java.lang.String str15 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy7 = compilerOptions0.propertyRenaming;
        compilerOptions0.setOutputCharset("Unversioned directory");
        compilerOptions0.setCheckCaja(false);
        compilerOptions0.optimizeReturns = false;
        boolean boolean14 = compilerOptions0.jqueryPass;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy7 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy7.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        printStream1.write((-1));
        java.io.PrintStream printStream5 = printStream1.append('4');
        printStream5.println();
        org.junit.Assert.assertNotNull(printStream5);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.prettyPrint = false;
        compilerOptions0.markAsCompiled = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setPropertyAffinity(true);
        boolean boolean34 = compilerOptions27.closurePass;
        compilerOptions27.setCheckCaja(true);
        compilerOptions27.closurePass = true;
        compilerOptions27.setMarkAsCompiled(true);
        compilerOptions27.setGeneratePseudoNames(false);
        compilerOptions27.setInlineLocalFunctions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        boolean boolean48 = compilerOptions45.extractPrototypeMemberDeclarations;
        compilerOptions45.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions45.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet52 = compilerOptions45.stripTypes;
        compilerOptions27.setStripTypePrefixes(strSet52);
        compilerOptions0.setIdGenerators(strSet52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet52);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean9 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.inlineConstantVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions12.checkProvides;
        compilerOptions0.checkRequires = checkLevel15;
        compilerOptions0.setUnaliasableGlobals("");
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        boolean boolean22 = compilerOptions19.extractPrototypeMemberDeclarations;
        compilerOptions19.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet25 = compilerOptions19.stripTypePrefixes;
        compilerOptions0.stripTypes = strSet25;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.getInferTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: ");
        compilerOptions0.setOptimizeArgumentsArray(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions0.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setLabelRenaming(true);
        compilerOptions19.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean24 = compilerOptions19.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions25.checkGlobalThisLevel;
        compilerOptions19.setAggressiveVarCheck(checkLevel31);
        compilerOptions19.setOutputCharset("java.io.IOException");
        compilerOptions19.jqueryPass = false;
        compilerOptions19.setReplaceIdGenerators(false);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray39 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList40 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList40, locationMappingArray39);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        compilerOptions42.setCollapseProperties(false);
        compilerOptions42.setClosurePass(true);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions42.setInputPropertyMapSerialized(byteArray55);
        compilerOptions42.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        boolean boolean62 = compilerOptions59.extractPrototypeMemberDeclarations;
        compilerOptions59.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet65 = compilerOptions59.stripTypePrefixes;
        compilerOptions42.aliasableStrings = strSet65;
        boolean boolean67 = locationMappingList40.removeAll((java.util.Collection<java.lang.String>) strSet65);
        java.util.stream.Stream<java.lang.String> strStream68 = strSet65.stream();
        compilerOptions19.stripTypes = strSet65;
        compilerOptions0.stripTypes = strSet65;
        boolean boolean71 = compilerOptions0.disambiguateProperties;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        boolean boolean8 = compilerOptions0.checkTypes;
        compilerOptions0.aliasExternals = true;
        compilerOptions0.reserveRawExports = true;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray13 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList14 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList14, locationMappingArray13);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        boolean boolean22 = compilerOptions16.inlineConstantVars;
        boolean boolean23 = compilerOptions16.extractPrototypeMemberDeclarations;
        boolean boolean24 = compilerOptions16.reserveRawExports;
        boolean boolean25 = locationMappingList14.remove((java.lang.Object) boolean24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        compilerOptions26.setIdGenerators(strSet34);
        java.util.stream.Stream<java.lang.String> strStream36 = strSet34.stream();
        boolean boolean37 = locationMappingList14.retainAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean39 = locationMappingList14.remove((java.lang.Object) (byte) 0);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping40 = null;
        boolean boolean41 = locationMappingList14.add(locationMapping40);
        int int42 = locationMappingList14.size();
        compilerOptions0.sourceMapLocationMappings = locationMappingList14;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention47 = null;
        compilerOptions44.setCodingConvention(codingConvention47);
        compilerOptions44.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions44.checkProvides;
        java.lang.String[] strArray53 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        compilerOptions44.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList54);
        boolean boolean57 = compilerOptions44.collapseVariableDeclarations;
        boolean boolean58 = compilerOptions44.removeUnusedLocalVars;
        compilerOptions44.setGeneratePseudoNames(false);
        boolean boolean61 = locationMappingList14.contains((java.lang.Object) compilerOptions44);
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator62 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList14.replaceAll(locationMappingUnaryOperator62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationMappingArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions4 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions4.setLabelRenaming(true);
        compilerOptions4.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions4.checkGlobalThisLevel;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel9);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        boolean boolean16 = compilerOptions11.computeFunctionSideEffects;
        boolean boolean17 = compilerOptions11.printInputDelimiter;
        compilerOptions11.setGeneratePseudoNames(true);
        boolean boolean20 = compilerOptions11.disambiguateProperties;
        java.util.Set<java.lang.String> strSet21 = compilerOptions11.aliasableStrings;
        compilerOptions0.stripNameSuffixes = strSet21;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        compilerOptions24.setGeneratePseudoNames(true);
        compilerOptions24.inlineLocalFunctions = false;
        compilerOptions24.setInlineLocalVariables(true);
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions24.checkGlobalThisLevel;
        compilerOptions0.setCheckProvides(checkLevel35);
        boolean boolean37 = compilerOptions0.devirtualizePrototypeMethods;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        java.util.Set<java.lang.String> strSet17 = compilerOptions0.stripTypes;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.prettyPrint = false;
        boolean boolean14 = compilerOptions0.checkSuspiciousCode;
        compilerOptions0.setCollapseAnonymousFunctions(false);
        compilerOptions0.optimizeArgumentsArray = false;
        boolean boolean19 = compilerOptions0.smartNameRemoval;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        boolean boolean24 = compilerOptions20.jqueryPass;
        compilerOptions20.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions27.checkGlobalThisLevel;
        compilerOptions20.checkProvides = checkLevel33;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        compilerOptions35.convertToDottedProperties = true;
        boolean boolean41 = compilerOptions35.inlineConstantVars;
        boolean boolean42 = compilerOptions35.extractPrototypeMemberDeclarations;
        compilerOptions35.optimizeCalls = true;
        compilerOptions35.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach51 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions47.setInlineVariables(reach51);
        compilerOptions47.setPrintInputDelimiter(true);
        boolean boolean55 = compilerOptions47.closurePass;
        compilerOptions47.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setRewriteNewDateGoogNow(true);
        boolean boolean61 = compilerOptions58.extractPrototypeMemberDeclarations;
        boolean boolean62 = compilerOptions58.jqueryPass;
        boolean boolean63 = compilerOptions58.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setLabelRenaming(true);
        compilerOptions64.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean69 = compilerOptions64.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format70 = compilerOptions64.sourceMapFormat;
        compilerOptions58.setSourceMapFormat(format70);
        compilerOptions47.setSourceMapFormat(format70);
        compilerOptions35.sourceMapFormat = format70;
        compilerOptions20.sourceMapFormat = format70;
        boolean boolean75 = compilerOptions20.isRemoveUnusedClassProperties();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup76 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup76;
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.setRewriteNewDateGoogNow(true);
        boolean boolean81 = compilerOptions78.extractPrototypeMemberDeclarations;
        compilerOptions78.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel84 = compilerOptions78.brokenClosureRequiresLevel;
        compilerOptions20.setWarningLevel(diagnosticGroup76, checkLevel84);
        compilerOptions0.setReportMissingOverride(checkLevel84);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + reach51 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach51.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(format70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + checkLevel84 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel84.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.renamePrefix = "";
        compilerOptions0.closurePass = false;
        compilerOptions0.setAliasStringsBlacklist("Unversioned directory");
        boolean boolean12 = compilerOptions0.removeUnusedClassProperties;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions0.reportMissingOverride;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.setInlineFunctions(true);
        compilerOptions0.setAliasKeywords(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromInputStream("java.io.IOException: Unversioned directory", inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setReportPath("2019/07/12 07:12");
        compilerOptions0.setDevirtualizePrototypeMethods(false);
        boolean boolean9 = compilerOptions0.optimizeParameters;
        compilerOptions0.setManageClosureDependencies(false);
        boolean boolean12 = compilerOptions0.removeTryCatchFinally;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing14 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions0.setTweakProcessing(tweakProcessing14);
        compilerOptions0.setCheckMissingGetCssNameBlacklist("-1");
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setLabelRenaming(true);
        compilerOptions18.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean23 = compilerOptions18.labelRenaming;
        compilerOptions18.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        byte[] byteArray28 = compilerOptions26.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention34 = null;
        compilerOptions31.setCodingConvention(codingConvention34);
        compilerOptions31.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions31.checkProvides;
        compilerOptions26.setWarningLevel(diagnosticGroup29, checkLevel38);
        compilerOptions18.checkUnreachableCode = checkLevel38;
        compilerOptions18.setAssumeStrictThis(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention46 = null;
        compilerOptions43.setCodingConvention(codingConvention46);
        compilerOptions43.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions43.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray51 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList52 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList52, locationMappingArray51);
        compilerOptions43.sourceMapLocationMappings = locationMappingList52;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        boolean boolean58 = compilerOptions55.extractPrototypeMemberDeclarations;
        boolean boolean59 = compilerOptions55.jqueryPass;
        compilerOptions55.collapseAnonymousFunctions = false;
        boolean boolean62 = compilerOptions55.checkTypes;
        compilerOptions55.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel65 = compilerOptions55.checkProvides;
        compilerOptions43.checkUnreachableCode = checkLevel65;
        compilerOptions18.setBrokenClosureRequiresLevel(checkLevel65);
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel65;
        compilerOptions0.setMoveFunctionDeclarations(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + tweakProcessing14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing14.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(byteArray28);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + checkLevel65 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel65.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setCheckControlStructures(true);
        boolean boolean17 = compilerOptions0.printInputDelimiter;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel18 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel18);
        boolean boolean20 = compilerOptions0.checkTypes;
        compilerOptions0.inputDelimiter = "java.io.IOException: java.io.IOException: java.io.IOException: ";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException", "", "Unversioned directory");
        java.io.Reader reader5 = sourceFile4.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile6 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: ", reader5);
        java.lang.String str7 = sourceFile6.getCode();
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(reader5);
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Unversioned directory" + "'", str7, "Unversioned directory");
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean24 = compilerOptions0.generateExports;
        compilerOptions0.setLooseTypes(false);
        boolean boolean27 = compilerOptions0.crossModuleMethodMotion;
        boolean boolean28 = compilerOptions0.closurePass;
        compilerOptions0.crossModuleCodeMotion = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        boolean boolean15 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setRemoveTryCatchFinally(true);
        compilerOptions0.setAliasKeywords(true);
        compilerOptions0.inlineLocalFunctions = true;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.reserveRawExports = false;
        compilerOptions0.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy10 = compilerOptions0.variableRenaming;
        compilerOptions0.optimizeParameters = false;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy10 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy10.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setSkipAllPasses(true);
        byte[] byteArray26 = compilerOptions0.inputPropertyMapSerialized;
        compilerOptions0.setCollapseVariableDeclarations(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        java.lang.String str10 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode11 = compilerOptions0.getLanguageIn();
        boolean boolean12 = compilerOptions0.ambiguateProperties;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.setCollapseProperties(false);
        compilerOptions13.setClosurePass(true);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions13.setInputPropertyMapSerialized(byteArray26);
        compilerOptions13.setSyntheticBlockStartMarker("Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        boolean boolean35 = compilerOptions30.generateExports;
        compilerOptions30.gatherCssNames = false;
        boolean boolean38 = compilerOptions30.optimizeReturns;
        compilerOptions30.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet41 = compilerOptions30.aliasableStrings;
        compilerOptions30.generateExports = false;
        boolean boolean44 = compilerOptions30.assumeStrictThis();
        compilerOptions30.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention50 = null;
        compilerOptions47.setCodingConvention(codingConvention50);
        compilerOptions47.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet55 = compilerOptions54.stripNamePrefixes;
        compilerOptions47.setIdGenerators(strSet55);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention60 = null;
        compilerOptions57.setCodingConvention(codingConvention60);
        compilerOptions57.setGeneratePseudoNames(true);
        compilerOptions57.inlineLocalFunctions = false;
        compilerOptions57.setIdeMode(true);
        compilerOptions57.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions70.setRewriteNewDateGoogNow(true);
        boolean boolean73 = compilerOptions70.extractPrototypeMemberDeclarations;
        compilerOptions70.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel76 = compilerOptions70.checkGlobalThisLevel;
        compilerOptions57.checkMissingReturn = checkLevel76;
        compilerOptions47.aggressiveVarCheck = checkLevel76;
        compilerOptions30.checkUnreachableCode = checkLevel76;
        compilerOptions13.setCheckGlobalNamesLevel(checkLevel76);
        compilerOptions0.setCheckRequires(checkLevel76);
        compilerOptions0.setCheckTypes(false);
        compilerOptions0.jqueryPass = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + languageMode11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode11.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + checkLevel76 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel76.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("// Input %num%", "4432#Unversionedhi!rector true\n0\n");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setRemoveUnusedClassProperties(true);
        boolean boolean11 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        boolean boolean17 = compilerOptions12.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setLabelRenaming(true);
        compilerOptions18.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean23 = compilerOptions18.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format24 = compilerOptions18.sourceMapFormat;
        compilerOptions12.setSourceMapFormat(format24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.setCollapseProperties(false);
        compilerOptions26.setClosurePass(true);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions26.setInputPropertyMapSerialized(byteArray39);
        compilerOptions26.setFlowSensitiveInlineVariables(true);
        boolean boolean43 = compilerOptions26.exportTestFunctions;
        compilerOptions26.closurePass = false;
        com.google.javascript.jscomp.ErrorFormat errorFormat46 = compilerOptions26.errorFormat;
        compilerOptions12.setErrorFormat(errorFormat46);
        compilerOptions12.aliasStringsBlacklist = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy53 = compilerOptions50.variableRenaming;
        compilerOptions12.variableRenaming = variableRenamingPolicy53;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        boolean boolean58 = compilerOptions55.extractPrototypeMemberDeclarations;
        boolean boolean59 = compilerOptions55.jqueryPass;
        compilerOptions55.collapseAnonymousFunctions = false;
        java.lang.String str62 = compilerOptions55.aliasStringsBlacklist;
        compilerOptions55.inlineGetters = false;
        boolean boolean65 = compilerOptions55.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions66.setRewriteNewDateGoogNow(true);
        boolean boolean69 = compilerOptions66.extractPrototypeMemberDeclarations;
        compilerOptions66.setCollapseProperties(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy72 = compilerOptions66.variableRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet74 = compilerOptions73.stripNamePrefixes;
        byte[] byteArray75 = compilerOptions73.inputVariableMapSerialized;
        compilerOptions73.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler78 = compilerOptions73.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy79 = compilerOptions73.propertyRenaming;
        compilerOptions55.setRenamingPolicy(variableRenamingPolicy72, propertyRenamingPolicy79);
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy53, propertyRenamingPolicy79);
        boolean boolean82 = compilerOptions0.devirtualizePrototypeMethods;
        java.util.Set<java.lang.String> strSet83 = compilerOptions0.aliasableStrings;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(format24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(errorFormat46);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy53 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy53.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy72 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy72.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNull(byteArray75);
        org.junit.Assert.assertNotNull(aliasTransformationHandler78);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy79 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy79.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel19;
        compilerOptions0.setMarkAsCompiled(false);
        boolean boolean23 = compilerOptions0.removeDeadCode;
        compilerOptions0.setProtectHiddenSideEffects(true);
        boolean boolean26 = compilerOptions0.optimizeReturns;
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setInlineConstantVars(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention6 = null;
        compilerOptions3.setCodingConvention(codingConvention6);
        compilerOptions3.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions3.checkProvides;
        java.lang.String[] strArray12 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        compilerOptions3.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList13.stream();
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList13);
        compilerOptions0.setReplaceStringsPlaceholderToken("");
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strStream16);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.collapseVariableDeclarations = true;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = null;
        compilerOptions0.checkGlobalThisLevel = checkLevel13;
        compilerOptions0.reserveRawExports = false;
        compilerOptions0.setChainCalls(true);
        compilerOptions0.setAliasableGlobals("java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = null;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor23 = locationMappingList1.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator24 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        byte[] byteArray27 = compilerOptions25.inputVariableMapSerialized;
        boolean boolean28 = compilerOptions25.exportTestFunctions;
        compilerOptions25.setExtractPrototypeMemberDeclarations(true);
        compilerOptions25.reserveRawExports = false;
        compilerOptions25.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        boolean boolean41 = compilerOptions36.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setLabelRenaming(true);
        compilerOptions42.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean47 = compilerOptions42.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format48 = compilerOptions42.sourceMapFormat;
        compilerOptions36.sourceMapFormat = format48;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        compilerOptions50.setCollapseProperties(false);
        boolean boolean56 = compilerOptions50.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat57 = compilerOptions50.errorFormat;
        compilerOptions36.setErrorFormat(errorFormat57);
        compilerOptions25.setErrorFormat(errorFormat57);
        boolean boolean60 = locationMappingList1.remove((java.lang.Object) compilerOptions25);
        locationMappingList1.clear();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping62 = null;
        boolean boolean63 = locationMappingList1.add(locationMapping62);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationMappingItor23);
        org.junit.Assert.assertNotNull(locationMappingSpliterator24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(format48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(errorFormat57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        byte[] byteArray37 = compilerOptions0.inputPropertyMapSerialized;
        boolean boolean38 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.collapseProperties = true;
        compilerOptions0.setAppNameStr("java.io.IOException: Unversioned directory");
        java.lang.String str43 = compilerOptions0.inputDelimiter;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "// Input %num%" + "'", str43, "// Input %num%");
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setSyntheticBlockStartMarker("Unversioned directory");
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.checkMissingReturn;
        boolean boolean18 = compilerOptions0.collapseAnonymousFunctions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions0.setReserveRawExports(false);
        compilerOptions0.aliasStringsBlacklist = "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.optimizeParameters = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        boolean boolean13 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputVariableMapSerialized(byteArray29);
        compilerOptions0.checkControlStructures = false;
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        java.lang.String str53 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        compilerOptions54.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions54.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet61 = compilerOptions54.stripTypes;
        compilerOptions0.setIdGenerators(strSet61);
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList63 = compilerOptions0.sourceMapLocationMappings;
        compilerOptions0.gatherCssNames = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locationMappingList63);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        boolean boolean22 = compilerOptions0.inlineGetters;
        compilerOptions0.checkMissingGetCssNameBlacklist = "hi!";
        boolean boolean25 = compilerOptions0.generateExports;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = com.google.javascript.jscomp.SourceFile.builder();
        com.google.javascript.jscomp.SourceFile sourceFile2 = builder0.buildFromFile("-1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode9 = compilerOptions0.getLanguageOut();
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean14 = compilerOptions10.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap15 = null;
        compilerOptions10.setCssRenamingMap(cssRenamingMap15);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions10.reportMissingOverride;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions18.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions18.reportMissingOverride;
        compilerOptions10.checkMissingGetCssNameLevel = checkLevel22;
        compilerOptions10.setCollapsePropertiesOnExternTypes(true);
        compilerOptions10.setTweakToNumberLiteral("java.io.IOException: ", (int) (byte) 0);
        compilerOptions10.setGroupVariableDeclarations(false);
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions10.checkMissingReturn;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel31);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(languageMode9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.prettyPrint = false;
        compilerOptions0.setLocale("");
        boolean boolean16 = compilerOptions0.printInputDelimiter;
        compilerOptions0.aliasStringsBlacklist = "java.io.IOException: ";
        compilerOptions0.markNoSideEffectCalls = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleMethodMotion(true);
        compilerOptions0.coalesceVariableNames = false;
        compilerOptions0.setAliasAllStrings(false);
        compilerOptions0.setAssumeStrictThis(false);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.print(100);
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream11);
        com.google.javascript.jscomp.Region region17 = compiler14.getSourceRegion("-1", 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result18 = compiler14.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNull(region17);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setPropertyAffinity(true);
        compilerOptions34.setDisambiguateProperties(false);
        java.util.Set<java.lang.String> strSet43 = compilerOptions34.stripNameSuffixes;
        int int44 = locationMappingList1.indexOf((java.lang.Object) strSet43);
        int int45 = locationMappingList1.size();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping47 = locationMappingList1.remove((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setPreferLineBreakAtEndOfFile(true);
        compilerOptions0.coalesceVariableNames = false;
        boolean boolean15 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.setLabelRenaming(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        boolean boolean8 = compilerOptions0.labelRenaming;
        compilerOptions0.setTweakToBooleanLiteral("-1", false);
        compilerOptions0.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        compilerOptions14.collapseAnonymousFunctions = false;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap21 = compilerOptions14.getDefineReplacements();
        compilerOptions14.extractPrototypeMemberDeclarations = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.setCollapseProperties(false);
        compilerOptions24.setClosurePass(true);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions24.setInputPropertyMapSerialized(byteArray37);
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions24.checkMissingGetCssNameLevel;
        compilerOptions14.checkProvides = checkLevel39;
        compilerOptions0.checkGlobalThisLevel = checkLevel39;
        compilerOptions0.setLooseTypes(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setDefineToBooleanLiteral("hi!", true);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.setRemoveUnusedClassProperties(false);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet24 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.setRemoveUnusedClassProperties(false);
        compilerOptions0.setProcessCommonJSModules(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions0.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray7 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList8 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList8, locationMappingArray7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        compilerOptions10.setClosurePass(true);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions10.setInputPropertyMapSerialized(byteArray23);
        compilerOptions10.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet33 = compilerOptions27.stripTypePrefixes;
        compilerOptions10.aliasableStrings = strSet33;
        boolean boolean35 = locationMappingList8.removeAll((java.util.Collection<java.lang.String>) strSet33);
        compilerOptions0.setReplaceStringsReservedStrings(strSet33);
        boolean boolean37 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.setPrintInputDelimiter(false);
        org.junit.Assert.assertNotNull(locationMappingArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.deadAssignmentElimination = true;
        compilerOptions0.setCheckTypes(true);
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONST;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup29;
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        boolean boolean22 = compilerOptions0.optimizeArgumentsArray;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setOptimizeCalls(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel13 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel13);
        boolean boolean15 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.setClosurePass(false);
        compilerOptions0.setReserveRawExports(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.JsAst jsAst4 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler0.replaceScript(jsAst4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.collapseProperties = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.stripTypePrefixes;
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream1.write((int) (byte) 1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "java.io.IOException: Unversioned directory");
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream17);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        char[] charArray22 = new char[] { '4', '4' };
        printStream19.print(charArray22);
        printStream19.print((int) ' ');
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream19.write(byteArray32, (int) (byte) 0, (int) (byte) 1);
        char[] charArray42 = new char[] { ' ', '#', '4', 'a', '#', 'a' };
        printStream19.print(charArray42);
        printStream1.println(charArray42);
        printStream1.print((long) (byte) 1);
        boolean boolean47 = printStream1.checkError();
        printStream1.println((long) (short) 1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4, a, #, a]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile sourceFile7 = builder0.buildFromFile("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromFile("java.io.IOException");
        com.google.javascript.jscomp.SourceFile sourceFile11 = builder0.buildFromFile("hi!");
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(sourceFile11);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap13;
        boolean boolean15 = compilerOptions0.isRemoveUnusedClassProperties();
        compilerOptions0.ambiguateProperties = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setAppNameStr("java.io.IOException");
        boolean boolean18 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions0.checkGlobalThisLevel;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream20 = new java.io.PrintStream("Unversioned directory");
        char[] charArray23 = new char[] { '4', '4' };
        printStream20.print(charArray23);
        printStream20.print((int) ' ');
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        printStream20.write((int) '#');
        java.util.Locale locale31 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream35 = printStream20.format(locale31, "Unversioned directory", objArray34);
        java.io.PrintStream printStream36 = printStream1.format("java.io.IOException: Unversioned directory", objArray34);
        printStream1.print((int) (short) -1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream36);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream20.print((int) (byte) 0);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        printStream20.println("2019/07/12 07:12");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setShadowVariables(false);
        compilerOptions0.setCheckCaja(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        compilerOptions0.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        boolean boolean9 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException: Unversioned directory", (int) (short) 100);
        compilerOptions0.checkControlStructures = true;
        java.io.PrintStream printStream16 = new java.io.PrintStream("Unversioned directory");
        char[] charArray19 = new char[] { '4', '4' };
        printStream16.print(charArray19);
        printStream16.print((int) ' ');
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream16, false);
        printStream16.write((int) '#');
        printStream16.print((float) (short) 0);
        printStream16.println("java.io.IOException");
        java.util.Locale locale31 = null;
        java.io.PrintStream printStream34 = new java.io.PrintStream("Unversioned directory");
        char[] charArray37 = new char[] { '4', '4' };
        printStream34.print(charArray37);
        printStream34.print((int) ' ');
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream34, false);
        printStream34.write((int) '#');
        java.util.Locale locale45 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream49 = printStream34.format(locale45, "Unversioned directory", objArray48);
        java.io.PrintStream printStream50 = printStream16.printf(locale31, "Unversioned directory", objArray48);
        printStream50.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = null;
        compilerOptions52.setCodingConvention(codingConvention55);
        boolean boolean57 = compilerOptions52.generateExports;
        compilerOptions52.printInputDelimiter = false;
        compilerOptions52.setCheckSymbols(true);
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions52.setInputVariableMapSerialized(byteArray66);
        printStream50.write(byteArray66);
        compilerOptions0.inputVariableMapSerialized = byteArray66;
        compilerOptions0.setOptimizeArgumentsArray(false);
        boolean boolean72 = compilerOptions0.isRemoveUnusedClassProperties();
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile.Generator generator7 = null;
        com.google.javascript.jscomp.SourceFile sourceFile8 = builder0.buildFromGenerator("java.io.IOException: -1", generator7);
        boolean boolean9 = sourceFile8.isExtern();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        java.lang.String str10 = compilerOptions0.syntheticBlockEndMarker;
        boolean boolean11 = compilerOptions0.isRemoveUnusedClassProperties();
        compilerOptions0.setGatherCssNames(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        java.lang.String str2 = sourceFile1.getOriginalPath();
        java.lang.String str4 = sourceFile1.getLine(0);
        sourceFile1.setOriginalPath("2019/07/12 07:12");
        com.google.javascript.jscomp.Region region8 = sourceFile1.getRegion((int) (byte) 10);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(region8);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        boolean boolean8 = compilerOptions0.labelRenaming;
        compilerOptions0.gatherCssNames = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy26 = compilerOptions0.variableRenaming;
        boolean boolean27 = compilerOptions0.prettyPrint;
        compilerOptions0.setInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        boolean boolean35 = compilerOptions30.generateExports;
        compilerOptions30.deadAssignmentElimination = false;
        compilerOptions30.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention44 = null;
        compilerOptions41.setCodingConvention(codingConvention44);
        compilerOptions41.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet49 = compilerOptions48.stripNamePrefixes;
        compilerOptions41.setIdGenerators(strSet49);
        java.lang.String[] strArray55 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        compilerOptions41.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList56);
        compilerOptions30.setReplaceStringsConfiguration("java.io.IOException", (java.util.List<java.lang.String>) strList56);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList56);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy26 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy26.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setMoveFunctionDeclarations(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean13 = compilerOptions9.jqueryPass;
        compilerOptions9.collapseAnonymousFunctions = false;
        boolean boolean16 = compilerOptions9.checkTypes;
        compilerOptions9.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        compilerOptions19.setIdGenerators(strSet27);
        compilerOptions9.setStripNameSuffixes(strSet27);
        compilerOptions0.stripTypePrefixes = strSet27;
        boolean boolean31 = compilerOptions0.gatherCssNames;
        compilerOptions0.crossModuleCodeMotion = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        com.google.javascript.jscomp.SourceMap.Format format9 = compilerOptions0.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy15 = compilerOptions10.anonymousFunctionNaming;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy15;
        boolean boolean17 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setLabelRenaming(true);
        compilerOptions18.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean23 = compilerOptions18.labelRenaming;
        compilerOptions18.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        byte[] byteArray28 = compilerOptions26.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention34 = null;
        compilerOptions31.setCodingConvention(codingConvention34);
        compilerOptions31.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions31.checkProvides;
        compilerOptions26.setWarningLevel(diagnosticGroup29, checkLevel38);
        compilerOptions18.checkUnreachableCode = checkLevel38;
        compilerOptions18.setAliasableGlobals("");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray43 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList44 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44, locationMappingArray43);
        com.google.javascript.jscomp.SourceFile sourceFile48 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean49 = locationMappingList44.remove((java.lang.Object) "hi!");
        boolean boolean50 = locationMappingList44.isEmpty();
        compilerOptions18.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        boolean boolean55 = compilerOptions52.extractPrototypeMemberDeclarations;
        compilerOptions52.convertToDottedProperties = true;
        boolean boolean58 = compilerOptions52.inlineConstantVars;
        boolean boolean59 = compilerOptions52.extractPrototypeMemberDeclarations;
        boolean boolean60 = compilerOptions52.gatherCssNames;
        compilerOptions52.setCheckSymbols(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode63 = compilerOptions52.getTracerMode();
        compilerOptions52.moveFunctionDeclarations = false;
        boolean boolean66 = locationMappingList44.equals((java.lang.Object) false);
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor67 = locationMappingList44.iterator();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44);
        compilerOptions0.exportTestFunctions = false;
        compilerOptions0.setTweakToBooleanLiteral("hi!", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(format9);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy15 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy15.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(byteArray28);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + tracerMode63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode63.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locationMappingItor67);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions0.setTweakToNumberLiteral("2019/07/12 07:12", 10);
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        boolean boolean13 = compilerOptions10.exportTestFunctions;
        compilerOptions10.lineBreak = false;
        boolean boolean16 = compilerOptions10.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode17 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions10.setLanguageOut(languageMode17);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel19 = compilerOptions10.sourceMapDetailLevel;
        compilerOptions0.setSourceMapDetailLevel(detailLevel19);
        compilerOptions0.crossModuleMethodMotion = false;
        compilerOptions0.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions25.checkGlobalThisLevel;
        compilerOptions25.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle34 = null;
        compilerOptions25.setMessageBundle(messageBundle34);
        boolean boolean36 = compilerOptions25.recordFunctionInformation;
        boolean boolean37 = compilerOptions25.moveFunctionDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions38.jqueryPass;
        compilerOptions38.collapseAnonymousFunctions = false;
        boolean boolean45 = compilerOptions38.checkTypes;
        compilerOptions38.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions38.checkProvides;
        compilerOptions25.setCheckGlobalNamesLevel(checkLevel48);
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet51 = compilerOptions50.stripNamePrefixes;
        byte[] byteArray52 = compilerOptions50.inputVariableMapSerialized;
        boolean boolean53 = compilerOptions50.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode54 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions50.setLanguageIn(languageMode54);
        compilerOptions50.setNameAnonymousFunctionsOnly(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setRewriteNewDateGoogNow(true);
        boolean boolean61 = compilerOptions58.extractPrototypeMemberDeclarations;
        compilerOptions58.setCollapseProperties(false);
        compilerOptions58.setClosurePass(true);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions58.setInputPropertyMapSerialized(byteArray71);
        compilerOptions58.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel75 = compilerOptions58.reportMissingOverride;
        compilerOptions50.setCheckGlobalNamesLevel(checkLevel75);
        compilerOptions25.checkMissingGetCssNameLevel = checkLevel75;
        compilerOptions0.setReportMissingOverride(checkLevel75);
        java.util.Map<java.lang.String, java.lang.Object> strMap79 = null;
        compilerOptions0.setDefineReplacements(strMap79);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + languageMode17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode17.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertNotNull(detailLevel19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + languageMode54 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode54.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel75 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel75.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        boolean boolean9 = compilerOptions6.extractPrototypeMemberDeclarations;
        compilerOptions6.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions6.checkGlobalThisLevel;
        compilerOptions0.setAggressiveVarCheck(checkLevel12);
        compilerOptions0.markAsCompiled = false;
        compilerOptions0.lineBreak = false;
        boolean boolean18 = compilerOptions0.preferLineBreakAtEndOfFile;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode4 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageIn(languageMode4);
        compilerOptions0.setInlineVariables(false);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel8 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel8;
        com.google.javascript.jscomp.WarningsGuard warningsGuard10 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.addWarningsGuard(warningsGuard10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + languageMode4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode4.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.setSyntheticBlockEndMarker("// Input %num%");
        java.lang.String str16 = compilerOptions0.locale;
        compilerOptions0.syntheticBlockStartMarker = "";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.util.Set<java.lang.String> strSet8 = compilerOptions0.stripTypes;
        compilerOptions0.coalesceVariableNames = true;
        compilerOptions0.optimizeReturns = false;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.collapseProperties = true;
        boolean boolean11 = compilerOptions0.preferLineBreakAtEndOfFile;
        boolean boolean12 = compilerOptions0.optimizeArgumentsArray;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = null;
        compilerOptions0.setAggressiveVarCheck(checkLevel13);
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        compilerOptions8.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions8.brokenClosureRequiresLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup6, checkLevel14);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.checkGlobalThisLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode22 = compilerOptions17.getTracerMode();
        compilerOptions17.lineBreak = false;
        compilerOptions17.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions17.inlineLocalFunctions = false;
        compilerOptions17.setFoldConstants(true);
        java.lang.String str31 = compilerOptions17.instrumentationTemplate;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention35 = null;
        compilerOptions32.setCodingConvention(codingConvention35);
        compilerOptions32.setGeneratePseudoNames(true);
        compilerOptions32.inlineLocalFunctions = false;
        compilerOptions32.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        boolean boolean46 = compilerOptions43.extractPrototypeMemberDeclarations;
        compilerOptions43.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention52 = null;
        compilerOptions49.setCodingConvention(codingConvention52);
        compilerOptions49.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions49.checkProvides;
        compilerOptions43.setReportUnknownTypes(checkLevel56);
        compilerOptions32.setCheckGlobalNamesLevel(checkLevel56);
        compilerOptions32.skipAllCompilerPasses();
        compilerOptions32.checkMissingGetCssNameBlacklist = "hi!";
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy62 = compilerOptions32.propertyRenaming;
        compilerOptions17.setPropertyRenaming(propertyRenamingPolicy62);
        compilerOptions0.propertyRenaming = propertyRenamingPolicy62;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        boolean boolean68 = compilerOptions65.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach69 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions65.setInlineVariables(reach69);
        compilerOptions65.setPrintInputDelimiter(true);
        boolean boolean73 = compilerOptions65.closurePass;
        compilerOptions65.setOutputCharset("java.io.IOException");
        compilerOptions65.reserveRawExports = true;
        compilerOptions65.setAcceptConstKeyword(false);
        compilerOptions65.setMoveFunctionDeclarations(false);
        compilerOptions65.aliasKeywords = false;
        com.google.javascript.jscomp.SourceMap.Format format84 = compilerOptions65.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format84;
        compilerOptions0.setInlineConstantVars(false);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode22.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy62 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy62.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + reach69 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach69.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(format84);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder0.buildFromCode("// Input %num%", "hi!");
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder0.buildFromCode("// Input %num%", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile18 = builder0.buildFromInputStream("hi!", inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(sourceFile15);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean24 = compilerOptions0.generateExports;
        compilerOptions0.setLooseTypes(false);
        com.google.javascript.jscomp.WarningsGuard warningsGuard27 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.addWarningsGuard(warningsGuard27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        java.lang.String str3 = compiler0.getAstDotGraph();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState4 = compiler0.getState();
        com.google.javascript.rhino.Node node5 = compiler0.getRoot();
        com.google.javascript.jscomp.JSModule jSModule6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = compiler0.toSource(jSModule6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(intermediateState4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        compilerOptions7.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions7.checkGlobalThisLevel;
        compilerOptions7.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle16 = null;
        compilerOptions7.setMessageBundle(messageBundle16);
        boolean boolean18 = compilerOptions7.recordFunctionInformation;
        boolean boolean19 = compilerOptions7.checkControlStructures;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions7.setInlineFunctions(reach20);
        compilerOptions0.setInlineVariables(reach20);
        compilerOptions0.setGatherCssNames(false);
        compilerOptions0.checkSymbols = false;
        compilerOptions0.setAmbiguateProperties(true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap13;
        compilerOptions0.setAliasKeywords(false);
        compilerOptions0.setPreferLineBreakAtEndOfFile(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.lineBreak;
        compilerOptions0.setCheckSymbols(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions0.generateExports;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        compilerOptions0.removeUnusedVars = true;
        compilerOptions0.setCrossModuleCodeMotion(false);
        boolean boolean12 = compilerOptions0.generateExports;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        compilerOptions0.setAliasExternals(false);
        compilerOptions0.setShadowVariables(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.markAsCompiled = true;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream20 = new java.io.PrintStream("Unversioned directory");
        char[] charArray23 = new char[] { '4', '4' };
        printStream20.print(charArray23);
        printStream20.print((int) ' ');
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        printStream20.write((int) '#');
        java.util.Locale locale31 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream35 = printStream20.format(locale31, "Unversioned directory", objArray34);
        java.io.PrintStream printStream36 = printStream1.format("java.io.IOException: Unversioned directory", objArray34);
        printStream36.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        compilerOptions38.setGeneratePseudoNames(true);
        compilerOptions38.inlineLocalFunctions = false;
        compilerOptions38.setIdeMode(true);
        printStream36.print((java.lang.Object) compilerOptions38);
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        boolean boolean54 = compilerOptions50.jqueryPass;
        compilerOptions50.setClosurePass(true);
        boolean boolean57 = compilerOptions50.assumeStrictThis();
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.enableExternExports(true);
        java.util.Set<java.lang.String> strSet61 = compilerOptions58.stripTypes;
        compilerOptions58.setRemoveUnusedVars(true);
        compilerOptions58.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet68 = compilerOptions67.stripNamePrefixes;
        byte[] byteArray69 = compilerOptions67.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach70 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions67.setInlineFunctions(reach70);
        compilerOptions58.setRemoveUnusedVariable(reach70);
        compilerOptions50.setRemoveUnusedVariables(reach70);
        boolean boolean74 = compilerOptions50.recordFunctionInformation;
        boolean boolean75 = compilerOptions50.aliasExternals;
        printStream36.println((java.lang.Object) boolean75);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertTrue("'" + reach70 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach70.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy17 = compilerOptions11.variableRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet19 = compilerOptions18.stripNamePrefixes;
        byte[] byteArray20 = compilerOptions18.inputVariableMapSerialized;
        compilerOptions18.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler23 = compilerOptions18.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy24 = compilerOptions18.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy17, propertyRenamingPolicy24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.setCollapseProperties(false);
        boolean boolean32 = compilerOptions26.lineBreak;
        compilerOptions26.recordFunctionInformation = false;
        com.google.javascript.jscomp.CompilerOptions.Reach reach35 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions26.setInlineFunctions(reach35);
        compilerOptions0.setInlineVariables(reach35);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy17.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(aliasTransformationHandler23);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy24 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy24.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + reach35 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach35.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: ", 100);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGeneratePseudoNames(true);
        compilerOptions10.inlineLocalFunctions = false;
        compilerOptions10.setIdeMode(true);
        compilerOptions10.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions23.checkGlobalThisLevel;
        compilerOptions10.checkMissingReturn = checkLevel29;
        compilerOptions10.checkMissingGetCssNameBlacklist = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = null;
        compilerOptions33.setCodingConvention(codingConvention36);
        compilerOptions33.setPropertyAffinity(true);
        boolean boolean40 = compilerOptions33.closurePass;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy41 = compilerOptions33.anonymousFunctionNaming;
        compilerOptions10.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy41);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy41;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setLabelRenaming(true);
        compilerOptions44.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions44.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.enableExternExports(true);
        compilerOptions51.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet56 = compilerOptions51.stripNamePrefixes;
        compilerOptions44.aliasableStrings = strSet56;
        compilerOptions0.stripTypePrefixes = strSet56;
        compilerOptions0.checkSymbols = true;
        java.lang.String str61 = compilerOptions0.checkMissingGetCssNameBlacklist;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy41 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy41.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setSkipAllPasses(true);
        java.lang.String str26 = compilerOptions0.renamePrefix;
        compilerOptions0.setPreferLineBreakAtEndOfFile(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.convertToDottedProperties = true;
        compilerOptions29.resetWarningsGuard();
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet37 = compilerOptions36.stripNamePrefixes;
        byte[] byteArray38 = compilerOptions36.inputVariableMapSerialized;
        compilerOptions36.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        boolean boolean44 = compilerOptions41.extractPrototypeMemberDeclarations;
        boolean boolean45 = compilerOptions41.jqueryPass;
        compilerOptions41.collapseAnonymousFunctions = false;
        java.lang.String str48 = compilerOptions41.aliasStringsBlacklist;
        compilerOptions41.instrumentationTemplate = "java.io.IOException";
        boolean boolean51 = compilerOptions41.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel52 = compilerOptions41.checkMissingGetCssNameLevel;
        compilerOptions36.checkUnreachableCode = checkLevel52;
        compilerOptions29.aggressiveVarCheck = checkLevel52;
        compilerOptions0.setAggressiveVarCheck(checkLevel52);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Unversioned directory" + "'", str26, "Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + checkLevel52 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel52.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.print(100);
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream11);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = compiler14.getTypeRegistry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        boolean boolean7 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.printInputDelimiter = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach10 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions0.setRemoveUnusedVariables(reach10);
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        compilerOptions0.setRemoveUnusedClassProperties(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + reach10 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach10.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler7 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.setSyntheticBlockStartMarker("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.jqueryPass = false;
        compilerOptions0.renamePrefix = "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler7);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        byte[] byteArray13 = new byte[] { (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        boolean boolean15 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.setRuntimeTypeCheck(false);
        compilerOptions0.setInlineGetters(false);
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.setCoalesceVariableNames(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineProperties(true);
        compilerOptions0.setLineLengthThreshold((int) (byte) 0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions16.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions16.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        byte[] byteArray28 = compilerOptions26.inputVariableMapSerialized;
        boolean boolean29 = compilerOptions26.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setLabelRenaming(true);
        compilerOptions30.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions26.setCheckGlobalNamesLevel(checkLevel35);
        compilerOptions16.setCheckMissingGetCssNameLevel(checkLevel35);
        compilerOptions16.setCheckTypes(true);
        compilerOptions16.setFoldConstants(false);
        compilerOptions16.disableRuntimeTypeCheck();
        compilerOptions16.generatePseudoNames = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        boolean boolean48 = compilerOptions45.extractPrototypeMemberDeclarations;
        compilerOptions45.setCollapseProperties(false);
        boolean boolean51 = compilerOptions45.closurePass;
        compilerOptions45.setRemoveAbstractMethods(true);
        compilerOptions45.setPropertyAffinity(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        boolean boolean59 = compilerOptions56.extractPrototypeMemberDeclarations;
        compilerOptions56.setCollapseProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions62.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention65 = null;
        compilerOptions62.setCodingConvention(codingConvention65);
        compilerOptions62.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel69 = compilerOptions62.checkProvides;
        java.lang.String[] strArray71 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        compilerOptions62.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList72);
        compilerOptions56.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList72);
        compilerOptions45.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList72);
        compilerOptions16.setManageClosureDependencies((java.util.List<java.lang.String>) strList72);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList72);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + checkLevel69 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel69.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromGenerator("4432#0.010\001\001\000\001\000\ufffd", generator1);
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup9 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        boolean boolean21 = compilerOptions12.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup9, checkLevel22);
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup9;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler(printStream20);
        compiler21.disableThreads();
        compiler21.reportCodeChange();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention codingConvention24 = compiler21.getCodingConvention();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.setTightenTypes(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap8 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap8);
        compilerOptions0.aliasExternals = true;
        compilerOptions0.setSourceMapOutputPath("");
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.aliasKeywords = false;
        compilerOptions0.disambiguateProperties = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setAliasableGlobals("");
        boolean boolean25 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet29 = compilerOptions28.stripNamePrefixes;
        byte[] byteArray30 = compilerOptions28.inputVariableMapSerialized;
        boolean boolean31 = compilerOptions28.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode32 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions28.setLanguageIn(languageMode32);
        compilerOptions28.setInlineVariables(false);
        compilerOptions28.setRemoveTryCatchFinally(false);
        compilerOptions28.crossModuleCodeMotion = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        java.lang.String str43 = compilerOptions40.sourceMapOutputPath;
        compilerOptions40.aliasKeywords = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet47 = compilerOptions46.stripNamePrefixes;
        byte[] byteArray48 = compilerOptions46.inputVariableMapSerialized;
        compilerOptions46.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler51 = compilerOptions46.getAliasTransformationHandler();
        compilerOptions40.setAliasTransformationHandler(aliasTransformationHandler51);
        compilerOptions28.setAliasTransformationHandler(aliasTransformationHandler51);
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler51);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + languageMode32 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode32.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(aliasTransformationHandler51);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.setSourceMapFormat(format12);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        compilerOptions14.setClosurePass(true);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray27);
        compilerOptions14.setFlowSensitiveInlineVariables(true);
        boolean boolean31 = compilerOptions14.exportTestFunctions;
        compilerOptions14.closurePass = false;
        com.google.javascript.jscomp.ErrorFormat errorFormat34 = compilerOptions14.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat34);
        compilerOptions0.aliasStringsBlacklist = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.javascript.jscomp.SourceMap.Format format38 = compilerOptions0.sourceMapFormat;
        compilerOptions0.removeUnusedLocalVars = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setLabelRenaming(true);
        compilerOptions41.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean46 = compilerOptions41.labelRenaming;
        compilerOptions41.ambiguateProperties = false;
        boolean boolean49 = compilerOptions41.shouldColorizeErrorOutput();
        boolean boolean50 = compilerOptions41.crossModuleMethodMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions41.checkMissingGetCssNameLevel;
        compilerOptions0.setReportMissingOverride(checkLevel51);
        java.util.Set<java.lang.String> strSet53 = compilerOptions0.aliasableStrings;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(errorFormat34);
        org.junit.Assert.assertNotNull(format38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet53);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions17.checkProvides;
        compilerOptions11.setReportUnknownTypes(checkLevel24);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel24);
        compilerOptions0.checkMissingGetCssNameBlacklist = "";
        com.google.javascript.jscomp.ErrorFormat errorFormat29 = compilerOptions0.errorFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        boolean boolean34 = compilerOptions30.jqueryPass;
        compilerOptions30.collapseAnonymousFunctions = false;
        java.lang.String str37 = compilerOptions30.aliasStringsBlacklist;
        compilerOptions30.inlineGetters = false;
        boolean boolean40 = compilerOptions30.exportTestFunctions;
        compilerOptions30.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        compilerOptions30.preferLineBreakAtEndOfFile = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        compilerOptions46.setCheckSuspiciousCode(true);
        compilerOptions46.setConvertToDottedProperties(false);
        compilerOptions46.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention58 = null;
        compilerOptions55.setCodingConvention(codingConvention58);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode60 = compilerOptions55.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup61 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup61;
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        boolean boolean66 = compilerOptions63.extractPrototypeMemberDeclarations;
        compilerOptions63.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel69 = compilerOptions63.brokenClosureRequiresLevel;
        compilerOptions55.setWarningLevel(diagnosticGroup61, checkLevel69);
        com.google.javascript.jscomp.CheckLevel checkLevel71 = compilerOptions55.checkGlobalThisLevel;
        compilerOptions46.setCheckProvides(checkLevel71);
        compilerOptions30.setAggressiveVarCheck(checkLevel71);
        compilerOptions0.checkMissingReturn = checkLevel71;
        compilerOptions0.setMarkNoSideEffectCalls(true);
        compilerOptions0.setAliasAllStrings(false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + tracerMode60 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode60.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + checkLevel69 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel69.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel71 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel71.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions10.setInlineFunctions(reach13);
        compilerOptions0.setRemoveUnusedVariables(reach13);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions16.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions16.checkMissingGetCssNameLevel;
        java.util.Set<java.lang.String> strSet26 = compilerOptions16.stripNamePrefixes;
        compilerOptions0.setReplaceStringsReservedStrings(strSet26);
        compilerOptions0.setRenamePrefixNamespace("");
        java.util.Set<java.lang.String> strSet30 = compilerOptions0.aliasableStrings;
        java.util.Set<java.lang.String> strSet31 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setExtraAnnotationNames(strSet31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        printStream1.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setLabelRenaming(true);
        compilerOptions31.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean36 = compilerOptions31.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format37 = compilerOptions31.sourceMapFormat;
        compilerOptions31.setCollapseAnonymousFunctions(true);
        printStream1.print((java.lang.Object) compilerOptions31);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        boolean boolean44 = compilerOptions41.extractPrototypeMemberDeclarations;
        compilerOptions41.convertToDottedProperties = true;
        boolean boolean47 = compilerOptions41.inlineConstantVars;
        boolean boolean48 = compilerOptions41.extractPrototypeMemberDeclarations;
        boolean boolean49 = compilerOptions41.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard50 = null;
        compilerOptions41.setWarningsGuard(composeWarningsGuard50);
        compilerOptions41.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach54 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions41.setInlineFunctions(reach54);
        compilerOptions31.setRemoveUnusedVariable(reach54);
        compilerOptions31.setAcceptConstKeyword(false);
        boolean boolean59 = compilerOptions31.smartNameRemoval;
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(format37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + reach54 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach54.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.aggressiveVarCheck;
        boolean boolean13 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException", 100);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        boolean boolean22 = compilerOptions17.generateExports;
        compilerOptions17.printInputDelimiter = false;
        compilerOptions17.prettyPrint = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        boolean boolean33 = compilerOptions27.inlineConstantVars;
        boolean boolean34 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.optimizeCalls = true;
        compilerOptions27.removeUnusedPrototypeProperties = false;
        compilerOptions27.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode41 = compilerOptions27.getTracerMode();
        compilerOptions27.generateExports = true;
        compilerOptions27.jqueryPass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        compilerOptions46.convertToDottedProperties = true;
        compilerOptions46.setRemoveUnusedVars(true);
        compilerOptions46.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy56 = compilerOptions46.propertyRenaming;
        compilerOptions27.propertyRenaming = propertyRenamingPolicy56;
        compilerOptions17.setPropertyRenaming(propertyRenamingPolicy56);
        compilerOptions0.propertyRenaming = propertyRenamingPolicy56;
        boolean boolean60 = compilerOptions0.printInputDelimiter;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + tracerMode41 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode41.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy56 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy56.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: ";
        boolean boolean12 = compilerOptions0.jqueryPass;
        boolean boolean13 = compilerOptions0.collapseProperties;
        compilerOptions0.setRewriteFunctionExpressions(false);
        boolean boolean16 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setGenerateExports(false);
        compilerOptions0.setDefineToBooleanLiteral("-1", false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap22 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap22;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        java.lang.String str8 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setDefineToStringLiteral("Unversioned directory", "// Input %num%");
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel11 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel11;
        compilerOptions0.setGroupVariableDeclarations(false);
        compilerOptions0.setInputDelimiter("java.io.IOException");
        com.google.javascript.jscomp.SourceMap.Format format17 = compilerOptions0.sourceMapFormat;
        org.junit.Assert.assertNotNull(format17);
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        boolean boolean15 = compilerOptions11.jqueryPass;
        boolean boolean16 = compilerOptions11.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setLabelRenaming(true);
        compilerOptions17.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean22 = compilerOptions17.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format23 = compilerOptions17.sourceMapFormat;
        compilerOptions11.setSourceMapFormat(format23);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing25 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions11.setTweakProcessing(tweakProcessing25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions27.checkProvides;
        java.util.Set<java.lang.String> strSet35 = compilerOptions27.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.stream();
        compilerOptions11.stripTypes = strSet35;
        compilerOptions0.setAliasableStrings(strSet35);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setLabelRenaming(true);
        compilerOptions39.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions39.checkGlobalThisLevel;
        boolean boolean45 = compilerOptions39.collapseProperties;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel46 = compilerOptions39.sourceMapDetailLevel;
        compilerOptions0.setSourceMapDetailLevel(detailLevel46);
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("-1");
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet53 = compilerOptions52.stripNamePrefixes;
        byte[] byteArray54 = compilerOptions52.inputVariableMapSerialized;
        boolean boolean55 = compilerOptions52.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode56 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions52.setLanguageIn(languageMode56);
        compilerOptions52.setNameAnonymousFunctionsOnly(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setRewriteNewDateGoogNow(true);
        boolean boolean63 = compilerOptions60.extractPrototypeMemberDeclarations;
        compilerOptions60.setCollapseProperties(false);
        compilerOptions60.setClosurePass(true);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions60.setInputPropertyMapSerialized(byteArray73);
        compilerOptions60.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel77 = compilerOptions60.reportMissingOverride;
        compilerOptions52.setCheckGlobalNamesLevel(checkLevel77);
        compilerOptions0.setCheckGlobalThisLevel(checkLevel77);
        java.lang.String str80 = compilerOptions0.syntheticBlockStartMarker;
        com.google.javascript.jscomp.CheckLevel checkLevel81 = null;
        compilerOptions0.brokenClosureRequiresLevel = checkLevel81;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(format23);
        org.junit.Assert.assertTrue("'" + tweakProcessing25 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing25.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(detailLevel46);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + languageMode56 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode56.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel77 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel77.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setSkipAllPasses(true);
        boolean boolean26 = compilerOptions0.closurePass;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        boolean boolean7 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean12 = compilerOptions0.removeDeadCode;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions0.checkGlobalNamesLevel;
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripTypes;
        compilerOptions0.setSummaryDetailLevel(0);
        compilerOptions0.setTweakToDoubleLiteral("java.io.IOException: java.io.IOException: java.io.IOException: ", 0.0d);
        compilerOptions0.setRemoveUnusedPrototypeProperties(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setAmbiguateProperties(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setOptimizeParameters(false);
        compilerOptions0.setInlineGetters(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        boolean boolean13 = compilerOptions0.optimizeParameters;
        boolean boolean14 = compilerOptions0.markNoSideEffectCalls;
        compilerOptions0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("Unversioned directory");
        char[] charArray13 = new char[] { '4', '4' };
        printStream10.print(charArray13);
        printStream1.println(charArray13);
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup21;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup23 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder24 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator26 = null;
        com.google.javascript.jscomp.SourceFile sourceFile27 = builder24.buildFromGenerator("hi!", generator26);
        java.lang.Object[] objArray28 = new java.lang.Object[] { diagnosticGroup21, diagnosticGroup23, sourceFile27 };
        java.io.PrintStream printStream29 = printStream19.printf("2019/07/12 07:12", objArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("Unversioned directory");
        char[] charArray35 = new char[] { '4', '4' };
        printStream32.print(charArray35);
        printStream32.print((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        printStream32.write((int) '#');
        java.util.Locale locale43 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream47 = printStream32.format(locale43, "Unversioned directory", objArray46);
        java.io.PrintStream printStream48 = printStream29.format("hi!", objArray46);
        java.io.PrintStream printStream49 = printStream1.printf(locale16, "java.io.IOException: ", objArray46);
        printStream49.print("java.io.IOException");
        printStream49.write((-1));
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        boolean boolean58 = compilerOptions54.jqueryPass;
        compilerOptions54.collapseAnonymousFunctions = false;
        java.lang.String str61 = compilerOptions54.aliasStringsBlacklist;
        compilerOptions54.instrumentationTemplate = "java.io.IOException";
        java.io.PrintStream printStream65 = new java.io.PrintStream("Unversioned directory");
        char[] charArray68 = new char[] { '4', '4' };
        printStream65.print(charArray68);
        printStream65.print((int) ' ');
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream65.write(byteArray78, (int) (byte) 0, (int) (byte) 1);
        compilerOptions54.setInputVariableMapSerialized(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            printStream49.write(byteArray78, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup21);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup23);
        org.junit.Assert.assertNotNull(sourceFile27);
        org.junit.Assert.assertNotNull(objArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy26 = compilerOptions0.variableRenaming;
        boolean boolean27 = compilerOptions0.prettyPrint;
        compilerOptions0.setInlineVariables(true);
        compilerOptions0.setChainCalls(true);
        compilerOptions0.setRemoveUnusedVars(false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy26 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy26.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        boolean boolean11 = compilerOptions8.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode12 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions8.setLanguageIn(languageMode12);
        compilerOptions0.setLanguageIn(languageMode12);
        compilerOptions0.setSmartNameRemoval(true);
        compilerOptions0.setUnaliasableGlobals("Unversioned directory");
        java.util.Set<java.lang.String> strSet19 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.setPrintInputDelimiter(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap22 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap22;
        java.util.Set<java.lang.String> strSet24 = compilerOptions0.aliasableStrings;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + languageMode12 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode12.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineFunctions(reach13);
        compilerOptions0.setColorizeErrorOutput(true);
        boolean boolean17 = compilerOptions0.reserveRawExports;
        java.lang.String str18 = compilerOptions0.renamePrefixNamespace;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy5 = compilerOptions0.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        boolean boolean9 = compilerOptions6.extractPrototypeMemberDeclarations;
        compilerOptions6.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions6.checkGlobalThisLevel;
        compilerOptions6.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.setCollapseProperties(false);
        compilerOptions15.setClosurePass(true);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions15.setInputPropertyMapSerialized(byteArray28);
        compilerOptions15.setFlowSensitiveInlineVariables(true);
        compilerOptions15.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet40 = compilerOptions34.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream41 = strSet40.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream42 = strSet40.parallelStream();
        compilerOptions15.stripNameSuffixes = strSet40;
        compilerOptions6.setStripTypePrefixes(strSet40);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy45 = compilerOptions6.anonymousFunctionNaming;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy45;
        compilerOptions0.setAliasableGlobals("4432#Unversionedhi!rector true\n0\n");
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy5 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy5.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy45 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy45.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        printStream1.print(1L);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setGenerateExports(true);
        compilerOptions25.setCollapseProperties(false);
        boolean boolean34 = compilerOptions25.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        compilerOptions25.setCheckSymbols(true);
        boolean boolean38 = compilerOptions25.devirtualizePrototypeMethods;
        boolean boolean39 = locationMappingList1.equals((java.lang.Object) compilerOptions25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGeneratePseudoNames(true);
        compilerOptions40.inlineLocalFunctions = false;
        compilerOptions40.setInlineLocalVariables(true);
        boolean boolean51 = compilerOptions40.optimizeParameters;
        compilerOptions40.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions40.closurePass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions56.checkProvides;
        java.util.Set<java.lang.String> strSet64 = compilerOptions56.stripTypes;
        compilerOptions40.setStripNamePrefixes(strSet64);
        boolean boolean66 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet64);
        java.lang.Object obj67 = null;
        int int68 = locationMappingList1.indexOf(obj67);
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.setRewriteNewDateGoogNow(true);
        boolean boolean72 = compilerOptions69.extractPrototypeMemberDeclarations;
        compilerOptions69.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet75 = compilerOptions69.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream76 = strSet75.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream77 = strSet75.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream78 = strSet75.parallelStream();
        boolean boolean79 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet75);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        byte[] byteArray37 = compilerOptions0.inputPropertyMapSerialized;
        boolean boolean38 = compilerOptions0.flowSensitiveInlineVariables;
        java.lang.String str39 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setInlineConstantVars(false);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap42 = compilerOptions0.getDefineReplacements();
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setSkipAllPasses(true);
        compilerOptions0.setOptimizeReturns(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.convertToDottedProperties = true;
        boolean boolean28 = compilerOptions22.inlineConstantVars;
        compilerOptions22.aliasAllStrings = false;
        boolean boolean31 = compilerOptions22.smartNameRemoval;
        compilerOptions22.collapseAnonymousFunctions = false;
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions22.checkUnreachableCode;
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel34);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.print(100);
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream11);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker15 = null;
        compiler14.tracker = performanceTracker15;
        com.google.javascript.jscomp.PassConfig passConfig17 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler14.setPassConfig(passConfig17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        java.lang.String str2 = sourceFile1.getOriginalPath();
        java.lang.String str3 = sourceFile1.getName();
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setOptimizeArgumentsArray(true);
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkMissingReturn;
        java.lang.String str7 = compilerOptions0.renamePrefix;
        boolean boolean8 = compilerOptions0.printInputDelimiter;
        boolean boolean9 = compilerOptions0.printInputDelimiter;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        compilerOptions0.enableRuntimeTypeCheck("2019/07/12 07:12");
        compilerOptions0.removeUnusedVars = false;
        compilerOptions0.ideMode = true;
        compilerOptions0.setTightenTypes(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        java.io.PrintStream printStream13 = new java.io.PrintStream("Unversioned directory");
        printStream13.write((-1));
        printStream13.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup18;
        printStream13.print((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("Unversioned directory");
        char[] charArray25 = new char[] { '4', '4' };
        printStream22.print(charArray25);
        printStream22.print((int) ' ');
        byte[] byteArray35 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream22.write(byteArray35, (int) (byte) 0, (int) (byte) 1);
        printStream13.write(byteArray35, 0, 0);
        compilerOptions0.setInputPropertyMapSerialized(byteArray35);
        com.google.javascript.jscomp.SourceMap.Format format43 = compilerOptions0.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        boolean boolean47 = compilerOptions44.extractPrototypeMemberDeclarations;
        compilerOptions44.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions44.checkGlobalThisLevel;
        compilerOptions44.setIgnoreCajaProperties(false);
        compilerOptions44.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler55 = compilerOptions44.getAliasTransformationHandler();
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler55);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(format43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(aliasTransformationHandler55);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.write((int) (byte) 100);
        printStream11.println(true);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        printStream11.println(true);
        java.io.PrintStream printStream22 = printStream11.append('a');
        printStream11.write(1);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setSyntheticBlockStartMarker("Unversioned directory");
        java.lang.String str17 = compilerOptions0.syntheticBlockEndMarker;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.setMarkNoSideEffectCalls(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        compilerOptions16.setCheckSuspiciousCode(true);
        compilerOptions16.setConvertToDottedProperties(false);
        compilerOptions16.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode30 = compilerOptions25.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup31 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup31;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions33.brokenClosureRequiresLevel;
        compilerOptions25.setWarningLevel(diagnosticGroup31, checkLevel39);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions25.checkGlobalThisLevel;
        compilerOptions16.setCheckProvides(checkLevel41);
        compilerOptions16.setTweakToStringLiteral("java.io.IOException: ", "java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach50 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions46.setInlineVariables(reach50);
        boolean boolean52 = compilerOptions46.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap53 = null;
        compilerOptions46.cssRenamingMap = cssRenamingMap53;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing55 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions46.setTweakProcessing(tweakProcessing55);
        compilerOptions46.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions46.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setRewriteNewDateGoogNow(true);
        boolean boolean64 = compilerOptions61.extractPrototypeMemberDeclarations;
        compilerOptions61.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet67 = compilerOptions61.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap68 = compilerOptions61.cssRenamingMap;
        compilerOptions61.reserveRawExports = true;
        com.google.javascript.jscomp.CheckLevel checkLevel71 = compilerOptions61.brokenClosureRequiresLevel;
        compilerOptions46.setCheckGlobalThisLevel(checkLevel71);
        compilerOptions16.setCheckMissingGetCssNameLevel(checkLevel71);
        compilerOptions0.setReportUnknownTypes(checkLevel71);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + tracerMode30 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode30.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + reach50 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach50.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing55 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing55.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(cssRenamingMap68);
        org.junit.Assert.assertTrue("'" + checkLevel71 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel71.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.print(100);
        printStream11.flush();
        printStream11.println((long) 2);
        boolean boolean17 = printStream11.checkError();
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        boolean boolean9 = compilerOptions6.extractPrototypeMemberDeclarations;
        compilerOptions6.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions6.checkGlobalThisLevel;
        compilerOptions0.setAggressiveVarCheck(checkLevel12);
        compilerOptions0.markAsCompiled = false;
        compilerOptions0.lineBreak = false;
        boolean boolean18 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.setInlineLocalFunctions(false);
        compilerOptions0.setLabelRenaming(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        compilerOptions0.setCheckSuspiciousCode(false);
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setInlineProperties(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setOptimizeCalls(true);
        java.lang.String str13 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.setLineBreak(true);
        compilerOptions0.labelRenaming = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setCheckControlStructures(true);
        boolean boolean17 = compilerOptions0.printInputDelimiter;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel18 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel18);
        boolean boolean20 = compilerOptions0.checkTypes;
        compilerOptions0.inlineFunctions = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.crossModuleCodeMotion = false;
        java.lang.String str7 = compilerOptions0.inputDelimiter;
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: Unversioned directory";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "// Input %num%" + "'", str7, "// Input %num%");
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        char[] charArray17 = new char[] { '4', '4' };
        printStream14.print(charArray17);
        printStream14.print((int) ' ');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.write((int) '#');
        java.util.Locale locale25 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream29 = printStream14.format(locale25, "Unversioned directory", objArray28);
        java.io.PrintStream printStream30 = printStream11.format("hi!", objArray28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.convertToDottedProperties = true;
        boolean boolean37 = compilerOptions31.inlineConstantVars;
        compilerOptions31.aliasAllStrings = false;
        boolean boolean40 = compilerOptions31.smartNameRemoval;
        compilerOptions31.gatherCssNames = true;
        compilerOptions31.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention48 = null;
        compilerOptions45.setCodingConvention(codingConvention48);
        boolean boolean50 = compilerOptions45.computeFunctionSideEffects;
        boolean boolean51 = compilerOptions45.printInputDelimiter;
        compilerOptions45.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions45.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions45.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions45.setInputPropertyMapSerialized(byteArray60);
        compilerOptions31.setInputPropertyMapSerialized(byteArray60);
        printStream30.write(byteArray60);
        printStream30.print((int) (byte) 0);
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream30);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) "");
        printStream22.print((float) 10);
        java.io.PrintStream printStream26 = printStream22.append((java.lang.CharSequence) "2019/07/12 07:12");
        printStream26.println("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        printStream26.flush();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setOptimizeCalls(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel13 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel13);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention18 = null;
        compilerOptions15.setCodingConvention(codingConvention18);
        boolean boolean20 = compilerOptions15.computeFunctionSideEffects;
        boolean boolean21 = compilerOptions15.printInputDelimiter;
        compilerOptions15.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        compilerOptions24.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet32 = compilerOptions31.stripNamePrefixes;
        compilerOptions24.setIdGenerators(strSet32);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setGeneratePseudoNames(true);
        compilerOptions34.inlineLocalFunctions = false;
        compilerOptions34.setIdeMode(true);
        compilerOptions34.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions47.checkGlobalThisLevel;
        compilerOptions34.checkMissingReturn = checkLevel53;
        compilerOptions24.aggressiveVarCheck = checkLevel53;
        compilerOptions15.reportMissingOverride = checkLevel53;
        compilerOptions0.checkGlobalThisLevel = checkLevel53;
        boolean boolean58 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setReplaceIdGenerators(false);
        boolean boolean61 = compilerOptions0.foldConstants;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setCollapseAnonymousFunctions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions10.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions10.reportMissingOverride;
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel14;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setLabelRenaming(true);
        compilerOptions16.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions16.setTweakToNumberLiteral("2019/07/12 07:12", 10);
        compilerOptions16.setNameReferenceGraphPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        byte[] byteArray28 = compilerOptions26.inputVariableMapSerialized;
        boolean boolean29 = compilerOptions26.exportTestFunctions;
        compilerOptions26.lineBreak = false;
        boolean boolean32 = compilerOptions26.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode33 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions26.setLanguageOut(languageMode33);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel35 = compilerOptions26.sourceMapDetailLevel;
        compilerOptions16.setSourceMapDetailLevel(detailLevel35);
        compilerOptions0.sourceMapDetailLevel = detailLevel35;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + languageMode33 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode33.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertNotNull(detailLevel35);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        boolean boolean9 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setCheckSymbols(true);
        compilerOptions0.preferLineBreakAtEndOfFile = true;
        compilerOptions0.setDefineToBooleanLiteral("Unversioned directory", false);
        compilerOptions0.setManageClosureDependencies(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy12 = compilerOptions0.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach17 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineVariables(reach17);
        boolean boolean19 = compilerOptions13.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap20 = null;
        compilerOptions13.cssRenamingMap = cssRenamingMap20;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing22 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions13.setTweakProcessing(tweakProcessing22);
        compilerOptions13.setDefineToNumberLiteral("java.io.IOException: ", (int) (short) 10);
        compilerOptions13.renamePrefixNamespace = "java.io.IOException: ";
        java.util.Set<java.lang.String> strSet29 = compilerOptions13.aliasableStrings;
        compilerOptions0.stripTypePrefixes = strSet29;
        compilerOptions0.setLocale("");
        byte[] byteArray33 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.removeUnusedVars = true;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap40 = compilerOptions34.getDefineReplacements();
        com.google.javascript.jscomp.MessageBundle messageBundle41 = compilerOptions34.messageBundle;
        compilerOptions34.labelRenaming = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        boolean boolean47 = compilerOptions44.extractPrototypeMemberDeclarations;
        compilerOptions44.setCollapseProperties(false);
        compilerOptions44.setClosurePass(true);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions44.setInputPropertyMapSerialized(byteArray57);
        compilerOptions44.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel61 = compilerOptions44.reportMissingOverride;
        compilerOptions44.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setRewriteNewDateGoogNow(true);
        boolean boolean67 = compilerOptions64.extractPrototypeMemberDeclarations;
        compilerOptions64.setCollapseProperties(false);
        compilerOptions64.setClosurePass(true);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions64.setInputPropertyMapSerialized(byteArray77);
        compilerOptions64.setFlowSensitiveInlineVariables(true);
        boolean boolean81 = compilerOptions64.exportTestFunctions;
        compilerOptions64.closurePass = false;
        compilerOptions64.renamePrefix = "Unversioned directory";
        compilerOptions64.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet88 = compilerOptions64.stripTypePrefixes;
        compilerOptions44.stripNameSuffixes = strSet88;
        compilerOptions34.setIdGenerators(strSet88);
        compilerOptions0.setIdGenerators(strSet88);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy12 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy12.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + reach17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach17.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing22.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(messageBundle41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel61 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel61.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet88);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean13 = compilerOptions9.jqueryPass;
        compilerOptions9.collapseAnonymousFunctions = false;
        boolean boolean16 = compilerOptions9.checkTypes;
        compilerOptions9.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions9.checkProvides;
        compilerOptions0.checkRequires = checkLevel19;
        compilerOptions0.setMarkAsCompiled(false);
        compilerOptions0.setDeadAssignmentElimination(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromGenerator("java.io.IOException: ", generator1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = sourceFile2.getLine((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setInlineGetters(false);
        boolean boolean9 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.crossModuleMethodMotion = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet13 = compilerOptions12.stripNamePrefixes;
        byte[] byteArray14 = compilerOptions12.inputVariableMapSerialized;
        boolean boolean15 = compilerOptions12.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setLabelRenaming(true);
        compilerOptions16.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions12.setCheckGlobalNamesLevel(checkLevel21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        boolean boolean28 = compilerOptions23.computeFunctionSideEffects;
        boolean boolean29 = compilerOptions23.printInputDelimiter;
        compilerOptions23.setGeneratePseudoNames(true);
        boolean boolean32 = compilerOptions23.disambiguateProperties;
        java.util.Set<java.lang.String> strSet33 = compilerOptions23.aliasableStrings;
        compilerOptions12.stripNameSuffixes = strSet33;
        compilerOptions0.setAliasableStrings(strSet33);
        boolean boolean36 = compilerOptions0.inlineVariables;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setProtectHiddenSideEffects(true);
        boolean boolean11 = compilerOptions0.crossModuleMethodMotion;
        java.util.Set<java.lang.String> strSet12 = compilerOptions0.stripTypePrefixes;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.enableExternExports(true);
        compilerOptions22.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet27 = compilerOptions22.stripNamePrefixes;
        compilerOptions22.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setLabelRenaming(true);
        compilerOptions30.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions30.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing38 = compilerOptions30.getTweakProcessing();
        compilerOptions22.setTweakProcessing(tweakProcessing38);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy40 = compilerOptions22.anonymousFunctionNaming;
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = null;
        compilerOptions22.setTweakReplacements(strMap41);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention46 = null;
        compilerOptions43.setCodingConvention(codingConvention46);
        boolean boolean48 = compilerOptions43.computeFunctionSideEffects;
        boolean boolean49 = compilerOptions43.printInputDelimiter;
        compilerOptions43.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions43.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions43.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions43.setInputPropertyMapSerialized(byteArray58);
        compilerOptions22.inputVariableMapSerialized = byteArray58;
        compilerOptions0.setInputPropertyMapSerialized(byteArray58);
        compilerOptions0.setRemoveUnusedVars(false);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap64 = compilerOptions0.getTweakReplacements();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing38.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy40 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy40.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 10]");
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        java.io.PrintStream printStream1 = new java.io.PrintStream("java.io.IOException: Unversioned directory");
        printStream1.print(32);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream16.println((double) 1);
        printStream16.print(1L);
        java.io.PrintStream printStream22 = printStream16.append('4');
        boolean boolean23 = printStream16.checkError();
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        boolean boolean28 = compilerOptions24.jqueryPass;
        compilerOptions24.collapseAnonymousFunctions = false;
        compilerOptions24.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler33 = compilerOptions24.getAliasTransformationHandler();
        java.lang.String str34 = compilerOptions24.instrumentationTemplate;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention38 = null;
        compilerOptions35.setCodingConvention(codingConvention38);
        boolean boolean40 = compilerOptions35.generateExports;
        compilerOptions35.gatherCssNames = false;
        boolean boolean43 = compilerOptions35.optimizeReturns;
        compilerOptions35.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet46 = compilerOptions35.aliasableStrings;
        compilerOptions35.generateExports = false;
        boolean boolean49 = compilerOptions35.assumeStrictThis();
        boolean boolean50 = compilerOptions35.markNoSideEffectCalls;
        java.util.Set<java.lang.String> strSet51 = compilerOptions35.stripNamePrefixes;
        compilerOptions24.setExtraAnnotationNames(strSet51);
        compilerOptions24.rewriteFunctionExpressions = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.enableExternExports(true);
        compilerOptions55.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet60 = compilerOptions55.stripNamePrefixes;
        compilerOptions55.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setLabelRenaming(true);
        compilerOptions63.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel68 = compilerOptions63.checkGlobalThisLevel;
        compilerOptions63.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing71 = compilerOptions63.getTweakProcessing();
        compilerOptions55.setTweakProcessing(tweakProcessing71);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy73 = compilerOptions55.anonymousFunctionNaming;
        java.util.Map<java.lang.String, java.lang.Object> strMap74 = null;
        compilerOptions55.setTweakReplacements(strMap74);
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention79 = null;
        compilerOptions76.setCodingConvention(codingConvention79);
        boolean boolean81 = compilerOptions76.computeFunctionSideEffects;
        boolean boolean82 = compilerOptions76.printInputDelimiter;
        compilerOptions76.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions76.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions76.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray91 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions76.setInputPropertyMapSerialized(byteArray91);
        compilerOptions55.inputVariableMapSerialized = byteArray91;
        compilerOptions24.inputVariableMapSerialized = byteArray91;
        // The following exception was thrown during execution in test generation
        try {
            printStream16.write(byteArray91, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + checkLevel68 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel68.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing71 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing71.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy73 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy73.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[0, 10]");
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping7 = null;
        boolean boolean8 = locationMappingList1.add(locationMapping7);
        java.lang.Object[] objArray9 = locationMappingList1.toArray();
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        boolean boolean13 = compilerOptions10.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setLabelRenaming(true);
        compilerOptions14.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions14.checkGlobalThisLevel;
        compilerOptions10.setCheckGlobalNamesLevel(checkLevel19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        boolean boolean26 = compilerOptions21.computeFunctionSideEffects;
        boolean boolean27 = compilerOptions21.printInputDelimiter;
        compilerOptions21.setGeneratePseudoNames(true);
        boolean boolean30 = compilerOptions21.disambiguateProperties;
        java.util.Set<java.lang.String> strSet31 = compilerOptions21.aliasableStrings;
        compilerOptions10.stripNameSuffixes = strSet31;
        boolean boolean33 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor35 = locationMappingList1.listIterator((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList38 = locationMappingList1.subList(35, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[null]");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locationMappingItor35);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setAcceptConstKeyword(false);
        boolean boolean15 = compilerOptions0.reserveRawExports;
        compilerOptions0.setRemoveUnusedVars(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setPrettyPrint(true);
        compilerOptions0.sourceMapOutputPath = "hi!";
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        java.util.Set<java.lang.String> strSet52 = compilerOptions0.aliasableStrings;
        compilerOptions0.setPrettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNotNull(strSet52);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        com.google.javascript.rhino.Node node3 = compiler1.getRoot();
        com.google.javascript.jscomp.JSModule jSModule4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray5 = compiler1.toSourceArray(jSModule4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.SourceMap.Format format9 = null;
        compilerOptions0.setSourceMapFormat(format9);
        compilerOptions0.instrumentationTemplate = "// Input %num%";
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        boolean boolean15 = compilerOptions0.lineBreak;
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler9 = compilerOptions0.getAliasTransformationHandler();
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        com.google.javascript.jscomp.CodingConvention codingConvention11 = compilerOptions0.getCodingConvention();
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.checkSuspiciousCode = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(codingConvention11);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet24 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.setRemoveUnusedClassProperties(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        boolean boolean31 = compilerOptions27.jqueryPass;
        compilerOptions27.collapseAnonymousFunctions = false;
        java.lang.String str34 = compilerOptions27.aliasStringsBlacklist;
        compilerOptions27.inlineGetters = false;
        boolean boolean37 = compilerOptions27.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.setCollapseProperties(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy44 = compilerOptions38.variableRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet46 = compilerOptions45.stripNamePrefixes;
        byte[] byteArray47 = compilerOptions45.inputVariableMapSerialized;
        compilerOptions45.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler50 = compilerOptions45.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy51 = compilerOptions45.propertyRenaming;
        compilerOptions27.setRenamingPolicy(variableRenamingPolicy44, propertyRenamingPolicy51);
        compilerOptions0.propertyRenaming = propertyRenamingPolicy51;
        boolean boolean54 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        boolean boolean57 = compilerOptions0.coalesceVariableNames;
        boolean boolean58 = compilerOptions0.printInputDelimiter;
        boolean boolean59 = compilerOptions0.removeUnusedLocalVars;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy44 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy44.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(aliasTransformationHandler50);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy51 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy51.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.setCheckCaja(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        compilerOptions7.setCollapseProperties(false);
        compilerOptions7.setClosurePass(true);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions7.setInputPropertyMapSerialized(byteArray20);
        compilerOptions7.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet30 = compilerOptions24.stripTypePrefixes;
        compilerOptions7.aliasableStrings = strSet30;
        compilerOptions7.setRemoveUnusedVars(false);
        compilerOptions7.checkSuspiciousCode = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing36 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        boolean boolean37 = tweakProcessing36.shouldStrip();
        boolean boolean38 = tweakProcessing36.isOn();
        boolean boolean39 = tweakProcessing36.shouldStrip();
        compilerOptions7.setTweakProcessing(tweakProcessing36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention44 = null;
        compilerOptions41.setCodingConvention(codingConvention44);
        compilerOptions41.setGeneratePseudoNames(true);
        compilerOptions41.inlineLocalFunctions = false;
        compilerOptions41.setIdeMode(true);
        compilerOptions41.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        compilerOptions54.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions54.checkGlobalThisLevel;
        compilerOptions41.checkMissingReturn = checkLevel60;
        compilerOptions7.setReportUnknownTypes(checkLevel60);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention66 = null;
        compilerOptions63.setCodingConvention(codingConvention66);
        boolean boolean68 = compilerOptions63.generateExports;
        compilerOptions63.printInputDelimiter = false;
        compilerOptions63.setCheckSymbols(true);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions63.setInputVariableMapSerialized(byteArray77);
        java.lang.String str79 = compilerOptions63.renamePrefix;
        java.util.Set<java.lang.String> strSet80 = compilerOptions63.stripNameSuffixes;
        compilerOptions7.setStripTypePrefixes(strSet80);
        compilerOptions0.setIdGenerators(strSet80);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + tweakProcessing36 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing36.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 100, 10, 10]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.removeUnusedVars;
        compilerOptions0.inputDelimiter = "java.io.IOException: -1";
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.println('#');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.instrumentationTemplate = "java.io.IOException";
        boolean boolean22 = compilerOptions12.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.aggressiveVarCheck = checkLevel23;
        com.google.javascript.jscomp.MessageBundle messageBundle25 = compilerOptions0.messageBundle;
        compilerOptions0.setAppNameStr("java.io.IOException: -1");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(messageBundle25);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        printStream1.write((-1));
        printStream1.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup6;
        printStream1.print((java.lang.Object) diagnosticGroup6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions9.getTracerMode();
        compilerOptions9.lineBreak = false;
        compilerOptions9.resetWarningsGuard();
        compilerOptions9.setRemoveUnusedClassProperties(true);
        compilerOptions9.aliasExternals = false;
        printStream1.print((java.lang.Object) false);
        printStream1.print(true);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setSyntheticBlockStartMarker("");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel10 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        boolean boolean17 = compilerOptions12.generateExports;
        compilerOptions12.gatherCssNames = false;
        boolean boolean20 = compilerOptions12.optimizeReturns;
        compilerOptions12.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet23 = compilerOptions12.aliasableStrings;
        compilerOptions12.generateExports = false;
        boolean boolean26 = compilerOptions12.assumeStrictThis();
        compilerOptions12.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention32 = null;
        compilerOptions29.setCodingConvention(codingConvention32);
        compilerOptions29.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet37 = compilerOptions36.stripNamePrefixes;
        compilerOptions29.setIdGenerators(strSet37);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGeneratePseudoNames(true);
        compilerOptions39.inlineLocalFunctions = false;
        compilerOptions39.setIdeMode(true);
        compilerOptions39.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        boolean boolean55 = compilerOptions52.extractPrototypeMemberDeclarations;
        compilerOptions52.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel58 = compilerOptions52.checkGlobalThisLevel;
        compilerOptions39.checkMissingReturn = checkLevel58;
        compilerOptions29.aggressiveVarCheck = checkLevel58;
        compilerOptions12.checkUnreachableCode = checkLevel58;
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet63 = compilerOptions62.stripNamePrefixes;
        byte[] byteArray64 = compilerOptions62.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach65 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions62.setInlineFunctions(reach65);
        compilerOptions12.setRemoveUnusedVariable(reach65);
        compilerOptions0.setRemoveUnusedVariable(reach65);
        compilerOptions0.inlineVariables = true;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode71 = compilerOptions0.getLanguageIn();
        compilerOptions0.removeTryCatchFinally = true;
        boolean boolean74 = compilerOptions0.reserveRawExports;
        compilerOptions0.setSyntheticBlockStartMarker("// Input %num%");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + checkLevel58 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel58.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertTrue("'" + reach65 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach65.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + languageMode71 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode71.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.aliasKeywords;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        compilerOptions17.setClosurePass(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions17.setInputPropertyMapSerialized(byteArray30);
        compilerOptions17.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions17.reportMissingOverride;
        compilerOptions17.setNameReferenceReportPath("java.io.IOException: ");
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing37 = compilerOptions17.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing37);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing37 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing37.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        compilerOptions0.disableRuntimeTypeCheck();
        compilerOptions0.removeUnusedPrototypeProperties = true;
        boolean boolean11 = compilerOptions0.assumeStrictThis();
        byte[] byteArray12 = compilerOptions0.inputVariableMapSerialized;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(byteArray12);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "// Input %num%", "java.io.IOException", "", "// Input %num%", "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "Unversioned directory", "java.io.IOException: java.io.IOException: 2019/07/12 07:12" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator14 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        compilerOptions15.optimizeParameters = true;
        compilerOptions15.setAliasAllStrings(true);
        int int22 = locationMappingList1.lastIndexOf((java.lang.Object) true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach27 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions23.setInlineVariables(reach27);
        boolean boolean29 = compilerOptions23.removeUnusedVars;
        boolean boolean30 = compilerOptions23.assumeClosuresOnlyCaptureReferences();
        compilerOptions23.setProcessObjectPropertyString(false);
        compilerOptions23.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean35 = compilerOptions23.removeDeadCode;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel36 = null;
        compilerOptions23.sourceMapDetailLevel = detailLevel36;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        compilerOptions38.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions38.checkProvides;
        java.lang.String[] strArray47 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        compilerOptions38.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList48);
        java.util.stream.Stream<java.lang.String> strStream51 = strList48.stream();
        compilerOptions23.setManageClosureDependencies((java.util.List<java.lang.String>) strList48);
        boolean boolean53 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strList48);
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList1.replaceAll(locationMappingUnaryOperator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + reach27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach27.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor23 = locationMappingList1.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator24 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach29 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions25.setInlineVariables(reach29);
        compilerOptions25.setAliasAllStrings(false);
        java.util.Set<java.lang.String> strSet33 = compilerOptions25.aliasableStrings;
        boolean boolean34 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet33);
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention38 = null;
        compilerOptions35.setCodingConvention(codingConvention38);
        boolean boolean40 = compilerOptions35.generateExports;
        compilerOptions35.gatherCssNames = false;
        boolean boolean43 = compilerOptions35.aliasKeywords;
        boolean boolean44 = locationMappingList1.equals((java.lang.Object) boolean43);
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationMappingItor23);
        org.junit.Assert.assertNotNull(locationMappingSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + reach29 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach29.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.setRemoveAbstractMethods(false);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap10 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.setCollapseProperties(false);
        compilerOptions12.setClosurePass(true);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions12.setInputPropertyMapSerialized(byteArray25);
        compilerOptions12.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet35 = compilerOptions29.stripTypePrefixes;
        compilerOptions12.aliasableStrings = strSet35;
        compilerOptions12.setRemoveUnusedVars(false);
        compilerOptions12.checkSuspiciousCode = false;
        java.lang.String str41 = compilerOptions12.locale;
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions12.checkUnreachableCode;
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions12.checkProvides;
        compilerOptions0.checkGlobalNamesLevel = checkLevel43;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream16.println((double) 1);
        printStream16.print(1L);
        java.util.Locale locale21 = null;
        java.lang.Throwable throwable25 = null;
        java.io.IOException iOException26 = new java.io.IOException("", throwable25);
        java.lang.Throwable throwable28 = null;
        java.io.IOException iOException29 = new java.io.IOException("", throwable28);
        iOException26.addSuppressed((java.lang.Throwable) iOException29);
        java.lang.Throwable throwable33 = null;
        java.io.IOException iOException34 = new java.io.IOException("", throwable33);
        java.lang.Throwable throwable36 = null;
        java.io.IOException iOException37 = new java.io.IOException("", throwable36);
        iOException34.addSuppressed((java.lang.Throwable) iOException37);
        java.io.IOException iOException39 = new java.io.IOException("", (java.lang.Throwable) iOException34);
        iOException29.addSuppressed((java.lang.Throwable) iOException39);
        java.io.IOException iOException41 = new java.io.IOException("", (java.lang.Throwable) iOException29);
        java.lang.Throwable[] throwableArray42 = iOException41.getSuppressed();
        java.io.PrintStream printStream43 = printStream16.format(locale21, "Unversioned directory", (java.lang.Object[]) throwableArray42);
        com.google.javascript.jscomp.Compiler compiler44 = new com.google.javascript.jscomp.Compiler(printStream16);
        double double45 = compiler44.getProgress();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter46 = compiler44.getReverseAbstractInterpreter();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy8 = compilerOptions0.anonymousFunctionNaming;
        compilerOptions0.setReportPath("Unversioned directory");
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.checkMissingReturn;
        compilerOptions0.setExportTestFunctions(false);
        com.google.javascript.jscomp.MessageBundle messageBundle14 = null;
        compilerOptions0.messageBundle = messageBundle14;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy8 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy8.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: Unversioned directory";
        com.google.javascript.jscomp.SourceMap.Format format16 = compilerOptions0.sourceMapFormat;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertNotNull(format16);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        boolean boolean8 = compilerOptions0.labelRenaming;
        compilerOptions0.setColorizeErrorOutput(true);
        boolean boolean11 = compilerOptions0.ideMode;
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        boolean boolean14 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.setCollapseProperties(false);
        compilerOptions15.setClosurePass(true);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions15.setInputPropertyMapSerialized(byteArray28);
        compilerOptions15.setFlowSensitiveInlineVariables(true);
        boolean boolean32 = compilerOptions15.exportTestFunctions;
        compilerOptions15.closurePass = false;
        compilerOptions15.renamePrefix = "Unversioned directory";
        compilerOptions15.setMoveFunctionDeclarations(false);
        compilerOptions15.setSkipAllPasses(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap41 = compilerOptions15.getDefineReplacements();
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions15.checkRequires;
        compilerOptions15.disableRuntimeTypeCheck();
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions15.checkUnreachableCode;
        com.google.javascript.jscomp.MessageBundle messageBundle45 = null;
        compilerOptions15.setMessageBundle(messageBundle45);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions15.checkRequires;
        compilerOptions0.checkUnreachableCode = checkLevel47;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap49 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap49;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setIgnoreCajaProperties(false);
        compilerOptions0.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler11 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.jscomp.MessageBundle messageBundle12 = compilerOptions0.messageBundle;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(aliasTransformationHandler11);
        org.junit.Assert.assertNull(messageBundle12);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.SourceMap.Format format25 = null;
        compilerOptions0.sourceMapFormat = format25;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor23 = locationMappingList1.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator24 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        byte[] byteArray27 = compilerOptions25.inputVariableMapSerialized;
        boolean boolean28 = compilerOptions25.exportTestFunctions;
        compilerOptions25.setExtractPrototypeMemberDeclarations(true);
        compilerOptions25.reserveRawExports = false;
        compilerOptions25.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        boolean boolean41 = compilerOptions36.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setLabelRenaming(true);
        compilerOptions42.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean47 = compilerOptions42.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format48 = compilerOptions42.sourceMapFormat;
        compilerOptions36.sourceMapFormat = format48;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        compilerOptions50.setCollapseProperties(false);
        boolean boolean56 = compilerOptions50.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat57 = compilerOptions50.errorFormat;
        compilerOptions36.setErrorFormat(errorFormat57);
        compilerOptions25.setErrorFormat(errorFormat57);
        boolean boolean60 = locationMappingList1.remove((java.lang.Object) compilerOptions25);
        compilerOptions25.setSmartNameRemoval(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        boolean boolean66 = compilerOptions63.extractPrototypeMemberDeclarations;
        compilerOptions63.convertToDottedProperties = true;
        boolean boolean69 = compilerOptions63.inlineConstantVars;
        compilerOptions63.aliasAllStrings = false;
        boolean boolean72 = compilerOptions63.smartNameRemoval;
        compilerOptions63.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel75 = compilerOptions63.checkGlobalNamesLevel;
        compilerOptions25.setCheckProvides(checkLevel75);
        compilerOptions25.crossModuleMethodMotion = true;
        compilerOptions25.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        compilerOptions25.collapseVariableDeclarations = true;
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationMappingItor23);
        org.junit.Assert.assertNotNull(locationMappingSpliterator24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(format48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(errorFormat57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + checkLevel75 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel75.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.closurePass;
        compilerOptions0.setRemoveAbstractMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        compilerOptions0.setMarkAsCompiled(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator34 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping35 = null;
        boolean boolean36 = locationMappingList1.add(locationMapping35);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        compilerOptions37.convertToDottedProperties = true;
        boolean boolean43 = compilerOptions37.inlineConstantVars;
        boolean boolean44 = compilerOptions37.extractPrototypeMemberDeclarations;
        boolean boolean45 = compilerOptions37.gatherCssNames;
        compilerOptions37.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions37.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        boolean boolean55 = compilerOptions51.jqueryPass;
        boolean boolean56 = compilerOptions51.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setLabelRenaming(true);
        compilerOptions57.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean62 = compilerOptions57.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format63 = compilerOptions57.sourceMapFormat;
        compilerOptions51.setSourceMapFormat(format63);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing65 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions51.setTweakProcessing(tweakProcessing65);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention70 = null;
        compilerOptions67.setCodingConvention(codingConvention70);
        compilerOptions67.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel74 = compilerOptions67.checkProvides;
        java.util.Set<java.lang.String> strSet75 = compilerOptions67.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream76 = strSet75.stream();
        compilerOptions51.stripTypes = strSet75;
        compilerOptions37.setStripNameSuffixes(strSet75);
        com.google.javascript.jscomp.CheckLevel checkLevel79 = compilerOptions37.checkProvides;
        compilerOptions37.setSyntheticBlockStartMarker("java.io.IOException: Unversioned directory");
        boolean boolean82 = locationMappingList1.remove((java.lang.Object) "java.io.IOException: Unversioned directory");
        int int83 = locationMappingList1.size();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(format63);
        org.junit.Assert.assertTrue("'" + tweakProcessing65 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing65.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel74 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel74.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertTrue("'" + checkLevel79 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel79.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromInputStream("java.io.IOException: java.io.IOException: java.io.IOException: ", inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode3 = com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY;
        compilerOptions0.setTracer(tracerMode3);
        compilerOptions0.setSmartNameRemoval(false);
        compilerOptions0.setOptimizeReturns(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        boolean boolean15 = compilerOptions9.closurePass;
        compilerOptions9.setRemoveAbstractMethods(true);
        compilerOptions9.setPropertyAffinity(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat20 = compilerOptions9.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat20);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention25 = null;
        compilerOptions22.setCodingConvention(codingConvention25);
        compilerOptions22.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet30 = compilerOptions29.stripNamePrefixes;
        compilerOptions22.setIdGenerators(strSet30);
        java.lang.String[] strArray36 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        compilerOptions22.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList37);
        compilerOptions22.setCheckSymbols(true);
        compilerOptions22.collapseAnonymousFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet45 = compilerOptions44.stripNamePrefixes;
        compilerOptions22.stripTypePrefixes = strSet45;
        java.util.stream.Stream<java.lang.String> strStream47 = strSet45.parallelStream();
        compilerOptions0.aliasableStrings = strSet45;
        org.junit.Assert.assertTrue("'" + tracerMode3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY + "'", tracerMode3.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.TIMING_ONLY));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(errorFormat20);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(strStream47);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = null;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy8);
        compilerOptions0.setInlineConstantVars(true);
        compilerOptions0.aliasExternals = true;
        compilerOptions0.labelRenaming = false;
        compilerOptions0.setClosurePass(false);
        compilerOptions0.setOutputCharset("// Input %num%");
        java.io.PrintStream printStream21 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup23 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup23;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup25 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder26 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator28 = null;
        com.google.javascript.jscomp.SourceFile sourceFile29 = builder26.buildFromGenerator("hi!", generator28);
        java.lang.Object[] objArray30 = new java.lang.Object[] { diagnosticGroup23, diagnosticGroup25, sourceFile29 };
        java.io.PrintStream printStream31 = printStream21.printf("2019/07/12 07:12", objArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream("Unversioned directory");
        char[] charArray37 = new char[] { '4', '4' };
        printStream34.print(charArray37);
        printStream34.print((int) ' ');
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream34, false);
        printStream34.write((int) '#');
        java.util.Locale locale45 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream49 = printStream34.format(locale45, "Unversioned directory", objArray48);
        java.io.PrintStream printStream50 = printStream31.format("hi!", objArray48);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        compilerOptions51.convertToDottedProperties = true;
        boolean boolean57 = compilerOptions51.inlineConstantVars;
        compilerOptions51.aliasAllStrings = false;
        boolean boolean60 = compilerOptions51.smartNameRemoval;
        compilerOptions51.gatherCssNames = true;
        compilerOptions51.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention68 = null;
        compilerOptions65.setCodingConvention(codingConvention68);
        boolean boolean70 = compilerOptions65.computeFunctionSideEffects;
        boolean boolean71 = compilerOptions65.printInputDelimiter;
        compilerOptions65.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions65.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions65.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions65.setInputPropertyMapSerialized(byteArray80);
        compilerOptions51.setInputPropertyMapSerialized(byteArray80);
        printStream50.write(byteArray80);
        compilerOptions0.inputPropertyMapSerialized = byteArray80;
        java.lang.String str85 = compilerOptions0.sourceMapOutputPath;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup25);
        org.junit.Assert.assertNotNull(sourceFile29);
        org.junit.Assert.assertNotNull(objArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 10]");
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        java.lang.String str14 = compilerOptions0.sourceMapOutputPath;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention18 = null;
        compilerOptions15.setCodingConvention(codingConvention18);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy20 = compilerOptions15.anonymousFunctionNaming;
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions15.checkMissingGetCssNameLevel;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel21);
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy20 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy20.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean24 = compilerOptions0.generateExports;
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.setConvertToDottedProperties(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = null;
        compilerOptions0.setTweakReplacements(strMap29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("4432#Unversionedhi!rector true\n0\n");
        java.lang.String str2 = sourceFile1.getName();
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4432#Unversionedhi!rector true\n0\n" + "'", str2, "4432#Unversionedhi!rector true\n0\n");
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        com.google.javascript.jscomp.MessageBundle messageBundle8 = compilerOptions0.messageBundle;
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.setTweakToStringLiteral("hi!", "java.io.IOException");
        compilerOptions0.setRuntimeTypeCheckLogFunction("java.io.IOException: ");
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions16.setInlineVariables(reach20);
        compilerOptions16.setPrintInputDelimiter(true);
        boolean boolean24 = compilerOptions16.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle25 = null;
        compilerOptions16.messageBundle = messageBundle25;
        compilerOptions16.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap29 = null;
        compilerOptions16.cssRenamingMap = cssRenamingMap29;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList31 = compilerOptions16.sourceMapLocationMappings;
        locationMappingList31.clear();
        compilerOptions0.setSourceMapLocationMappings(locationMappingList31);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.setCollapseProperties(false);
        compilerOptions34.setClosurePass(true);
        compilerOptions34.setDefineToDoubleLiteral("java.io.IOException: ", (double) 0L);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions34.checkGlobalThisLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention49 = null;
        compilerOptions46.setCodingConvention(codingConvention49);
        compilerOptions46.setGeneratePseudoNames(true);
        compilerOptions46.inlineLocalFunctions = false;
        compilerOptions46.setInlineLocalVariables(true);
        boolean boolean57 = compilerOptions46.optimizeParameters;
        compilerOptions46.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions46.closurePass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions62.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention65 = null;
        compilerOptions62.setCodingConvention(codingConvention65);
        compilerOptions62.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel69 = compilerOptions62.checkProvides;
        java.util.Set<java.lang.String> strSet70 = compilerOptions62.stripTypes;
        compilerOptions46.setStripNamePrefixes(strSet70);
        compilerOptions34.aliasableStrings = strSet70;
        boolean boolean73 = locationMappingList31.equals((java.lang.Object) compilerOptions34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertNull(messageBundle8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locationMappingList31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel69 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel69.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        compilerOptions0.extractPrototypeMemberDeclarations = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet21 = compilerOptions15.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream22 = strSet21.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream24 = strSet21.parallelStream();
        compilerOptions0.stripNamePrefixes = strSet21;
        compilerOptions0.setExternExportsPath("hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertNotNull(strStream24);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.setRewriteFunctionExpressions(false);
        compilerOptions0.setTightenTypes(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setCheckTypes(false);
        compilerOptions0.reserveRawExports = false;
        compilerOptions0.devirtualizePrototypeMethods = true;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setLabelRenaming(true);
        compilerOptions13.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean18 = compilerOptions13.labelRenaming;
        compilerOptions13.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet22 = compilerOptions21.stripNamePrefixes;
        byte[] byteArray23 = compilerOptions21.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup24 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup24;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        compilerOptions21.setWarningLevel(diagnosticGroup24, checkLevel33);
        compilerOptions13.checkUnreachableCode = checkLevel33;
        compilerOptions0.aggressiveVarCheck = checkLevel33;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.removeUnusedLocalVars = true;
        compilerOptions0.closurePass = false;
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean45 = compilerOptions0.foldConstants;
        compilerOptions0.disableRuntimeTypeCheck();
        boolean boolean47 = compilerOptions0.inlineFunctions;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard48 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard48);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap50 = compilerOptions0.getTweakReplacements();
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(byteArray23);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup24);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        compilerOptions7.convertToDottedProperties = true;
        boolean boolean13 = compilerOptions7.inlineConstantVars;
        boolean boolean14 = compilerOptions7.extractPrototypeMemberDeclarations;
        boolean boolean15 = compilerOptions7.gatherCssNames;
        compilerOptions7.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions7.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        boolean boolean25 = compilerOptions21.jqueryPass;
        boolean boolean26 = compilerOptions21.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setLabelRenaming(true);
        compilerOptions27.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean32 = compilerOptions27.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format33 = compilerOptions27.sourceMapFormat;
        compilerOptions21.setSourceMapFormat(format33);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing35 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions21.setTweakProcessing(tweakProcessing35);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = null;
        compilerOptions37.setCodingConvention(codingConvention40);
        compilerOptions37.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions37.checkProvides;
        java.util.Set<java.lang.String> strSet45 = compilerOptions37.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream46 = strSet45.stream();
        compilerOptions21.stripTypes = strSet45;
        compilerOptions7.setStripNameSuffixes(strSet45);
        java.util.stream.Stream<java.lang.String> strStream49 = strSet45.stream();
        compilerOptions0.stripNameSuffixes = strSet45;
        compilerOptions0.setCollapseObjectLiterals(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(format33);
        org.junit.Assert.assertTrue("'" + tweakProcessing35 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing35.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertNotNull(strStream49);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setClosurePass(true);
        boolean boolean7 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.io.IOException iOException36 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException37 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException36);
        int int40 = locationMappingList1.indexOf((java.lang.Object) iOException36);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator41 = locationMappingList1.spliterator();
        locationMappingList1.clear();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping44 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList1.add(32, locationMapping44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(locationMappingSpliterator41);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.setCheckMissingGetCssNameBlacklist("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        boolean boolean6 = compilerOptions0.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions7.messageBundle = messageBundle9;
        compilerOptions7.setCoalesceVariableNames(false);
        compilerOptions7.setRecordFunctionInformation(true);
        compilerOptions7.aliasExternals = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        compilerOptions17.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean26 = compilerOptions17.foldConstants;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        boolean boolean32 = compilerOptions27.computeFunctionSideEffects;
        boolean boolean33 = compilerOptions27.printInputDelimiter;
        compilerOptions27.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        compilerOptions36.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet44 = compilerOptions43.stripNamePrefixes;
        compilerOptions36.setIdGenerators(strSet44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention49 = null;
        compilerOptions46.setCodingConvention(codingConvention49);
        compilerOptions46.setGeneratePseudoNames(true);
        compilerOptions46.inlineLocalFunctions = false;
        compilerOptions46.setIdeMode(true);
        compilerOptions46.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        boolean boolean62 = compilerOptions59.extractPrototypeMemberDeclarations;
        compilerOptions59.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel65 = compilerOptions59.checkGlobalThisLevel;
        compilerOptions46.checkMissingReturn = checkLevel65;
        compilerOptions36.aggressiveVarCheck = checkLevel65;
        compilerOptions27.reportMissingOverride = checkLevel65;
        compilerOptions17.brokenClosureRequiresLevel = checkLevel65;
        compilerOptions7.setCheckProvides(checkLevel65);
        compilerOptions0.setReportUnknownTypes(checkLevel65);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + checkLevel65 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel65.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        boolean boolean24 = compilerOptions0.generateExports;
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.setConvertToDottedProperties(true);
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.inlineGetters = true;
        compilerOptions0.jqueryPass = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.checkTypes = true;
        java.lang.Object obj10 = compilerOptions0.clone();
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        compilerOptions0.generatePseudoNames = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile sourceFile11 = builder9.buildFromFile("hi!");
        com.google.javascript.jscomp.SourceFile.Generator generator13 = null;
        com.google.javascript.jscomp.SourceFile sourceFile14 = builder9.buildFromGenerator("-1", generator13);
        java.lang.String str15 = sourceFile14.getOriginalPath();
        java.lang.String str16 = sourceFile14.getName();
        boolean boolean17 = sourceFile14.isExtern();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile11);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Unversioned directory" + "'", str15, "Unversioned directory");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.syntheticBlockEndMarker = "";
        compilerOptions0.setReplaceIdGenerators(true);
        java.lang.String str10 = compilerOptions0.instrumentationTemplate;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.setShadowVariables(true);
        compilerOptions0.setIdeMode(true);
        compilerOptions0.setGatherCssNames(false);
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.collapseAnonymousFunctions = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet23 = compilerOptions17.stripTypePrefixes;
        compilerOptions0.aliasableStrings = strSet23;
        compilerOptions0.setRemoveUnusedVars(false);
        compilerOptions0.checkSuspiciousCode = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing29 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        boolean boolean30 = tweakProcessing29.shouldStrip();
        boolean boolean31 = tweakProcessing29.isOn();
        boolean boolean32 = tweakProcessing29.shouldStrip();
        compilerOptions0.setTweakProcessing(tweakProcessing29);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setGeneratePseudoNames(true);
        compilerOptions34.inlineLocalFunctions = false;
        compilerOptions34.setIdeMode(true);
        compilerOptions34.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions47.checkGlobalThisLevel;
        compilerOptions34.checkMissingReturn = checkLevel53;
        compilerOptions0.setReportUnknownTypes(checkLevel53);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setPropertyAffinity(true);
        compilerOptions56.setCrossModuleCodeMotion(false);
        compilerOptions56.preferLineBreakAtEndOfFile = true;
        boolean boolean67 = compilerOptions56.convertToDottedProperties;
        com.google.javascript.jscomp.CheckLevel checkLevel68 = compilerOptions56.checkGlobalThisLevel;
        compilerOptions0.setCheckRequires(checkLevel68);
        compilerOptions0.optimizeReturns = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + tweakProcessing29 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing29.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + checkLevel68 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel68.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        boolean boolean10 = compilerOptions0.collapseVariableDeclarations;
        boolean boolean11 = compilerOptions0.isRemoveUnusedClassProperties();
        compilerOptions0.setUnaliasableGlobals("java.io.IOException: java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        boolean boolean9 = compilerOptions0.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.checkMissingGetCssNameLevel;
        boolean boolean11 = compilerOptions0.aliasAllStrings;
        compilerOptions0.exportTestFunctions = true;
        boolean boolean14 = compilerOptions0.moveFunctionDeclarations;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGeneratePseudoNames(true);
        compilerOptions10.inlineLocalFunctions = false;
        compilerOptions10.setIdeMode(true);
        compilerOptions10.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions23.checkGlobalThisLevel;
        compilerOptions10.checkMissingReturn = checkLevel29;
        compilerOptions0.aggressiveVarCheck = checkLevel29;
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions0.reportMissingOverride;
        boolean boolean33 = compilerOptions0.collapseAnonymousFunctions;
        byte[] byteArray34 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet36 = compilerOptions35.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle37 = null;
        compilerOptions35.messageBundle = messageBundle37;
        compilerOptions35.setExtractPrototypeMemberDeclarations(true);
        compilerOptions35.syntheticBlockEndMarker = "";
        compilerOptions35.setReplaceIdGenerators(true);
        compilerOptions35.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.convertToDottedProperties = true;
        boolean boolean53 = compilerOptions47.inlineConstantVars;
        compilerOptions47.aliasAllStrings = false;
        boolean boolean56 = compilerOptions47.smartNameRemoval;
        compilerOptions47.gatherCssNames = true;
        compilerOptions47.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention64 = null;
        compilerOptions61.setCodingConvention(codingConvention64);
        boolean boolean66 = compilerOptions61.computeFunctionSideEffects;
        boolean boolean67 = compilerOptions61.printInputDelimiter;
        compilerOptions61.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions61.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions61.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions61.setInputPropertyMapSerialized(byteArray76);
        compilerOptions47.setInputPropertyMapSerialized(byteArray76);
        compilerOptions35.setInputVariableMapSerialized(byteArray76);
        compilerOptions0.inputPropertyMapSerialized = byteArray76;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 10]");
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        compilerOptions0.setProcessObjectPropertyString(true);
        compilerOptions0.removeUnusedPrototypeProperties = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy17 = compilerOptions11.variableRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet19 = compilerOptions18.stripNamePrefixes;
        byte[] byteArray20 = compilerOptions18.inputVariableMapSerialized;
        compilerOptions18.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler23 = compilerOptions18.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy24 = compilerOptions18.propertyRenaming;
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy17, propertyRenamingPolicy24);
        compilerOptions0.setInlineProperties(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy17.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(aliasTransformationHandler23);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy24 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy24.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions0.getTracerMode();
        compilerOptions0.instrumentationTemplate = "Unversioned directory";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.removeUnusedClassProperties = true;
        boolean boolean10 = compilerOptions0.aliasAllStrings;
        compilerOptions0.closurePass = false;
        compilerOptions0.setRenamePrefix("java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setMoveFunctionDeclarations(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean13 = compilerOptions9.jqueryPass;
        compilerOptions9.collapseAnonymousFunctions = false;
        boolean boolean16 = compilerOptions9.checkTypes;
        compilerOptions9.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        compilerOptions19.setIdGenerators(strSet27);
        compilerOptions9.setStripNameSuffixes(strSet27);
        compilerOptions0.stripTypePrefixes = strSet27;
        compilerOptions0.setAcceptConstKeyword(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode33 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions0.setTracer(tracerMode33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + tracerMode33 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode33.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setInlineGetters(false);
        compilerOptions0.sourceMapOutputPath = "// Input %num%";
        boolean boolean29 = compilerOptions0.inlineGetters;
        boolean boolean30 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.crossModuleMethodMotion = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("", throwable1);
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("", throwable4);
        iOException2.addSuppressed((java.lang.Throwable) iOException5);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("", throwable9);
        java.lang.Throwable throwable12 = null;
        java.io.IOException iOException13 = new java.io.IOException("", throwable12);
        iOException10.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException("", (java.lang.Throwable) iOException10);
        iOException5.addSuppressed((java.lang.Throwable) iOException15);
        java.lang.Throwable throwable19 = null;
        java.io.IOException iOException20 = new java.io.IOException("", throwable19);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("", throwable22);
        iOException20.addSuppressed((java.lang.Throwable) iOException23);
        java.lang.Throwable throwable27 = null;
        java.io.IOException iOException28 = new java.io.IOException("", throwable27);
        java.lang.Throwable throwable30 = null;
        java.io.IOException iOException31 = new java.io.IOException("", throwable30);
        iOException28.addSuppressed((java.lang.Throwable) iOException31);
        java.io.IOException iOException33 = new java.io.IOException("", (java.lang.Throwable) iOException28);
        iOException23.addSuppressed((java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException("", (java.lang.Throwable) iOException23);
        iOException5.addSuppressed((java.lang.Throwable) iOException23);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.lang.Throwable[] throwableArray38 = iOException23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        java.lang.Object[] objArray12 = locationMappingList9.toArray();
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach17 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineVariables(reach17);
        compilerOptions13.setPrintInputDelimiter(true);
        boolean boolean21 = compilerOptions13.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle22 = null;
        compilerOptions13.messageBundle = messageBundle22;
        compilerOptions13.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet33 = compilerOptions27.stripTypePrefixes;
        compilerOptions26.stripTypePrefixes = strSet33;
        compilerOptions13.setAliasableStrings(strSet33);
        boolean boolean36 = locationMappingList9.containsAll((java.util.Collection<java.lang.String>) strSet33);
        boolean boolean37 = locationMappingList9.isEmpty();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping39 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList9.add((int) '4', locationMapping39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + reach17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach17.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        boolean boolean4 = compilerOptions0.deadAssignmentElimination;
        boolean boolean5 = compilerOptions0.smartNameRemoval;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        com.google.javascript.jscomp.Compiler.CodeBuilder codeBuilder0 = new com.google.javascript.jscomp.Compiler.CodeBuilder();
        java.lang.String str1 = codeBuilder0.toString();
        int int2 = codeBuilder0.getLength();
        java.lang.String str3 = codeBuilder0.toString();
        int int4 = codeBuilder0.getLength();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.reserveRawExports = false;
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setColorizeErrorOutput(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap12 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap12;
        compilerOptions0.setAliasAllStrings(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.resetWarningsGuard();
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        compilerOptions7.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        java.lang.String str19 = compilerOptions12.aliasStringsBlacklist;
        compilerOptions12.instrumentationTemplate = "java.io.IOException";
        boolean boolean22 = compilerOptions12.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions7.checkUnreachableCode = checkLevel23;
        compilerOptions0.aggressiveVarCheck = checkLevel23;
        compilerOptions0.setCollapseAnonymousFunctions(false);
        boolean boolean28 = compilerOptions0.coalesceVariableNames;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention32 = null;
        compilerOptions29.setCodingConvention(codingConvention32);
        boolean boolean34 = compilerOptions29.generateExports;
        compilerOptions29.deadAssignmentElimination = false;
        compilerOptions29.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        boolean boolean43 = compilerOptions39.jqueryPass;
        compilerOptions39.collapseAnonymousFunctions = false;
        java.lang.String str46 = compilerOptions39.aliasStringsBlacklist;
        compilerOptions39.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        boolean boolean53 = compilerOptions49.jqueryPass;
        compilerOptions49.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions56.checkProvides;
        compilerOptions49.brokenClosureRequiresLevel = checkLevel63;
        compilerOptions39.setCheckGlobalThisLevel(checkLevel63);
        compilerOptions29.aggressiveVarCheck = checkLevel63;
        compilerOptions29.collapseVariableDeclarations = false;
        boolean boolean69 = compilerOptions29.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions70 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions70.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention73 = null;
        compilerOptions70.setCodingConvention(codingConvention73);
        compilerOptions70.setGenerateExports(true);
        compilerOptions70.setCollapseProperties(false);
        boolean boolean79 = compilerOptions70.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel80 = compilerOptions70.aggressiveVarCheck;
        compilerOptions29.setAggressiveVarCheck(checkLevel80);
        compilerOptions0.setAggressiveVarCheck(checkLevel80);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap83 = compilerOptions0.getDefineReplacements();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + checkLevel80 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel80.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap83);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.closurePass;
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.recordFunctionInformation = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap11 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap11;
        compilerOptions0.exportTestFunctions = false;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray15 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList16 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList16, locationMappingArray15);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        compilerOptions18.setCollapseProperties(false);
        compilerOptions18.setClosurePass(true);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions18.setInputPropertyMapSerialized(byteArray31);
        compilerOptions18.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        compilerOptions35.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet41 = compilerOptions35.stripTypePrefixes;
        compilerOptions18.aliasableStrings = strSet41;
        boolean boolean43 = locationMappingList16.removeAll((java.util.Collection<java.lang.String>) strSet41);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup44 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup44;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup44;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup44;
        boolean boolean48 = locationMappingList16.contains((java.lang.Object) diagnosticGroup44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        boolean boolean53 = compilerOptions49.jqueryPass;
        boolean boolean54 = compilerOptions49.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setLabelRenaming(true);
        compilerOptions55.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean60 = compilerOptions55.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format61 = compilerOptions55.sourceMapFormat;
        compilerOptions49.setSourceMapFormat(format61);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing63 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions49.setTweakProcessing(tweakProcessing63);
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention68 = null;
        compilerOptions65.setCodingConvention(codingConvention68);
        compilerOptions65.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel72 = compilerOptions65.checkProvides;
        java.util.Set<java.lang.String> strSet73 = compilerOptions65.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream74 = strSet73.stream();
        compilerOptions49.stripTypes = strSet73;
        boolean boolean76 = locationMappingList16.removeAll((java.util.Collection<java.lang.String>) strSet73);
        compilerOptions0.sourceMapLocationMappings = locationMappingList16;
        com.google.javascript.jscomp.DiagnosticType diagnosticType78 = com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR;
        com.google.javascript.jscomp.DiagnosticType[] diagnosticTypeArray79 = new com.google.javascript.jscomp.DiagnosticType[] { diagnosticType78 };
        com.google.javascript.jscomp.DiagnosticType[] diagnosticTypeArray80 = locationMappingList16.toArray(diagnosticTypeArray79);
        locationMappingList16.clear();
        locationMappingList16.clear();
        int int83 = locationMappingList16.size();
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator84 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList16.replaceAll(locationMappingUnaryOperator84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locationMappingArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(format61);
        org.junit.Assert.assertTrue("'" + tweakProcessing63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing63.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel72 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel72.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(diagnosticType78);
        org.junit.Assert.assertNotNull(diagnosticTypeArray79);
        org.junit.Assert.assertNotNull(diagnosticTypeArray80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setCheckSymbols(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        boolean boolean19 = compilerOptions13.inlineConstantVars;
        boolean boolean20 = compilerOptions13.extractPrototypeMemberDeclarations;
        boolean boolean21 = compilerOptions13.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard22 = null;
        compilerOptions13.setWarningsGuard(composeWarningsGuard22);
        compilerOptions13.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach26 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineFunctions(reach26);
        compilerOptions0.setRemoveUnusedVariables(reach26);
        boolean boolean29 = compilerOptions0.gatherCssNames;
        compilerOptions0.checkControlStructures = true;
        compilerOptions0.setTweakToStringLiteral("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException");
        compilerOptions0.setClosurePass(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + reach26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach26.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.prettyPrint = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        compilerOptions10.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean19 = compilerOptions10.deadAssignmentElimination;
        compilerOptions10.optimizeCalls = false;
        compilerOptions10.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        boolean boolean24 = compilerOptions10.jqueryPass;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions25.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray33 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList34 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList34, locationMappingArray33);
        compilerOptions25.sourceMapLocationMappings = locationMappingList34;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        boolean boolean41 = compilerOptions37.jqueryPass;
        compilerOptions37.collapseAnonymousFunctions = false;
        boolean boolean44 = compilerOptions37.checkTypes;
        compilerOptions37.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions37.checkProvides;
        compilerOptions25.checkUnreachableCode = checkLevel47;
        compilerOptions25.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        boolean boolean54 = compilerOptions51.extractPrototypeMemberDeclarations;
        boolean boolean55 = compilerOptions51.jqueryPass;
        compilerOptions51.collapseAnonymousFunctions = false;
        boolean boolean58 = compilerOptions51.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet67 = compilerOptions66.stripNamePrefixes;
        compilerOptions59.setIdGenerators(strSet67);
        compilerOptions51.stripNamePrefixes = strSet67;
        compilerOptions25.setIdGenerators(strSet67);
        compilerOptions10.stripTypePrefixes = strSet67;
        compilerOptions0.stripNameSuffixes = strSet67;
        compilerOptions0.skipAllCompilerPasses();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet67);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat21 = compilerOptions14.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.setCollapseProperties(false);
        boolean boolean29 = compilerOptions23.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat30 = compilerOptions23.errorFormat;
        boolean boolean31 = compilerOptions23.convertToDottedProperties;
        com.google.javascript.jscomp.ErrorFormat errorFormat32 = compilerOptions23.errorFormat;
        compilerOptions0.errorFormat = errorFormat32;
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions0.brokenClosureRequiresLevel;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(errorFormat21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(errorFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(errorFormat32);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setPrettyPrint(true);
        compilerOptions0.sourceMapOutputPath = "hi!";
        compilerOptions0.setShadowVariables(true);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.setGenerateExports(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing10 = compilerOptions0.getTweakProcessing();
        compilerOptions0.devirtualizePrototypeMethods = true;
        boolean boolean13 = compilerOptions0.labelRenaming;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap14 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap14;
        compilerOptions0.setSyntheticBlockStartMarker("// Input %num%");
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        boolean boolean21 = compilerOptions18.extractPrototypeMemberDeclarations;
        boolean boolean22 = compilerOptions18.jqueryPass;
        compilerOptions18.collapseAnonymousFunctions = false;
        java.lang.String str25 = compilerOptions18.aliasStringsBlacklist;
        compilerOptions18.instrumentationTemplate = "java.io.IOException";
        compilerOptions18.printInputDelimiter = true;
        compilerOptions18.setReplaceStringsPlaceholderToken("hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention35 = null;
        compilerOptions32.setCodingConvention(codingConvention35);
        boolean boolean37 = compilerOptions32.generateExports;
        compilerOptions32.gatherCssNames = false;
        boolean boolean40 = compilerOptions32.optimizeReturns;
        compilerOptions32.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet43 = compilerOptions32.aliasableStrings;
        compilerOptions32.generateExports = false;
        boolean boolean46 = compilerOptions32.assumeStrictThis();
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions32.checkGlobalThisLevel;
        com.google.javascript.jscomp.CodingConvention codingConvention48 = compilerOptions32.getCodingConvention();
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode49 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3;
        compilerOptions32.setLanguageOut(languageMode49);
        compilerOptions18.setLanguageIn(languageMode49);
        compilerOptions0.setLanguageIn(languageMode49);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing10 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing10.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(codingConvention48);
        org.junit.Assert.assertTrue("'" + languageMode49 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode49.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("-1", "// Input %num%");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.foldConstants;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.enableExternExports(true);
        java.util.Set<java.lang.String> strSet14 = compilerOptions11.stripTypes;
        compilerOptions11.setRemoveUnusedVars(true);
        compilerOptions11.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach23 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions20.setInlineFunctions(reach23);
        compilerOptions11.setRemoveUnusedVariable(reach23);
        compilerOptions0.setRemoveUnusedVariables(reach23);
        boolean boolean27 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean28 = compilerOptions0.computeFunctionSideEffects;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + reach23 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach23.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.exportTestFunctions = false;
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention10 = null;
        compilerOptions7.setCodingConvention(codingConvention10);
        compilerOptions7.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions7.checkProvides;
        compilerOptions7.removeUnusedPrototypePropertiesInExterns = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        boolean boolean21 = compilerOptions17.jqueryPass;
        boolean boolean22 = compilerOptions17.deadAssignmentElimination;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions17.reportMissingOverride;
        compilerOptions17.removeUnusedPrototypePropertiesInExterns = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGeneratePseudoNames(true);
        compilerOptions26.inlineLocalFunctions = false;
        compilerOptions26.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        compilerOptions37.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention46 = null;
        compilerOptions43.setCodingConvention(codingConvention46);
        compilerOptions43.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions43.checkProvides;
        compilerOptions37.setReportUnknownTypes(checkLevel50);
        compilerOptions26.setCheckGlobalNamesLevel(checkLevel50);
        compilerOptions26.checkMissingGetCssNameBlacklist = "";
        compilerOptions26.setLineBreak(true);
        boolean boolean57 = compilerOptions26.deadAssignmentElimination;
        compilerOptions26.disableRuntimeTypeCheck();
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        boolean boolean64 = compilerOptions59.generateExports;
        compilerOptions59.gatherCssNames = false;
        boolean boolean67 = compilerOptions59.optimizeReturns;
        compilerOptions59.smartNameRemoval = true;
        boolean boolean70 = compilerOptions59.lineBreak;
        compilerOptions59.setDebugFunctionSideEffectsPath("hi!");
        java.util.Set<java.lang.String> strSet73 = compilerOptions59.stripNamePrefixes;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy74 = null;
        compilerOptions59.setVariableRenaming(variableRenamingPolicy74);
        com.google.javascript.jscomp.CheckLevel checkLevel76 = compilerOptions59.checkMissingGetCssNameLevel;
        compilerOptions26.setBrokenClosureRequiresLevel(checkLevel76);
        compilerOptions17.checkMissingGetCssNameLevel = checkLevel76;
        compilerOptions7.setReportUnknownTypes(checkLevel76);
        compilerOptions0.checkProvides = checkLevel76;
        compilerOptions0.setGenerateExports(false);
        compilerOptions0.moveFunctionDeclarations = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + checkLevel76 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel76.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setTransformAMDToCJSModules(true);
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException: ";
        compilerOptions0.setCrossModuleMethodMotion(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel26 = compilerOptions19.checkProvides;
        compilerOptions13.setReportUnknownTypes(checkLevel26);
        compilerOptions13.setCrossModuleCodeMotion(true);
        java.lang.String str30 = compilerOptions13.inputDelimiter;
        compilerOptions13.deadAssignmentElimination = false;
        compilerOptions13.setTweakToNumberLiteral("java.io.IOException: Unversioned directory", (-1));
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet37 = compilerOptions36.stripNamePrefixes;
        byte[] byteArray38 = compilerOptions36.inputVariableMapSerialized;
        boolean boolean39 = compilerOptions36.exportTestFunctions;
        compilerOptions36.lineBreak = false;
        compilerOptions36.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap44 = null;
        compilerOptions36.customPasses = customPassExecutionTimeMultimap44;
        boolean boolean46 = compilerOptions36.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        compilerOptions47.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet53 = compilerOptions47.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel54 = null;
        compilerOptions47.setCheckGlobalThisLevel(checkLevel54);
        com.google.javascript.jscomp.SourceMap.Format format56 = compilerOptions47.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention60 = null;
        compilerOptions57.setCodingConvention(codingConvention60);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy62 = compilerOptions57.anonymousFunctionNaming;
        compilerOptions47.anonymousFunctionNaming = anonymousFunctionNamingPolicy62;
        compilerOptions36.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy62);
        compilerOptions13.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy62);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy62;
        boolean boolean67 = compilerOptions0.inlineFunctions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel26 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel26.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "// Input %num%" + "'", str30, "// Input %num%");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(format56);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy62 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy62.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setPrettyPrint(true);
        compilerOptions0.sourceMapOutputPath = "hi!";
        compilerOptions0.setShadowVariables(true);
        compilerOptions0.collapseProperties = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions9.setInlineVariables(reach13);
        boolean boolean15 = compilerOptions9.removeUnusedVars;
        boolean boolean16 = compilerOptions9.assumeClosuresOnlyCaptureReferences();
        compilerOptions9.setCheckControlStructures(true);
        compilerOptions9.inlineConstantVars = false;
        compilerOptions9.generateExports = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        compilerOptions23.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet29 = compilerOptions23.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap30 = compilerOptions23.cssRenamingMap;
        compilerOptions23.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach33 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions23.setInlineFunctions(reach33);
        compilerOptions9.setInlineVariables(reach33);
        compilerOptions0.setRemoveUnusedVariables(reach33);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(cssRenamingMap30);
        org.junit.Assert.assertTrue("'" + reach33 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach33.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        java.io.IOException iOException1 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable throwable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            iOException1.addSuppressed(throwable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.removeUnusedClassProperties = true;
        compilerOptions0.setLocale("hi!");
        compilerOptions0.setRemoveDeadCode(true);
        boolean boolean14 = compilerOptions0.aliasKeywords;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray15 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList16 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList16, locationMappingArray15);
        com.google.javascript.jscomp.SourceFile sourceFile20 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean21 = locationMappingList16.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet23 = compilerOptions22.stripNamePrefixes;
        byte[] byteArray24 = compilerOptions22.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup25 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup25;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions27.checkProvides;
        compilerOptions22.setWarningLevel(diagnosticGroup25, checkLevel34);
        java.util.Set<java.lang.String> strSet36 = compilerOptions22.stripNamePrefixes;
        boolean boolean37 = locationMappingList16.removeAll((java.util.Collection<java.lang.String>) strSet36);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor38 = locationMappingList16.listIterator();
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor39 = locationMappingList16.listIterator();
        java.lang.Object[] objArray40 = locationMappingList16.toArray();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList16);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locationMappingArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(sourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(byteArray24);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup25);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locationMappingItor38);
        org.junit.Assert.assertNotNull(locationMappingItor39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.coalesceVariableNames = false;
        com.google.javascript.jscomp.WarningsGuard warningsGuard22 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.addWarningsGuard(warningsGuard22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setExportTestFunctions(true);
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat11 = compilerOptions0.errorFormat;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(errorFormat11);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.closurePass = true;
        compilerOptions0.setAppNameStr("Unversioned directory");
        com.google.javascript.jscomp.MessageBundle messageBundle14 = null;
        compilerOptions0.setMessageBundle(messageBundle14);
        compilerOptions0.setPrintInputDelimiter(false);
        boolean boolean18 = compilerOptions0.crossModuleCodeMotion;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.optimizeParameters = true;
        compilerOptions0.setAliasAllStrings(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions0.setTracer(tracerMode7);
        compilerOptions0.setExternExports(true);
        compilerOptions0.setRemoveDeadCode(true);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions0.getTracerMode();
        compilerOptions0.generateExports = true;
        compilerOptions0.jqueryPass = true;
        java.lang.String str19 = compilerOptions0.renamePrefix;
        compilerOptions0.setIgnoreCajaProperties(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setPrettyPrint(true);
        compilerOptions0.sourceMapOutputPath = "hi!";
        compilerOptions0.setShadowVariables(true);
        compilerOptions0.checkTypes = true;
        boolean boolean52 = compilerOptions0.inlineVariables;
        compilerOptions0.flowSensitiveInlineVariables = true;
        compilerOptions0.setTransformAMDToCJSModules(false);
        compilerOptions0.setReserveRawExports(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleMethodMotion(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet6 = compilerOptions5.stripNamePrefixes;
        byte[] byteArray7 = compilerOptions5.inputVariableMapSerialized;
        compilerOptions5.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.ErrorFormat errorFormat10 = compilerOptions5.errorFormat;
        compilerOptions0.errorFormat = errorFormat10;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel12 = compilerOptions0.sourceMapDetailLevel;
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(errorFormat10);
        org.junit.Assert.assertNotNull(detailLevel12);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        compilerOptions14.collapseAnonymousFunctions = false;
        compilerOptions14.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler23 = compilerOptions14.getAliasTransformationHandler();
        java.lang.String str24 = compilerOptions14.instrumentationTemplate;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        boolean boolean30 = compilerOptions25.generateExports;
        compilerOptions25.gatherCssNames = false;
        boolean boolean33 = compilerOptions25.optimizeReturns;
        compilerOptions25.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet36 = compilerOptions25.aliasableStrings;
        compilerOptions25.generateExports = false;
        boolean boolean39 = compilerOptions25.assumeStrictThis();
        boolean boolean40 = compilerOptions25.markNoSideEffectCalls;
        java.util.Set<java.lang.String> strSet41 = compilerOptions25.stripNamePrefixes;
        compilerOptions14.setExtraAnnotationNames(strSet41);
        compilerOptions0.setStripTypes(strSet41);
        compilerOptions0.setConvertToDottedProperties(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setFlowSensitiveInlineVariables(false);
        boolean boolean20 = compilerOptions0.collapseProperties;
        boolean boolean21 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.setCollapseProperties(false);
        compilerOptions22.setClosurePass(true);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions22.setInputPropertyMapSerialized(byteArray35);
        compilerOptions22.setFlowSensitiveInlineVariables(true);
        boolean boolean39 = compilerOptions22.exportTestFunctions;
        compilerOptions22.closurePass = false;
        compilerOptions22.renamePrefix = "Unversioned directory";
        compilerOptions22.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet46 = compilerOptions22.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions22.checkGlobalNamesLevel;
        compilerOptions0.checkProvides = checkLevel47;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        compilerOptions0.setTransformAMDToCJSModules(false);
        boolean boolean12 = compilerOptions0.checkTypes;
        boolean boolean13 = compilerOptions0.aliasAllStrings;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode14 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3;
        compilerOptions0.setLanguageOut(languageMode14);
        compilerOptions0.sourceMapOutputPath = "hi!";
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setSpecializeInitialModule(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        boolean boolean26 = compilerOptions22.jqueryPass;
        compilerOptions22.collapseAnonymousFunctions = false;
        compilerOptions22.setInlineGetters(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        compilerOptions31.setCheckSuspiciousCode(true);
        compilerOptions31.setReserveRawExports(false);
        java.util.Set<java.lang.String> strSet38 = compilerOptions31.stripNameSuffixes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        boolean boolean43 = compilerOptions39.jqueryPass;
        compilerOptions39.collapseAnonymousFunctions = false;
        compilerOptions39.setManageClosureDependencies(true);
        compilerOptions39.setMarkAsCompiled(true);
        compilerOptions39.setAliasableGlobals("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel52 = null;
        compilerOptions39.setBrokenClosureRequiresLevel(checkLevel52);
        compilerOptions39.setSummaryDetailLevel((int) (byte) 1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention59 = null;
        compilerOptions56.setCodingConvention(codingConvention59);
        compilerOptions56.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions56.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray64 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList65 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList65, locationMappingArray64);
        compilerOptions56.sourceMapLocationMappings = locationMappingList65;
        java.lang.Object[] objArray68 = locationMappingList65.toArray();
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.setRewriteNewDateGoogNow(true);
        boolean boolean72 = compilerOptions69.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach73 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions69.setInlineVariables(reach73);
        compilerOptions69.setPrintInputDelimiter(true);
        boolean boolean77 = compilerOptions69.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle78 = null;
        compilerOptions69.messageBundle = messageBundle78;
        compilerOptions69.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions82 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions83 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions83.setRewriteNewDateGoogNow(true);
        boolean boolean86 = compilerOptions83.extractPrototypeMemberDeclarations;
        compilerOptions83.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet89 = compilerOptions83.stripTypePrefixes;
        compilerOptions82.stripTypePrefixes = strSet89;
        compilerOptions69.setAliasableStrings(strSet89);
        boolean boolean92 = locationMappingList65.containsAll((java.util.Collection<java.lang.String>) strSet89);
        compilerOptions39.stripNameSuffixes = strSet89;
        compilerOptions31.setStripNamePrefixes(strSet89);
        compilerOptions22.aliasableStrings = strSet89;
        compilerOptions0.aliasableStrings = strSet89;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + languageMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode14.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + reach73 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach73.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor25 = locationMappingList1.listIterator();
        int int26 = locationMappingList1.size();
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setLabelRenaming(true);
        compilerOptions27.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean32 = compilerOptions27.labelRenaming;
        compilerOptions27.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet36 = compilerOptions35.stripNamePrefixes;
        byte[] byteArray37 = compilerOptions35.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup38 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup38;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions40.checkProvides;
        compilerOptions35.setWarningLevel(diagnosticGroup38, checkLevel47);
        compilerOptions27.checkUnreachableCode = checkLevel47;
        compilerOptions27.setAssumeStrictThis(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = null;
        compilerOptions52.setCodingConvention(codingConvention55);
        compilerOptions52.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel59 = compilerOptions52.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray60 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList61 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList61, locationMappingArray60);
        compilerOptions52.sourceMapLocationMappings = locationMappingList61;
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setRewriteNewDateGoogNow(true);
        boolean boolean67 = compilerOptions64.extractPrototypeMemberDeclarations;
        boolean boolean68 = compilerOptions64.jqueryPass;
        compilerOptions64.collapseAnonymousFunctions = false;
        boolean boolean71 = compilerOptions64.checkTypes;
        compilerOptions64.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel74 = compilerOptions64.checkProvides;
        compilerOptions52.checkUnreachableCode = checkLevel74;
        compilerOptions27.setBrokenClosureRequiresLevel(checkLevel74);
        java.util.Set<java.lang.String> strSet77 = compilerOptions27.stripNameSuffixes;
        boolean boolean78 = locationMappingList1.containsAll((java.util.Collection<java.lang.String>) strSet77);
        java.util.function.UnaryOperator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingUnaryOperator79 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList1.replaceAll(locationMappingUnaryOperator79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locationMappingItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(byteArray37);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup38);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel59 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel59.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + checkLevel74 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel74.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        boolean boolean8 = compilerOptions0.labelRenaming;
        compilerOptions0.setTweakToBooleanLiteral("-1", false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions12.messageBundle = messageBundle21;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        boolean boolean27 = compilerOptions23.jqueryPass;
        boolean boolean28 = compilerOptions23.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setLabelRenaming(true);
        compilerOptions29.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean34 = compilerOptions29.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format35 = compilerOptions29.sourceMapFormat;
        compilerOptions23.setSourceMapFormat(format35);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing37 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions23.setTweakProcessing(tweakProcessing37);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions39.checkProvides;
        java.util.Set<java.lang.String> strSet47 = compilerOptions39.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream48 = strSet47.stream();
        compilerOptions23.stripTypes = strSet47;
        compilerOptions12.setAliasableStrings(strSet47);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setLabelRenaming(true);
        compilerOptions51.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions51.checkGlobalThisLevel;
        boolean boolean57 = compilerOptions51.collapseProperties;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel58 = compilerOptions51.sourceMapDetailLevel;
        compilerOptions12.setSourceMapDetailLevel(detailLevel58);
        compilerOptions0.sourceMapDetailLevel = detailLevel58;
        compilerOptions0.setInstrumentationTemplate("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions0.brokenClosureRequiresLevel;
        java.lang.String str64 = compilerOptions0.sourceMapOutputPath;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(format35);
        org.junit.Assert.assertTrue("'" + tweakProcessing37 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing37.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(detailLevel58);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineProperties(true);
        compilerOptions0.setCollapsePropertiesOnExternTypes(true);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.checkGlobalNamesLevel;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        java.nio.charset.Charset charset12 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder13 = builder11.withCharset(charset12);
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder13.buildFromFile("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile sourceFile18 = builder13.buildFromCode("java.io.IOException: ", "java.io.IOException");
        sourceFile18.setOriginalPath("hi!");
        java.lang.String str21 = sourceFile18.getOriginalPath();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertNotNull(sourceFile18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap6 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap6);
        compilerOptions0.printInputDelimiter = false;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = null;
        compilerOptions0.setTweakReplacements(strMap10);
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList15);
        compilerOptions0.setSmartNameRemoval(false);
        java.util.Set<java.lang.String> strSet20 = compilerOptions0.aliasableStrings;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler8 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.inlineConstantVars = true;
        java.io.PrintStream printStream12 = new java.io.PrintStream("Unversioned directory");
        char[] charArray15 = new char[] { '4', '4' };
        printStream12.print(charArray15);
        printStream12.print((int) ' ');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        printStream12.write((int) '#');
        java.util.Locale locale23 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream27 = printStream12.format(locale23, "Unversioned directory", objArray26);
        printStream27.println((double) 1);
        printStream27.print(1L);
        java.io.PrintStream printStream33 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream35 = new java.io.PrintStream("Unversioned directory");
        char[] charArray38 = new char[] { '4', '4' };
        printStream35.print(charArray38);
        printStream33.print(charArray38);
        printStream27.println(charArray38);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention45 = null;
        compilerOptions42.setCodingConvention(codingConvention45);
        compilerOptions42.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions42.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray50 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList51 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList51, locationMappingArray50);
        compilerOptions42.sourceMapLocationMappings = locationMappingList51;
        byte[] byteArray55 = new byte[] { (byte) -1 };
        compilerOptions42.setInputPropertyMapSerialized(byteArray55);
        printStream27.write(byteArray55);
        compilerOptions0.inputVariableMapSerialized = byteArray55;
        compilerOptions0.prettyPrint = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler8);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, 4]");
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy10 = compilerOptions0.propertyRenaming;
        compilerOptions0.setInlineFunctions(true);
        compilerOptions0.moveFunctionDeclarations = true;
        compilerOptions0.inlineVariables = false;
        compilerOptions0.setRemoveUnusedPrototypeProperties(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy10 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy10.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        compilerOptions0.setInstrumentationTemplate("2019/07/12 07:12");
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineFunctions(reach13);
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.devirtualizePrototypeMethods = true;
        boolean boolean19 = compilerOptions0.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.flowSensitiveInlineVariables = false;
        compilerOptions20.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        compilerOptions20.removeUnusedVars = true;
        compilerOptions20.setCrossModuleCodeMotion(false);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel32 = compilerOptions20.sourceMapDetailLevel;
        compilerOptions0.setSourceMapDetailLevel(detailLevel32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(detailLevel32);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.flowSensitiveInlineVariables = false;
        compilerOptions0.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        java.lang.String str8 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setRemoveUnusedLocalVars(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        java.lang.String str3 = sourceFile2.toString();
        java.lang.String str5 = sourceFile2.getLine((int) 'a');
        java.lang.String str6 = sourceFile2.getName();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: ";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        compilerOptions0.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.SourceMap.Format format7 = compilerOptions0.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet16 = compilerOptions15.stripNamePrefixes;
        compilerOptions8.setIdGenerators(strSet16);
        java.lang.String[] strArray22 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        compilerOptions8.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList23);
        compilerOptions8.setCheckSymbols(true);
        compilerOptions8.collapseAnonymousFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet31 = compilerOptions30.stripNamePrefixes;
        compilerOptions8.stripTypePrefixes = strSet31;
        java.util.stream.Stream<java.lang.String> strStream33 = strSet31.parallelStream();
        compilerOptions0.aliasableStrings = strSet31;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(format7);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strStream33);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet11 = compilerOptions10.stripNamePrefixes;
        byte[] byteArray12 = compilerOptions10.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach13 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions10.setInlineFunctions(reach13);
        compilerOptions0.setRemoveUnusedVariables(reach13);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions16.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions16.checkMissingGetCssNameLevel;
        java.util.Set<java.lang.String> strSet26 = compilerOptions16.stripNamePrefixes;
        compilerOptions0.setReplaceStringsReservedStrings(strSet26);
        compilerOptions0.setRenamePrefixNamespace("");
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        boolean boolean34 = compilerOptions30.jqueryPass;
        compilerOptions30.setReplaceIdGenerators(true);
        compilerOptions30.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = null;
        compilerOptions30.setReportMissingOverride(checkLevel39);
        com.google.javascript.jscomp.SourceMap.Format format41 = null;
        compilerOptions30.setSourceMapFormat(format41);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention46 = null;
        compilerOptions43.setCodingConvention(codingConvention46);
        compilerOptions43.setGeneratePseudoNames(true);
        compilerOptions43.inlineLocalFunctions = false;
        compilerOptions43.setIdeMode(true);
        compilerOptions43.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet56 = compilerOptions43.aliasableStrings;
        compilerOptions30.aliasableStrings = strSet56;
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setRewriteNewDateGoogNow(true);
        compilerOptions58.optimizeParameters = true;
        compilerOptions58.setAliasAllStrings(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode65 = com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL;
        compilerOptions58.setTracer(tracerMode65);
        compilerOptions30.setTracerMode(tracerMode65);
        compilerOptions0.setTracerMode(tracerMode65);
        compilerOptions0.setCollapseObjectLiterals(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + reach13 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach13.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + tracerMode65 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL + "'", tracerMode65.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL));
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.setTightenTypes(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withOriginalPath("// Input %num%");
        com.google.javascript.jscomp.SourceFile sourceFile10 = builder7.buildFromCode("-1", "");
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile13 = builder7.buildFromInputStream("java.io.IOException: -1", inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(sourceFile10);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.closurePass = false;
        compilerOptions0.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap24 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap24);
        boolean boolean26 = compilerOptions0.aliasAllStrings;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet15 = compilerOptions9.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel16 = null;
        compilerOptions9.setCheckGlobalThisLevel(checkLevel16);
        com.google.javascript.jscomp.SourceMap.Format format18 = compilerOptions9.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy24 = compilerOptions19.anonymousFunctionNaming;
        compilerOptions9.anonymousFunctionNaming = anonymousFunctionNamingPolicy24;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        boolean boolean32 = compilerOptions27.generateExports;
        compilerOptions27.printInputDelimiter = false;
        compilerOptions27.setCheckSymbols(true);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions27.setInputVariableMapSerialized(byteArray41);
        compilerOptions0.inputPropertyMapSerialized = byteArray41;
        compilerOptions0.collapseAnonymousFunctions = true;
        compilerOptions0.setCommonJSModulePathPrefix("");
        compilerOptions0.setInlineFunctions(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(format18);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy24 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy24.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100, 10, 10]");
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setSkipAllPasses(true);
        byte[] byteArray26 = compilerOptions0.inputPropertyMapSerialized;
        compilerOptions0.optimizeArgumentsArray = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy3 = compilerOptions0.propertyRenaming;
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy3 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy3.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel19;
        compilerOptions0.setMarkAsCompiled(false);
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: ");
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.closurePass = true;
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        com.google.javascript.jscomp.MessageBundle messageBundle12 = null;
        compilerOptions0.messageBundle = messageBundle12;
        compilerOptions0.setMarkNoSideEffectCalls(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        compilerOptions9.setClosurePass(true);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions9.setInputPropertyMapSerialized(byteArray22);
        compilerOptions9.setFlowSensitiveInlineVariables(true);
        compilerOptions9.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream35 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet34.parallelStream();
        compilerOptions9.stripNameSuffixes = strSet34;
        compilerOptions0.setStripTypePrefixes(strSet34);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy39 = compilerOptions0.anonymousFunctionNaming;
        compilerOptions0.setColorizeErrorOutput(true);
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.closurePass = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy39 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy39.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.io.IOException: -1", "hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.collapseVariableDeclarations = true;
        compilerOptions0.setRemoveUnusedVars(false);
        boolean boolean10 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.removeTryCatchFinally = true;
        boolean boolean13 = compilerOptions0.disambiguateProperties;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.setCrossModuleCodeMotion(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet21 = compilerOptions15.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = null;
        compilerOptions15.setCheckGlobalThisLevel(checkLevel22);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode24 = compilerOptions15.getTracerMode();
        compilerOptions0.setTracerMode(tracerMode24);
        compilerOptions0.setAliasStringsBlacklist("hi!");
        compilerOptions0.setLocale("Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + tracerMode24 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode24.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        java.nio.charset.Charset charset1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset1);
        sourceFile2.setOriginalPath("hi!");
        sourceFile2.setOriginalPath("");
        sourceFile2.setOriginalPath("");
        int int10 = sourceFile2.getColumnOfOffset(10);
        int int12 = sourceFile2.getColumnOfOffset(0);
        java.lang.String str13 = sourceFile2.getName();
        sourceFile2.clearCachedSource();
        int int16 = sourceFile2.getLineOfOffset((int) (short) -1);
        java.lang.String str18 = sourceFile2.getLine((int) (short) -1);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        boolean boolean11 = compilerOptions0.lineBreak;
        compilerOptions0.setDebugFunctionSideEffectsPath("hi!");
        compilerOptions0.setTweakToStringLiteral("java.io.IOException: Unversioned directory", "java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        compilerOptions0.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach10 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions0.setInlineFunctions(reach10);
        boolean boolean12 = compilerOptions0.checkSymbols;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertTrue("'" + reach10 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach10.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        java.lang.String str3 = compiler0.getAstDotGraph();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.SourceMap sourceMap5 = compiler0.getSourceMap();
        com.google.javascript.jscomp.JsAst jsAst6 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler0.replaceScript(jsAst6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(sourceMap5);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setProcessObjectPropertyString(false);
        boolean boolean10 = compilerOptions0.removeUnusedPrototypeProperties;
        java.lang.String str11 = compilerOptions0.sourceMapOutputPath;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        compilerOptions20.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap25 = null;
        compilerOptions20.setCssRenamingMap(cssRenamingMap25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.convertToDottedProperties = true;
        boolean boolean33 = compilerOptions27.inlineConstantVars;
        compilerOptions27.aliasAllStrings = false;
        boolean boolean36 = compilerOptions27.smartNameRemoval;
        compilerOptions27.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions27.checkGlobalNamesLevel;
        compilerOptions20.setCheckProvides(checkLevel39);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel39);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap42 = compilerOptions0.getTweakReplacements();
        boolean boolean43 = compilerOptions0.flowSensitiveInlineVariables;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode46 = compilerOptions0.getLanguageOut();
        compilerOptions0.setExportTestFunctions(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(languageMode46);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingGetCssNameLevel;
        compilerOptions0.locale = "java.io.IOException: ";
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap12 = compilerOptions0.getDefineReplacements();
        compilerOptions0.setAliasStringsBlacklist("hi!");
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap15 = compilerOptions0.cssRenamingMap;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(cssRenamingMap15);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        com.google.javascript.jscomp.JSModule jSModule2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray3 = compiler0.toSourceArray(jSModule2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream3 = new java.io.PrintStream("Unversioned directory");
        char[] charArray6 = new char[] { '4', '4' };
        printStream3.print(charArray6);
        printStream1.print(charArray6);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet18 = compilerOptions12.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap19 = compilerOptions12.cssRenamingMap;
        compilerOptions12.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach22 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions12.setInlineFunctions(reach22);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet30 = compilerOptions24.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap31 = compilerOptions24.cssRenamingMap;
        compilerOptions24.reserveRawExports = true;
        com.google.javascript.jscomp.CompilerOptions.Reach reach34 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions24.setInlineFunctions(reach34);
        compilerOptions12.setRemoveUnusedVariable(reach34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = null;
        compilerOptions37.setCodingConvention(codingConvention40);
        compilerOptions37.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions37.checkProvides;
        java.lang.String[] strArray46 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        compilerOptions37.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList47);
        compilerOptions37.setDeadAssignmentElimination(false);
        java.io.PrintStream printStream53 = new java.io.PrintStream("Unversioned directory");
        char[] charArray56 = new char[] { '4', '4' };
        printStream53.print(charArray56);
        printStream53.print((int) ' ');
        java.io.PrintStream printStream61 = new java.io.PrintStream((java.io.OutputStream) printStream53, false);
        printStream53.write((int) '#');
        printStream53.print((float) (short) 0);
        java.io.PrintStream printStream67 = new java.io.PrintStream("Unversioned directory");
        char[] charArray70 = new char[] { '4', '4' };
        printStream67.print(charArray70);
        printStream67.print((int) ' ');
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream67.write(byteArray80, (int) (byte) 0, (int) (byte) 1);
        printStream53.write(byteArray80);
        compilerOptions37.setInputVariableMapSerialized(byteArray80);
        compilerOptions12.inputVariableMapSerialized = byteArray80;
        printStream1.write(byteArray80);
        printStream1.print("java.io.IOException: ");
        java.io.PrintStream printStream91 = printStream1.append((java.lang.CharSequence) "java.io.IOException: -1");
        printStream91.flush();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(cssRenamingMap19);
        org.junit.Assert.assertTrue("'" + reach22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach22.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(cssRenamingMap31);
        org.junit.Assert.assertTrue("'" + reach34 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach34.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(printStream91);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        com.google.javascript.jscomp.SourceFile sourceFile6 = builder0.buildFromCode("2019/07/12 07:12", "hi!");
        java.nio.charset.Charset charset7 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder8 = builder0.withCharset(charset7);
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile10 = builder0.buildFromFile(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean14 = compilerOptions10.jqueryPass;
        compilerOptions10.collapseAnonymousFunctions = false;
        java.lang.String str17 = compilerOptions10.aliasStringsBlacklist;
        compilerOptions10.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        boolean boolean24 = compilerOptions20.jqueryPass;
        compilerOptions20.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions27.checkProvides;
        compilerOptions20.brokenClosureRequiresLevel = checkLevel34;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel34);
        compilerOptions0.aggressiveVarCheck = checkLevel34;
        compilerOptions0.collapseVariableDeclarations = false;
        compilerOptions0.removeUnusedPrototypeProperties = true;
        com.google.javascript.jscomp.MessageBundle messageBundle42 = compilerOptions0.messageBundle;
        compilerOptions0.setRuntimeTypeCheck(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(messageBundle42);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet5 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setLabelRenaming(true);
        compilerOptions8.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions8.checkGlobalThisLevel;
        compilerOptions8.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing16 = compilerOptions8.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing16);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy18 = compilerOptions0.anonymousFunctionNaming;
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = null;
        compilerOptions0.setTweakReplacements(strMap19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        boolean boolean26 = compilerOptions21.computeFunctionSideEffects;
        boolean boolean27 = compilerOptions21.printInputDelimiter;
        compilerOptions21.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions21.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions21.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions21.setInputPropertyMapSerialized(byteArray36);
        compilerOptions0.inputVariableMapSerialized = byteArray36;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions0.checkUnreachableCode;
        boolean boolean40 = compilerOptions0.ideMode;
        compilerOptions0.setCrossModuleCodeMotion(true);
        boolean boolean43 = compilerOptions0.isRemoveUnusedClassProperties();
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing16.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy18 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy18.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        java.lang.String str3 = compilerOptions0.locale;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.checkRequires;
        boolean boolean5 = compilerOptions0.aliasExternals;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        compilerOptions0.crossModuleMethodMotion = false;
        boolean boolean16 = compilerOptions0.crossModuleMethodMotion;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        boolean boolean13 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.setRenamePrefix("java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.setCollapseProperties(false);
        compilerOptions16.setClosurePass(true);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions16.setInputPropertyMapSerialized(byteArray29);
        compilerOptions16.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions16.reportMissingOverride;
        compilerOptions16.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet37 = compilerOptions36.stripNamePrefixes;
        byte[] byteArray38 = compilerOptions36.inputVariableMapSerialized;
        compilerOptions36.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap41 = null;
        compilerOptions36.setCssRenamingMap(cssRenamingMap41);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        boolean boolean46 = compilerOptions43.extractPrototypeMemberDeclarations;
        compilerOptions43.convertToDottedProperties = true;
        boolean boolean49 = compilerOptions43.inlineConstantVars;
        compilerOptions43.aliasAllStrings = false;
        boolean boolean52 = compilerOptions43.smartNameRemoval;
        compilerOptions43.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel55 = compilerOptions43.checkGlobalNamesLevel;
        compilerOptions36.setCheckProvides(checkLevel55);
        compilerOptions16.setCheckGlobalNamesLevel(checkLevel55);
        compilerOptions0.setReportUnknownTypes(checkLevel55);
        compilerOptions0.rewriteFunctionExpressions = false;
        compilerOptions0.setConvertToDottedProperties(true);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + checkLevel55 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel55.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        boolean boolean10 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.generateExports = true;
        boolean boolean13 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.setOptimizeParameters(false);
        compilerOptions0.setCrossModuleCodeMotion(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.setChainCalls(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap11 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap11);
        compilerOptions0.exportTestFunctions = false;
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions0.checkMissingGetCssNameLevel;
        compilerOptions0.setReplaceStringsPlaceholderToken("-1");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setPreferLineBreakAtEndOfFile(false);
        boolean boolean11 = compilerOptions0.removeTryCatchFinally;
        boolean boolean12 = compilerOptions0.optimizeArgumentsArray;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        compilerOptions0.enableRuntimeTypeCheck("2019/07/12 07:12");
        java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> strMap16 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setPropertyInvalidationErrors(strMap16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList15);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        boolean boolean20 = compilerOptions0.optimizeCalls;
        compilerOptions0.setReplaceIdGenerators(false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.prettyPrint = false;
        boolean boolean14 = compilerOptions0.checkSuspiciousCode;
        compilerOptions0.setCollapseAnonymousFunctions(false);
        boolean boolean17 = compilerOptions0.inlineGetters;
        compilerOptions0.jqueryPass = true;
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions0.checkGlobalNamesLevel;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        compilerOptions0.removeUnusedClassProperties = false;
        compilerOptions0.checkTypes = true;
        java.lang.Object obj10 = compilerOptions0.clone();
        com.google.javascript.jscomp.CheckLevel checkLevel11 = null;
        compilerOptions0.checkRequires = checkLevel11;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray15);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        java.lang.Object obj18 = compilerOptions0.clone();
        compilerOptions0.setLineLengthThreshold((int) (byte) 1);
        compilerOptions0.setExternExports(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: Unversioned directory";
        compilerOptions0.setDefineToBooleanLiteral("java.io.IOException: -1", true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        boolean boolean25 = compilerOptions0.aliasKeywords;
        compilerOptions0.setRemoveUnusedVars(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet29 = compilerOptions28.stripNamePrefixes;
        byte[] byteArray30 = compilerOptions28.inputVariableMapSerialized;
        compilerOptions28.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler33 = compilerOptions28.getAliasTransformationHandler();
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy34 = compilerOptions28.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach39 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions35.setInlineVariables(reach39);
        compilerOptions35.setPrintInputDelimiter(true);
        boolean boolean43 = compilerOptions35.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle44 = null;
        compilerOptions35.messageBundle = messageBundle44;
        compilerOptions35.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        compilerOptions49.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet55 = compilerOptions49.stripTypePrefixes;
        compilerOptions48.stripTypePrefixes = strSet55;
        compilerOptions35.setAliasableStrings(strSet55);
        compilerOptions28.stripTypePrefixes = strSet55;
        compilerOptions28.setInlineProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions61.setRewriteNewDateGoogNow(true);
        boolean boolean64 = compilerOptions61.extractPrototypeMemberDeclarations;
        compilerOptions61.convertToDottedProperties = true;
        boolean boolean67 = compilerOptions61.inlineConstantVars;
        boolean boolean68 = compilerOptions61.extractPrototypeMemberDeclarations;
        compilerOptions61.optimizeCalls = true;
        compilerOptions61.removeUnusedPrototypeProperties = false;
        compilerOptions61.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode75 = compilerOptions61.getTracerMode();
        compilerOptions61.generateExports = true;
        compilerOptions61.jqueryPass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions80 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions80.setRewriteNewDateGoogNow(true);
        boolean boolean83 = compilerOptions80.extractPrototypeMemberDeclarations;
        compilerOptions80.convertToDottedProperties = true;
        compilerOptions80.setRemoveUnusedVars(true);
        compilerOptions80.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy90 = compilerOptions80.propertyRenaming;
        compilerOptions61.propertyRenaming = propertyRenamingPolicy90;
        compilerOptions28.setPropertyRenaming(propertyRenamingPolicy90);
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(aliasTransformationHandler33);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy34 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy34.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + reach39 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach39.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + tracerMode75 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode75.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy90 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy90.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        boolean boolean8 = compilerOptions0.labelRenaming;
        compilerOptions0.setTweakToBooleanLiteral("-1", false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions12.messageBundle = messageBundle21;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        boolean boolean27 = compilerOptions23.jqueryPass;
        boolean boolean28 = compilerOptions23.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setLabelRenaming(true);
        compilerOptions29.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean34 = compilerOptions29.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format35 = compilerOptions29.sourceMapFormat;
        compilerOptions23.setSourceMapFormat(format35);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing37 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions23.setTweakProcessing(tweakProcessing37);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions39.checkProvides;
        java.util.Set<java.lang.String> strSet47 = compilerOptions39.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream48 = strSet47.stream();
        compilerOptions23.stripTypes = strSet47;
        compilerOptions12.setAliasableStrings(strSet47);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setLabelRenaming(true);
        compilerOptions51.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions51.checkGlobalThisLevel;
        boolean boolean57 = compilerOptions51.collapseProperties;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel58 = compilerOptions51.sourceMapDetailLevel;
        compilerOptions12.setSourceMapDetailLevel(detailLevel58);
        compilerOptions0.sourceMapDetailLevel = detailLevel58;
        compilerOptions0.setInstrumentationTemplate("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions0.brokenClosureRequiresLevel;
        boolean boolean64 = compilerOptions0.getInferTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(format35);
        org.junit.Assert.assertTrue("'" + tweakProcessing37 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing37.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(detailLevel58);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions4 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions4.setLabelRenaming(true);
        compilerOptions4.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions4.checkGlobalThisLevel;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel9);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        boolean boolean16 = compilerOptions11.computeFunctionSideEffects;
        boolean boolean17 = compilerOptions11.printInputDelimiter;
        compilerOptions11.setGeneratePseudoNames(true);
        boolean boolean20 = compilerOptions11.disambiguateProperties;
        java.util.Set<java.lang.String> strSet21 = compilerOptions11.aliasableStrings;
        compilerOptions0.stripNameSuffixes = strSet21;
        boolean boolean23 = compilerOptions0.checkSymbols;
        compilerOptions0.setLabelRenaming(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.println((float) (byte) -1);
        printStream8.println(100);
        printStream8.println((int) (byte) 10);
        printStream8.println((float) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream8, false, "-1");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: -1");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setMoveFunctionDeclarations(false);
        java.lang.String str9 = compilerOptions0.renamePrefix;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        java.lang.String[] strArray9 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList10);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = null;
        compilerOptions0.setTweakReplacements(strMap13);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList15);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        boolean boolean20 = compilerOptions0.optimizeCalls;
        compilerOptions0.renamePrefix = "";
        java.io.PrintStream printStream24 = new java.io.PrintStream("Unversioned directory");
        char[] charArray27 = new char[] { '4', '4' };
        printStream24.print(charArray27);
        printStream24.print((int) ' ');
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        com.google.javascript.jscomp.SourceFile.Builder builder33 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException35 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { builder33, iOException36, (byte) 10 };
        java.io.PrintStream printStream39 = printStream31.printf("", objArray38);
        printStream39.println((float) (-1L));
        java.io.PrintStream printStream43 = printStream39.append('#');
        printStream43.write((int) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach50 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions46.setInlineVariables(reach50);
        compilerOptions46.setPrintInputDelimiter(true);
        compilerOptions46.setExportTestFunctions(false);
        java.io.PrintStream printStream57 = new java.io.PrintStream("Unversioned directory");
        printStream57.write((-1));
        printStream57.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup62 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup62;
        printStream57.print((java.lang.Object) diagnosticGroup62);
        java.io.PrintStream printStream66 = new java.io.PrintStream("Unversioned directory");
        char[] charArray69 = new char[] { '4', '4' };
        printStream66.print(charArray69);
        printStream66.print((int) ' ');
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream66.write(byteArray79, (int) (byte) 0, (int) (byte) 1);
        printStream57.write(byteArray79, 0, 0);
        compilerOptions46.setInputVariableMapSerialized(byteArray79);
        printStream43.write(byteArray79);
        compilerOptions0.setInputPropertyMapSerialized(byteArray79);
        boolean boolean89 = compilerOptions0.gatherCssNames;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + reach50 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach50.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup62);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setSyntheticBlockStartMarker("");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel10 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel10);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.removeUnusedLocalVars = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        java.lang.String str8 = compiler0.getAstDotGraph();
        java.lang.String str11 = compiler0.getSourceLine("java.io.IOException: Unversioned directory", 0);
        com.google.javascript.jscomp.SourceMap sourceMap12 = compiler0.getSourceMap();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = compiler0.getWarningCount();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(sourceMap12);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setDefineToBooleanLiteral("hi!", true);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.disambiguateProperties = false;
        compilerOptions0.smartNameRemoval = true;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: ");
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.reportMissingOverride;
        boolean boolean8 = compilerOptions0.smartNameRemoval;
        compilerOptions0.setIgnoreCajaProperties(false);
        compilerOptions0.setAliasStringsBlacklist("Unversioned directory");
        compilerOptions0.printInputDelimiter = true;
        boolean boolean15 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        boolean boolean20 = compilerOptions16.assumeClosuresOnlyCaptureReferences();
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap21 = null;
        compilerOptions16.setCssRenamingMap(cssRenamingMap21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions23.checkProvides;
        compilerOptions23.removeUnusedPrototypePropertiesInExterns = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        boolean boolean37 = compilerOptions33.jqueryPass;
        boolean boolean38 = compilerOptions33.deadAssignmentElimination;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions33.reportMissingOverride;
        compilerOptions33.removeUnusedPrototypePropertiesInExterns = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention45 = null;
        compilerOptions42.setCodingConvention(codingConvention45);
        compilerOptions42.setGeneratePseudoNames(true);
        compilerOptions42.inlineLocalFunctions = false;
        compilerOptions42.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setRewriteNewDateGoogNow(true);
        boolean boolean56 = compilerOptions53.extractPrototypeMemberDeclarations;
        compilerOptions53.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions59.checkProvides;
        compilerOptions53.setReportUnknownTypes(checkLevel66);
        compilerOptions42.setCheckGlobalNamesLevel(checkLevel66);
        compilerOptions42.checkMissingGetCssNameBlacklist = "";
        compilerOptions42.setLineBreak(true);
        boolean boolean73 = compilerOptions42.deadAssignmentElimination;
        compilerOptions42.disableRuntimeTypeCheck();
        com.google.javascript.jscomp.CompilerOptions compilerOptions75 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions75.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention78 = null;
        compilerOptions75.setCodingConvention(codingConvention78);
        boolean boolean80 = compilerOptions75.generateExports;
        compilerOptions75.gatherCssNames = false;
        boolean boolean83 = compilerOptions75.optimizeReturns;
        compilerOptions75.smartNameRemoval = true;
        boolean boolean86 = compilerOptions75.lineBreak;
        compilerOptions75.setDebugFunctionSideEffectsPath("hi!");
        java.util.Set<java.lang.String> strSet89 = compilerOptions75.stripNamePrefixes;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy90 = null;
        compilerOptions75.setVariableRenaming(variableRenamingPolicy90);
        com.google.javascript.jscomp.CheckLevel checkLevel92 = compilerOptions75.checkMissingGetCssNameLevel;
        compilerOptions42.setBrokenClosureRequiresLevel(checkLevel92);
        compilerOptions33.checkMissingGetCssNameLevel = checkLevel92;
        compilerOptions23.setReportUnknownTypes(checkLevel92);
        compilerOptions16.checkProvides = checkLevel92;
        compilerOptions0.setCheckRequires(checkLevel92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + checkLevel92 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel92.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setNameReferenceReportPath("Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        boolean boolean11 = compilerOptions8.exportTestFunctions;
        compilerOptions8.lineBreak = false;
        compilerOptions8.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap16 = null;
        compilerOptions8.customPasses = customPassExecutionTimeMultimap16;
        compilerOptions8.setClosurePass(false);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = null;
        compilerOptions8.setDefineReplacements(strMap20);
        boolean boolean22 = compilerOptions8.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setPropertyAffinity(true);
        boolean boolean30 = compilerOptions23.closurePass;
        compilerOptions23.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet34 = compilerOptions33.stripNamePrefixes;
        byte[] byteArray35 = compilerOptions33.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach36 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions33.setInlineFunctions(reach36);
        compilerOptions23.setRemoveUnusedVariables(reach36);
        compilerOptions8.setInlineVariables(reach36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGenerateExports(true);
        compilerOptions40.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean49 = compilerOptions40.foldConstants;
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions40.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.enableExternExports(true);
        java.util.Set<java.lang.String> strSet54 = compilerOptions51.stripTypes;
        compilerOptions51.setRemoveUnusedVars(true);
        compilerOptions51.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet61 = compilerOptions60.stripNamePrefixes;
        byte[] byteArray62 = compilerOptions60.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach63 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions60.setInlineFunctions(reach63);
        compilerOptions51.setRemoveUnusedVariable(reach63);
        compilerOptions40.setRemoveUnusedVariables(reach63);
        compilerOptions8.setInlineVariables(reach63);
        compilerOptions0.setRemoveUnusedVariable(reach63);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler69 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation> aliasTransformationSourcePosition71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerOptions.AliasTransformation aliasTransformation72 = aliasTransformationHandler69.logAliasTransformation("", aliasTransformationSourcePosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertTrue("'" + reach36 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach36.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertTrue("'" + reach63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach63.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNotNull(aliasTransformationHandler69);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        compiler1.reportCodeChange();
        com.google.javascript.jscomp.JSError jSError3 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler1.report(jSError3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor13 = locationMappingList1.listIterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        compilerOptions14.setGeneratePseudoNames(true);
        compilerOptions14.inlineLocalFunctions = false;
        compilerOptions14.setIdeMode(true);
        compilerOptions14.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet27 = compilerOptions14.aliasableStrings;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap28 = compilerOptions14.customPasses;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.convertToDottedProperties = true;
        boolean boolean35 = compilerOptions29.inlineConstantVars;
        boolean boolean36 = compilerOptions29.extractPrototypeMemberDeclarations;
        boolean boolean37 = compilerOptions29.gatherCssNames;
        compilerOptions29.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions29.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        boolean boolean46 = compilerOptions43.extractPrototypeMemberDeclarations;
        boolean boolean47 = compilerOptions43.jqueryPass;
        boolean boolean48 = compilerOptions43.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setLabelRenaming(true);
        compilerOptions49.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean54 = compilerOptions49.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format55 = compilerOptions49.sourceMapFormat;
        compilerOptions43.setSourceMapFormat(format55);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing57 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions43.setTweakProcessing(tweakProcessing57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions59.checkProvides;
        java.util.Set<java.lang.String> strSet67 = compilerOptions59.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream68 = strSet67.stream();
        compilerOptions43.stripTypes = strSet67;
        compilerOptions29.setStripNameSuffixes(strSet67);
        compilerOptions14.setExtraAnnotationNames(strSet67);
        boolean boolean72 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet67);
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean74 = compilerOptions73.crossModuleMethodMotion;
        int int75 = locationMappingList1.lastIndexOf((java.lang.Object) compilerOptions73);
        compilerOptions73.convertToDottedProperties = false;
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locationMappingItor13);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(format55);
        org.junit.Assert.assertTrue("'" + tweakProcessing57 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing57.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        java.lang.String str2 = sourceFile1.getOriginalPath();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = sourceFile1.getCode();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi! (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setLabelRenaming(true);
        compilerOptions9.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions9.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.enableExternExports(true);
        compilerOptions16.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet21 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.aliasableStrings = strSet21;
        compilerOptions0.setStripNameSuffixes(strSet21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        boolean boolean29 = compilerOptions24.generateExports;
        compilerOptions24.gatherCssNames = false;
        compilerOptions24.disableRuntimeTypeCheck();
        compilerOptions24.setOptimizeCalls(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet36 = compilerOptions35.stripNamePrefixes;
        byte[] byteArray37 = compilerOptions35.inputVariableMapSerialized;
        compilerOptions35.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap40 = null;
        compilerOptions35.setCssRenamingMap(cssRenamingMap40);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        compilerOptions42.convertToDottedProperties = true;
        boolean boolean48 = compilerOptions42.inlineConstantVars;
        compilerOptions42.aliasAllStrings = false;
        boolean boolean51 = compilerOptions42.smartNameRemoval;
        compilerOptions42.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel54 = compilerOptions42.checkGlobalNamesLevel;
        compilerOptions35.setCheckProvides(checkLevel54);
        compilerOptions24.aggressiveVarCheck = checkLevel54;
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel54);
        boolean boolean58 = compilerOptions0.crossModuleMethodMotion;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + checkLevel54 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel54.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = null;
        compilerOptions0.setTweakReplacements(strMap42);
        compilerOptions0.setSpecializeInitialModule(false);
        compilerOptions0.setInlineProperties(true);
        compilerOptions0.smartNameRemoval = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setRenamePrefixNamespace("hi!");
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy9 = compilerOptions0.anonymousFunctionNaming;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy9 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy9.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException: ", "// Input %num%");
        java.io.Reader reader3 = sourceFile2.getCodeReader();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertNotNull(reader3);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        java.util.Set<java.lang.String> strSet14 = compilerOptions0.stripNamePrefixes;
        boolean boolean15 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions0.markNoSideEffectCalls;
        compilerOptions0.setOptimizeArgumentsArray(false);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy19 = compilerOptions0.propertyRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        byte[] byteArray22 = compilerOptions20.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach23 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions20.setInlineFunctions(reach23);
        compilerOptions20.setRecordFunctionInformation(true);
        java.lang.String str27 = compilerOptions20.locale;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel28 = compilerOptions20.sourceMapDetailLevel;
        compilerOptions20.setTweakToStringLiteral("java.io.IOException: ", "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup32 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup32;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup32;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup32;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention39 = null;
        compilerOptions36.setCodingConvention(codingConvention39);
        boolean boolean41 = compilerOptions36.generateExports;
        compilerOptions36.gatherCssNames = false;
        boolean boolean44 = compilerOptions36.optimizeReturns;
        compilerOptions36.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet47 = compilerOptions36.aliasableStrings;
        compilerOptions36.generateExports = false;
        boolean boolean50 = compilerOptions36.assumeStrictThis();
        compilerOptions36.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention56 = null;
        compilerOptions53.setCodingConvention(codingConvention56);
        compilerOptions53.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet61 = compilerOptions60.stripNamePrefixes;
        compilerOptions53.setIdGenerators(strSet61);
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention66 = null;
        compilerOptions63.setCodingConvention(codingConvention66);
        compilerOptions63.setGeneratePseudoNames(true);
        compilerOptions63.inlineLocalFunctions = false;
        compilerOptions63.setIdeMode(true);
        compilerOptions63.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setRewriteNewDateGoogNow(true);
        boolean boolean79 = compilerOptions76.extractPrototypeMemberDeclarations;
        compilerOptions76.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel82 = compilerOptions76.checkGlobalThisLevel;
        compilerOptions63.checkMissingReturn = checkLevel82;
        compilerOptions53.aggressiveVarCheck = checkLevel82;
        compilerOptions36.checkUnreachableCode = checkLevel82;
        compilerOptions36.setCheckCaja(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap88 = compilerOptions36.getTweakReplacements();
        compilerOptions36.crossModuleMethodMotion = true;
        compilerOptions36.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel93 = compilerOptions36.checkMissingGetCssNameLevel;
        compilerOptions20.setWarningLevel(diagnosticGroup32, checkLevel93);
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel93);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy19 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy19.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + reach23 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach23.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(detailLevel28);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + checkLevel82 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel82.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertTrue("'" + checkLevel93 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel93.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.setMessageBundle(messageBundle9);
        boolean boolean11 = compilerOptions0.recordFunctionInformation;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy12 = compilerOptions0.anonymousFunctionNaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach17 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineVariables(reach17);
        boolean boolean19 = compilerOptions13.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap20 = null;
        compilerOptions13.cssRenamingMap = cssRenamingMap20;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing22 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions13.setTweakProcessing(tweakProcessing22);
        compilerOptions13.setDefineToNumberLiteral("java.io.IOException: ", (int) (short) 10);
        compilerOptions13.renamePrefixNamespace = "java.io.IOException: ";
        java.util.Set<java.lang.String> strSet29 = compilerOptions13.aliasableStrings;
        compilerOptions0.stripTypePrefixes = strSet29;
        compilerOptions0.setLocale("");
        byte[] byteArray33 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.setCheckMissingGetCssNameBlacklist("java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy12 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy12.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + reach17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach17.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing22.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(byteArray33);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("", throwable24);
        iOException22.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.PrintStream printStream29 = printStream1.format("java.io.IOException: Unversioned directory", (java.lang.Object[]) throwableArray28);
        java.lang.Throwable throwable32 = null;
        java.io.IOException iOException33 = new java.io.IOException("", throwable32);
        java.lang.Throwable throwable35 = null;
        java.io.IOException iOException36 = new java.io.IOException("", throwable35);
        iOException33.addSuppressed((java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException36.getSuppressed();
        java.io.PrintStream printStream39 = printStream1.printf("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", (java.lang.Object[]) throwableArray38);
        printStream39.flush();
        java.io.PrintStream printStream42 = printStream39.append('#');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream42);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions4 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions4.setLabelRenaming(true);
        compilerOptions4.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions4.checkGlobalThisLevel;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel9);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention14 = null;
        compilerOptions11.setCodingConvention(codingConvention14);
        boolean boolean16 = compilerOptions11.computeFunctionSideEffects;
        boolean boolean17 = compilerOptions11.printInputDelimiter;
        compilerOptions11.setGeneratePseudoNames(true);
        boolean boolean20 = compilerOptions11.disambiguateProperties;
        java.util.Set<java.lang.String> strSet21 = compilerOptions11.aliasableStrings;
        compilerOptions0.stripNameSuffixes = strSet21;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        boolean boolean29 = compilerOptions24.generateExports;
        compilerOptions24.gatherCssNames = false;
        boolean boolean32 = compilerOptions24.optimizeReturns;
        compilerOptions24.smartNameRemoval = true;
        compilerOptions24.removeUnusedPrototypePropertiesInExterns = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        compilerOptions37.convertToDottedProperties = true;
        boolean boolean43 = compilerOptions37.inlineConstantVars;
        compilerOptions37.aliasAllStrings = false;
        boolean boolean46 = compilerOptions37.smartNameRemoval;
        compilerOptions37.gatherCssNames = true;
        compilerOptions37.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention54 = null;
        compilerOptions51.setCodingConvention(codingConvention54);
        boolean boolean56 = compilerOptions51.computeFunctionSideEffects;
        boolean boolean57 = compilerOptions51.printInputDelimiter;
        compilerOptions51.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions51.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions51.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions51.setInputPropertyMapSerialized(byteArray66);
        compilerOptions37.setInputPropertyMapSerialized(byteArray66);
        compilerOptions24.setInputPropertyMapSerialized(byteArray66);
        compilerOptions0.inputVariableMapSerialized = byteArray66;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        com.google.javascript.jscomp.Scope scope3 = compiler1.getTopScope();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.JSError[] jSErrorArray4 = compiler1.getMessages();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertNull(scope3);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        printStream1.println("java.io.IOException");
        java.util.Locale locale16 = null;
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        char[] charArray22 = new char[] { '4', '4' };
        printStream19.print(charArray22);
        printStream19.print((int) ' ');
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream19, false);
        printStream19.write((int) '#');
        java.util.Locale locale30 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream34 = printStream19.format(locale30, "Unversioned directory", objArray33);
        java.io.PrintStream printStream35 = printStream1.printf(locale16, "Unversioned directory", objArray33);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        compilerOptions36.setCollapseProperties(false);
        compilerOptions36.setClosurePass(true);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions36.setInputPropertyMapSerialized(byteArray49);
        printStream1.write(byteArray49);
        printStream1.write(0);
        printStream1.write((int) 'a');
        printStream1.print(' ');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 0, 1, 0, -1]");
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions0.setDeadAssignmentElimination(true);
        byte[] byteArray7 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setLineBreak(true);
        compilerOptions0.setReplaceIdGenerators(true);
        compilerOptions0.setDevirtualizePrototypeMethods(true);
        compilerOptions0.setRewriteNewDateGoogNow(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNull(byteArray7);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setClosurePass(true);
        boolean boolean7 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.enableExternExports(true);
        java.util.Set<java.lang.String> strSet11 = compilerOptions8.stripTypes;
        compilerOptions8.setRemoveUnusedVars(true);
        compilerOptions8.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        byte[] byteArray19 = compilerOptions17.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions17.setInlineFunctions(reach20);
        compilerOptions8.setRemoveUnusedVariable(reach20);
        compilerOptions0.setRemoveUnusedVariables(reach20);
        boolean boolean24 = compilerOptions0.recordFunctionInformation;
        boolean boolean25 = compilerOptions0.aliasExternals;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.convertToDottedProperties = true;
        compilerOptions26.setRemoveUnusedVars(true);
        boolean boolean34 = compilerOptions26.labelRenaming;
        boolean boolean35 = compilerOptions26.inlineVariables;
        compilerOptions26.setPreferLineBreakAtEndOfFile(false);
        com.google.javascript.jscomp.SourceMap.Format format38 = compilerOptions26.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format38;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(format38);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        compilerOptions0.setExportTestFunctions(false);
        java.io.PrintStream printStream11 = new java.io.PrintStream("Unversioned directory");
        printStream11.write((-1));
        printStream11.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup16 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup16;
        printStream11.print((java.lang.Object) diagnosticGroup16);
        java.io.PrintStream printStream20 = new java.io.PrintStream("Unversioned directory");
        char[] charArray23 = new char[] { '4', '4' };
        printStream20.print(charArray23);
        printStream20.print((int) ' ');
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream20.write(byteArray33, (int) (byte) 0, (int) (byte) 1);
        printStream11.write(byteArray33, 0, 0);
        compilerOptions0.setInputVariableMapSerialized(byteArray33);
        compilerOptions0.setCheckCaja(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setCheckSuspiciousCode(false);
        byte[] byteArray8 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode9 = compilerOptions0.getLanguageOut();
        compilerOptions0.moveFunctionDeclarations = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNull(languageMode9);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException: ", "2019/07/12 07:12");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.foldConstants;
        compilerOptions0.setProtectHiddenSideEffects(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        compilerOptions12.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions12.checkGlobalThisLevel;
        compilerOptions12.setDevirtualizePrototypeMethods(true);
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions12.setMessageBundle(messageBundle21);
        boolean boolean23 = compilerOptions12.recordFunctionInformation;
        boolean boolean24 = compilerOptions12.moveFunctionDeclarations;
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        boolean boolean29 = compilerOptions25.jqueryPass;
        compilerOptions25.collapseAnonymousFunctions = false;
        boolean boolean32 = compilerOptions25.checkTypes;
        compilerOptions25.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.checkProvides;
        compilerOptions12.setCheckGlobalNamesLevel(checkLevel35);
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel35);
        java.lang.Class<?> wildcardClass38 = checkLevel35.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setAliasableGlobals("");
        compilerOptions0.recordFunctionInformation = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setInlineLocalVariables(true);
        boolean boolean38 = compilerOptions27.optimizeParameters;
        compilerOptions27.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions27.closurePass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention46 = null;
        compilerOptions43.setCodingConvention(codingConvention46);
        compilerOptions43.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel50 = compilerOptions43.checkProvides;
        java.util.Set<java.lang.String> strSet51 = compilerOptions43.stripTypes;
        compilerOptions27.setStripNamePrefixes(strSet51);
        compilerOptions27.setUnaliasableGlobals("-1");
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setLabelRenaming(true);
        compilerOptions55.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean60 = compilerOptions55.isExternExportsEnabled();
        compilerOptions55.removeUnusedClassProperties = false;
        compilerOptions55.setCoalesceVariableNames(false);
        compilerOptions55.setCheckCaja(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        boolean boolean70 = compilerOptions67.extractPrototypeMemberDeclarations;
        compilerOptions67.setCollapseProperties(false);
        compilerOptions67.setClosurePass(true);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions67.setInputPropertyMapSerialized(byteArray80);
        compilerOptions67.setSyntheticBlockStartMarker("Unversioned directory");
        com.google.javascript.jscomp.CheckLevel checkLevel84 = compilerOptions67.checkMissingReturn;
        compilerOptions55.setCheckUnreachableCode(checkLevel84);
        compilerOptions27.checkRequires = checkLevel84;
        compilerOptions0.aggressiveVarCheck = checkLevel84;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + checkLevel50 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel50.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel84 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel84.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        boolean boolean6 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode7 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageOut(languageMode7);
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.WarningsGuard warningsGuard10 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.addWarningsGuard(warningsGuard10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + languageMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode7.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.aliasKeywords;
        compilerOptions0.setRemoveUnusedClassProperties(false);
        compilerOptions0.setInputDelimiter("java.io.IOException: -1");
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions0.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention25 = null;
        compilerOptions22.setCodingConvention(codingConvention25);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode27 = compilerOptions22.getTracerMode();
        compilerOptions22.lineBreak = false;
        compilerOptions22.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions22.inlineLocalFunctions = false;
        compilerOptions22.setFoldConstants(true);
        java.lang.String str36 = compilerOptions22.instrumentationTemplate;
        com.google.javascript.jscomp.ErrorFormat errorFormat37 = compilerOptions22.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat37);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + tracerMode27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode27.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(errorFormat37);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet25 = compilerOptions24.stripNamePrefixes;
        compilerOptions17.setIdGenerators(strSet25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGeneratePseudoNames(true);
        compilerOptions27.inlineLocalFunctions = false;
        compilerOptions27.setIdeMode(true);
        compilerOptions27.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel46;
        compilerOptions17.aggressiveVarCheck = checkLevel46;
        compilerOptions0.checkUnreachableCode = checkLevel46;
        compilerOptions0.setTweakToDoubleLiteral("", 0.0d);
        java.lang.String str53 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setRewriteNewDateGoogNow(true);
        boolean boolean57 = compilerOptions54.extractPrototypeMemberDeclarations;
        compilerOptions54.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = compilerOptions54.brokenClosureRequiresLevel;
        java.util.Set<java.lang.String> strSet61 = compilerOptions54.stripTypes;
        compilerOptions0.setIdGenerators(strSet61);
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList63 = compilerOptions0.sourceMapLocationMappings;
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator64 = locationMappingList63.spliterator();
        com.google.javascript.jscomp.Compiler compiler65 = new com.google.javascript.jscomp.Compiler();
        double double66 = compiler65.getProgress();
        compiler65.reportCodeChange();
        com.google.javascript.jscomp.Scope scope68 = compiler65.getTopScope();
        double double69 = compiler65.getProgress();
        compiler65.disableThreads();
        boolean boolean71 = locationMappingList63.remove((java.lang.Object) compiler65);
        com.google.javascript.jscomp.JSModule jSModule72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = compiler65.toSource(jSModule72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel60 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel60.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locationMappingList63);
        org.junit.Assert.assertNotNull(locationMappingSpliterator64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNull(scope68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName("2019/07/12 07:12");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("java.io.IOException: ");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = diagnosticGroups0.forName("java.io.IOException: ");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
        org.junit.Assert.assertNull(diagnosticGroup6);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        compilerOptions0.reserveRawExports = false;
        compilerOptions0.crossModuleCodeMotion = false;
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.syntheticBlockEndMarker = "2019/07/12 07:12";
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.setReplaceStringsPlaceholderToken("// Input %num%");
        compilerOptions0.setPropertyAffinity(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        printStream1.write((-1));
        printStream1.println('#');
        printStream1.print((double) ' ');
        printStream1.print(0);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setCheckSymbols(true);
        boolean boolean13 = compilerOptions0.devirtualizePrototypeMethods;
        boolean boolean14 = compilerOptions0.optimizeCalls;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention18 = null;
        compilerOptions15.setCodingConvention(codingConvention18);
        compilerOptions15.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet23 = compilerOptions22.stripNamePrefixes;
        compilerOptions15.setIdGenerators(strSet23);
        java.lang.String[] strArray29 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        compilerOptions15.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList30);
        compilerOptions15.setCheckSymbols(true);
        compilerOptions15.collapseAnonymousFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet38 = compilerOptions37.stripNamePrefixes;
        compilerOptions15.stripTypePrefixes = strSet38;
        compilerOptions0.setIdGenerators(strSet38);
        compilerOptions0.setAssumeStrictThis(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean14 = compilerOptions10.jqueryPass;
        compilerOptions10.collapseAnonymousFunctions = false;
        java.lang.String str17 = compilerOptions10.aliasStringsBlacklist;
        compilerOptions10.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        boolean boolean24 = compilerOptions20.jqueryPass;
        compilerOptions20.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        compilerOptions27.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions27.checkProvides;
        compilerOptions20.brokenClosureRequiresLevel = checkLevel34;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel34);
        compilerOptions0.aggressiveVarCheck = checkLevel34;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention41 = null;
        compilerOptions38.setCodingConvention(codingConvention41);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy43 = compilerOptions38.anonymousFunctionNaming;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy43);
        compilerOptions0.setLineLengthThreshold(100);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions0.checkUnreachableCode;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy43 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy43.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        boolean boolean11 = compilerOptions6.generateExports;
        compilerOptions6.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy17 = compilerOptions14.variableRenaming;
        compilerOptions6.setVariableRenaming(variableRenamingPolicy17);
        compilerOptions0.variableRenaming = variableRenamingPolicy17;
        byte[] byteArray20 = compilerOptions0.inputPropertyMapSerialized;
        boolean boolean21 = compilerOptions0.aliasExternals;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy17 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy17.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) -1 };
        printStream1.write(byteArray14);
        printStream1.close();
        java.io.PrintStream printStream18 = new java.io.PrintStream("Unversioned directory");
        char[] charArray21 = new char[] { '4', '4' };
        printStream18.print(charArray21);
        printStream18.print((int) ' ');
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream18, false);
        printStream18.write((int) '#');
        java.util.Locale locale29 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream33 = printStream18.format(locale29, "Unversioned directory", objArray32);
        printStream33.println((double) 1);
        printStream33.print(1L);
        java.util.Locale locale38 = null;
        java.io.PrintStream printStream41 = new java.io.PrintStream("Unversioned directory");
        char[] charArray44 = new char[] { '4', '4' };
        printStream41.print(charArray44);
        printStream41.print((int) ' ');
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream41, false);
        printStream41.write((int) '#');
        printStream41.print((float) (short) 0);
        printStream41.println("java.io.IOException");
        java.util.Locale locale56 = null;
        java.io.PrintStream printStream59 = new java.io.PrintStream("Unversioned directory");
        char[] charArray62 = new char[] { '4', '4' };
        printStream59.print(charArray62);
        printStream59.print((int) ' ');
        java.io.PrintStream printStream67 = new java.io.PrintStream((java.io.OutputStream) printStream59, false);
        printStream59.write((int) '#');
        java.util.Locale locale70 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream74 = printStream59.format(locale70, "Unversioned directory", objArray73);
        java.io.PrintStream printStream75 = printStream41.printf(locale56, "Unversioned directory", objArray73);
        java.io.PrintStream printStream76 = printStream33.format(locale38, "java.io.IOException: Unversioned directory", objArray73);
        printStream76.write((int) (byte) 10);
        java.io.PrintStream printStream82 = printStream76.append((java.lang.CharSequence) "java.io.IOException: Unversioned directory", 0, (int) ' ');
        printStream1.print((java.lang.Object) printStream82);
        java.io.PrintStream printStream85 = printStream1.append('a');
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.syntheticBlockEndMarker = "Unversioned directory";
        compilerOptions0.setInlineProperties(false);
        java.lang.String str48 = compilerOptions0.checkMissingGetCssNameBlacklist;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        com.google.javascript.jscomp.SourceMap.Format format9 = compilerOptions0.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy15 = compilerOptions10.anonymousFunctionNaming;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy15;
        boolean boolean17 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setLabelRenaming(true);
        compilerOptions18.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean23 = compilerOptions18.labelRenaming;
        compilerOptions18.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet27 = compilerOptions26.stripNamePrefixes;
        byte[] byteArray28 = compilerOptions26.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention34 = null;
        compilerOptions31.setCodingConvention(codingConvention34);
        compilerOptions31.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions31.checkProvides;
        compilerOptions26.setWarningLevel(diagnosticGroup29, checkLevel38);
        compilerOptions18.checkUnreachableCode = checkLevel38;
        compilerOptions18.setAliasableGlobals("");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray43 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList44 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44, locationMappingArray43);
        com.google.javascript.jscomp.SourceFile sourceFile48 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean49 = locationMappingList44.remove((java.lang.Object) "hi!");
        boolean boolean50 = locationMappingList44.isEmpty();
        compilerOptions18.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        boolean boolean55 = compilerOptions52.extractPrototypeMemberDeclarations;
        compilerOptions52.convertToDottedProperties = true;
        boolean boolean58 = compilerOptions52.inlineConstantVars;
        boolean boolean59 = compilerOptions52.extractPrototypeMemberDeclarations;
        boolean boolean60 = compilerOptions52.gatherCssNames;
        compilerOptions52.setCheckSymbols(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode63 = compilerOptions52.getTracerMode();
        compilerOptions52.moveFunctionDeclarations = false;
        boolean boolean66 = locationMappingList44.equals((java.lang.Object) false);
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor67 = locationMappingList44.iterator();
        compilerOptions0.setSourceMapLocationMappings((java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList44);
        boolean boolean69 = compilerOptions0.removeUnusedClassProperties;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(format9);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy15 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy15.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(byteArray28);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + tracerMode63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode63.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locationMappingItor67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        compilerOptions0.setRecordFunctionInformation(false);
        compilerOptions0.ambiguateProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setLabelRenaming(true);
        compilerOptions17.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions17.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap24 = compilerOptions17.cssRenamingMap;
        compilerOptions17.setRuntimeTypeCheck(true);
        compilerOptions17.setRemoveUnusedVars(false);
        compilerOptions17.inlineLocalFunctions = true;
        compilerOptions17.setTweakToDoubleLiteral("java.io.IOException: Unversioned directory", (double) '#');
        com.google.javascript.jscomp.CheckLevel checkLevel34 = compilerOptions17.checkRequires;
        compilerOptions0.setReportUnknownTypes(checkLevel34);
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(cssRenamingMap24);
        org.junit.Assert.assertTrue("'" + checkLevel34 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel34.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.setSyntheticBlockEndMarker("java.io.IOException: Unversioned directory");
        compilerOptions0.recordFunctionInformation = false;
        compilerOptions0.setNameReferenceGraphPath("");
        compilerOptions0.setInlineGetters(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        com.google.javascript.jscomp.SourceFile sourceFile14 = builder11.buildFromCode("java.io.IOException: -1", "hi!");
        com.google.javascript.jscomp.SourceFile sourceFile17 = builder11.buildFromCode("java.io.IOException", "Unversioned directory");
        int int19 = sourceFile17.getLineOffset(1);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertNotNull(sourceFile17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        boolean boolean21 = compilerOptions17.jqueryPass;
        boolean boolean22 = compilerOptions17.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setLabelRenaming(true);
        compilerOptions23.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean28 = compilerOptions23.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format29 = compilerOptions23.sourceMapFormat;
        compilerOptions17.sourceMapFormat = format29;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.setCollapseProperties(false);
        boolean boolean37 = compilerOptions31.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat38 = compilerOptions31.errorFormat;
        compilerOptions17.setErrorFormat(errorFormat38);
        compilerOptions0.setErrorFormat(errorFormat38);
        boolean boolean41 = compilerOptions0.inlineVariables;
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean44 = compilerOptions0.rewriteFunctionExpressions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        boolean boolean48 = compilerOptions45.extractPrototypeMemberDeclarations;
        compilerOptions45.flowSensitiveInlineVariables = false;
        compilerOptions45.checkMissingGetCssNameBlacklist = "java.io.IOException: ";
        compilerOptions45.removeUnusedVars = true;
        compilerOptions45.setCrossModuleCodeMotion(false);
        boolean boolean57 = compilerOptions45.generateExports;
        compilerOptions45.computeFunctionSideEffects = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.enableExternExports(true);
        java.util.Set<java.lang.String> strSet63 = compilerOptions60.stripTypes;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap64 = null;
        compilerOptions60.customPasses = customPassExecutionTimeMultimap64;
        compilerOptions60.syntheticBlockEndMarker = "-1";
        compilerOptions60.setAcceptConstKeyword(false);
        compilerOptions60.setInlineConstantVars(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode72 = compilerOptions60.getTracerMode();
        compilerOptions45.setTracerMode(tracerMode72);
        compilerOptions0.setTracer(tracerMode72);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(format29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(errorFormat38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + tracerMode72 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode72.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel5 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setOutputJsStringUsage(false);
        com.google.javascript.jscomp.ErrorFormat errorFormat8 = compilerOptions0.errorFormat;
        boolean boolean9 = compilerOptions0.flowSensitiveInlineVariables;
        boolean boolean10 = compilerOptions0.foldConstants;
        compilerOptions0.removeUnusedLocalVars = false;
        boolean boolean13 = compilerOptions0.optimizeCalls;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap14 = compilerOptions0.getDefineReplacements();
        org.junit.Assert.assertTrue("'" + checkLevel5 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel5.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        boolean boolean17 = printStream8.checkError();
        java.io.PrintStream printStream19 = printStream8.append((java.lang.CharSequence) "java.io.IOException: Unversioned directory");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(printStream19);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState2 = compiler1.getState();
        double double3 = compiler1.getProgress();
        com.google.javascript.jscomp.SourceMap sourceMap4 = compiler1.getSourceMap();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler1.getState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = compiler1.acceptConstKeyword();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intermediateState2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNull(sourceMap4);
        org.junit.Assert.assertNotNull(intermediateState5);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        boolean boolean12 = compilerOptions0.inlineVariables;
        compilerOptions0.setRecordFunctionInformation(false);
        java.lang.String str15 = compilerOptions0.syntheticBlockEndMarker;
        byte[] byteArray16 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach21 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions17.setInlineVariables(reach21);
        compilerOptions0.setInlineFunctions(reach21);
        compilerOptions0.setRemoveUnusedVars(false);
        java.util.Set<java.lang.String> strSet26 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setIdGenerators(strSet26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + reach21 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach21.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        boolean boolean9 = compilerOptions0.crossModuleMethodMotion;
        compilerOptions0.inlineGetters = false;
        boolean boolean12 = compilerOptions0.foldConstants;
        compilerOptions0.setAcceptConstKeyword(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setCollapseObjectLiterals(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setRenamePrefixNamespace("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.optimizeArgumentsArray = false;
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) "");
        printStream1.print((double) 0.0f);
        printStream1.print("java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        boolean boolean31 = compilerOptions27.jqueryPass;
        compilerOptions27.collapseAnonymousFunctions = false;
        boolean boolean34 = compilerOptions27.checkTypes;
        compilerOptions27.setRemoveTryCatchFinally(false);
        compilerOptions27.markNoSideEffectCalls = true;
        java.io.PrintStream printStream40 = new java.io.PrintStream("Unversioned directory");
        char[] charArray43 = new char[] { '4', '4' };
        printStream40.print(charArray43);
        printStream40.print((int) ' ');
        java.io.PrintStream printStream48 = new java.io.PrintStream((java.io.OutputStream) printStream40, false);
        printStream40.write((int) '#');
        printStream40.print((float) (short) 0);
        printStream40.println("java.io.IOException");
        java.util.Locale locale55 = null;
        java.io.PrintStream printStream58 = new java.io.PrintStream("Unversioned directory");
        char[] charArray61 = new char[] { '4', '4' };
        printStream58.print(charArray61);
        printStream58.print((int) ' ');
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream58, false);
        printStream58.write((int) '#');
        java.util.Locale locale69 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream73 = printStream58.format(locale69, "Unversioned directory", objArray72);
        java.io.PrintStream printStream74 = printStream40.printf(locale55, "Unversioned directory", objArray72);
        printStream74.flush();
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention79 = null;
        compilerOptions76.setCodingConvention(codingConvention79);
        boolean boolean81 = compilerOptions76.generateExports;
        compilerOptions76.printInputDelimiter = false;
        compilerOptions76.setCheckSymbols(true);
        byte[] byteArray90 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10 };
        compilerOptions76.setInputVariableMapSerialized(byteArray90);
        printStream74.write(byteArray90);
        compilerOptions27.setInputVariableMapSerialized(byteArray90);
        printStream1.write(byteArray90);
        boolean boolean95 = printStream1.checkError();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, 100, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        boolean boolean13 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        compilerOptions0.setRenamePrefixNamespace("Unversioned directory");
        compilerOptions0.setCheckMissingGetCssNameBlacklist("// Input %num%");
        compilerOptions0.checkMissingGetCssNameBlacklist = "4432#0.010\001\001\000\001\000\ufffd";
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        com.google.javascript.jscomp.MessageBundle messageBundle8 = compilerOptions0.messageBundle;
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.setTweakToStringLiteral("hi!", "java.io.IOException");
        compilerOptions0.setRuntimeTypeCheckLogFunction("java.io.IOException: ");
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions16.setInlineVariables(reach20);
        compilerOptions16.setPrintInputDelimiter(true);
        boolean boolean24 = compilerOptions16.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle25 = null;
        compilerOptions16.messageBundle = messageBundle25;
        compilerOptions16.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap29 = null;
        compilerOptions16.cssRenamingMap = cssRenamingMap29;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList31 = compilerOptions16.sourceMapLocationMappings;
        locationMappingList31.clear();
        compilerOptions0.setSourceMapLocationMappings(locationMappingList31);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping35 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping36 = locationMappingList31.set((int) (byte) 10, locationMapping35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertNull(messageBundle8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locationMappingList31);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        char[] charArray24 = new char[] { ' ', '#', '4', 'a', '#', 'a' };
        printStream1.print(charArray24);
        java.io.PrintStream printStream28 = new java.io.PrintStream("Unversioned directory");
        char[] charArray31 = new char[] { '4', '4' };
        printStream28.print(charArray31);
        printStream28.print((int) ' ');
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream28, false);
        printStream28.write((int) '#');
        java.util.Locale locale39 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream43 = printStream28.format(locale39, "Unversioned directory", objArray42);
        java.io.PrintStream printStream44 = printStream1.printf("java.io.IOException: ", objArray42);
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #, 4, a, #, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream44);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        byte[] byteArray13 = new byte[] { (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        boolean boolean15 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.checkTypes = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention21 = null;
        compilerOptions18.setCodingConvention(codingConvention21);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode23 = compilerOptions18.getTracerMode();
        compilerOptions18.lineBreak = false;
        compilerOptions18.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions18.inlineLocalFunctions = false;
        compilerOptions18.setFoldConstants(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet33 = compilerOptions32.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle34 = null;
        compilerOptions32.messageBundle = messageBundle34;
        compilerOptions32.setCoalesceVariableNames(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing38 = compilerOptions32.getTweakProcessing();
        compilerOptions18.setTweakProcessing(tweakProcessing38);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        compilerOptions40.setCollapseProperties(false);
        compilerOptions40.setClosurePass(true);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions40.setInputPropertyMapSerialized(byteArray53);
        compilerOptions40.setFlowSensitiveInlineVariables(true);
        boolean boolean57 = compilerOptions40.exportTestFunctions;
        compilerOptions40.closurePass = false;
        compilerOptions40.renamePrefix = "Unversioned directory";
        compilerOptions40.setMoveFunctionDeclarations(false);
        compilerOptions40.setProcessObjectPropertyString(false);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions40.checkGlobalThisLevel;
        compilerOptions18.setBrokenClosureRequiresLevel(checkLevel66);
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions68.setRewriteNewDateGoogNow(true);
        boolean boolean71 = compilerOptions68.extractPrototypeMemberDeclarations;
        boolean boolean72 = compilerOptions68.jqueryPass;
        compilerOptions68.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions75 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions75.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention78 = null;
        compilerOptions75.setCodingConvention(codingConvention78);
        compilerOptions75.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel82 = compilerOptions75.checkProvides;
        compilerOptions68.brokenClosureRequiresLevel = checkLevel82;
        compilerOptions18.setCheckMissingGetCssNameLevel(checkLevel82);
        compilerOptions0.setReportUnknownTypes(checkLevel82);
        boolean boolean86 = compilerOptions0.markNoSideEffectCalls;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + tracerMode23 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode23.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + tweakProcessing38 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing38.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + checkLevel82 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel82.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        java.io.IOException iOException1 = new java.io.IOException("java.io.IOException: ");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: java.io.IOException: " + "'", str2, "java.io.IOException: java.io.IOException: ");
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.setNameReferenceGraphPath("java.io.IOException: -1");
        compilerOptions0.crossModuleCodeMotion = true;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: Unversioned directory");
        compilerOptions0.setRewriteFunctionExpressions(false);
        boolean boolean7 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkUnreachableCode;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setAcceptConstKeyword(false);
        boolean boolean17 = compilerOptions0.rewriteFunctionExpressions;
        compilerOptions0.prettyPrint = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat21 = compilerOptions14.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat21);
        boolean boolean23 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.flowSensitiveInlineVariables = false;
        java.util.Set<java.lang.String> strSet26 = compilerOptions0.stripNameSuffixes;
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.stream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(errorFormat21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strStream27);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.setOutputCharset("java.io.IOException");
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.setAcceptConstKeyword(false);
        boolean boolean15 = compilerOptions0.reserveRawExports;
        compilerOptions0.closurePass = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: ");
        compilerOptions0.setOptimizeArgumentsArray(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        compilerOptions0.setTweakReplacements(strMap16);
        com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions0.checkRequires;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setLabelRenaming(true);
        compilerOptions19.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean24 = compilerOptions19.isExternExportsEnabled();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        boolean boolean28 = compilerOptions25.extractPrototypeMemberDeclarations;
        compilerOptions25.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions25.checkGlobalThisLevel;
        compilerOptions19.setAggressiveVarCheck(checkLevel31);
        compilerOptions19.setOutputCharset("java.io.IOException");
        compilerOptions19.jqueryPass = false;
        compilerOptions19.setReplaceIdGenerators(false);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray39 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList40 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList40, locationMappingArray39);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        compilerOptions42.setCollapseProperties(false);
        compilerOptions42.setClosurePass(true);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions42.setInputPropertyMapSerialized(byteArray55);
        compilerOptions42.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        boolean boolean62 = compilerOptions59.extractPrototypeMemberDeclarations;
        compilerOptions59.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet65 = compilerOptions59.stripTypePrefixes;
        compilerOptions42.aliasableStrings = strSet65;
        boolean boolean67 = locationMappingList40.removeAll((java.util.Collection<java.lang.String>) strSet65);
        java.util.stream.Stream<java.lang.String> strStream68 = strSet65.stream();
        compilerOptions19.stripTypes = strSet65;
        compilerOptions0.stripTypes = strSet65;
        compilerOptions0.setSummaryDetailLevel(0);
        compilerOptions0.setProcessObjectPropertyString(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + checkLevel18 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel18.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strStream68);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator34 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping35 = null;
        boolean boolean36 = locationMappingList1.add(locationMapping35);
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor37 = locationMappingList1.iterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator38 = locationMappingList1.spliterator();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locationMappingSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locationMappingItor37);
        org.junit.Assert.assertNotNull(locationMappingSpliterator38);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "java.io.IOException: -1");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException: -1");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.setRewriteFunctionExpressions(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.generateExports;
        compilerOptions14.gatherCssNames = false;
        boolean boolean22 = compilerOptions14.optimizeReturns;
        compilerOptions14.smartNameRemoval = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention29 = null;
        compilerOptions26.setCodingConvention(codingConvention29);
        compilerOptions26.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel33 = compilerOptions26.checkProvides;
        java.lang.String[] strArray35 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        compilerOptions26.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList36.stream();
        compilerOptions14.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList36);
        compilerOptions0.setManageClosureDependencies((java.util.List<java.lang.String>) strList36);
        java.lang.String str42 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setCollapseObjectLiterals(true);
        boolean boolean45 = compilerOptions0.inlineVariables;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel33 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel33.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setInlineGetters(false);
        boolean boolean9 = compilerOptions0.convertToDottedProperties;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach14 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions10.setInlineVariables(reach14);
        compilerOptions10.setPrintInputDelimiter(true);
        boolean boolean18 = compilerOptions10.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle19 = null;
        compilerOptions10.messageBundle = messageBundle19;
        compilerOptions10.setDeadAssignmentElimination(false);
        java.lang.String str23 = compilerOptions10.checkMissingGetCssNameBlacklist;
        compilerOptions10.setTransformAMDToCJSModules(true);
        compilerOptions10.setInlineVariables(true);
        java.util.Set<java.lang.String> strSet28 = compilerOptions10.stripTypes;
        compilerOptions0.setStripTypes(strSet28);
        compilerOptions0.aliasStringsBlacklist = "hi!";
        compilerOptions0.setInferTypes(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + reach14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach14.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention9 = null;
        compilerOptions6.setCodingConvention(codingConvention9);
        compilerOptions6.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions6.checkProvides;
        compilerOptions0.setReportUnknownTypes(checkLevel13);
        compilerOptions0.setCrossModuleCodeMotion(true);
        java.lang.String str17 = compilerOptions0.inputDelimiter;
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: ";
        compilerOptions0.setSmartNameRemoval(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach26 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions22.setInlineVariables(reach26);
        compilerOptions22.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet31 = compilerOptions30.stripNamePrefixes;
        byte[] byteArray32 = compilerOptions30.inputVariableMapSerialized;
        boolean boolean33 = compilerOptions30.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode34 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions30.setLanguageIn(languageMode34);
        compilerOptions22.setLanguageIn(languageMode34);
        compilerOptions22.setSmartNameRemoval(true);
        compilerOptions22.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy41 = compilerOptions22.anonymousFunctionNaming;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "// Input %num%" + "'", str17, "// Input %num%");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + reach26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach26.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + languageMode34 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode34.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy41 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy41.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel19;
        compilerOptions0.setMarkAsCompiled(false);
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: ");
        compilerOptions0.resetWarningsGuard();
        boolean boolean26 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.inlineFunctions = true;
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.setLocale("2019/07/12 07:12");
        boolean boolean11 = compilerOptions0.checkControlStructures;
        boolean boolean12 = compilerOptions0.checkSymbols;
        compilerOptions0.setFoldConstants(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode4 = compilerOptions0.getTracerMode();
        compilerOptions0.setDefineToDoubleLiteral("4432#Unversionedhi!rector true\n0\n", (double) 100.0f);
        compilerOptions0.checkSymbols = true;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode10 = compilerOptions0.getLanguageOut();
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + tracerMode4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode4.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNull(languageMode10);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        java.io.PrintStream printStream14 = new java.io.PrintStream("Unversioned directory");
        char[] charArray17 = new char[] { '4', '4' };
        printStream14.print(charArray17);
        printStream14.print((int) ' ');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.write((int) '#');
        java.util.Locale locale25 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream29 = printStream14.format(locale25, "Unversioned directory", objArray28);
        java.io.PrintStream printStream30 = printStream11.format("hi!", objArray28);
        com.google.javascript.jscomp.Compiler compiler31 = new com.google.javascript.jscomp.Compiler(printStream30);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Result result32 = compiler31.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        compilerOptions0.setInlineGetters(true);
        compilerOptions0.removeUnusedPrototypeProperties = true;
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = null;
        compilerOptions0.setDefineReplacements(strMap23);
        boolean boolean25 = compilerOptions0.generatePseudoNames;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        com.google.javascript.jscomp.ErrorFormat errorFormat20 = compilerOptions0.errorFormat;
        compilerOptions0.rewriteFunctionExpressions = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(errorFormat20);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.setLineBreak(false);
        compilerOptions0.setPropertyAffinity(true);
        java.lang.String str20 = compilerOptions0.syntheticBlockEndMarker;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        compilerOptions0.setIdeMode(true);
        boolean boolean10 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setShadowVariables(false);
        java.lang.String str13 = compilerOptions0.syntheticBlockStartMarker;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = compilerOptions8.variableRenaming;
        compilerOptions0.setVariableRenaming(variableRenamingPolicy11);
        compilerOptions0.setProtectHiddenSideEffects(false);
        compilerOptions0.setPrettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy11 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy11.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder0.withCharset(charset10);
        java.nio.charset.Charset charset12 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder13 = builder11.withCharset(charset12);
        com.google.javascript.jscomp.SourceFile sourceFile15 = builder13.buildFromFile("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile.Builder builder17 = builder13.withOriginalPath("java.io.IOException");
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator21 = null;
        com.google.javascript.jscomp.SourceFile sourceFile22 = builder19.buildFromGenerator("hi!", generator21);
        com.google.javascript.jscomp.SourceFile.Generator generator24 = null;
        com.google.javascript.jscomp.SourceFile sourceFile25 = builder19.buildFromGenerator("hi!", generator24);
        java.nio.charset.Charset charset26 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder27 = builder19.withCharset(charset26);
        com.google.javascript.jscomp.SourceFile.Generator generator29 = null;
        com.google.javascript.jscomp.SourceFile sourceFile30 = builder27.buildFromGenerator("-1", generator29);
        com.google.javascript.jscomp.SourceFile sourceFile36 = com.google.javascript.jscomp.SourceFile.fromCode("java.io.IOException", "", "Unversioned directory");
        java.io.Reader reader37 = sourceFile36.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: ", reader37);
        com.google.javascript.jscomp.SourceFile sourceFile39 = builder27.buildFromReader("-1", reader37);
        com.google.javascript.jscomp.SourceFile sourceFile40 = builder13.buildFromReader("java.io.IOException: -1", reader37);
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertNotNull(sourceFile25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(sourceFile30);
        org.junit.Assert.assertNotNull(sourceFile36);
        org.junit.Assert.assertNotNull(reader37);
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertNotNull(sourceFile39);
        org.junit.Assert.assertNotNull(sourceFile40);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.preferLineBreakAtEndOfFile = true;
        boolean boolean11 = compilerOptions0.inlineConstantVars;
        compilerOptions0.setInlineConstantVars(true);
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions0.checkMissingReturn;
        boolean boolean15 = compilerOptions0.checkTypes;
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        com.google.javascript.jscomp.SourceFile.Generator generator7 = null;
        com.google.javascript.jscomp.SourceFile sourceFile8 = builder5.buildFromGenerator("hi!", generator7);
        java.nio.charset.Charset charset9 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder10 = builder5.withCharset(charset9);
        com.google.javascript.jscomp.SourceFile sourceFile12 = builder5.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset13 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder14 = builder5.withCharset(charset13);
        com.google.javascript.jscomp.SourceFile.Builder builder16 = builder5.withOriginalPath("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile.Builder builder19 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator21 = null;
        com.google.javascript.jscomp.SourceFile sourceFile22 = builder19.buildFromGenerator("hi!", generator21);
        java.nio.charset.Charset charset23 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder24 = builder19.withCharset(charset23);
        java.nio.charset.Charset charset25 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder26 = builder19.withCharset(charset25);
        com.google.javascript.jscomp.SourceFile.Builder builder28 = builder19.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile31 = builder19.buildFromCode("// Input %num%", "hi!");
        boolean boolean32 = sourceFile31.isExtern();
        java.io.Reader reader33 = sourceFile31.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile34 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: 2019/07/12 07:12", reader33);
        com.google.javascript.jscomp.SourceFile sourceFile35 = builder5.buildFromReader("java.io.IOException: Unversioned directory", reader33);
        com.google.javascript.jscomp.SourceFile sourceFile38 = builder5.buildFromCode("java.io.IOException: ", "2019/07/12 07:12");
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(sourceFile12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(sourceFile22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(sourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(reader33);
        org.junit.Assert.assertNotNull(sourceFile34);
        org.junit.Assert.assertNotNull(sourceFile35);
        org.junit.Assert.assertNotNull(sourceFile38);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.markNoSideEffectCalls = true;
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setTransformAMDToCJSModules(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet15 = compilerOptions9.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel16 = null;
        compilerOptions9.setCheckGlobalThisLevel(checkLevel16);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setLabelRenaming(true);
        compilerOptions18.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions18.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.enableExternExports(true);
        compilerOptions25.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet30 = compilerOptions25.stripNamePrefixes;
        compilerOptions18.aliasableStrings = strSet30;
        compilerOptions9.setStripNameSuffixes(strSet30);
        compilerOptions0.stripTypes = strSet30;
        com.google.javascript.jscomp.ErrorHandler errorHandler34 = null;
        compilerOptions0.setErrorHandler(errorHandler34);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = compilerOptions0.getCodingConvention();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(codingConvention36);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.setInlineProperties(true);
        compilerOptions0.inputDelimiter = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray10 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList11 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList11, locationMappingArray10);
        com.google.javascript.jscomp.SourceFile sourceFile15 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean16 = locationMappingList11.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping17 = null;
        boolean boolean18 = locationMappingList11.add(locationMapping17);
        java.lang.Object[] objArray19 = locationMappingList11.toArray();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping20 = null;
        boolean boolean21 = locationMappingList11.add(locationMapping20);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping22 = null;
        boolean boolean23 = locationMappingList11.add(locationMapping22);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray24 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList25 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList25, locationMappingArray24);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.setCollapseProperties(false);
        compilerOptions27.setClosurePass(true);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions27.setInputPropertyMapSerialized(byteArray40);
        compilerOptions27.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        boolean boolean47 = compilerOptions44.extractPrototypeMemberDeclarations;
        compilerOptions44.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet50 = compilerOptions44.stripTypePrefixes;
        compilerOptions27.aliasableStrings = strSet50;
        boolean boolean52 = locationMappingList25.removeAll((java.util.Collection<java.lang.String>) strSet50);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup53 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup53;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup53;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup53;
        boolean boolean57 = locationMappingList25.contains((java.lang.Object) diagnosticGroup53);
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention61 = null;
        compilerOptions58.setCodingConvention(codingConvention61);
        compilerOptions58.setPropertyAffinity(true);
        compilerOptions58.setDisambiguateProperties(false);
        java.util.Set<java.lang.String> strSet67 = compilerOptions58.stripNameSuffixes;
        int int68 = locationMappingList25.indexOf((java.lang.Object) strSet67);
        boolean boolean69 = locationMappingList11.retainAll((java.util.Collection<java.lang.String>) strSet67);
        compilerOptions0.setStripNameSuffixes(strSet67);
        java.lang.String str71 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.setInlineGetters(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locationMappingArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(sourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[null]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locationMappingArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.closurePass = true;
        compilerOptions0.lineBreak = false;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor13 = locationMappingList1.listIterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        compilerOptions14.setGeneratePseudoNames(true);
        compilerOptions14.inlineLocalFunctions = false;
        compilerOptions14.setIdeMode(true);
        compilerOptions14.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet27 = compilerOptions14.aliasableStrings;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap28 = compilerOptions14.customPasses;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.convertToDottedProperties = true;
        boolean boolean35 = compilerOptions29.inlineConstantVars;
        boolean boolean36 = compilerOptions29.extractPrototypeMemberDeclarations;
        boolean boolean37 = compilerOptions29.gatherCssNames;
        compilerOptions29.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions29.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setRewriteNewDateGoogNow(true);
        boolean boolean46 = compilerOptions43.extractPrototypeMemberDeclarations;
        boolean boolean47 = compilerOptions43.jqueryPass;
        boolean boolean48 = compilerOptions43.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setLabelRenaming(true);
        compilerOptions49.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean54 = compilerOptions49.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format55 = compilerOptions49.sourceMapFormat;
        compilerOptions43.setSourceMapFormat(format55);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing57 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions43.setTweakProcessing(tweakProcessing57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions59.checkProvides;
        java.util.Set<java.lang.String> strSet67 = compilerOptions59.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream68 = strSet67.stream();
        compilerOptions43.stripTypes = strSet67;
        compilerOptions29.setStripNameSuffixes(strSet67);
        compilerOptions14.setExtraAnnotationNames(strSet67);
        boolean boolean72 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet67);
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean74 = compilerOptions73.crossModuleMethodMotion;
        int int75 = locationMappingList1.lastIndexOf((java.lang.Object) compilerOptions73);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping77 = null;
        // The following exception was thrown during execution in test generation
        try {
            locationMappingList1.add((int) (byte) 10, locationMapping77);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locationMappingItor13);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(format55);
        org.junit.Assert.assertTrue("'" + tweakProcessing57 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing57.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(false);
        boolean boolean9 = compilerOptions0.inlineFunctions;
        boolean boolean10 = compilerOptions0.aliasExternals;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        compilerOptions0.extractPrototypeMemberDeclarations = false;
        boolean boolean15 = compilerOptions0.collapseAnonymousFunctions;
        java.lang.String str16 = compilerOptions0.checkMissingGetCssNameBlacklist;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.io.IOException: Unversioned directory", "2019/07/12 07:12");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 2019/07/12 07:12");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        compilerOptions0.lineBreak = false;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions0.inlineLocalFunctions = false;
        java.io.PrintStream printStream13 = new java.io.PrintStream("Unversioned directory");
        printStream13.write((-1));
        printStream13.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup18;
        printStream13.print((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("Unversioned directory");
        char[] charArray25 = new char[] { '4', '4' };
        printStream22.print(charArray25);
        printStream22.print((int) ' ');
        byte[] byteArray35 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream22.write(byteArray35, (int) (byte) 0, (int) (byte) 1);
        printStream13.write(byteArray35, 0, 0);
        compilerOptions0.setInputPropertyMapSerialized(byteArray35);
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard43 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard43);
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean8 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.setOptimizeCalls(true);
        compilerOptions0.removeUnusedVars = false;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.inlineGetters = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        java.lang.String str13 = compilerOptions0.checkMissingGetCssNameBlacklist;
        compilerOptions0.setTransformAMDToCJSModules(true);
        compilerOptions0.setInlineVariables(true);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray18 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList19 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList19, locationMappingArray18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        compilerOptions21.setCollapseProperties(false);
        compilerOptions21.setClosurePass(true);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions21.setInputPropertyMapSerialized(byteArray34);
        compilerOptions21.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet44 = compilerOptions38.stripTypePrefixes;
        compilerOptions21.aliasableStrings = strSet44;
        boolean boolean46 = locationMappingList19.removeAll((java.util.Collection<java.lang.String>) strSet44);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup47 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup47;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup47;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup47;
        boolean boolean51 = locationMappingList19.contains((java.lang.Object) diagnosticGroup47);
        java.io.IOException iOException54 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException55 = new java.io.IOException("Unversioned directory", (java.lang.Throwable) iOException54);
        java.lang.Throwable[] throwableArray56 = iOException54.getSuppressed();
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException54);
        int int58 = locationMappingList19.indexOf((java.lang.Object) iOException54);
        int int59 = locationMappingList19.size();
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setLabelRenaming(true);
        compilerOptions60.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions60.setTweakToNumberLiteral("2019/07/12 07:12", 10);
        boolean boolean68 = locationMappingList19.equals((java.lang.Object) "2019/07/12 07:12");
        compilerOptions0.sourceMapLocationMappings = locationMappingList19;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor71 = locationMappingList19.listIterator((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locationMappingArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.coalesceVariableNames;
        boolean boolean7 = compilerOptions0.gatherCssNames;
        boolean boolean8 = compilerOptions0.printInputDelimiter;
        compilerOptions0.locale = "hi!";
        compilerOptions0.setDebugFunctionSideEffectsPath("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setAliasAllStrings(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        compilerOptions0.setInlineConstantVars(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions0.checkMissingReturn;
        compilerOptions0.printInputDelimiter = true;
        boolean boolean12 = compilerOptions0.inlineVariables;
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        java.io.PrintStream printStream15 = new java.io.PrintStream("Unversioned directory");
        char[] charArray18 = new char[] { '4', '4' };
        printStream15.print(charArray18);
        printStream15.print((int) ' ');
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream15.write(byteArray28, (int) (byte) 0, (int) (byte) 1);
        printStream1.write(byteArray28);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((double) 35);
        com.google.javascript.jscomp.SourceFile.Builder builder36 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator38 = null;
        com.google.javascript.jscomp.SourceFile sourceFile39 = builder36.buildFromGenerator("hi!", generator38);
        java.nio.charset.Charset charset40 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder41 = builder36.withCharset(charset40);
        com.google.javascript.jscomp.SourceFile.Generator generator43 = null;
        com.google.javascript.jscomp.SourceFile sourceFile44 = builder41.buildFromGenerator("hi!", generator43);
        java.nio.charset.Charset charset45 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder46 = builder41.withCharset(charset45);
        com.google.javascript.jscomp.SourceFile sourceFile48 = builder41.buildFromFile("java.io.IOException: Unversioned directory");
        printStream1.print((java.lang.Object) builder41);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(sourceFile39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(sourceFile48);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("Unversioned directory");
        java.lang.String str2 = sourceFile1.getCode();
        org.junit.Assert.assertNotNull(sourceFile1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\nddd" + "'", str2, "\ufffd\nddd");
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        boolean boolean1 = compilerOptions0.crossModuleMethodMotion;
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention5 = null;
        compilerOptions2.setCodingConvention(codingConvention5);
        compilerOptions2.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet10 = compilerOptions9.stripNamePrefixes;
        compilerOptions2.setIdGenerators(strSet10);
        compilerOptions0.setReplaceStringsReservedStrings(strSet10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format6 = compilerOptions0.sourceMapFormat;
        java.lang.String str7 = compilerOptions0.instrumentationTemplate;
        compilerOptions0.setReplaceStringsPlaceholderToken("java.io.IOException: Unversioned directory");
        compilerOptions0.setCrossModuleMethodMotion(false);
        compilerOptions0.renamePrefix = "4432#Unversionedhi!rector true\n0\n";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(format6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups0 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroups0.forName("2019/07/12 07:12");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroups0.forName("java.io.IOException: ");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = diagnosticGroups0.forName("");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup8 = diagnosticGroups0.forName("java.io.IOException: -1");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = diagnosticGroups0.forName("-1");
        org.junit.Assert.assertNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
        org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertNull(diagnosticGroup8);
        org.junit.Assert.assertNull(diagnosticGroup10);
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.Scope scope3 = compiler0.getTopScope();
        compiler0.disableThreads();
        com.google.javascript.jscomp.Compiler.IntermediateState intermediateState5 = compiler0.getState();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker6 = null;
        compiler0.tracker = performanceTracker6;
        java.lang.String str8 = compiler0.getAstDotGraph();
        java.lang.String str11 = compiler0.getSourceLine("java.io.IOException: Unversioned directory", 0);
        // The following exception was thrown during execution in test generation
        try {
            compiler0.check();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(intermediateState5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        byte[] byteArray13 = new byte[] { (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> strMap15 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setPropertyInvalidationErrors(strMap15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.SourceFile.Builder builder10 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException12 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { builder10, iOException13, (byte) 10 };
        java.io.PrintStream printStream16 = printStream8.printf("", objArray15);
        com.google.javascript.jscomp.Compiler compiler17 = new com.google.javascript.jscomp.Compiler(printStream16);
        com.google.javascript.jscomp.PerformanceTracker performanceTracker18 = null;
        compiler17.tracker = performanceTracker18;
        com.google.javascript.jscomp.JSError jSError20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CheckLevel checkLevel21 = compiler17.getErrorLevel(jSError20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printStream16);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        com.google.javascript.jscomp.MessageBundle messageBundle2 = null;
        compilerOptions0.messageBundle = messageBundle2;
        compilerOptions0.setCoalesceVariableNames(false);
        compilerOptions0.setRecordFunctionInformation(true);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean13 = compilerOptions9.jqueryPass;
        boolean boolean14 = compilerOptions9.deadAssignmentElimination;
        compilerOptions9.labelRenaming = true;
        compilerOptions9.setSyntheticBlockStartMarker("");
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy19 = compilerOptions9.variableRenaming;
        compilerOptions0.variableRenaming = variableRenamingPolicy19;
        compilerOptions0.inlineLocalFunctions = true;
        java.lang.String str23 = compilerOptions0.sourceMapOutputPath;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy19 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy19.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel3 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel4 = compilerOptions0.reportMissingOverride;
        boolean boolean5 = compilerOptions0.flowSensitiveInlineVariables;
        java.lang.Class<?> wildcardClass6 = compilerOptions0.getClass();
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel4 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel4.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        java.lang.String str3 = compiler0.getAstDotGraph();
        com.google.javascript.rhino.Node node4 = compiler0.getRoot();
        com.google.javascript.jscomp.SourceMap sourceMap5 = compiler0.getSourceMap();
        java.nio.charset.Charset charset7 = null;
        com.google.javascript.jscomp.SourceFile sourceFile8 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", charset7);
        int int10 = sourceFile8.getColumnOfOffset(10);
        sourceFile8.setOriginalPath("Unversioned directory");
        boolean boolean13 = sourceFile8.isExtern();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node14 = compiler0.parse(sourceFile8);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(sourceMap5);
        org.junit.Assert.assertNotNull(sourceFile8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel7 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel7;
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.disableRuntimeTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setDefineToNumberLiteral("", 0);
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setGatherCssNames(false);
        boolean boolean26 = compilerOptions0.isExternExportsEnabled();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        compilerOptions0.setCheckSuspiciousCode(true);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.setRemoveAbstractMethods(false);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = compilerOptions0.cssRenamingMap;
        com.google.javascript.jscomp.MessageBundle messageBundle8 = compilerOptions0.messageBundle;
        compilerOptions0.setOptimizeReturns(true);
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        boolean boolean19 = compilerOptions15.jqueryPass;
        compilerOptions15.collapseAnonymousFunctions = false;
        java.lang.String str22 = compilerOptions15.aliasStringsBlacklist;
        compilerOptions15.inlineGetters = false;
        boolean boolean25 = compilerOptions15.checkControlStructures;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.convertToDottedProperties = true;
        boolean boolean32 = compilerOptions26.inlineConstantVars;
        boolean boolean33 = compilerOptions26.extractPrototypeMemberDeclarations;
        boolean boolean34 = compilerOptions26.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard35 = null;
        compilerOptions26.setWarningsGuard(composeWarningsGuard35);
        compilerOptions26.setPreferLineBreakAtEndOfFile(true);
        compilerOptions26.coalesceVariableNames = false;
        compilerOptions26.setProcessObjectPropertyString(true);
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions26.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        boolean boolean47 = compilerOptions44.extractPrototypeMemberDeclarations;
        boolean boolean48 = compilerOptions44.jqueryPass;
        compilerOptions44.collapseAnonymousFunctions = false;
        compilerOptions44.setInlineGetters(false);
        boolean boolean53 = compilerOptions44.convertToDottedProperties;
        compilerOptions44.crossModuleMethodMotion = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet57 = compilerOptions56.stripNamePrefixes;
        byte[] byteArray58 = compilerOptions56.inputVariableMapSerialized;
        boolean boolean59 = compilerOptions56.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions60.setLabelRenaming(true);
        compilerOptions60.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel65 = compilerOptions60.checkGlobalThisLevel;
        compilerOptions56.setCheckGlobalNamesLevel(checkLevel65);
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention70 = null;
        compilerOptions67.setCodingConvention(codingConvention70);
        boolean boolean72 = compilerOptions67.computeFunctionSideEffects;
        boolean boolean73 = compilerOptions67.printInputDelimiter;
        compilerOptions67.setGeneratePseudoNames(true);
        boolean boolean76 = compilerOptions67.disambiguateProperties;
        java.util.Set<java.lang.String> strSet77 = compilerOptions67.aliasableStrings;
        compilerOptions56.stripNameSuffixes = strSet77;
        compilerOptions44.setAliasableStrings(strSet77);
        compilerOptions26.setIdGenerators(strSet77);
        compilerOptions15.setStripTypePrefixes(strSet77);
        compilerOptions0.aliasableStrings = strSet77;
        boolean boolean83 = compilerOptions0.prettyPrint;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(cssRenamingMap7);
        org.junit.Assert.assertNull(messageBundle8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + checkLevel65 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel65.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        compilerOptions0.collapseVariableDeclarations = true;
        boolean boolean16 = compilerOptions0.aliasKeywords;
        compilerOptions0.setRemoveUnusedClassProperties(false);
        compilerOptions0.setTweakToDoubleLiteral("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.setCollapseProperties(false);
        compilerOptions22.setClosurePass(true);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions22.setInputPropertyMapSerialized(byteArray35);
        compilerOptions22.setFlowSensitiveInlineVariables(true);
        boolean boolean39 = compilerOptions22.exportTestFunctions;
        compilerOptions22.closurePass = false;
        compilerOptions22.renamePrefix = "Unversioned directory";
        compilerOptions22.setMoveFunctionDeclarations(false);
        compilerOptions22.setProcessObjectPropertyString(false);
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions22.checkGlobalThisLevel;
        compilerOptions0.setCheckUnreachableCode(checkLevel48);
        compilerOptions0.setSyntheticBlockEndMarker("2019/07/12 07:12");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.print(100);
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream11);
        printStream11.print('a');
        printStream11.print(' ');
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream20 = new java.io.PrintStream("Unversioned directory");
        char[] charArray23 = new char[] { '4', '4' };
        printStream20.print(charArray23);
        printStream20.print((int) ' ');
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        printStream20.write((int) '#');
        java.util.Locale locale31 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream35 = printStream20.format(locale31, "Unversioned directory", objArray34);
        java.io.PrintStream printStream36 = printStream1.format("java.io.IOException: Unversioned directory", objArray34);
        printStream1.println((double) 1L);
        printStream1.close();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream36);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.convertToDottedProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions17.checkProvides;
        compilerOptions11.setReportUnknownTypes(checkLevel24);
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel24);
        compilerOptions0.skipAllCompilerPasses();
        compilerOptions0.checkMissingGetCssNameBlacklist = "hi!";
        boolean boolean30 = compilerOptions0.devirtualizePrototypeMethods;
        compilerOptions0.crossModuleMethodMotion = false;
        boolean boolean33 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setGroupVariableDeclarations(false);
        boolean boolean36 = compilerOptions0.getInferTypes();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet16 = compilerOptions10.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel17);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = compilerOptions10.getTracerMode();
        compilerOptions0.setTracer(tracerMode19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        boolean boolean29 = compilerOptions21.smartNameRemoval;
        java.util.Set<java.lang.String> strSet30 = compilerOptions21.aliasableStrings;
        compilerOptions0.stripNamePrefixes = strSet30;
        compilerOptions0.setRuntimeTypeCheck(true);
        compilerOptions0.setInlineLocalVariables(true);
        compilerOptions0.instrumentationTemplate = "// Input %num%";
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap38 = compilerOptions0.getDefineReplacements();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + tracerMode19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode19.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        java.io.IOException iOException1 = new java.io.IOException("");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("", throwable5);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("", throwable8);
        iOException6.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.lang.Throwable throwable14 = null;
        java.io.IOException iOException15 = new java.io.IOException("", throwable14);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException("", throwable17);
        iOException15.addSuppressed((java.lang.Throwable) iOException18);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("", throwable22);
        java.lang.Throwable throwable25 = null;
        java.io.IOException iOException26 = new java.io.IOException("", throwable25);
        iOException23.addSuppressed((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException("", (java.lang.Throwable) iOException23);
        iOException18.addSuppressed((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("", (java.lang.Throwable) iOException18);
        iOException9.addSuppressed((java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException33 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException9);
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException("");
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException36);
        iOException34.addSuppressed((java.lang.Throwable) iOException38);
        iOException1.addSuppressed((java.lang.Throwable) iOException38);
        java.lang.String str41 = iOException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: " + "'", str41, "java.io.IOException: ");
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.MessageBundle messageBundle17 = null;
        compilerOptions0.messageBundle = messageBundle17;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        compilerOptions20.setClosurePass(true);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions20.setInputPropertyMapSerialized(byteArray33);
        compilerOptions20.setCheckControlStructures(true);
        compilerOptions20.setInlineLocalFunctions(true);
        com.google.javascript.jscomp.SourceMap.Format format39 = compilerOptions20.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        boolean boolean43 = compilerOptions40.extractPrototypeMemberDeclarations;
        boolean boolean44 = compilerOptions40.jqueryPass;
        compilerOptions40.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention50 = null;
        compilerOptions47.setCodingConvention(codingConvention50);
        compilerOptions47.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel54 = compilerOptions47.checkProvides;
        compilerOptions40.brokenClosureRequiresLevel = checkLevel54;
        compilerOptions20.checkGlobalNamesLevel = checkLevel54;
        compilerOptions0.setCheckRequires(checkLevel54);
        com.google.javascript.jscomp.WarningsGuard warningsGuard58 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.addWarningsGuard(warningsGuard58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(format39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + checkLevel54 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel54.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat21 = compilerOptions14.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat21);
        boolean boolean23 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.flowSensitiveInlineVariables = false;
        boolean boolean26 = compilerOptions0.removeDeadCode;
        compilerOptions0.setRewriteFunctionExpressions(true);
        compilerOptions0.inlineLocalFunctions = true;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap31 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap31;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(errorFormat21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.generateExports = false;
        java.lang.String str34 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.setDeadAssignmentElimination(true);
        compilerOptions0.setSmartNameRemoval(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.setAliasStringsBlacklist("Unversioned directory");
        boolean boolean10 = compilerOptions0.isRemoveUnusedClassProperties();
        com.google.javascript.jscomp.DependencyOptions dependencyOptions11 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setDependencyOptions(dependencyOptions11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        compilerOptions0.setMarkAsCompiled(true);
        compilerOptions0.setAliasableGlobals("java.io.IOException: ");
        com.google.javascript.jscomp.CheckLevel checkLevel13 = null;
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel13);
        boolean boolean15 = compilerOptions0.checkTypes;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.prettyPrint = false;
        compilerOptions0.setDeadAssignmentElimination(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setSyntheticBlockStartMarker("");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel10 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel10);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setInferTypes(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        compilerOptions0.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList15);
        compilerOptions0.smartNameRemoval = true;
        boolean boolean20 = compilerOptions0.removeUnusedLocalVars;
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.renamePrefix = "Unversioned directory";
        java.lang.Object obj25 = compilerOptions0.clone();
        compilerOptions0.setChainCalls(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions0.aggressiveVarCheck;
        compilerOptions0.setCheckSymbols(true);
        boolean boolean13 = compilerOptions0.devirtualizePrototypeMethods;
        boolean boolean14 = compilerOptions0.optimizeCalls;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention18 = null;
        compilerOptions15.setCodingConvention(codingConvention18);
        compilerOptions15.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet23 = compilerOptions22.stripNamePrefixes;
        compilerOptions15.setIdGenerators(strSet23);
        java.lang.String[] strArray29 = new java.lang.String[] { "java.io.IOException: java.io.IOException: 2019/07/12 07:12", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory", "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        compilerOptions15.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList30);
        compilerOptions15.setCheckSymbols(true);
        compilerOptions15.collapseAnonymousFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet38 = compilerOptions37.stripNamePrefixes;
        compilerOptions15.stripTypePrefixes = strSet38;
        compilerOptions0.setIdGenerators(strSet38);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions41 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setDependencyOptions(dependencyOptions41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.closurePass = false;
        compilerOptions0.setProtectHiddenSideEffects(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap24 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap24);
        compilerOptions0.setCrossModuleMethodMotion(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        boolean boolean8 = compilerOptions0.labelRenaming;
        compilerOptions0.setTweakToBooleanLiteral("-1", false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle21 = null;
        compilerOptions12.messageBundle = messageBundle21;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        boolean boolean26 = compilerOptions23.extractPrototypeMemberDeclarations;
        boolean boolean27 = compilerOptions23.jqueryPass;
        boolean boolean28 = compilerOptions23.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setLabelRenaming(true);
        compilerOptions29.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean34 = compilerOptions29.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format35 = compilerOptions29.sourceMapFormat;
        compilerOptions23.setSourceMapFormat(format35);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing37 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions23.setTweakProcessing(tweakProcessing37);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions39.checkProvides;
        java.util.Set<java.lang.String> strSet47 = compilerOptions39.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream48 = strSet47.stream();
        compilerOptions23.stripTypes = strSet47;
        compilerOptions12.setAliasableStrings(strSet47);
        com.google.javascript.jscomp.CompilerOptions compilerOptions51 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions51.setLabelRenaming(true);
        compilerOptions51.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions51.checkGlobalThisLevel;
        boolean boolean57 = compilerOptions51.collapseProperties;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel58 = compilerOptions51.sourceMapDetailLevel;
        compilerOptions12.setSourceMapDetailLevel(detailLevel58);
        compilerOptions0.sourceMapDetailLevel = detailLevel58;
        compilerOptions0.setInstrumentationTemplate("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions0.brokenClosureRequiresLevel;
        boolean boolean64 = compilerOptions0.checkTypes;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(format35);
        org.junit.Assert.assertTrue("'" + tweakProcessing37 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing37.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(detailLevel58);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing9 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions0.setTweakProcessing(tweakProcessing9);
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        compilerOptions0.reserveRawExports = true;
        compilerOptions0.markNoSideEffectCalls = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing9.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.lineBreak = false;
        compilerOptions0.setLineLengthThreshold(0);
        compilerOptions0.setAliasableGlobals("// Input %num%");
        compilerOptions0.inlineVariables = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet20 = compilerOptions14.stripTypePrefixes;
        compilerOptions13.stripTypePrefixes = strSet20;
        compilerOptions0.setAliasableStrings(strSet20);
        compilerOptions0.checkSymbols = true;
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions0.reportMissingOverride;
        compilerOptions0.setReplaceStringsPlaceholderToken("java.io.IOException: Unversioned directory");
        compilerOptions0.recordFunctionInformation = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        java.lang.String str13 = compilerOptions0.checkMissingGetCssNameBlacklist;
        boolean boolean14 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        compilerOptions0.setRemoveTryCatchFinally(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        compilerOptions17.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions17.checkProvides;
        boolean boolean25 = compilerOptions17.smartNameRemoval;
        java.util.Set<java.lang.String> strSet26 = compilerOptions17.aliasableStrings;
        compilerOptions0.setIdGenerators(strSet26);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.setExternExports(true);
        compilerOptions0.setInlineVariables(false);
        compilerOptions0.setOptimizeCalls(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        boolean boolean10 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setDefineToDoubleLiteral("Unversioned directory", (double) 100);
        java.lang.String str14 = compilerOptions0.sourceMapOutputPath;
        compilerOptions0.setConvertToDottedProperties(false);
        compilerOptions0.ambiguateProperties = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setDefineToNumberLiteral("", 0);
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions0.brokenClosureRequiresLevel;
        boolean boolean24 = compilerOptions0.gatherCssNames;
        compilerOptions0.removeDeadCode = false;
        compilerOptions0.setTightenTypes(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        boolean boolean9 = compilerOptions0.inlineVariables;
        boolean boolean10 = compilerOptions0.generateExports;
        compilerOptions0.setAmbiguateProperties(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setAliasKeywords(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        boolean boolean20 = compilerOptions17.extractPrototypeMemberDeclarations;
        compilerOptions17.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions17.brokenClosureRequiresLevel;
        compilerOptions17.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        compilerOptions26.convertToDottedProperties = true;
        boolean boolean32 = compilerOptions26.inlineConstantVars;
        boolean boolean33 = compilerOptions26.extractPrototypeMemberDeclarations;
        boolean boolean34 = compilerOptions26.reserveRawExports;
        compilerOptions26.computeFunctionSideEffects = false;
        compilerOptions26.setOptimizeCalls(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel39 = null;
        compilerOptions26.setSourceMapDetailLevel(detailLevel39);
        compilerOptions26.setProtectHiddenSideEffects(true);
        java.io.PrintStream printStream44 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream46 = new java.io.PrintStream("Unversioned directory");
        char[] charArray49 = new char[] { '4', '4' };
        printStream46.print(charArray49);
        printStream44.print(charArray49);
        java.io.PrintStream printStream53 = new java.io.PrintStream("Unversioned directory");
        char[] charArray56 = new char[] { '4', '4' };
        printStream53.print(charArray56);
        printStream53.print((int) ' ');
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream53.write(byteArray66, (int) (byte) 0, (int) (byte) 1);
        printStream44.write(byteArray66);
        compilerOptions26.setInputPropertyMapSerialized(byteArray66);
        compilerOptions17.inputVariableMapSerialized = byteArray66;
        com.google.javascript.jscomp.CompilerOptions compilerOptions73 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions73.setLabelRenaming(true);
        compilerOptions73.syntheticBlockStartMarker = "java.io.IOException";
        compilerOptions73.locale = "2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions80 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions80.enableExternExports(true);
        compilerOptions80.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet85 = compilerOptions80.stripNamePrefixes;
        compilerOptions73.aliasableStrings = strSet85;
        compilerOptions17.aliasableStrings = strSet85;
        compilerOptions0.setAliasableStrings(strSet85);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(strSet85);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.labelRenaming = true;
        compilerOptions0.setSyntheticBlockStartMarker("");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel10 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        boolean boolean17 = compilerOptions12.generateExports;
        compilerOptions12.gatherCssNames = false;
        boolean boolean20 = compilerOptions12.optimizeReturns;
        compilerOptions12.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet23 = compilerOptions12.aliasableStrings;
        compilerOptions12.generateExports = false;
        boolean boolean26 = compilerOptions12.assumeStrictThis();
        compilerOptions12.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention32 = null;
        compilerOptions29.setCodingConvention(codingConvention32);
        compilerOptions29.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet37 = compilerOptions36.stripNamePrefixes;
        compilerOptions29.setIdGenerators(strSet37);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGeneratePseudoNames(true);
        compilerOptions39.inlineLocalFunctions = false;
        compilerOptions39.setIdeMode(true);
        compilerOptions39.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        boolean boolean55 = compilerOptions52.extractPrototypeMemberDeclarations;
        compilerOptions52.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel58 = compilerOptions52.checkGlobalThisLevel;
        compilerOptions39.checkMissingReturn = checkLevel58;
        compilerOptions29.aggressiveVarCheck = checkLevel58;
        compilerOptions12.checkUnreachableCode = checkLevel58;
        com.google.javascript.jscomp.CompilerOptions compilerOptions62 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet63 = compilerOptions62.stripNamePrefixes;
        byte[] byteArray64 = compilerOptions62.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach65 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions62.setInlineFunctions(reach65);
        compilerOptions12.setRemoveUnusedVariable(reach65);
        compilerOptions0.setRemoveUnusedVariable(reach65);
        com.google.javascript.jscomp.SourceMap.Format format69 = compilerOptions0.sourceMapFormat;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + checkLevel58 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel58.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertTrue("'" + reach65 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach65.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertNotNull(format69);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        char[] charArray22 = new char[] { '4', '4' };
        printStream19.print(charArray22);
        printStream19.print((int) ' ');
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream19.write(byteArray32, (int) (byte) 0, (int) (byte) 1);
        char[] charArray42 = new char[] { ' ', '#', '4', 'a', '#', 'a' };
        printStream19.print(charArray42);
        printStream1.println(charArray42);
        printStream1.print((long) (byte) 1);
        boolean boolean47 = printStream1.checkError();
        java.io.PrintStream printStream49 = new java.io.PrintStream("Unversioned directory");
        char[] charArray52 = new char[] { '4', '4' };
        printStream49.print(charArray52);
        printStream49.print((int) ' ');
        java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream49, false);
        printStream49.write((int) '#');
        printStream49.print((float) (short) 0);
        java.io.PrintStream printStream63 = new java.io.PrintStream("Unversioned directory");
        char[] charArray66 = new char[] { '4', '4' };
        printStream63.print(charArray66);
        printStream63.print((int) ' ');
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream63.write(byteArray76, (int) (byte) 0, (int) (byte) 1);
        printStream49.write(byteArray76);
        printStream1.write(byteArray76);
        printStream1.flush();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4, a, #, a]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel19;
        compilerOptions0.checkMissingGetCssNameBlacklist = "2019/07/12 07:12";
        boolean boolean23 = compilerOptions0.aliasExternals;
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap24 = compilerOptions0.getDefineReplacements();
        compilerOptions0.optimizeArgumentsArray = true;
        boolean boolean27 = compilerOptions0.removeUnusedClassProperties;
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet6 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel7 = null;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel7);
        com.google.javascript.jscomp.SourceMap.Format format9 = compilerOptions0.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy15 = compilerOptions10.anonymousFunctionNaming;
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy15;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        boolean boolean22 = compilerOptions17.generateExports;
        compilerOptions17.gatherCssNames = false;
        boolean boolean25 = compilerOptions17.optimizeReturns;
        compilerOptions17.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet28 = compilerOptions17.aliasableStrings;
        compilerOptions17.generateExports = false;
        boolean boolean31 = compilerOptions17.assumeStrictThis();
        compilerOptions17.setReserveRawExports(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet42 = compilerOptions41.stripNamePrefixes;
        compilerOptions34.setIdGenerators(strSet42);
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention47 = null;
        compilerOptions44.setCodingConvention(codingConvention47);
        compilerOptions44.setGeneratePseudoNames(true);
        compilerOptions44.inlineLocalFunctions = false;
        compilerOptions44.setIdeMode(true);
        compilerOptions44.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        boolean boolean60 = compilerOptions57.extractPrototypeMemberDeclarations;
        compilerOptions57.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions57.checkGlobalThisLevel;
        compilerOptions44.checkMissingReturn = checkLevel63;
        compilerOptions34.aggressiveVarCheck = checkLevel63;
        compilerOptions17.checkUnreachableCode = checkLevel63;
        compilerOptions17.setCheckCaja(true);
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> strMap69 = compilerOptions17.getTweakReplacements();
        compilerOptions17.crossModuleMethodMotion = true;
        compilerOptions17.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel74 = compilerOptions17.checkMissingGetCssNameLevel;
        compilerOptions0.setReportMissingOverride(checkLevel74);
        com.google.javascript.jscomp.CompilerOptions compilerOptions76 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions76.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention79 = null;
        compilerOptions76.setCodingConvention(codingConvention79);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode81 = compilerOptions76.getTracerMode();
        compilerOptions0.setTracer(tracerMode81);
        compilerOptions0.crossModuleMethodMotion = false;
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(format9);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy15 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy15.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertTrue("'" + checkLevel74 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel74.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode81 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode81.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) "");
        printStream22.print((float) 10);
        printStream22.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions26.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions26.reportMissingOverride;
        compilerOptions26.checkControlStructures = true;
        printStream22.print((java.lang.Object) true);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.exportTestFunctions;
        compilerOptions0.lineBreak = false;
        compilerOptions0.collapseVariableDeclarations = true;
        compilerOptions0.setRemoveUnusedVars(false);
        boolean boolean10 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.removeTryCatchFinally = true;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions0.checkRequires;
        compilerOptions0.setDeadAssignmentElimination(true);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions0.aggressiveVarCheck;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions0.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray15);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = compilerOptions0.reportMissingOverride;
        java.lang.Object obj18 = compilerOptions0.clone();
        compilerOptions0.setLineLengthThreshold((int) (byte) 1);
        compilerOptions0.setExternExports(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException: Unversioned directory";
        boolean boolean25 = compilerOptions0.aliasExternals;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertTrue("'" + checkLevel17 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel17.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        java.io.IOException iOException2 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray5 = iOException2.getSuppressed();
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("", throwable9);
        java.lang.Throwable throwable12 = null;
        java.io.IOException iOException13 = new java.io.IOException("", throwable12);
        iOException10.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.lang.Throwable throwable18 = null;
        java.io.IOException iOException19 = new java.io.IOException("", throwable18);
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("", throwable21);
        iOException19.addSuppressed((java.lang.Throwable) iOException22);
        java.lang.Throwable throwable26 = null;
        java.io.IOException iOException27 = new java.io.IOException("", throwable26);
        java.lang.Throwable throwable29 = null;
        java.io.IOException iOException30 = new java.io.IOException("", throwable29);
        iOException27.addSuppressed((java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException("", (java.lang.Throwable) iOException27);
        iOException22.addSuppressed((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException("", (java.lang.Throwable) iOException22);
        iOException13.addSuppressed((java.lang.Throwable) iOException34);
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException37 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException13);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.io.IOException iOException40 = new java.io.IOException("");
        java.io.IOException iOException41 = new java.io.IOException((java.lang.Throwable) iOException40);
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException40);
        iOException38.addSuppressed((java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException("// Input %num%", (java.lang.Throwable) iOException42);
        iOException2.addSuppressed((java.lang.Throwable) iOException44);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream16.println((float) '#');
        java.io.PrintStream printStream20 = new java.io.PrintStream("Unversioned directory");
        char[] charArray23 = new char[] { '4', '4' };
        printStream20.print(charArray23);
        printStream20.print((int) ' ');
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        printStream20.write((int) '#');
        printStream20.print((float) (short) 0);
        printStream20.print(10L);
        printStream20.write(1);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        boolean boolean40 = compilerOptions37.extractPrototypeMemberDeclarations;
        compilerOptions37.setCollapseProperties(false);
        compilerOptions37.setClosurePass(true);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions37.setInputPropertyMapSerialized(byteArray50);
        printStream20.write(byteArray50);
        printStream20.println('#');
        printStream20.print('a');
        java.io.PrintStream printStream58 = new java.io.PrintStream("Unversioned directory");
        char[] charArray61 = new char[] { '4', '4' };
        printStream58.print(charArray61);
        printStream58.print((int) ' ');
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream58, false);
        printStream58.write((int) '#');
        printStream58.print((float) (short) 0);
        java.io.PrintStream printStream72 = new java.io.PrintStream("Unversioned directory");
        char[] charArray75 = new char[] { '4', '4' };
        printStream72.print(charArray75);
        printStream72.print((int) ' ');
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream72.write(byteArray85, (int) (byte) 0, (int) (byte) 1);
        printStream58.write(byteArray85);
        printStream20.write(byteArray85);
        printStream16.write(byteArray85);
        printStream16.print((long) 2);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setProtectHiddenSideEffects(false);
        java.util.Set<java.lang.String> strSet15 = null;
        compilerOptions0.setAliasableStrings(strSet15);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.deadAssignmentElimination = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.enableExternExports(true);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = compilerOptions8.variableRenaming;
        compilerOptions0.setVariableRenaming(variableRenamingPolicy11);
        compilerOptions0.printInputDelimiter = false;
        compilerOptions0.setDebugFunctionSideEffectsPath("Unversioned directory");
        compilerOptions0.computeFunctionSideEffects = false;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList19 = compilerOptions0.sourceMapLocationMappings;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy11 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy11.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(locationMappingList19);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", true);
        boolean boolean12 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray21 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList22 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList22, locationMappingArray21);
        compilerOptions13.sourceMapLocationMappings = locationMappingList22;
        boolean boolean25 = compilerOptions13.inlineVariables;
        boolean boolean26 = compilerOptions13.inlineLocalFunctions;
        compilerOptions13.setRenamePrefix("java.io.IOException: Unversioned directory");
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        compilerOptions29.setCollapseProperties(false);
        compilerOptions29.setClosurePass(true);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions29.setInputPropertyMapSerialized(byteArray42);
        compilerOptions29.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions29.reportMissingOverride;
        compilerOptions29.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet50 = compilerOptions49.stripNamePrefixes;
        byte[] byteArray51 = compilerOptions49.inputVariableMapSerialized;
        compilerOptions49.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap54 = null;
        compilerOptions49.setCssRenamingMap(cssRenamingMap54);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        boolean boolean59 = compilerOptions56.extractPrototypeMemberDeclarations;
        compilerOptions56.convertToDottedProperties = true;
        boolean boolean62 = compilerOptions56.inlineConstantVars;
        compilerOptions56.aliasAllStrings = false;
        boolean boolean65 = compilerOptions56.smartNameRemoval;
        compilerOptions56.gatherCssNames = true;
        com.google.javascript.jscomp.CheckLevel checkLevel68 = compilerOptions56.checkGlobalNamesLevel;
        compilerOptions49.setCheckProvides(checkLevel68);
        compilerOptions29.setCheckGlobalNamesLevel(checkLevel68);
        compilerOptions13.setReportUnknownTypes(checkLevel68);
        compilerOptions0.aggressiveVarCheck = checkLevel68;
        compilerOptions0.setSummaryDetailLevel(52);
        compilerOptions0.setManageClosureDependencies(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + checkLevel68 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel68.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
        java.lang.String str2 = sourceFile1.getOriginalPath();
        sourceFile1.clearCachedSource();
        int int5 = sourceFile1.getLineOfOffset(35);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup3;
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = null;
        compilerOptions5.setCodingConvention(codingConvention8);
        compilerOptions5.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel12 = compilerOptions5.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup3, checkLevel12);
        compilerOptions0.setRuntimeTypeCheckLogFunction("hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention19 = null;
        compilerOptions16.setCodingConvention(codingConvention19);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode21 = compilerOptions16.getTracerMode();
        compilerOptions0.setTracer(tracerMode21);
        boolean boolean23 = compilerOptions0.rewriteFunctionExpressions;
        compilerOptions0.setOutputJsStringUsage(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
        org.junit.Assert.assertTrue("'" + checkLevel12 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel12.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode21 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode21.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        compilerOptions0.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions0.closurePass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention19 = null;
        compilerOptions16.setCodingConvention(codingConvention19);
        compilerOptions16.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel23 = compilerOptions16.checkProvides;
        java.util.Set<java.lang.String> strSet24 = compilerOptions16.stripTypes;
        compilerOptions0.setStripNamePrefixes(strSet24);
        compilerOptions0.setUnaliasableGlobals("-1");
        java.util.Set<java.lang.String> strSet28 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setExtraAnnotationNames(strSet28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel23 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel23.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        boolean boolean4 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.coalesceVariableNames;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException", (int) (short) 0);
        com.google.javascript.jscomp.CompilerOptions.Reach reach21 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach21);
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions23.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray31 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList32 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList32, locationMappingArray31);
        compilerOptions23.sourceMapLocationMappings = locationMappingList32;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        boolean boolean39 = compilerOptions35.jqueryPass;
        compilerOptions35.collapseAnonymousFunctions = false;
        boolean boolean42 = compilerOptions35.checkTypes;
        compilerOptions35.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions35.checkProvides;
        compilerOptions23.checkUnreachableCode = checkLevel45;
        compilerOptions23.rewriteFunctionExpressions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention52 = null;
        compilerOptions49.setCodingConvention(codingConvention52);
        compilerOptions49.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet57 = compilerOptions56.stripNamePrefixes;
        compilerOptions49.setIdGenerators(strSet57);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention62 = null;
        compilerOptions59.setCodingConvention(codingConvention62);
        compilerOptions59.setGeneratePseudoNames(true);
        compilerOptions59.inlineLocalFunctions = false;
        compilerOptions59.setIdeMode(true);
        compilerOptions59.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions72 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions72.setRewriteNewDateGoogNow(true);
        boolean boolean75 = compilerOptions72.extractPrototypeMemberDeclarations;
        compilerOptions72.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel78 = compilerOptions72.checkGlobalThisLevel;
        compilerOptions59.checkMissingReturn = checkLevel78;
        compilerOptions49.aggressiveVarCheck = checkLevel78;
        compilerOptions23.setCheckUnreachableCode(checkLevel78);
        compilerOptions0.setReportMissingOverride(checkLevel78);
        boolean boolean83 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.setCheckTypes(true);
        compilerOptions0.collapseAnonymousFunctions = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + reach21 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach21.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + checkLevel78 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel78.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        compilerOptions0.checkMissingGetCssNameBlacklist = "Unversioned directory";
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.extractPrototypeMemberDeclarations = false;
        boolean boolean14 = compilerOptions0.assumeClosuresOnlyCaptureReferences();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.prettyPrint = false;
        compilerOptions0.checkSymbols = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode32 = compilerOptions27.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup33 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup33;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        compilerOptions35.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions35.brokenClosureRequiresLevel;
        compilerOptions27.setWarningLevel(diagnosticGroup33, checkLevel41);
        compilerOptions27.setRemoveUnusedVars(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention48 = null;
        compilerOptions45.setCodingConvention(codingConvention48);
        boolean boolean50 = compilerOptions45.generateExports;
        compilerOptions45.deadAssignmentElimination = false;
        compilerOptions45.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setRewriteNewDateGoogNow(true);
        boolean boolean58 = compilerOptions55.extractPrototypeMemberDeclarations;
        boolean boolean59 = compilerOptions55.jqueryPass;
        compilerOptions55.collapseAnonymousFunctions = false;
        java.lang.String str62 = compilerOptions55.aliasStringsBlacklist;
        compilerOptions55.inlineGetters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        boolean boolean68 = compilerOptions65.extractPrototypeMemberDeclarations;
        boolean boolean69 = compilerOptions65.jqueryPass;
        compilerOptions65.setRemoveUnusedClassProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions72 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions72.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention75 = null;
        compilerOptions72.setCodingConvention(codingConvention75);
        compilerOptions72.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel79 = compilerOptions72.checkProvides;
        compilerOptions65.brokenClosureRequiresLevel = checkLevel79;
        compilerOptions55.setCheckGlobalThisLevel(checkLevel79);
        compilerOptions45.aggressiveVarCheck = checkLevel79;
        compilerOptions27.setReportUnknownTypes(checkLevel79);
        compilerOptions0.reportMissingOverride = checkLevel79;
        compilerOptions0.collapseAnonymousFunctions = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode32 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode32.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + checkLevel79 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel79.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.brokenClosureRequiresLevel;
        compilerOptions0.setIdeMode(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.convertToDottedProperties = true;
        boolean boolean15 = compilerOptions9.inlineConstantVars;
        boolean boolean16 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean17 = compilerOptions9.reserveRawExports;
        compilerOptions9.computeFunctionSideEffects = false;
        compilerOptions9.setOptimizeCalls(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel22 = null;
        compilerOptions9.setSourceMapDetailLevel(detailLevel22);
        compilerOptions9.setProtectHiddenSideEffects(true);
        java.io.PrintStream printStream27 = new java.io.PrintStream("Unversioned directory");
        java.io.PrintStream printStream29 = new java.io.PrintStream("Unversioned directory");
        char[] charArray32 = new char[] { '4', '4' };
        printStream29.print(charArray32);
        printStream27.print(charArray32);
        java.io.PrintStream printStream36 = new java.io.PrintStream("Unversioned directory");
        char[] charArray39 = new char[] { '4', '4' };
        printStream36.print(charArray39);
        printStream36.print((int) ' ');
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream36.write(byteArray49, (int) (byte) 0, (int) (byte) 1);
        printStream27.write(byteArray49);
        compilerOptions9.setInputPropertyMapSerialized(byteArray49);
        compilerOptions0.inputVariableMapSerialized = byteArray49;
        com.google.javascript.jscomp.CompilerOptions compilerOptions56 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions56.setRewriteNewDateGoogNow(true);
        boolean boolean59 = compilerOptions56.extractPrototypeMemberDeclarations;
        compilerOptions56.convertToDottedProperties = true;
        boolean boolean62 = compilerOptions56.inlineConstantVars;
        boolean boolean63 = compilerOptions56.extractPrototypeMemberDeclarations;
        boolean boolean64 = compilerOptions56.reserveRawExports;
        java.util.Set<java.lang.String> strSet65 = compilerOptions56.stripNamePrefixes;
        compilerOptions0.setStripNamePrefixes(strSet65);
        compilerOptions0.setCheckControlStructures(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        compilerOptions0.setTransformAMDToCJSModules(false);
        boolean boolean12 = compilerOptions0.preferLineBreakAtEndOfFile;
        compilerOptions0.rewriteFunctionExpressions = true;
        java.util.Set<java.lang.String> strSet15 = compilerOptions0.stripNameSuffixes;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.closurePass;
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.setPropertyAffinity(true);
        compilerOptions0.setShadowVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        boolean boolean17 = compilerOptions13.jqueryPass;
        compilerOptions13.setClosurePass(true);
        boolean boolean20 = compilerOptions13.assumeStrictThis();
        boolean boolean21 = compilerOptions13.assumeStrictThis();
        com.google.javascript.jscomp.SourceMap.Format format22 = compilerOptions13.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format22;
        com.google.javascript.jscomp.CheckLevel checkLevel24 = compilerOptions0.checkGlobalNamesLevel;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(format22);
        org.junit.Assert.assertTrue("'" + checkLevel24 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel24.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        printStream1.print((float) (short) 0);
        printStream1.println((int) ' ');
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        byte[] byteArray18 = compilerOptions16.inputVariableMapSerialized;
        compilerOptions16.removeUnusedClassProperties = true;
        compilerOptions16.setAppNameStr("");
        java.io.PrintStream printStream24 = new java.io.PrintStream("Unversioned directory");
        char[] charArray27 = new char[] { '4', '4' };
        printStream24.print(charArray27);
        printStream24.print((int) ' ');
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        com.google.javascript.jscomp.SourceFile.Builder builder33 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.IOException iOException35 = new java.io.IOException("2019/07/12 07:12");
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { builder33, iOException36, (byte) 10 };
        java.io.PrintStream printStream39 = printStream31.printf("", objArray38);
        printStream39.println((float) (-1L));
        java.io.PrintStream printStream43 = printStream39.append('#');
        printStream43.write((int) (byte) 10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach50 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions46.setInlineVariables(reach50);
        compilerOptions46.setPrintInputDelimiter(true);
        compilerOptions46.setExportTestFunctions(false);
        java.io.PrintStream printStream57 = new java.io.PrintStream("Unversioned directory");
        printStream57.write((-1));
        printStream57.println('#');
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup62 = com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL;
        com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL = diagnosticGroup62;
        printStream57.print((java.lang.Object) diagnosticGroup62);
        java.io.PrintStream printStream66 = new java.io.PrintStream("Unversioned directory");
        char[] charArray69 = new char[] { '4', '4' };
        printStream66.print(charArray69);
        printStream66.print((int) ' ');
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream66.write(byteArray79, (int) (byte) 0, (int) (byte) 1);
        printStream57.write(byteArray79, 0, 0);
        compilerOptions46.setInputVariableMapSerialized(byteArray79);
        printStream43.write(byteArray79);
        compilerOptions16.setInputVariableMapSerialized(byteArray79);
        printStream1.write(byteArray79);
        printStream1.write(0);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + reach50 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach50.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup62);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100, -1, 10, 100, 100, 100]");
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        boolean boolean22 = compilerOptions0.inlineGetters;
        compilerOptions0.checkMissingGetCssNameBlacklist = "hi!";
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions0.checkUnreachableCode;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler9 = compilerOptions0.getAliasTransformationHandler();
        boolean boolean10 = compilerOptions0.disambiguateProperties;
        compilerOptions0.exportTestFunctions = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        boolean boolean11 = compilerOptions0.optimizeParameters;
        compilerOptions0.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions0.setOutputCharset("java.io.IOException: Unversioned directory");
        compilerOptions0.aliasExternals = false;
        boolean boolean18 = compilerOptions0.inlineGetters;
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        java.lang.String str10 = compilerOptions0.syntheticBlockEndMarker;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode11 = compilerOptions0.getLanguageIn();
        boolean boolean12 = compilerOptions0.ambiguateProperties;
        boolean boolean13 = compilerOptions0.computeFunctionSideEffects;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + languageMode11 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode11.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format6 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        compilerOptions0.inlineVariables = true;
        compilerOptions0.printInputDelimiter = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        boolean boolean18 = compilerOptions13.generateExports;
        compilerOptions13.gatherCssNames = false;
        boolean boolean21 = compilerOptions13.optimizeReturns;
        compilerOptions13.smartNameRemoval = true;
        boolean boolean24 = compilerOptions13.lineBreak;
        compilerOptions13.setDebugFunctionSideEffectsPath("hi!");
        java.util.Set<java.lang.String> strSet27 = compilerOptions13.stripNamePrefixes;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy28 = null;
        compilerOptions13.setVariableRenaming(variableRenamingPolicy28);
        compilerOptions13.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.setCollapseProperties(false);
        compilerOptions32.setClosurePass(true);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions32.setInputPropertyMapSerialized(byteArray45);
        compilerOptions32.setSyntheticBlockStartMarker("Unversioned directory");
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions32.checkMissingReturn;
        compilerOptions13.setReportMissingOverride(checkLevel49);
        compilerOptions0.setCheckRequires(checkLevel49);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(format6);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.removeUnusedVars = true;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.optimizeArgumentsArray = true;
        java.lang.Object obj15 = compilerOptions0.clone();
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach20 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions16.setInlineVariables(reach20);
        boolean boolean22 = compilerOptions16.removeUnusedVars;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGeneratePseudoNames(true);
        compilerOptions23.inlineLocalFunctions = false;
        compilerOptions23.setIdeMode(true);
        compilerOptions23.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        compilerOptions36.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions36.checkGlobalThisLevel;
        compilerOptions23.checkMissingReturn = checkLevel42;
        compilerOptions23.setMarkAsCompiled(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.setRewriteNewDateGoogNow(true);
        boolean boolean49 = compilerOptions46.extractPrototypeMemberDeclarations;
        boolean boolean50 = compilerOptions46.jqueryPass;
        boolean boolean51 = compilerOptions46.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setLabelRenaming(true);
        compilerOptions52.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean57 = compilerOptions52.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format58 = compilerOptions52.sourceMapFormat;
        compilerOptions46.setSourceMapFormat(format58);
        compilerOptions23.sourceMapFormat = format58;
        compilerOptions16.setSourceMapFormat(format58);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing62 = compilerOptions16.getTweakProcessing();
        compilerOptions0.setTweakProcessing(tweakProcessing62);
        compilerOptions0.optimizeParameters = false;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + reach20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach20.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(format58);
        org.junit.Assert.assertTrue("'" + tweakProcessing62 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing62.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile11 = builder0.buildFromFile("Unversioned directory");
        boolean boolean12 = sourceFile11.isExtern();
        sourceFile11.clearCachedSource();
        java.lang.String str14 = sourceFile11.getName();
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Unversioned directory" + "'", str14, "Unversioned directory");
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        boolean boolean10 = compilerOptions0.inlineLocalFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        compilerOptions11.setClosurePass(true);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions11.setInputPropertyMapSerialized(byteArray24);
        compilerOptions11.setFlowSensitiveInlineVariables(true);
        boolean boolean28 = compilerOptions11.exportTestFunctions;
        compilerOptions11.closurePass = false;
        compilerOptions11.renamePrefix = "Unversioned directory";
        compilerOptions11.setMoveFunctionDeclarations(false);
        boolean boolean35 = compilerOptions11.generateExports;
        compilerOptions11.setLooseTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach42 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions38.setInlineVariables(reach42);
        compilerOptions38.setPrintInputDelimiter(true);
        boolean boolean46 = compilerOptions38.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle47 = null;
        compilerOptions38.messageBundle = messageBundle47;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        boolean boolean53 = compilerOptions49.jqueryPass;
        boolean boolean54 = compilerOptions49.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.setLabelRenaming(true);
        compilerOptions55.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean60 = compilerOptions55.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format61 = compilerOptions55.sourceMapFormat;
        compilerOptions49.setSourceMapFormat(format61);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing63 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions49.setTweakProcessing(tweakProcessing63);
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention68 = null;
        compilerOptions65.setCodingConvention(codingConvention68);
        compilerOptions65.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel72 = compilerOptions65.checkProvides;
        java.util.Set<java.lang.String> strSet73 = compilerOptions65.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream74 = strSet73.stream();
        compilerOptions49.stripTypes = strSet73;
        compilerOptions38.setAliasableStrings(strSet73);
        com.google.javascript.jscomp.CompilerOptions compilerOptions77 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions77.setLabelRenaming(true);
        compilerOptions77.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel82 = compilerOptions77.checkGlobalThisLevel;
        boolean boolean83 = compilerOptions77.collapseProperties;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel84 = compilerOptions77.sourceMapDetailLevel;
        compilerOptions38.setSourceMapDetailLevel(detailLevel84);
        compilerOptions11.setSourceMapDetailLevel(detailLevel84);
        compilerOptions0.sourceMapDetailLevel = detailLevel84;
        compilerOptions0.setGatherCssNames(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + reach42 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach42.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(format61);
        org.junit.Assert.assertTrue("'" + tweakProcessing63 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing63.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel72 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel72.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertTrue("'" + checkLevel82 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel82.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(detailLevel84);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setInlineLocalVariables(true);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap11 = compilerOptions0.cssRenamingMap;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap12 = compilerOptions0.customPasses;
        compilerOptions0.setClosurePass(true);
        compilerOptions0.setProcessCommonJSModules(false);
        org.junit.Assert.assertNull(cssRenamingMap11);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap12);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setProcessObjectPropertyString(false);
        boolean boolean13 = compilerOptions0.smartNameRemoval;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.enableExternExports(true);
        java.util.Set<java.lang.String> strSet17 = compilerOptions14.stripTypes;
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap18 = null;
        compilerOptions14.customPasses = customPassExecutionTimeMultimap18;
        compilerOptions14.syntheticBlockEndMarker = "-1";
        compilerOptions14.setAcceptConstKeyword(false);
        compilerOptions14.setInlineConstantVars(false);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode26 = compilerOptions14.getTracerMode();
        compilerOptions0.setTracer(tracerMode26);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + tracerMode26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode26.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach3 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions0.setInlineFunctions(reach3);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel5 = null;
        compilerOptions0.sourceMapDetailLevel = detailLevel5;
        boolean boolean7 = compilerOptions0.disambiguateProperties;
        com.google.javascript.jscomp.CheckLevel checkLevel8 = compilerOptions0.checkGlobalNamesLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        boolean boolean13 = compilerOptions9.jqueryPass;
        compilerOptions9.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setRewriteNewDateGoogNow(true);
        boolean boolean19 = compilerOptions16.extractPrototypeMemberDeclarations;
        compilerOptions16.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions9.checkProvides = checkLevel22;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        boolean boolean27 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.convertToDottedProperties = true;
        boolean boolean30 = compilerOptions24.inlineConstantVars;
        boolean boolean31 = compilerOptions24.extractPrototypeMemberDeclarations;
        compilerOptions24.optimizeCalls = true;
        compilerOptions24.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach40 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions36.setInlineVariables(reach40);
        compilerOptions36.setPrintInputDelimiter(true);
        boolean boolean44 = compilerOptions36.closurePass;
        compilerOptions36.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.setRewriteNewDateGoogNow(true);
        boolean boolean50 = compilerOptions47.extractPrototypeMemberDeclarations;
        boolean boolean51 = compilerOptions47.jqueryPass;
        boolean boolean52 = compilerOptions47.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setLabelRenaming(true);
        compilerOptions53.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean58 = compilerOptions53.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format59 = compilerOptions53.sourceMapFormat;
        compilerOptions47.setSourceMapFormat(format59);
        compilerOptions36.setSourceMapFormat(format59);
        compilerOptions24.sourceMapFormat = format59;
        compilerOptions9.sourceMapFormat = format59;
        boolean boolean64 = compilerOptions9.isRemoveUnusedClassProperties();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup65 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup65;
        com.google.javascript.jscomp.CompilerOptions compilerOptions67 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions67.setRewriteNewDateGoogNow(true);
        boolean boolean70 = compilerOptions67.extractPrototypeMemberDeclarations;
        compilerOptions67.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel73 = compilerOptions67.brokenClosureRequiresLevel;
        compilerOptions9.setWarningLevel(diagnosticGroup65, checkLevel73);
        compilerOptions0.setCheckMissingReturn(checkLevel73);
        compilerOptions0.setAliasExternals(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions78 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions78.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention81 = null;
        compilerOptions78.setCodingConvention(codingConvention81);
        compilerOptions78.setGenerateExports(true);
        compilerOptions78.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean87 = compilerOptions78.deadAssignmentElimination;
        compilerOptions78.optimizeCalls = false;
        compilerOptions78.instrumentationTemplate = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        boolean boolean92 = compilerOptions78.jqueryPass;
        java.util.Set<java.lang.String> strSet93 = compilerOptions78.aliasableStrings;
        compilerOptions0.setStripTypes(strSet93);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + reach3 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach3.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + checkLevel8 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel8.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + reach40 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach40.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(format59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + checkLevel73 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel73.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.enableExternExports(true);
        java.util.Set<java.lang.String> strSet3 = compilerOptions0.stripTypes;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.setTightenTypes(true);
        boolean boolean8 = compilerOptions0.computeFunctionSideEffects;
        compilerOptions0.enableExternExports(true);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder7.withOriginalPath("// Input %num%");
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile12 = builder7.buildFromInputStream("Unversioned directory", inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setAcceptConstKeyword(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        boolean boolean12 = compilerOptions9.extractPrototypeMemberDeclarations;
        compilerOptions9.setCollapseProperties(false);
        compilerOptions9.setClosurePass(true);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions9.setInputPropertyMapSerialized(byteArray22);
        compilerOptions9.setFlowSensitiveInlineVariables(true);
        compilerOptions9.setPropertyAffinity(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        boolean boolean31 = compilerOptions28.extractPrototypeMemberDeclarations;
        compilerOptions28.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet34 = compilerOptions28.stripTypePrefixes;
        java.util.stream.Stream<java.lang.String> strStream35 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet34.parallelStream();
        compilerOptions9.stripNameSuffixes = strSet34;
        compilerOptions0.setStripTypePrefixes(strSet34);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        boolean boolean42 = compilerOptions39.extractPrototypeMemberDeclarations;
        compilerOptions39.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet45 = compilerOptions39.stripTypePrefixes;
        compilerOptions0.setAliasableStrings(strSet45);
        compilerOptions0.setCheckTypes(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet50 = compilerOptions49.stripNamePrefixes;
        byte[] byteArray51 = compilerOptions49.inputVariableMapSerialized;
        boolean boolean52 = compilerOptions49.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode53 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions49.setLanguageIn(languageMode53);
        compilerOptions49.setNameAnonymousFunctionsOnly(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setRewriteNewDateGoogNow(true);
        boolean boolean60 = compilerOptions57.extractPrototypeMemberDeclarations;
        compilerOptions57.setCollapseProperties(false);
        compilerOptions57.setClosurePass(true);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions57.setInputPropertyMapSerialized(byteArray70);
        compilerOptions57.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel74 = compilerOptions57.reportMissingOverride;
        compilerOptions49.setCheckGlobalNamesLevel(checkLevel74);
        compilerOptions0.checkGlobalThisLevel = checkLevel74;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + languageMode53 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode53.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel74 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel74.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setExtractPrototypeMemberDeclarations(true);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler8 = compilerOptions0.getAliasTransformationHandler();
        compilerOptions0.setInferTypes(true);
        compilerOptions0.setCollapseAnonymousFunctions(true);
        java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> strMap13 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setPropertyInvalidationErrors(strMap13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aliasTransformationHandler8);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        compilerOptions0.setReserveRawExports(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy26 = compilerOptions0.variableRenaming;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        boolean boolean31 = compilerOptions27.jqueryPass;
        compilerOptions27.collapseAnonymousFunctions = false;
        java.lang.String str34 = compilerOptions27.aliasStringsBlacklist;
        compilerOptions27.instrumentationTemplate = "java.io.IOException";
        compilerOptions27.renamePrefixNamespace = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention42 = null;
        compilerOptions39.setCodingConvention(codingConvention42);
        compilerOptions39.setGenerateExports(true);
        compilerOptions39.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean48 = compilerOptions39.foldConstants;
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions39.brokenClosureRequiresLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.enableExternExports(true);
        java.util.Set<java.lang.String> strSet53 = compilerOptions50.stripTypes;
        compilerOptions50.setRemoveUnusedVars(true);
        compilerOptions50.setTweakToDoubleLiteral("", 1.0d);
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet60 = compilerOptions59.stripNamePrefixes;
        byte[] byteArray61 = compilerOptions59.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach62 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions59.setInlineFunctions(reach62);
        compilerOptions50.setRemoveUnusedVariable(reach62);
        compilerOptions39.setRemoveUnusedVariables(reach62);
        compilerOptions27.setRemoveUnusedVariables(reach62);
        compilerOptions0.setRemoveUnusedVariables(reach62);
        compilerOptions0.inputDelimiter = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy26 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy26.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertTrue("'" + reach62 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach62.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) '#');
        java.util.Locale locale12 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream16 = printStream1.format(locale12, "Unversioned directory", objArray15);
        printStream16.println((double) 1);
        printStream16.flush();
        printStream16.print("// Input %num%");
        printStream16.println((long) (byte) 100);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream16);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream19 = new java.io.PrintStream("Unversioned directory");
        char[] charArray22 = new char[] { '4', '4' };
        printStream19.print(charArray22);
        printStream19.print((int) ' ');
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream19.write(byteArray32, (int) (byte) 0, (int) (byte) 1);
        char[] charArray42 = new char[] { ' ', '#', '4', 'a', '#', 'a' };
        printStream19.print(charArray42);
        printStream1.println(charArray42);
        printStream1.print((long) (byte) 1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream49 = printStream47.append('#');
        printStream49.println(0.0f);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4, a, #, a]");
        org.junit.Assert.assertNotNull(printStream49);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap5 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap5);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler7 = compilerOptions0.getAliasTransformationHandler();
        boolean boolean8 = compilerOptions0.checkSymbols;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        compilerOptions0.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler5 = compilerOptions0.getAliasTransformationHandler();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRewriteNewDateGoogNow(true);
        boolean boolean9 = compilerOptions6.extractPrototypeMemberDeclarations;
        compilerOptions6.convertToDottedProperties = true;
        boolean boolean12 = compilerOptions6.inlineConstantVars;
        compilerOptions6.aliasAllStrings = false;
        boolean boolean15 = compilerOptions6.smartNameRemoval;
        compilerOptions6.gatherCssNames = true;
        compilerOptions6.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention23 = null;
        compilerOptions20.setCodingConvention(codingConvention23);
        boolean boolean25 = compilerOptions20.computeFunctionSideEffects;
        boolean boolean26 = compilerOptions20.printInputDelimiter;
        compilerOptions20.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions20.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions20.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions20.setInputPropertyMapSerialized(byteArray35);
        compilerOptions6.setInputPropertyMapSerialized(byteArray35);
        compilerOptions0.inputPropertyMapSerialized = byteArray35;
        compilerOptions0.setCheckSuspiciousCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention44 = null;
        compilerOptions41.setCodingConvention(codingConvention44);
        compilerOptions41.setPropertyAffinity(true);
        compilerOptions41.setCrossModuleCodeMotion(false);
        compilerOptions41.preferLineBreakAtEndOfFile = true;
        boolean boolean52 = compilerOptions41.convertToDottedProperties;
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions41.checkGlobalThisLevel;
        compilerOptions0.checkGlobalThisLevel = checkLevel53;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(aliasTransformationHandler5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.convertToDottedProperties = true;
        boolean boolean16 = compilerOptions10.inlineConstantVars;
        boolean boolean17 = compilerOptions10.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions10.gatherCssNames;
        boolean boolean19 = compilerOptions10.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode20 = compilerOptions10.getLanguageIn();
        boolean boolean21 = compilerOptions10.isRemoveUnusedClassProperties();
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.setCollapseProperties(false);
        compilerOptions22.setClosurePass(true);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions22.setInputPropertyMapSerialized(byteArray35);
        compilerOptions22.setFlowSensitiveInlineVariables(true);
        boolean boolean39 = compilerOptions22.exportTestFunctions;
        compilerOptions22.closurePass = false;
        compilerOptions22.renamePrefix = "Unversioned directory";
        compilerOptions22.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet46 = compilerOptions22.stripTypePrefixes;
        compilerOptions10.setStripTypes(strSet46);
        compilerOptions0.stripNamePrefixes = strSet46;
        compilerOptions0.labelRenaming = false;
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + languageMode20 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode20.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        compilerOptions0.setCheckTypes(false);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = null;
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel9;
        boolean boolean11 = compilerOptions0.removeTryCatchFinally;
        boolean boolean12 = compilerOptions0.aliasAllStrings;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        int int3 = sourceFile1.getLineOfOffset(5);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        boolean boolean11 = compilerOptions0.crossModuleMethodMotion;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup12 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup12;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup12;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        byte[] byteArray18 = compilerOptions16.inputVariableMapSerialized;
        boolean boolean19 = compilerOptions16.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions20.checkGlobalThisLevel;
        compilerOptions16.setCheckGlobalNamesLevel(checkLevel25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention30 = null;
        compilerOptions27.setCodingConvention(codingConvention30);
        boolean boolean32 = compilerOptions27.computeFunctionSideEffects;
        boolean boolean33 = compilerOptions27.printInputDelimiter;
        compilerOptions27.setGeneratePseudoNames(true);
        boolean boolean36 = compilerOptions27.disambiguateProperties;
        java.util.Set<java.lang.String> strSet37 = compilerOptions27.aliasableStrings;
        compilerOptions16.stripNameSuffixes = strSet37;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions16.checkProvides;
        compilerOptions0.setWarningLevel(diagnosticGroup12, checkLevel39);
        compilerOptions0.setCommonJSModulePathPrefix("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.util.Set<java.lang.String> strSet43 = compilerOptions0.aliasableStrings;
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup12);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        compilerOptions0.setOptimizeParameters(true);
        boolean boolean13 = compilerOptions0.crossModuleCodeMotion;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        byte[] byteArray9 = compilerOptions7.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup10 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup10;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        compilerOptions7.setWarningLevel(diagnosticGroup10, checkLevel19);
        java.util.Set<java.lang.String> strSet21 = compilerOptions7.stripNamePrefixes;
        boolean boolean22 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor23 = locationMappingList1.listIterator();
        java.util.Spliterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingSpliterator24 = locationMappingList1.spliterator();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet26 = compilerOptions25.stripNamePrefixes;
        byte[] byteArray27 = compilerOptions25.inputVariableMapSerialized;
        boolean boolean28 = compilerOptions25.exportTestFunctions;
        compilerOptions25.setExtractPrototypeMemberDeclarations(true);
        compilerOptions25.reserveRawExports = false;
        compilerOptions25.crossModuleCodeMotion = false;
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions25.aggressiveVarCheck;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        boolean boolean41 = compilerOptions36.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setLabelRenaming(true);
        compilerOptions42.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean47 = compilerOptions42.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format48 = compilerOptions42.sourceMapFormat;
        compilerOptions36.sourceMapFormat = format48;
        com.google.javascript.jscomp.CompilerOptions compilerOptions50 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions50.setRewriteNewDateGoogNow(true);
        boolean boolean53 = compilerOptions50.extractPrototypeMemberDeclarations;
        compilerOptions50.setCollapseProperties(false);
        boolean boolean56 = compilerOptions50.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat57 = compilerOptions50.errorFormat;
        compilerOptions36.setErrorFormat(errorFormat57);
        compilerOptions25.setErrorFormat(errorFormat57);
        boolean boolean60 = locationMappingList1.remove((java.lang.Object) compilerOptions25);
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups61 = new com.google.javascript.jscomp.DiagnosticGroups();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup63 = diagnosticGroups61.forName("java.io.IOException: Unversioned directory");
        int int64 = locationMappingList1.indexOf((java.lang.Object) diagnosticGroup63);
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping66 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping67 = locationMappingList1.set((int) (short) 10, locationMapping66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(byteArray9);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup10);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationMappingItor23);
        org.junit.Assert.assertNotNull(locationMappingSpliterator24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(format48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(errorFormat57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(diagnosticGroup63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CheckLevel checkLevel6 = compilerOptions0.reportMissingOverride;
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel16 = compilerOptions9.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray17 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList18 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList18, locationMappingArray17);
        compilerOptions9.sourceMapLocationMappings = locationMappingList18;
        boolean boolean21 = compilerOptions9.inlineVariables;
        compilerOptions9.setRecordFunctionInformation(false);
        java.lang.String str24 = compilerOptions9.syntheticBlockEndMarker;
        byte[] byteArray25 = compilerOptions9.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setRewriteNewDateGoogNow(true);
        boolean boolean29 = compilerOptions26.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach30 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions26.setInlineVariables(reach30);
        compilerOptions9.setInlineFunctions(reach30);
        compilerOptions0.setInlineFunctions(reach30);
        compilerOptions0.setAliasableGlobals("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + checkLevel6 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel6.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel16 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel16.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + reach30 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach30.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGeneratePseudoNames(true);
        compilerOptions0.inlineLocalFunctions = false;
        compilerOptions0.setIdeMode(true);
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        compilerOptions13.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions13.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel19;
        compilerOptions0.setMarkAsCompiled(false);
        compilerOptions0.setNameReferenceReportPath("java.io.IOException: ");
        compilerOptions0.resetWarningsGuard();
        boolean boolean26 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCrossModuleMethodMotion(false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        boolean boolean5 = compilerOptions0.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        compilerOptions6.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean11 = compilerOptions6.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format12 = compilerOptions6.sourceMapFormat;
        compilerOptions0.sourceMapFormat = format12;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        compilerOptions14.setCollapseProperties(false);
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        com.google.javascript.jscomp.ErrorFormat errorFormat21 = compilerOptions14.errorFormat;
        compilerOptions0.setErrorFormat(errorFormat21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("-1");
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention28 = null;
        compilerOptions25.setCodingConvention(codingConvention28);
        compilerOptions25.setDefineToBooleanLiteral("hi!", true);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        compilerOptions25.setInputPropertyMapSerialized(byteArray36);
        printStream24.write(byteArray36);
        compilerOptions0.inputVariableMapSerialized = byteArray36;
        boolean boolean40 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setRemoveAbstractMethods(false);
        boolean boolean43 = compilerOptions0.removeDeadCode;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(errorFormat21);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        compilerOptions0.setCheckTypes(false);
        compilerOptions0.ideMode = false;
        java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> strMap11 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerOptions0.setPropertyInvalidationErrors(strMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        double double1 = compiler0.getProgress();
        compiler0.reportCodeChange();
        java.lang.String str3 = compiler0.getAstDotGraph();
        compiler0.reportCodeChange();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker5 = null;
        compiler0.tracker = performanceTracker5;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = compiler0.getWarningCount();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        com.google.javascript.jscomp.SourceFile.Generator generator5 = null;
        com.google.javascript.jscomp.SourceFile sourceFile6 = builder0.buildFromGenerator("hi!", generator5);
        java.nio.charset.Charset charset7 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder8 = builder0.withCharset(charset7);
        com.google.javascript.jscomp.SourceFile.Generator generator10 = null;
        com.google.javascript.jscomp.SourceFile sourceFile11 = builder8.buildFromGenerator("-1", generator10);
        com.google.javascript.jscomp.SourceFile.Builder builder13 = builder8.withOriginalPath("java.io.IOException: java.io.IOException: java.io.IOException: ");
        com.google.javascript.jscomp.SourceFile.Generator generator15 = null;
        com.google.javascript.jscomp.SourceFile sourceFile16 = builder13.buildFromGenerator("java.io.IOException: java.io.IOException: java.io.IOException: ", generator15);
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile19 = builder13.buildFromInputStream("java.io.IOException: ", inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(sourceFile6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(sourceFile11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(sourceFile16);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        java.lang.String str13 = compilerOptions0.checkMissingGetCssNameBlacklist;
        compilerOptions0.setRemoveUnusedLocalVars(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode16 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention20 = null;
        compilerOptions17.setCodingConvention(codingConvention20);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode22 = compilerOptions17.getTracerMode();
        compilerOptions17.lineBreak = false;
        compilerOptions17.setAssumeClosuresOnlyCaptureReferences(false);
        compilerOptions17.inlineLocalFunctions = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRewriteNewDateGoogNow(true);
        boolean boolean32 = compilerOptions29.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach33 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions29.setInlineVariables(reach33);
        boolean boolean35 = compilerOptions29.removeUnusedVars;
        boolean boolean36 = compilerOptions29.assumeClosuresOnlyCaptureReferences();
        compilerOptions29.setProcessObjectPropertyString(false);
        compilerOptions29.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean41 = compilerOptions29.removeDeadCode;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel42 = null;
        compilerOptions29.sourceMapDetailLevel = detailLevel42;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention47 = null;
        compilerOptions44.setCodingConvention(codingConvention47);
        compilerOptions44.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions44.checkProvides;
        java.lang.String[] strArray53 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        compilerOptions44.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList54);
        java.util.stream.Stream<java.lang.String> strStream57 = strList54.stream();
        compilerOptions29.setManageClosureDependencies((java.util.List<java.lang.String>) strList54);
        compilerOptions17.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList54);
        com.google.javascript.jscomp.CompilerOptions compilerOptions60 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet61 = compilerOptions60.stripNamePrefixes;
        byte[] byteArray62 = compilerOptions60.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup63 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup63;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention68 = null;
        compilerOptions65.setCodingConvention(codingConvention68);
        compilerOptions65.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel72 = compilerOptions65.checkProvides;
        compilerOptions60.setWarningLevel(diagnosticGroup63, checkLevel72);
        compilerOptions17.setCheckRequires(checkLevel72);
        compilerOptions0.setBrokenClosureRequiresLevel(checkLevel72);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + tracerMode16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode16.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode22 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode22.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + reach33 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach33.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(byteArray62);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup63);
        org.junit.Assert.assertTrue("'" + checkLevel72 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel72.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        compilerOptions0.setTransformAMDToCJSModules(true);
        java.lang.String str9 = compilerOptions0.instrumentationTemplate;
        boolean boolean10 = compilerOptions0.checkSuspiciousCode;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream1.write(byteArray14, (int) (byte) 0, (int) (byte) 1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup18 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        printStream1.println((java.lang.Object) diagnosticGroup18);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler(printStream1);
        java.io.PrintStream printStream23 = new java.io.PrintStream("Unversioned directory");
        char[] charArray26 = new char[] { '4', '4' };
        printStream23.print(charArray26);
        printStream23.print((int) ' ');
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        java.io.PrintStream printStream34 = new java.io.PrintStream("Unversioned directory");
        char[] charArray37 = new char[] { '4', '4' };
        printStream34.print(charArray37);
        printStream34.print((int) ' ');
        byte[] byteArray47 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        printStream34.write(byteArray47, (int) (byte) 0, (int) (byte) 1);
        java.io.PrintStream printStream53 = new java.io.PrintStream("Unversioned directory");
        char[] charArray56 = new char[] { '4', '4' };
        printStream53.print(charArray56);
        printStream53.print((int) ' ');
        java.io.PrintStream printStream61 = new java.io.PrintStream((java.io.OutputStream) printStream53, false);
        printStream53.write((int) '#');
        java.util.Locale locale64 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { "Unversioned directory" };
        java.io.PrintStream printStream68 = printStream53.format(locale64, "Unversioned directory", objArray67);
        java.io.PrintStream printStream69 = printStream34.format("java.io.IOException: Unversioned directory", objArray67);
        java.io.PrintStream printStream70 = printStream31.printf("java.io.IOException: Unversioned directory", objArray67);
        printStream1.println((java.lang.Object) "java.io.IOException: Unversioned directory");
        java.io.PrintStream printStream73 = printStream1.append('4');
        printStream1.println((double) '#');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, -1, 10, 100, 100, 100]");
// flaky:         org.junit.Assert.assertNull(diagnosticGroup18);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, 4]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100, -1, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4, 4]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[Unversioned directory]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[Unversioned directory]");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream73);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        compilerOptions24.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions24.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray32 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList33 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList33, locationMappingArray32);
        compilerOptions24.sourceMapLocationMappings = locationMappingList33;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        compilerOptions36.collapseAnonymousFunctions = false;
        boolean boolean43 = compilerOptions36.checkTypes;
        compilerOptions36.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions36.checkProvides;
        compilerOptions24.checkUnreachableCode = checkLevel46;
        compilerOptions0.aggressiveVarCheck = checkLevel46;
        compilerOptions0.removeDeadCode = true;
        boolean boolean51 = compilerOptions0.crossModuleCodeMotion;
        compilerOptions0.optimizeReturns = false;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.convertToDottedProperties = true;
        boolean boolean9 = compilerOptions3.inlineConstantVars;
        boolean boolean10 = compilerOptions3.extractPrototypeMemberDeclarations;
        boolean boolean11 = compilerOptions3.reserveRawExports;
        boolean boolean12 = locationMappingList1.remove((java.lang.Object) boolean11);
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet21 = compilerOptions20.stripNamePrefixes;
        compilerOptions13.setIdGenerators(strSet21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet21.stream();
        boolean boolean24 = locationMappingList1.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor25 = locationMappingList1.listIterator();
        int int26 = locationMappingList1.size();
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setLabelRenaming(true);
        compilerOptions27.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean32 = compilerOptions27.labelRenaming;
        compilerOptions27.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet36 = compilerOptions35.stripNamePrefixes;
        byte[] byteArray37 = compilerOptions35.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup38 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup38;
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention43 = null;
        compilerOptions40.setCodingConvention(codingConvention43);
        compilerOptions40.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions40.checkProvides;
        compilerOptions35.setWarningLevel(diagnosticGroup38, checkLevel47);
        compilerOptions27.checkUnreachableCode = checkLevel47;
        compilerOptions27.setAssumeStrictThis(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions52 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions52.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = null;
        compilerOptions52.setCodingConvention(codingConvention55);
        compilerOptions52.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel59 = compilerOptions52.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray60 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList61 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList61, locationMappingArray60);
        compilerOptions52.sourceMapLocationMappings = locationMappingList61;
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setRewriteNewDateGoogNow(true);
        boolean boolean67 = compilerOptions64.extractPrototypeMemberDeclarations;
        boolean boolean68 = compilerOptions64.jqueryPass;
        compilerOptions64.collapseAnonymousFunctions = false;
        boolean boolean71 = compilerOptions64.checkTypes;
        compilerOptions64.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel74 = compilerOptions64.checkProvides;
        compilerOptions52.checkUnreachableCode = checkLevel74;
        compilerOptions27.setBrokenClosureRequiresLevel(checkLevel74);
        java.util.Set<java.lang.String> strSet77 = compilerOptions27.stripNameSuffixes;
        boolean boolean78 = locationMappingList1.containsAll((java.util.Collection<java.lang.String>) strSet77);
        int int79 = locationMappingList1.size();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping81 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping82 = locationMappingList1.set((int) (short) -1, locationMapping81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locationMappingItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(byteArray37);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup38);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel59 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel59.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + checkLevel74 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel74.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy8 = null;
        compilerOptions0.setPropertyRenaming(propertyRenamingPolicy8);
        compilerOptions0.setInlineConstantVars(true);
        compilerOptions0.aliasExternals = true;
        compilerOptions0.labelRenaming = false;
        compilerOptions0.setClosurePass(false);
        compilerOptions0.removeUnusedLocalVars = false;
        com.google.javascript.jscomp.MessageBundle messageBundle20 = null;
        compilerOptions0.messageBundle = messageBundle20;
        compilerOptions0.setExportTestFunctions(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.closurePass = true;
        compilerOptions0.setMarkAsCompiled(true);
        compilerOptions0.setRemoveClosureAsserts(false);
        compilerOptions0.setRemoveTryCatchFinally(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        boolean boolean11 = compilerOptions8.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode12 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions8.setLanguageIn(languageMode12);
        compilerOptions0.setLanguageIn(languageMode12);
        compilerOptions0.setSmartNameRemoval(true);
        compilerOptions0.setUnaliasableGlobals("Unversioned directory");
        java.util.Set<java.lang.String> strSet19 = compilerOptions0.stripTypePrefixes;
        compilerOptions0.setPrintInputDelimiter(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap22 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap22;
        compilerOptions0.optimizeParameters = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + languageMode12 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode12.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean8 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle9 = null;
        compilerOptions0.messageBundle = messageBundle9;
        compilerOptions0.setDeadAssignmentElimination(false);
        boolean boolean13 = compilerOptions0.optimizeParameters;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet15 = compilerOptions14.stripNamePrefixes;
        byte[] byteArray16 = compilerOptions14.inputVariableMapSerialized;
        compilerOptions14.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        boolean boolean22 = compilerOptions19.extractPrototypeMemberDeclarations;
        boolean boolean23 = compilerOptions19.jqueryPass;
        compilerOptions19.collapseAnonymousFunctions = false;
        java.lang.String str26 = compilerOptions19.aliasStringsBlacklist;
        compilerOptions19.instrumentationTemplate = "java.io.IOException";
        boolean boolean29 = compilerOptions19.crossModuleCodeMotion;
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions19.checkMissingGetCssNameLevel;
        compilerOptions14.checkUnreachableCode = checkLevel30;
        compilerOptions0.setCheckMissingGetCssNameLevel(checkLevel30);
        compilerOptions0.setRecordFunctionInformation(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions35 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions35.setRewriteNewDateGoogNow(true);
        boolean boolean38 = compilerOptions35.extractPrototypeMemberDeclarations;
        boolean boolean39 = compilerOptions35.jqueryPass;
        boolean boolean40 = compilerOptions35.deadAssignmentElimination;
        compilerOptions35.labelRenaming = true;
        compilerOptions35.setSyntheticBlockStartMarker("");
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy45 = compilerOptions35.variableRenaming;
        compilerOptions0.variableRenaming = variableRenamingPolicy45;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy45 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.OFF + "'", variableRenamingPolicy45.equals(com.google.javascript.jscomp.VariableRenamingPolicy.OFF));
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRewriteNewDateGoogNow(true);
        boolean boolean4 = compilerOptions1.extractPrototypeMemberDeclarations;
        compilerOptions1.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet7 = compilerOptions1.stripTypePrefixes;
        compilerOptions0.stripTypePrefixes = strSet7;
        compilerOptions0.setChainCalls(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap11 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap11);
        compilerOptions0.setClosurePass(true);
        compilerOptions0.setSourceMapOutputPath("hi!");
        compilerOptions0.foldConstants = false;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup9 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        boolean boolean21 = compilerOptions12.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup9, checkLevel22);
        compilerOptions0.setCheckCaja(true);
        compilerOptions0.setCheckSymbols(true);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.computeFunctionSideEffects = true;
        boolean boolean22 = compilerOptions0.generatePseudoNames;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        boolean boolean28 = compilerOptions23.generateExports;
        compilerOptions23.gatherCssNames = false;
        boolean boolean31 = compilerOptions23.optimizeReturns;
        compilerOptions23.smartNameRemoval = true;
        boolean boolean34 = compilerOptions23.lineBreak;
        compilerOptions23.setDebugFunctionSideEffectsPath("hi!");
        java.util.Set<java.lang.String> strSet37 = compilerOptions23.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet37);
        compilerOptions0.setRewriteFunctionExpressions(false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.optimizeCalls = true;
        compilerOptions0.removeUnusedPrototypeProperties = false;
        compilerOptions0.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode14 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        boolean boolean19 = compilerOptions15.jqueryPass;
        compilerOptions15.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.setRewriteNewDateGoogNow(true);
        boolean boolean25 = compilerOptions22.extractPrototypeMemberDeclarations;
        compilerOptions22.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions22.checkGlobalThisLevel;
        compilerOptions15.checkProvides = checkLevel28;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        boolean boolean33 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.convertToDottedProperties = true;
        boolean boolean36 = compilerOptions30.inlineConstantVars;
        boolean boolean37 = compilerOptions30.extractPrototypeMemberDeclarations;
        compilerOptions30.optimizeCalls = true;
        compilerOptions30.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions42.setRewriteNewDateGoogNow(true);
        boolean boolean45 = compilerOptions42.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach46 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions42.setInlineVariables(reach46);
        compilerOptions42.setPrintInputDelimiter(true);
        boolean boolean50 = compilerOptions42.closurePass;
        compilerOptions42.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setRewriteNewDateGoogNow(true);
        boolean boolean56 = compilerOptions53.extractPrototypeMemberDeclarations;
        boolean boolean57 = compilerOptions53.jqueryPass;
        boolean boolean58 = compilerOptions53.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions59 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions59.setLabelRenaming(true);
        compilerOptions59.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean64 = compilerOptions59.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format65 = compilerOptions59.sourceMapFormat;
        compilerOptions53.setSourceMapFormat(format65);
        compilerOptions42.setSourceMapFormat(format65);
        compilerOptions30.sourceMapFormat = format65;
        compilerOptions15.sourceMapFormat = format65;
        compilerOptions0.sourceMapFormat = format65;
        boolean boolean71 = compilerOptions0.removeUnusedLocalVars;
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList72 = compilerOptions0.sourceMapLocationMappings;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping74 = locationMappingList72.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + tracerMode14 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode14.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + reach46 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach46.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(format65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locationMappingList72);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy8 = compilerOptions0.anonymousFunctionNaming;
        compilerOptions0.setTweakToDoubleLiteral("java.io.IOException: -1", 1.0d);
        boolean boolean12 = compilerOptions0.optimizeCalls;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy8 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy8.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.setGeneratePseudoNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = null;
        compilerOptions9.setCodingConvention(codingConvention12);
        compilerOptions9.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet17 = compilerOptions16.stripNamePrefixes;
        compilerOptions9.setIdGenerators(strSet17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention22 = null;
        compilerOptions19.setCodingConvention(codingConvention22);
        compilerOptions19.setGeneratePseudoNames(true);
        compilerOptions19.inlineLocalFunctions = false;
        compilerOptions19.setIdeMode(true);
        compilerOptions19.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions32 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions32.setRewriteNewDateGoogNow(true);
        boolean boolean35 = compilerOptions32.extractPrototypeMemberDeclarations;
        compilerOptions32.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel38 = compilerOptions32.checkGlobalThisLevel;
        compilerOptions19.checkMissingReturn = checkLevel38;
        compilerOptions9.aggressiveVarCheck = checkLevel38;
        compilerOptions0.reportMissingOverride = checkLevel38;
        compilerOptions0.setReportPath("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        java.util.Set<java.lang.String> strSet44 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.checkSymbols = true;
        compilerOptions0.setRemoveTryCatchFinally(false);
        compilerOptions0.setAssumeStrictThis(false);
        boolean boolean51 = compilerOptions0.removeUnusedPrototypeProperties;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + checkLevel38 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel38.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setClosurePass(true);
        compilerOptions0.setOptimizeParameters(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.setCheckSuspiciousCode(false);
        byte[] byteArray8 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode9 = compilerOptions0.getLanguageOut();
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        compilerOptions0.setAliasExternals(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNull(languageMode9);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator2 = null;
        com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromGenerator("hi!", generator2);
        java.nio.charset.Charset charset4 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder5 = builder0.withCharset(charset4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder0.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Builder builder9 = builder0.withOriginalPath("Unversioned directory");
        com.google.javascript.jscomp.SourceFile.Builder builder13 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator15 = null;
        com.google.javascript.jscomp.SourceFile sourceFile16 = builder13.buildFromGenerator("hi!", generator15);
        java.nio.charset.Charset charset17 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder18 = builder13.withCharset(charset17);
        com.google.javascript.jscomp.SourceFile.Generator generator20 = null;
        com.google.javascript.jscomp.SourceFile sourceFile21 = builder18.buildFromGenerator("hi!", generator20);
        java.nio.charset.Charset charset22 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder23 = builder18.withCharset(charset22);
        com.google.javascript.jscomp.SourceFile sourceFile25 = builder18.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset26 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder27 = builder18.withCharset(charset26);
        com.google.javascript.jscomp.SourceFile.Builder builder29 = builder18.withOriginalPath("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile.Builder builder32 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator34 = null;
        com.google.javascript.jscomp.SourceFile sourceFile35 = builder32.buildFromGenerator("hi!", generator34);
        java.nio.charset.Charset charset36 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder37 = builder32.withCharset(charset36);
        java.nio.charset.Charset charset38 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder39 = builder32.withCharset(charset38);
        com.google.javascript.jscomp.SourceFile.Builder builder41 = builder32.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile44 = builder32.buildFromCode("// Input %num%", "hi!");
        boolean boolean45 = sourceFile44.isExtern();
        java.io.Reader reader46 = sourceFile44.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile47 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: 2019/07/12 07:12", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile48 = builder18.buildFromReader("java.io.IOException: Unversioned directory", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile49 = com.google.javascript.jscomp.SourceFile.fromReader("2019/07/12 07:12", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile50 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: -1", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile51 = builder9.buildFromReader("4432#0.010\001\001\000\001\000\ufffd", reader46);
        com.google.javascript.jscomp.SourceFile sourceFile54 = builder9.buildFromCode("java.io.IOException: Unversioned directory", "java.io.IOException: java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertNotNull(sourceFile3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(sourceFile16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(sourceFile21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(sourceFile25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(sourceFile35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(reader46);
        org.junit.Assert.assertNotNull(sourceFile47);
        org.junit.Assert.assertNotNull(sourceFile48);
        org.junit.Assert.assertNotNull(sourceFile49);
        org.junit.Assert.assertNotNull(sourceFile50);
        org.junit.Assert.assertNotNull(sourceFile51);
        org.junit.Assert.assertNotNull(sourceFile54);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        compilerOptions0.setTweakToStringLiteral("2019/07/12 07:12", "java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.setRemoveDeadCode(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        boolean boolean17 = compilerOptions14.extractPrototypeMemberDeclarations;
        boolean boolean18 = compilerOptions14.jqueryPass;
        boolean boolean19 = compilerOptions14.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setLabelRenaming(true);
        compilerOptions20.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean25 = compilerOptions20.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format26 = compilerOptions20.sourceMapFormat;
        compilerOptions14.setSourceMapFormat(format26);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing28 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        compilerOptions14.setTweakProcessing(tweakProcessing28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention33 = null;
        compilerOptions30.setCodingConvention(codingConvention33);
        compilerOptions30.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions30.checkProvides;
        java.util.Set<java.lang.String> strSet38 = compilerOptions30.stripTypes;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet38.stream();
        compilerOptions14.stripTypes = strSet38;
        compilerOptions0.setStripNameSuffixes(strSet38);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: java.io.IOException: 2019/07/12 07:12";
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap44 = compilerOptions0.customPasses;
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        compilerOptions0.setDefineReplacements(strMap45);
        boolean boolean47 = compilerOptions0.inlineConstantVars;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertTrue("'" + tweakProcessing28 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing28.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setReplaceIdGenerators(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setRewriteNewDateGoogNow(true);
        boolean boolean10 = compilerOptions7.extractPrototypeMemberDeclarations;
        compilerOptions7.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel13 = compilerOptions7.checkGlobalThisLevel;
        compilerOptions0.checkProvides = checkLevel13;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setRewriteNewDateGoogNow(true);
        boolean boolean18 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.convertToDottedProperties = true;
        boolean boolean21 = compilerOptions15.inlineConstantVars;
        boolean boolean22 = compilerOptions15.extractPrototypeMemberDeclarations;
        compilerOptions15.optimizeCalls = true;
        compilerOptions15.setCoalesceVariableNames(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach31 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions27.setInlineVariables(reach31);
        compilerOptions27.setPrintInputDelimiter(true);
        boolean boolean35 = compilerOptions27.closurePass;
        compilerOptions27.setOutputCharset("java.io.IOException");
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        boolean boolean42 = compilerOptions38.jqueryPass;
        boolean boolean43 = compilerOptions38.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions44 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions44.setLabelRenaming(true);
        compilerOptions44.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean49 = compilerOptions44.isExternExportsEnabled();
        com.google.javascript.jscomp.SourceMap.Format format50 = compilerOptions44.sourceMapFormat;
        compilerOptions38.setSourceMapFormat(format50);
        compilerOptions27.setSourceMapFormat(format50);
        compilerOptions15.sourceMapFormat = format50;
        compilerOptions0.sourceMapFormat = format50;
        boolean boolean55 = compilerOptions0.markNoSideEffectCalls;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + checkLevel13 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel13.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + reach31 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach31.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(format50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet4 = compilerOptions3.stripNamePrefixes;
        byte[] byteArray5 = compilerOptions3.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention11 = null;
        compilerOptions8.setCodingConvention(codingConvention11);
        compilerOptions8.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel15 = compilerOptions8.checkProvides;
        compilerOptions3.setWarningLevel(diagnosticGroup6, checkLevel15);
        compilerOptions0.setAggressiveVarCheck(checkLevel15);
        compilerOptions0.setRenamePrefix("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        compilerOptions0.closurePass = false;
        compilerOptions0.setProtectHiddenSideEffects(true);
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap24 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap24);
        boolean boolean26 = compilerOptions0.checkControlStructures;
        compilerOptions0.jqueryPass = true;
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(byteArray5);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + checkLevel15 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel15.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        compilerOptions0.setRemoveUnusedVars(true);
        compilerOptions0.removeUnusedClassProperties = true;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy10 = compilerOptions0.propertyRenaming;
        compilerOptions0.setInlineFunctions(true);
        java.lang.Class<?> wildcardClass13 = compilerOptions0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy10 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.OFF + "'", propertyRenamingPolicy10.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.OFF));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        boolean boolean16 = compilerOptions12.jqueryPass;
        compilerOptions12.collapseAnonymousFunctions = false;
        boolean boolean19 = compilerOptions12.checkTypes;
        compilerOptions12.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkProvides;
        compilerOptions0.checkUnreachableCode = checkLevel22;
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention27 = null;
        compilerOptions24.setCodingConvention(codingConvention27);
        compilerOptions24.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel31 = compilerOptions24.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray32 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList33 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList33, locationMappingArray32);
        compilerOptions24.sourceMapLocationMappings = locationMappingList33;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRewriteNewDateGoogNow(true);
        boolean boolean39 = compilerOptions36.extractPrototypeMemberDeclarations;
        boolean boolean40 = compilerOptions36.jqueryPass;
        compilerOptions36.collapseAnonymousFunctions = false;
        boolean boolean43 = compilerOptions36.checkTypes;
        compilerOptions36.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CheckLevel checkLevel46 = compilerOptions36.checkProvides;
        compilerOptions24.checkUnreachableCode = checkLevel46;
        compilerOptions0.aggressiveVarCheck = checkLevel46;
        compilerOptions0.removeDeadCode = true;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing51 = compilerOptions0.getTweakProcessing();
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel31 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel31.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + checkLevel46 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel46.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing51 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing51.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CONST = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        compilerOptions0.setReserveRawExports(false);
        boolean boolean17 = compilerOptions0.aliasExternals;
        boolean boolean18 = compilerOptions0.rewriteFunctionExpressions;
        boolean boolean19 = compilerOptions0.crossModuleCodeMotion;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        boolean boolean8 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.setPrettyPrint(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet12 = compilerOptions11.stripNamePrefixes;
        byte[] byteArray13 = compilerOptions11.inputVariableMapSerialized;
        boolean boolean14 = compilerOptions11.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode15 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions11.setLanguageIn(languageMode15);
        compilerOptions11.setNameAnonymousFunctionsOnly(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setRewriteNewDateGoogNow(true);
        boolean boolean22 = compilerOptions19.extractPrototypeMemberDeclarations;
        compilerOptions19.setCollapseProperties(false);
        compilerOptions19.setClosurePass(true);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions19.setInputPropertyMapSerialized(byteArray32);
        compilerOptions19.setAliasAllStrings(false);
        com.google.javascript.jscomp.CheckLevel checkLevel36 = compilerOptions19.reportMissingOverride;
        compilerOptions11.setCheckGlobalNamesLevel(checkLevel36);
        compilerOptions0.setCheckUnreachableCode(checkLevel36);
        boolean boolean39 = compilerOptions0.ambiguateProperties;
        compilerOptions0.setFoldConstants(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions42 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet43 = compilerOptions42.stripNamePrefixes;
        byte[] byteArray44 = compilerOptions42.inputVariableMapSerialized;
        boolean boolean45 = compilerOptions42.exportTestFunctions;
        compilerOptions42.lineBreak = false;
        compilerOptions42.setCrossModuleMethodMotion(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap50 = null;
        compilerOptions42.customPasses = customPassExecutionTimeMultimap50;
        boolean boolean52 = compilerOptions42.checkTypes;
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setRewriteNewDateGoogNow(true);
        boolean boolean56 = compilerOptions53.extractPrototypeMemberDeclarations;
        compilerOptions53.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet59 = compilerOptions53.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel60 = null;
        compilerOptions53.setCheckGlobalThisLevel(checkLevel60);
        com.google.javascript.jscomp.SourceMap.Format format62 = compilerOptions53.sourceMapFormat;
        com.google.javascript.jscomp.CompilerOptions compilerOptions63 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions63.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention66 = null;
        compilerOptions63.setCodingConvention(codingConvention66);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy68 = compilerOptions63.anonymousFunctionNaming;
        compilerOptions53.anonymousFunctionNaming = anonymousFunctionNamingPolicy68;
        compilerOptions42.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy68);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy68;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + languageMode15 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT + "'", languageMode15.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + checkLevel36 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel36.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(format62);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy68 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy68.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        char[] charArray4 = new char[] { '4', '4' };
        printStream1.print(charArray4);
        printStream1.print((int) ' ');
        printStream1.println(false);
        printStream1.println('#');
        printStream1.print('4');
        printStream1.print((-1));
        printStream1.println(false);
        printStream1.println(false);
        printStream1.print((int) (short) 0);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4]");
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setPropertyAffinity(true);
        boolean boolean7 = compilerOptions0.closurePass;
        compilerOptions0.setCheckCaja(true);
        boolean boolean10 = compilerOptions0.collapseVariableDeclarations;
        compilerOptions0.prettyPrint = true;
        compilerOptions0.resetWarningsGuard();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.aliasAllStrings = false;
        boolean boolean9 = compilerOptions0.smartNameRemoval;
        compilerOptions0.gatherCssNames = true;
        compilerOptions0.aliasExternals = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = null;
        compilerOptions14.setCodingConvention(codingConvention17);
        boolean boolean19 = compilerOptions14.computeFunctionSideEffects;
        boolean boolean20 = compilerOptions14.printInputDelimiter;
        compilerOptions14.syntheticBlockEndMarker = "java.io.IOException";
        compilerOptions14.enableRuntimeTypeCheck("java.io.IOException: ");
        compilerOptions14.setRemoveUnusedPrototypePropertiesInExterns(true);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        compilerOptions14.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.setInputPropertyMapSerialized(byteArray29);
        compilerOptions0.generateExports = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        boolean boolean37 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.convertToDottedProperties = true;
        boolean boolean40 = compilerOptions34.inlineConstantVars;
        boolean boolean41 = compilerOptions34.extractPrototypeMemberDeclarations;
        compilerOptions34.optimizeCalls = true;
        compilerOptions34.removeUnusedPrototypeProperties = false;
        compilerOptions34.setExternExports(true);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode48 = compilerOptions34.getTracerMode();
        com.google.javascript.jscomp.CheckLevel checkLevel49 = compilerOptions34.checkRequires;
        compilerOptions0.setCheckUnreachableCode(checkLevel49);
        compilerOptions0.setManageClosureDependencies(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setLabelRenaming(true);
        compilerOptions53.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean58 = compilerOptions53.isExternExportsEnabled();
        compilerOptions53.removeUnusedClassProperties = false;
        compilerOptions53.checkTypes = true;
        java.lang.Object obj63 = compilerOptions53.clone();
        com.google.javascript.jscomp.CompilerOptions compilerOptions64 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions64.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention67 = null;
        compilerOptions64.setCodingConvention(codingConvention67);
        compilerOptions64.setPropertyAffinity(true);
        boolean boolean71 = compilerOptions64.closurePass;
        compilerOptions64.setCheckCaja(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions74 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet75 = compilerOptions74.stripNamePrefixes;
        byte[] byteArray76 = compilerOptions74.inputVariableMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.Reach reach77 = com.google.javascript.jscomp.CompilerOptions.Reach.NONE;
        compilerOptions74.setInlineFunctions(reach77);
        compilerOptions64.setRemoveUnusedVariables(reach77);
        compilerOptions53.setInlineFunctions(reach77);
        compilerOptions0.setRemoveUnusedVariable(reach77);
        compilerOptions0.setConvertToDottedProperties(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + tracerMode48 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode48.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel49 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel49.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertTrue("'" + reach77 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.NONE + "'", reach77.equals(com.google.javascript.jscomp.CompilerOptions.Reach.NONE));
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode5 = compilerOptions0.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup6 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup6;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRewriteNewDateGoogNow(true);
        boolean boolean11 = compilerOptions8.extractPrototypeMemberDeclarations;
        compilerOptions8.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions8.brokenClosureRequiresLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup6, checkLevel14);
        compilerOptions0.setRemoveUnusedVars(true);
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray18 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList19 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList19, locationMappingArray18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        boolean boolean24 = compilerOptions21.extractPrototypeMemberDeclarations;
        compilerOptions21.setCollapseProperties(false);
        compilerOptions21.setClosurePass(true);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions21.setInputPropertyMapSerialized(byteArray34);
        compilerOptions21.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRewriteNewDateGoogNow(true);
        boolean boolean41 = compilerOptions38.extractPrototypeMemberDeclarations;
        compilerOptions38.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet44 = compilerOptions38.stripTypePrefixes;
        compilerOptions21.aliasableStrings = strSet44;
        boolean boolean46 = locationMappingList19.removeAll((java.util.Collection<java.lang.String>) strSet44);
        compilerOptions0.stripTypePrefixes = strSet44;
        java.util.Set<java.lang.String> strSet48 = compilerOptions0.stripNameSuffixes;
        boolean boolean49 = compilerOptions0.prettyPrint;
        boolean boolean50 = compilerOptions0.removeDeadCode;
        org.junit.Assert.assertTrue("'" + tracerMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode5.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertNotNull(locationMappingArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setCollapseProperties(false);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup9 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup9;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup9;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        boolean boolean15 = compilerOptions12.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach16 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions12.setInlineVariables(reach16);
        compilerOptions12.setPrintInputDelimiter(true);
        boolean boolean20 = compilerOptions12.closurePass;
        boolean boolean21 = compilerOptions12.shouldColorizeErrorOutput();
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions12.checkMissingGetCssNameLevel;
        compilerOptions0.setWarningLevel(diagnosticGroup9, checkLevel22);
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup9;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + reach16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach16.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        com.google.javascript.jscomp.SourceFile.Builder builder2 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator4 = null;
        com.google.javascript.jscomp.SourceFile sourceFile5 = builder2.buildFromGenerator("hi!", generator4);
        java.nio.charset.Charset charset6 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder7 = builder2.withCharset(charset6);
        com.google.javascript.jscomp.SourceFile.Generator generator9 = null;
        com.google.javascript.jscomp.SourceFile sourceFile10 = builder7.buildFromGenerator("hi!", generator9);
        java.nio.charset.Charset charset11 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder12 = builder7.withCharset(charset11);
        com.google.javascript.jscomp.SourceFile sourceFile14 = builder7.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset15 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder16 = builder7.withCharset(charset15);
        com.google.javascript.jscomp.SourceFile.Builder builder18 = builder7.withOriginalPath("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile.Builder builder21 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator23 = null;
        com.google.javascript.jscomp.SourceFile sourceFile24 = builder21.buildFromGenerator("hi!", generator23);
        java.nio.charset.Charset charset25 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder26 = builder21.withCharset(charset25);
        java.nio.charset.Charset charset27 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder28 = builder21.withCharset(charset27);
        com.google.javascript.jscomp.SourceFile.Builder builder30 = builder21.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile33 = builder21.buildFromCode("// Input %num%", "hi!");
        boolean boolean34 = sourceFile33.isExtern();
        java.io.Reader reader35 = sourceFile33.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile36 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: 2019/07/12 07:12", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile37 = builder7.buildFromReader("java.io.IOException: Unversioned directory", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromReader("2019/07/12 07:12", reader35);
        com.google.javascript.jscomp.SourceFile sourceFile39 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: -1", reader35);
        java.lang.String str41 = sourceFile39.getLine(10);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(sourceFile10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(sourceFile14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(sourceFile24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(sourceFile33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(reader35);
        org.junit.Assert.assertNotNull(sourceFile36);
        org.junit.Assert.assertNotNull(sourceFile37);
        org.junit.Assert.assertNotNull(sourceFile38);
        org.junit.Assert.assertNotNull(sourceFile39);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        boolean boolean17 = compilerOptions0.exportTestFunctions;
        compilerOptions0.closurePass = false;
        compilerOptions0.renamePrefix = "Unversioned directory";
        compilerOptions0.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet24 = compilerOptions0.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel25 = compilerOptions0.checkGlobalNamesLevel;
        compilerOptions0.instrumentationTemplate = "java.io.IOException: ";
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        compilerOptions28.optimizeParameters = true;
        compilerOptions28.setReportPath("2019/07/12 07:12");
        compilerOptions28.setDevirtualizePrototypeMethods(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = null;
        compilerOptions37.setCodingConvention(codingConvention40);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode42 = compilerOptions37.getTracerMode();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup43 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup43;
        com.google.javascript.jscomp.CompilerOptions compilerOptions45 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions45.setRewriteNewDateGoogNow(true);
        boolean boolean48 = compilerOptions45.extractPrototypeMemberDeclarations;
        compilerOptions45.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions45.brokenClosureRequiresLevel;
        compilerOptions37.setWarningLevel(diagnosticGroup43, checkLevel51);
        com.google.javascript.jscomp.CheckLevel checkLevel53 = compilerOptions37.checkGlobalThisLevel;
        compilerOptions28.setCheckUnreachableCode(checkLevel53);
        compilerOptions0.checkRequires = checkLevel53;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing56 = compilerOptions0.getTweakProcessing();
        compilerOptions0.setRewriteNewDateGoogNow(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + checkLevel25 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel25.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tracerMode42 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode42.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
// flaky:         org.junit.Assert.assertNull(diagnosticGroup43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertTrue("'" + checkLevel53 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel53.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing56 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing56.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions12.checkProvides;
        java.lang.String[] strArray21 = new java.lang.String[] { "java.io.IOException: Unversioned directory" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        compilerOptions12.setReplaceStringsFunctionDescriptions((java.util.List<java.lang.String>) strList22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList22.stream();
        compilerOptions0.setReplaceStringsConfiguration("hi!", (java.util.List<java.lang.String>) strList22);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel27 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel27);
        compilerOptions0.crossModuleMethodMotion = false;
        compilerOptions0.setTweakToNumberLiteral("java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12", (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + checkLevel19 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel19.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream25);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        compilerOptions0.gatherCssNames = false;
        boolean boolean8 = compilerOptions0.optimizeReturns;
        compilerOptions0.smartNameRemoval = true;
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.aliasableStrings;
        compilerOptions0.generateExports = false;
        boolean boolean14 = compilerOptions0.assumeStrictThis();
        boolean boolean15 = compilerOptions0.markNoSideEffectCalls;
        java.util.Set<java.lang.String> strSet16 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setPrettyPrint(true);
        compilerOptions0.setDisambiguateProperties(true);
        compilerOptions0.setLineLengthThreshold((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.setRemoveUnusedClassProperties(true);
        compilerOptions0.setCheckTypes(false);
        compilerOptions0.ideMode = false;
        com.google.javascript.jscomp.MessageBundle messageBundle11 = compilerOptions0.messageBundle;
        compilerOptions0.inlineFunctions = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(messageBundle11);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        compilerOptions0.setDefineToDoubleLiteral("java.io.IOException: ", (double) 0L);
        com.google.javascript.jscomp.CheckLevel checkLevel11 = compilerOptions0.checkGlobalThisLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention15 = null;
        compilerOptions12.setCodingConvention(codingConvention15);
        compilerOptions12.setGeneratePseudoNames(true);
        compilerOptions12.inlineLocalFunctions = false;
        compilerOptions12.setInlineLocalVariables(true);
        boolean boolean23 = compilerOptions12.optimizeParameters;
        compilerOptions12.renamePrefixNamespace = "2019/07/12 07:12";
        compilerOptions12.closurePass = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention31 = null;
        compilerOptions28.setCodingConvention(codingConvention31);
        compilerOptions28.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel35 = compilerOptions28.checkProvides;
        java.util.Set<java.lang.String> strSet36 = compilerOptions28.stripTypes;
        compilerOptions12.setStripNamePrefixes(strSet36);
        compilerOptions0.aliasableStrings = strSet36;
        java.util.stream.Stream<java.lang.String> strStream39 = strSet36.stream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + checkLevel11 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel11.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + checkLevel35 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel35.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strStream39);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        compilerOptions0.setExtractPrototypeMemberDeclarations(false);
        compilerOptions0.setRecordFunctionInformation(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setLabelRenaming(true);
        com.google.javascript.jscomp.CheckLevel checkLevel9 = compilerOptions6.checkProvides;
        com.google.javascript.jscomp.CheckLevel checkLevel10 = compilerOptions6.reportMissingOverride;
        compilerOptions6.checkControlStructures = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap13 = null;
        compilerOptions6.cssRenamingMap = cssRenamingMap13;
        compilerOptions6.setInlineLocalVariables(true);
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions6.setCheckProvides(checkLevel17);
        compilerOptions6.aliasKeywords = false;
        com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions6.checkGlobalNamesLevel;
        compilerOptions0.setCheckRequires(checkLevel21);
        compilerOptions0.setSpecializeInitialModule(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + checkLevel9 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel9.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel10 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel10.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel21 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel21.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.computeFunctionSideEffects;
        boolean boolean6 = compilerOptions0.printInputDelimiter;
        compilerOptions0.syntheticBlockEndMarker = "java.io.IOException";
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard9 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard9);
        java.util.Set<java.lang.String> strSet11 = compilerOptions0.stripNameSuffixes;
        compilerOptions0.renamePrefix = "4432#Unversionedhi!rector true\n0\n";
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap14 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap14);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setClosurePass(true);
        compilerOptions0.setDefineToDoubleLiteral("java.io.IOException: ", (double) 0L);
        boolean boolean11 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.aliasKeywords = true;
        compilerOptions0.setInlineGetters(false);
        compilerOptions0.enableRuntimeTypeCheck("java.io.IOException: -1");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.exportTestFunctions;
        com.google.javascript.jscomp.SourceMap.Format format7 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setRewriteFunctionExpressions(false);
        java.lang.String str10 = compilerOptions0.inputDelimiter;
        boolean boolean11 = compilerOptions0.checkSymbols;
        compilerOptions0.setLineBreak(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(format7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "// Input %num%" + "'", str10, "// Input %num%");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.reserveRawExports;
        compilerOptions0.computeFunctionSideEffects = false;
        compilerOptions0.setOptimizeCalls(true);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel13 = null;
        compilerOptions0.setSourceMapDetailLevel(detailLevel13);
        compilerOptions0.setProtectHiddenSideEffects(true);
        boolean boolean17 = compilerOptions0.inlineFunctions;
        boolean boolean18 = compilerOptions0.devirtualizePrototypeMethods;
        java.util.Set<java.lang.String> strSet19 = compilerOptions0.stripTypes;
        boolean boolean20 = compilerOptions0.removeTryCatchFinally;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Unversioned directory");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup3;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup5 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.lang.Object[] objArray10 = new java.lang.Object[] { diagnosticGroup3, diagnosticGroup5, sourceFile9 };
        java.io.PrintStream printStream11 = printStream1.printf("2019/07/12 07:12", objArray10);
        printStream11.println();
        printStream11.write((int) (byte) 100);
        printStream11.println(true);
        printStream11.print("");
        java.io.PrintStream printStream20 = new java.io.PrintStream("-1");
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setDefineToBooleanLiteral("hi!", true);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        compilerOptions21.setInputPropertyMapSerialized(byteArray32);
        printStream20.write(byteArray32);
        printStream11.write(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream11, true, "java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.io.IOException: java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(diagnosticGroup3);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup5);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(objArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[null, null, hi!]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[null, null, hi!]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 1]");
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean2 = sourceFile1.isExtern();
        sourceFile1.setOriginalPath("java.io.IOException: Unversioned directory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet1 = compilerOptions0.stripNamePrefixes;
        byte[] byteArray2 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean3 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setReplaceStringsPlaceholderToken("java.io.IOException: ");
        compilerOptions0.setDefineToNumberLiteral("Unversioned directory", (int) (byte) 10);
        compilerOptions0.optimizeParameters = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setRewriteNewDateGoogNow(true);
        boolean boolean14 = compilerOptions11.extractPrototypeMemberDeclarations;
        compilerOptions11.setCollapseProperties(false);
        compilerOptions11.setClosurePass(true);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions11.setInputPropertyMapSerialized(byteArray24);
        compilerOptions11.setFlowSensitiveInlineVariables(true);
        boolean boolean28 = compilerOptions11.exportTestFunctions;
        compilerOptions11.closurePass = false;
        compilerOptions11.renamePrefix = "Unversioned directory";
        compilerOptions11.setMoveFunctionDeclarations(false);
        java.util.Set<java.lang.String> strSet35 = compilerOptions11.stripTypePrefixes;
        compilerOptions0.setExtraAnnotationNames(strSet35);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention40 = null;
        compilerOptions37.setCodingConvention(codingConvention40);
        boolean boolean42 = compilerOptions37.computeFunctionSideEffects;
        boolean boolean43 = compilerOptions37.printInputDelimiter;
        compilerOptions37.setGeneratePseudoNames(true);
        boolean boolean46 = compilerOptions37.disambiguateProperties;
        java.util.Set<java.lang.String> strSet47 = compilerOptions37.aliasableStrings;
        compilerOptions37.coalesceVariableNames = true;
        com.google.javascript.jscomp.ErrorFormat errorFormat50 = compilerOptions37.errorFormat;
        compilerOptions0.errorFormat = errorFormat50;
        compilerOptions0.setSummaryDetailLevel(3);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(errorFormat50);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        boolean boolean6 = compilerOptions0.removeUnusedVars;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap7 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap7;
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing9 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        compilerOptions0.setTweakProcessing(tweakProcessing9);
        compilerOptions0.setDefineToNumberLiteral("java.io.IOException: ", (int) (short) 10);
        compilerOptions0.renamePrefixNamespace = "java.io.IOException: ";
        java.util.Set<java.lang.String> strSet16 = compilerOptions0.aliasableStrings;
        compilerOptions0.setPrintInputDelimiter(true);
        boolean boolean19 = compilerOptions0.gatherCssNames;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing9.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        boolean boolean10 = compilerOptions0.inlineLocalFunctions;
        compilerOptions0.collapseVariableDeclarations = true;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet8 = compilerOptions7.stripNamePrefixes;
        compilerOptions0.setIdGenerators(strSet8);
        compilerOptions0.sourceMapOutputPath = "java.io.IOException: ";
        boolean boolean12 = compilerOptions0.jqueryPass;
        boolean boolean13 = compilerOptions0.collapseProperties;
        compilerOptions0.setRewriteFunctionExpressions(false);
        boolean boolean16 = compilerOptions0.aliasAllStrings;
        compilerOptions0.setGenerateExports(false);
        compilerOptions0.setDefineToBooleanLiteral("-1", false);
        compilerOptions0.setCrossModuleCodeMotion(false);
        java.lang.String str24 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setAcceptConstKeyword(false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TWEAKS;
        com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.SourceFile sourceFile5 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "java.io.IOException: ");
        boolean boolean6 = locationMappingList1.remove((java.lang.Object) "hi!");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping7 = null;
        boolean boolean8 = locationMappingList1.add(locationMapping7);
        java.lang.Object[] objArray9 = locationMappingList1.toArray();
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping10 = null;
        boolean boolean11 = locationMappingList1.add(locationMapping10);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup12 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup12;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE = diagnosticGroup12;
        boolean boolean15 = locationMappingList1.remove((java.lang.Object) diagnosticGroup12);
        java.util.Collection<java.lang.String> strCollection16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = locationMappingList1.containsAll(strCollection16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(sourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[null]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        boolean boolean7 = compilerOptions0.checkTypes;
        compilerOptions0.setRemoveTryCatchFinally(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setLabelRenaming(true);
        compilerOptions10.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean15 = compilerOptions10.labelRenaming;
        compilerOptions10.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet19 = compilerOptions18.stripNamePrefixes;
        byte[] byteArray20 = compilerOptions18.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup21 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup21;
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention26 = null;
        compilerOptions23.setCodingConvention(codingConvention26);
        compilerOptions23.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel30 = compilerOptions23.checkProvides;
        compilerOptions18.setWarningLevel(diagnosticGroup21, checkLevel30);
        compilerOptions10.checkUnreachableCode = checkLevel30;
        compilerOptions0.checkProvides = checkLevel30;
        compilerOptions0.setSkipAllPasses(false);
        compilerOptions0.setOptimizeCalls(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(byteArray20);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup21);
        org.junit.Assert.assertTrue("'" + checkLevel30 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel30.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
// flaky:         org.junit.Assert.assertNull(diagnosticGroup0);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        boolean boolean5 = compilerOptions0.generateExports;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        compilerOptions0.setInlineFunctions(false);
        compilerOptions0.labelRenaming = true;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        byte[] byteArray13 = new byte[] { (byte) -1 };
        compilerOptions0.setInputPropertyMapSerialized(byteArray13);
        boolean boolean15 = compilerOptions0.convertToDottedProperties;
        compilerOptions0.setRuntimeTypeCheck(false);
        compilerOptions0.setRemoveUnusedPrototypeProperties(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        boolean boolean24 = compilerOptions20.jqueryPass;
        compilerOptions20.collapseAnonymousFunctions = false;
        java.lang.String str27 = compilerOptions20.aliasStringsBlacklist;
        compilerOptions20.inlineGetters = false;
        boolean boolean30 = compilerOptions20.checkControlStructures;
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRewriteNewDateGoogNow(true);
        boolean boolean34 = compilerOptions31.extractPrototypeMemberDeclarations;
        compilerOptions31.convertToDottedProperties = true;
        boolean boolean37 = compilerOptions31.inlineConstantVars;
        boolean boolean38 = compilerOptions31.extractPrototypeMemberDeclarations;
        boolean boolean39 = compilerOptions31.gatherCssNames;
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard40 = null;
        compilerOptions31.setWarningsGuard(composeWarningsGuard40);
        compilerOptions31.setPreferLineBreakAtEndOfFile(true);
        compilerOptions31.coalesceVariableNames = false;
        compilerOptions31.setProcessObjectPropertyString(true);
        com.google.javascript.jscomp.CheckLevel checkLevel48 = compilerOptions31.checkMissingGetCssNameLevel;
        com.google.javascript.jscomp.CompilerOptions compilerOptions49 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions49.setRewriteNewDateGoogNow(true);
        boolean boolean52 = compilerOptions49.extractPrototypeMemberDeclarations;
        boolean boolean53 = compilerOptions49.jqueryPass;
        compilerOptions49.collapseAnonymousFunctions = false;
        compilerOptions49.setInlineGetters(false);
        boolean boolean58 = compilerOptions49.convertToDottedProperties;
        compilerOptions49.crossModuleMethodMotion = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions61 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet62 = compilerOptions61.stripNamePrefixes;
        byte[] byteArray63 = compilerOptions61.inputVariableMapSerialized;
        boolean boolean64 = compilerOptions61.exportTestFunctions;
        com.google.javascript.jscomp.CompilerOptions compilerOptions65 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions65.setLabelRenaming(true);
        compilerOptions65.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel70 = compilerOptions65.checkGlobalThisLevel;
        compilerOptions61.setCheckGlobalNamesLevel(checkLevel70);
        com.google.javascript.jscomp.CompilerOptions compilerOptions72 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions72.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention75 = null;
        compilerOptions72.setCodingConvention(codingConvention75);
        boolean boolean77 = compilerOptions72.computeFunctionSideEffects;
        boolean boolean78 = compilerOptions72.printInputDelimiter;
        compilerOptions72.setGeneratePseudoNames(true);
        boolean boolean81 = compilerOptions72.disambiguateProperties;
        java.util.Set<java.lang.String> strSet82 = compilerOptions72.aliasableStrings;
        compilerOptions61.stripNameSuffixes = strSet82;
        compilerOptions49.setAliasableStrings(strSet82);
        compilerOptions31.setIdGenerators(strSet82);
        compilerOptions20.setStripTypePrefixes(strSet82);
        compilerOptions0.stripNamePrefixes = strSet82;
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + checkLevel48 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel48.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + checkLevel70 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel70.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        compilerOptions0.setLocale("java.io.IOException: java.io.IOException: 2019/07/12 07:12");
        boolean boolean9 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.optimizeCalls = false;
        boolean boolean12 = compilerOptions0.ambiguateProperties;
        compilerOptions0.setRemoveTryCatchFinally(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setLabelRenaming(true);
        compilerOptions0.syntheticBlockStartMarker = "java.io.IOException";
        boolean boolean5 = compilerOptions0.labelRenaming;
        compilerOptions0.ambiguateProperties = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet9 = compilerOptions8.stripNamePrefixes;
        byte[] byteArray10 = compilerOptions8.inputVariableMapSerialized;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup11 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup11;
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention16 = null;
        compilerOptions13.setCodingConvention(codingConvention16);
        compilerOptions13.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel20 = compilerOptions13.checkProvides;
        compilerOptions8.setWarningLevel(diagnosticGroup11, checkLevel20);
        compilerOptions0.checkUnreachableCode = checkLevel20;
        compilerOptions0.setCrossModuleCodeMotion(true);
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        boolean boolean27 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setLineLengthThreshold(97);
        compilerOptions0.crossModuleMethodMotion = true;
        boolean boolean32 = compilerOptions0.optimizeCalls;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(byteArray10);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup11);
        org.junit.Assert.assertTrue("'" + checkLevel20 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel20.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        java.lang.String str3 = compilerOptions0.sourceMapOutputPath;
        compilerOptions0.aliasKeywords = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet7 = compilerOptions6.stripNamePrefixes;
        byte[] byteArray8 = compilerOptions6.inputVariableMapSerialized;
        compilerOptions6.checkSymbols = false;
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler11 = compilerOptions6.getAliasTransformationHandler();
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler11);
        compilerOptions0.setProcessObjectPropertyString(false);
        compilerOptions0.aliasKeywords = false;
        compilerOptions0.setChainCalls(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.enableExternExports(true);
        compilerOptions19.setCrossModuleCodeMotion(false);
        java.util.Set<java.lang.String> strSet24 = compilerOptions19.stripNamePrefixes;
        compilerOptions19.setCheckControlStructures(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setLabelRenaming(true);
        compilerOptions27.syntheticBlockStartMarker = "java.io.IOException";
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions27.checkGlobalThisLevel;
        compilerOptions27.setExportTestFunctions(false);
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing35 = compilerOptions27.getTweakProcessing();
        compilerOptions19.setTweakProcessing(tweakProcessing35);
        com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler aliasTransformationHandler37 = compilerOptions19.getAliasTransformationHandler();
        compilerOptions0.setAliasTransformationHandler(aliasTransformationHandler37);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation> aliasTransformationSourcePosition40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerOptions.AliasTransformation aliasTransformation41 = aliasTransformationHandler37.logAliasTransformation("java.io.IOException: java.io.IOException: 2019/07/12 07:12", aliasTransformationSourcePosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(aliasTransformationHandler11);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + tweakProcessing35 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing35.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertNotNull(aliasTransformationHandler37);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        com.google.javascript.jscomp.CompilerOptions compilerOptions34 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions34.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention37 = null;
        compilerOptions34.setCodingConvention(codingConvention37);
        compilerOptions34.setPropertyAffinity(true);
        compilerOptions34.setDisambiguateProperties(false);
        java.util.Set<java.lang.String> strSet43 = compilerOptions34.stripNameSuffixes;
        int int44 = locationMappingList1.indexOf((java.lang.Object) strSet43);
        int int45 = locationMappingList1.size();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping47 = locationMappingList1.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("hi!", "2019/07/12 07:12");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 2019/07/12 07:12");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        compilerOptions0.convertToDottedProperties = true;
        boolean boolean6 = compilerOptions0.inlineConstantVars;
        boolean boolean7 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean8 = compilerOptions0.gatherCssNames;
        boolean boolean9 = compilerOptions0.markAsCompiled;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        boolean boolean13 = compilerOptions10.extractPrototypeMemberDeclarations;
        compilerOptions10.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet16 = compilerOptions10.stripTypePrefixes;
        com.google.javascript.jscomp.CheckLevel checkLevel17 = null;
        compilerOptions10.setCheckGlobalThisLevel(checkLevel17);
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode19 = compilerOptions10.getTracerMode();
        compilerOptions0.setTracer(tracerMode19);
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = null;
        compilerOptions21.setCodingConvention(codingConvention24);
        compilerOptions21.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel28 = compilerOptions21.checkProvides;
        boolean boolean29 = compilerOptions21.smartNameRemoval;
        java.util.Set<java.lang.String> strSet30 = compilerOptions21.aliasableStrings;
        compilerOptions0.stripNamePrefixes = strSet30;
        compilerOptions0.setRuntimeTypeCheck(true);
        compilerOptions0.setRuntimeTypeCheck(false);
        compilerOptions0.setCoalesceVariableNames(true);
        java.lang.String str38 = compilerOptions0.checkMissingGetCssNameBlacklist;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + tracerMode19 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode19.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel28 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel28.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray0 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList1 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList1, locationMappingArray0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setRewriteNewDateGoogNow(true);
        boolean boolean6 = compilerOptions3.extractPrototypeMemberDeclarations;
        compilerOptions3.setCollapseProperties(false);
        compilerOptions3.setClosurePass(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        compilerOptions3.setInputPropertyMapSerialized(byteArray16);
        compilerOptions3.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        boolean boolean23 = compilerOptions20.extractPrototypeMemberDeclarations;
        compilerOptions20.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet26 = compilerOptions20.stripTypePrefixes;
        compilerOptions3.aliasableStrings = strSet26;
        boolean boolean28 = locationMappingList1.removeAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup29 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup29;
        com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC = diagnosticGroup29;
        boolean boolean33 = locationMappingList1.contains((java.lang.Object) diagnosticGroup29);
        boolean boolean34 = locationMappingList1.isEmpty();
        boolean boolean35 = locationMappingList1.isEmpty();
        locationMappingList1.clear();
        org.junit.Assert.assertNotNull(locationMappingArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNull(diagnosticGroup29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        boolean boolean4 = compilerOptions0.jqueryPass;
        compilerOptions0.collapseAnonymousFunctions = false;
        java.lang.String str7 = compilerOptions0.aliasStringsBlacklist;
        compilerOptions0.inlineGetters = false;
        compilerOptions0.setGroupVariableDeclarations(false);
        boolean boolean12 = compilerOptions0.deadAssignmentElimination;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        boolean boolean3 = compilerOptions0.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach4 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions0.setInlineVariables(reach4);
        compilerOptions0.lineBreak = false;
        compilerOptions0.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions10 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions10.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention13 = null;
        compilerOptions10.setCodingConvention(codingConvention13);
        compilerOptions10.setGenerateExports(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        java.util.Set<java.lang.String> strSet18 = compilerOptions17.stripNamePrefixes;
        compilerOptions10.setIdGenerators(strSet18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention23 = null;
        compilerOptions20.setCodingConvention(codingConvention23);
        compilerOptions20.setGeneratePseudoNames(true);
        compilerOptions20.inlineLocalFunctions = false;
        compilerOptions20.setIdeMode(true);
        compilerOptions20.computeFunctionSideEffects = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRewriteNewDateGoogNow(true);
        boolean boolean36 = compilerOptions33.extractPrototypeMemberDeclarations;
        compilerOptions33.convertToDottedProperties = true;
        com.google.javascript.jscomp.CheckLevel checkLevel39 = compilerOptions33.checkGlobalThisLevel;
        compilerOptions20.checkMissingReturn = checkLevel39;
        compilerOptions10.aggressiveVarCheck = checkLevel39;
        com.google.javascript.jscomp.CheckLevel checkLevel42 = compilerOptions10.reportMissingOverride;
        compilerOptions0.setReportUnknownTypes(checkLevel42);
        java.lang.String str44 = compilerOptions0.syntheticBlockStartMarker;
        compilerOptions0.setAliasStringsBlacklist("java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + reach4 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach4.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + checkLevel39 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel39.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel42 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel42.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        com.google.javascript.jscomp.CodingConvention codingConvention3 = null;
        compilerOptions0.setCodingConvention(codingConvention3);
        compilerOptions0.setGenerateExports(true);
        com.google.javascript.jscomp.CheckLevel checkLevel7 = compilerOptions0.checkProvides;
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray8 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] {};
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList9 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList9, locationMappingArray8);
        compilerOptions0.sourceMapLocationMappings = locationMappingList9;
        java.lang.Object[] objArray12 = locationMappingList9.toArray();
        com.google.javascript.jscomp.CompilerOptions compilerOptions13 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions13.setRewriteNewDateGoogNow(true);
        boolean boolean16 = compilerOptions13.extractPrototypeMemberDeclarations;
        com.google.javascript.jscomp.CompilerOptions.Reach reach17 = com.google.javascript.jscomp.CompilerOptions.Reach.ALL;
        compilerOptions13.setInlineVariables(reach17);
        compilerOptions13.setPrintInputDelimiter(true);
        boolean boolean21 = compilerOptions13.closurePass;
        com.google.javascript.jscomp.MessageBundle messageBundle22 = null;
        compilerOptions13.messageBundle = messageBundle22;
        compilerOptions13.setDeadAssignmentElimination(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setRewriteNewDateGoogNow(true);
        boolean boolean30 = compilerOptions27.extractPrototypeMemberDeclarations;
        compilerOptions27.setCollapseProperties(false);
        java.util.Set<java.lang.String> strSet33 = compilerOptions27.stripTypePrefixes;
        compilerOptions26.stripTypePrefixes = strSet33;
        compilerOptions13.setAliasableStrings(strSet33);
        boolean boolean36 = locationMappingList9.containsAll((java.util.Collection<java.lang.String>) strSet33);
        java.util.ListIterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor37 = locationMappingList9.listIterator();
        java.util.Iterator<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingItor38 = locationMappingList9.iterator();
        org.junit.Assert.assertTrue("'" + checkLevel7 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel7.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + reach17 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.ALL + "'", reach17.equals(com.google.javascript.jscomp.CompilerOptions.Reach.ALL));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locationMappingItor37);
        org.junit.Assert.assertNotNull(locationMappingItor38);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        com.google.javascript.jscomp.SourceFile.Builder builder1 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator3 = null;
        com.google.javascript.jscomp.SourceFile sourceFile4 = builder1.buildFromGenerator("hi!", generator3);
        java.nio.charset.Charset charset5 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder6 = builder1.withCharset(charset5);
        com.google.javascript.jscomp.SourceFile.Generator generator8 = null;
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder6.buildFromGenerator("hi!", generator8);
        java.nio.charset.Charset charset10 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder11 = builder6.withCharset(charset10);
        com.google.javascript.jscomp.SourceFile sourceFile13 = builder6.buildFromFile("java.io.IOException: Unversioned directory");
        java.nio.charset.Charset charset14 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder15 = builder6.withCharset(charset14);
        com.google.javascript.jscomp.SourceFile.Builder builder17 = builder6.withOriginalPath("2019/07/12 07:12");
        com.google.javascript.jscomp.SourceFile.Builder builder20 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile.Generator generator22 = null;
        com.google.javascript.jscomp.SourceFile sourceFile23 = builder20.buildFromGenerator("hi!", generator22);
        java.nio.charset.Charset charset24 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder25 = builder20.withCharset(charset24);
        java.nio.charset.Charset charset26 = null;
        com.google.javascript.jscomp.SourceFile.Builder builder27 = builder20.withCharset(charset26);
        com.google.javascript.jscomp.SourceFile.Builder builder29 = builder20.withOriginalPath("hi!");
        com.google.javascript.jscomp.SourceFile sourceFile32 = builder20.buildFromCode("// Input %num%", "hi!");
        boolean boolean33 = sourceFile32.isExtern();
        java.io.Reader reader34 = sourceFile32.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile35 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: java.io.IOException: 2019/07/12 07:12", reader34);
        com.google.javascript.jscomp.SourceFile sourceFile36 = builder6.buildFromReader("java.io.IOException: Unversioned directory", reader34);
        java.io.Reader reader37 = sourceFile36.getCodeReader();
        com.google.javascript.jscomp.SourceFile sourceFile38 = com.google.javascript.jscomp.SourceFile.fromReader("java.io.IOException: ", reader37);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(sourceFile9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(sourceFile13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(sourceFile23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(sourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(reader34);
        org.junit.Assert.assertNotNull(sourceFile35);
        org.junit.Assert.assertNotNull(sourceFile36);
        org.junit.Assert.assertNotNull(reader37);
        org.junit.Assert.assertNotNull(sourceFile38);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        com.google.javascript.jscomp.Compiler.CodeBuilder codeBuilder0 = new com.google.javascript.jscomp.Compiler.CodeBuilder();
        int int1 = codeBuilder0.getLength();
        int int2 = codeBuilder0.getLength();
        java.lang.String str3 = codeBuilder0.toString();
        int int4 = codeBuilder0.getLength();
        java.lang.String str5 = codeBuilder0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }
}
